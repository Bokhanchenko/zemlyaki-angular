"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,r,t){function n(e,t){t=t||{},r.forEach(t,function(e,r){delete t[r]});for(var n in e)!e.hasOwnProperty(n)||"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t}var a=r.$$minErr("$resource"),o=/^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;r.module("ngResource",["ng"]).provider("$resource",function(){var e=this;this.defaults={stripTrailingSlashes:!0,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}},this.$get=["$http","$q",function(i,s){function c(r,t){this.template=r,this.defaults=f({},e.defaults,t),this.urlParams={}}function u(m,y,$,g){function v(e,r){var n={};return r=f({},y,r),p(r,function(r,i){d(r)&&(r=r());var s;if(r&&r.charAt&&"@"==r.charAt(0)){s=e;var c=r.substr(1);if(null==c||""===c||"hasOwnProperty"===c||!o.test("."+c))throw a("badmember",c);for(var c=c.split("."),u=0,l=c.length;u<l&&s!==t;u++){var p=c[u];s=null!==s?s[p]:t}}else s=r;n[i]=s}),n}function b(e){return e.resource}function w(e){n(e||{},this)}var A=new c(m,g);return $=f({},e.defaults.actions,$),w.prototype.toJSON=function(){var e=f({},this);return delete e.$promise,delete e.$resolved,e},p($,function(e,o){var c=/^(POST|PUT|PATCH)$/i.test(e.method);w[o]=function(u,m,y,$){var g,E,P,S={};switch(arguments.length){case 4:P=$,E=y;case 3:case 2:if(!d(m)){S=u,g=m,E=y;break}if(d(u)){E=u,P=m;break}E=m,P=y;case 1:d(u)?E=u:c?g=u:S=u;break;case 0:break;default:throw a("badargs",arguments.length)}var T=this instanceof w,O=T?g:e.isArray?[]:new w(g),R={},j=e.interceptor&&e.interceptor.response||b,k=e.interceptor&&e.interceptor.responseError||t;return p(e,function(e,r){"params"!=r&&"isArray"!=r&&"interceptor"!=r&&(R[r]=h(e))}),c&&(R.data=g),A.setUrlParams(R,f({},v(g,e.params||{}),S),e.url),S=i(R).then(function(t){var i=t.data,s=O.$promise;if(i){if(r.isArray(i)!==!!e.isArray)throw a("badcfg",o,e.isArray?"array":"object",r.isArray(i)?"array":"object");e.isArray?(O.length=0,p(i,function(e){"object"===("undefined"==typeof e?"undefined":_typeof(e))?O.push(new w(e)):O.push(e)})):(n(i,O),O.$promise=s)}return O.$resolved=!0,t.resource=O,t},function(e){return O.$resolved=!0,(P||l)(e),s.reject(e)}),S=S.then(function(e){var r=j(e);return(E||l)(r,e.headers),r},k),T?S:(O.$promise=S,O.$resolved=!1,O)},w.prototype["$"+o]=function(e,r,t){return d(e)&&(t=r,r=e,e={}),e=w[o].call(this,e,this,r,t),e.$promise||e}}),w.bind=function(e){return u(m,f({},y,e),$)},w}var l=r.noop,p=r.forEach,f=r.extend,h=r.copy,d=r.isFunction;return c.prototype={setUrlParams:function(e,t,n){var o,i,s=this,c=n||s.template,u=s.urlParams={};p(c.split(/\W/),function(e){if("hasOwnProperty"===e)throw a("badname");!/^\d+$/.test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(c)&&(u[e]=!0)}),c=c.replace(/\\:/g,":"),t=t||{},p(s.urlParams,function(e,n){o=t.hasOwnProperty(n)?t[n]:s.defaults[n],r.isDefined(o)&&null!==o?(i=encodeURIComponent(o).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"%20").replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+"),c=c.replace(new RegExp(":"+n+"(\\W|$)","g"),function(e,r){return i+r})):c=c.replace(new RegExp("(/?):"+n+"(\\W|$)","g"),function(e,r,t){return"/"==t.charAt(0)?t:r+t})}),s.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/"),c=c.replace(/\/\.(?=\w+($|\?))/,"."),e.url=c.replace(/\/\\\./,"/."),p(t,function(r,t){s.urlParams[t]||(e.params=e.params||{},e.params[t]=r)})}},u}]})}(window,window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
