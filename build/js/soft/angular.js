"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t){function e(t){return w(t)?void(b(t.objectMaxDepth)&&(Qr.objectMaxDepth=n(t.objectMaxDepth)?t.objectMaxDepth:NaN)):Qr}function n(t){return E(t)&&t>0}function r(t,e){return e=e||Error,function(){var n,r,i=arguments[0],o=arguments[1],a="["+(t?t+":":"")+i+"] ",s=G(arguments,2).map(function(t){return St(t,Qr.objectMaxDepth)});for(a+=o.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1);return e<s.length?s[e]:t}),a+="\nhttp://errors.angularjs.org/1.6.6/"+(t?t+"/":"")+i,r=0,n="?";r<s.length;r++,n="&")a+=n+"p"+r+"="+encodeURIComponent(s[r]);return new e(a)}}function i(t){if(null==t||M(t))return!1;if(yi(t)||C(t)||si&&t instanceof si)return!0;var e="length"in Object(t)&&t.length;return E(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function o(t,e,n){var r,a;if(t)if(A(t))for(r in t)"prototype"!==r&&"length"!==r&&"name"!==r&&t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else if(yi(t)||i(t)){var s="object"!==("undefined"==typeof t?"undefined":_typeof(t));for(r=0,a=t.length;r<a;r++)(s||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(x(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)ei.call(t,r)&&e.call(n,t[r],r,t);return t}function a(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function s(t){return function(e,n){t(n,e)}}function u(){return++mi}function c(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function l(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;i<o;++i){var a=e[i];if(w(a)||A(a))for(var s=Object.keys(a),u=0,f=s.length;u<f;u++){var h=s[u],p=a[h];n&&w(p)?S(p)?t[h]=new Date(p.valueOf()):O(p)?t[h]=new RegExp(p):p.nodeName?t[h]=p.cloneNode(!0):R(p)?t[h]=p.clone():(w(t[h])||(t[h]=yi(p)?[]:{}),l(t[h],[p],!0)):t[h]=p}}return c(t,r),t}function f(t){return l(t,li.call(arguments,1),!1)}function h(t){return l(t,li.call(arguments,1),!0)}function p(t){return parseInt(t,10)}function d(t,e){return f(Object.create(t),e)}function $(){}function v(t){return t}function m(t){return function(){return t}}function g(t){return A(t.toString)&&t.toString!==pi}function y(t){return"undefined"==typeof t}function b(t){return"undefined"!=typeof t}function w(t){return null!==t&&"object"===("undefined"==typeof t?"undefined":_typeof(t))}function x(t){return null!==t&&"object"===("undefined"==typeof t?"undefined":_typeof(t))&&!di(t)}function C(t){return"string"==typeof t}function E(t){return"number"==typeof t}function S(t){return"[object Date]"===pi.call(t)}function k(t){var e=pi.call(t);switch(e){case"[object Error]":return!0;case"[object Exception]":return!0;case"[object DOMException]":return!0;default:return t instanceof Error}}function A(t){return"function"==typeof t}function O(t){return"[object RegExp]"===pi.call(t)}function M(t){return t&&t.window===t}function V(t){return t&&t.$evalAsync&&t.$watch}function T(t){return"[object File]"===pi.call(t)}function N(t){return"[object FormData]"===pi.call(t)}function I(t){return"[object Blob]"===pi.call(t)}function j(t){return"boolean"==typeof t}function _(t){return t&&A(t.then)}function D(t){return t&&E(t.length)&&bi.test(pi.call(t))}function P(t){return"[object ArrayBuffer]"===pi.call(t)}function R(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function U(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function L(t){return ni(t.nodeName||t[0]&&t[0].nodeName)}function q(t,e){return Array.prototype.indexOf.call(t,e)!==-1}function F(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function B(t,e,r){function i(t,e,n){if(n--,n<0)return"...";var r,i=e.$$hashKey;if(yi(t))for(var o=0,s=t.length;o<s;o++)e.push(a(t[o],n));else if(x(t))for(r in t)e[r]=a(t[r],n);else if(t&&"function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&(e[r]=a(t[r],n));else for(r in t)ei.call(t,r)&&(e[r]=a(t[r],n));return c(e,i),e}function a(t,e){if(!w(t))return t;var n=u.indexOf(t);if(n!==-1)return l[n];if(M(t)||V(t))throw $i("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,o=s(t);return void 0===o&&(o=yi(t)?[]:Object.create(di(t)),r=!0),u.push(t),l.push(o),r?i(t,o,e):o}function s(t){switch(pi.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(a(t.buffer),t.byteOffset,t.length);case"[object ArrayBuffer]":if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}if(A(t.cloneNode))return t.cloneNode(!0)}var u=[],l=[];if(r=n(r)?r:NaN,e){if(D(e)||P(e))throw $i("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw $i("cpi","Can't copy! Source and destination are identical.");return yi(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),u.push(t),l.push(e),i(t,e,r)}return a(t,r)}function H(t,e){return t===e||t!==t&&e!==e}function z(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o="undefined"==typeof t?"undefined":_typeof(t),a="undefined"==typeof e?"undefined":_typeof(e);if(o===a&&"object"===o){if(!yi(t)){if(S(t))return!!S(e)&&H(t.getTime(),e.getTime());if(O(t))return!!O(e)&&t.toString()===e.toString();if(V(t)||V(e)||M(t)||M(e)||yi(e)||S(e)||O(e))return!1;i=bt();for(r in t)if("$"!==r.charAt(0)&&!A(t[r])){if(!z(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&b(e[r])&&!A(e[r]))return!1;return!0}if(!yi(e))return!1;if((n=t.length)===e.length){for(r=0;r<n;r++)if(!z(t[r],e[r]))return!1;return!0}}return!1}function W(t,e,n){return t.concat(li.call(e,n))}function G(t,e){return li.call(t,e||0)}function K(t,e){var n=arguments.length>2?G(arguments,2):[];return!A(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,W(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function J(e,n){var r=n;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?r=void 0:M(n)?r="$WINDOW":n&&t.document===n?r="$DOCUMENT":V(n)&&(r="$SCOPE"),r}function Z(t,e){if(!y(t))return E(e)||(e=e?2:null),JSON.stringify(t,J,e)}function Y(t){return C(t)?JSON.parse(t):t}function Q(t,e){t=t.replace(Si,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return gi(n)?e:n}function X(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function tt(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset(),i=Q(e,r);return X(t,n*(i-r))}function et(t){t=si(t).clone().empty();var e=si("<div>").append(t).html();try{return t[0].nodeType===Ni?ni(e):e.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(t,e){return"<"+ni(e)})}catch(n){return ni(e)}}function nt(t){try{return decodeURIComponent(t)}catch(e){}}function rt(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),n!==-1&&(r=t.substring(0,n),i=t.substring(n+1)),r=nt(r),b(r)&&(i=!b(i)||nt(i),ei.call(e,r)?yi(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function it(t){var e=[];return o(t,function(t,n){yi(t)?o(t,function(t){e.push(at(n,!0)+(t===!0?"":"="+at(t,!0)))}):e.push(at(n,!0)+(t===!0?"":"="+at(t,!0)))}),e.length?e.join("&"):""}function ot(t){return at(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function at(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function st(t,e){var n,r,i=ki.length;for(r=0;r<i;++r)if(n=ki[r]+e,C(n=t.getAttribute(n)))return n;return null}function ut(e){var n=e.currentScript;if(!n)return!0;if(!(n instanceof t.HTMLScriptElement||n instanceof t.SVGScriptElement))return!1;var r=n.attributes,i=[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")];return i.every(function(t){if(!t)return!0;if(!t.value)return!1;var n=e.createElement("a");if(n.href=t.value,e.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}function ct(e,n){var r,i,a={};if(o(ki,function(t){var n=t+"app";!r&&e.hasAttribute&&e.hasAttribute(n)&&(r=e,i=e.getAttribute(n))}),o(ki,function(t){var n,o=t+"app";!r&&(n=e.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!Ai)return void t.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");a.strictDi=null!==st(r,"strict-di"),n(r,i?[i]:[],a)}}function lt(e,n,r){w(r)||(r={});var i={strictDi:!1};r=f(i,r);var a=function(){if(e=si(e),e.injector()){var i=e[0]===t.document?"document":et(e);throw $i("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(t){t.value("$rootElement",e)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=he(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return t&&s.test(t.name)&&(r.debugInfoEnabled=!0,t.name=t.name.replace(s,"")),t&&!u.test(t.name)?a():(t.name=t.name.replace(u,""),vi.resumeBootstrap=function(t){return o(t,function(t){n.push(t)}),a()},void(A(vi.resumeDeferredBootstrap)&&vi.resumeDeferredBootstrap()))}function ft(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function ht(t){var e=vi.element(t).injector();if(!e)throw $i("test","no injector found for element argument to getTestability");return e.get("$$testability")}function pt(t,e){return e=e||"_",t.replace(Oi,function(t,n){return(n?e:"")+t.toLowerCase()})}function dt(){var e;if(!Mi){var n=Ei();ui=y(n)?t.jQuery:n?t[n]:void 0,ui&&ui.fn.on?(si=ui,f(ui.fn,{scope:Ji.scope,isolateScope:Ji.isolateScope,controller:Ji.controller,injector:Ji.injector,inheritedData:Ji.inheritedData}),e=ui.cleanData,ui.cleanData=function(t){for(var n,r,i=0;null!=(r=t[i]);i++)n=ui._data(r,"events"),n&&n.$destroy&&ui(r).triggerHandler("$destroy");e(t)}):si=Pt,vi.element=si,Mi=!0}}function $t(t,e,n){if(!t)throw $i("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function vt(t,e,n){return n&&yi(t)&&(t=t[t.length-1]),$t(A(t),e,"not a function, got "+(t&&"object"===("undefined"==typeof t?"undefined":_typeof(t))?t.constructor.name||"Object":"undefined"==typeof t?"undefined":_typeof(t))),t}function mt(t,e){if("hasOwnProperty"===t)throw $i("badname","hasOwnProperty is not a valid {0} name",e)}function gt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;s<a;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&A(t)?K(o,t):t}function yt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=si(li.call(t,0,i))),e.push(n));return e||t}function bt(){return Object.create(null)}function wt(t){if(null==t)return"";switch("undefined"==typeof t?"undefined":_typeof(t)){case"string":break;case"number":t=""+t;break;default:t=!g(t)||yi(t)||S(t)?Z(t):t.toString()}return t}function xt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng"),o=e(t,"angular",Object);return o.$$minErr=o.$$minErr||r,e(o,"module",function(){var t={};return function(r,o,a){var s={},u=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return u(r,"module"),o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=u),function(){return r[n||"push"]([t,e,arguments]),h}}function e(t,e,n){return n||(n=u),function(i,o){return o&&A(o)&&(o.$$moduleName=r),n.push([t,e,arguments]),h}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var u=[],c=[],l=[],f=t("$injector","invoke","push",c),h={_invokeQueue:u,_configBlocks:c,_runBlocks:l,info:function(t){if(b(t)){if(!w(t))throw i("aobj","Argument '{0}' must be an object","value");return s=t,this}return s},requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator",c),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),component:e("$compileProvider","component"),config:f,run:function(t){return l.push(t),this}};return a&&f(a),h})}})}function Ct(t,e){if(yi(t)){e=e||[];for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}else if(w(t)){e=e||{};for(var i in t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i])}return e||t}function Et(t,e){var r=[];return n(e)&&(t=vi.copy(t,null,e)),JSON.stringify(t,function(t,e){if(e=J(t,e),w(e)){if(r.indexOf(e)>=0)return"...";r.push(e)}return e})}function St(t,e){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):y(t)?"undefined":"string"!=typeof t?Et(t,e):t}function kt(n){f(n,{errorHandlingConfig:e,bootstrap:lt,copy:B,extend:f,merge:h,equals:z,element:si,forEach:o,injector:he,noop:$,bind:K,toJson:Z,fromJson:Y,identity:v,isUndefined:y,isDefined:b,isString:C,isFunction:A,isObject:w,isNumber:E,isElement:R,isArray:yi,version:Di,isDate:S,lowercase:ni,uppercase:ri,callbacks:{$$counter:0},getTestability:ht,reloadWithDebugInfo:ft,$$minErr:r,$$csp:Ci,$$encodeUriSegment:ot,$$encodeUriQuery:at,$$stringify:wt}),ci=xt(t),ci("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:_n}),t.provider("$compile",Ce).directive({a:aa,input:ka,textarea:ka,form:ha,script:bs,select:Cs,option:Es,ngBind:Ma,ngBindHtml:Ta,ngBindTemplate:Va,ngClass:Ia,ngClassEven:_a,ngClassOdd:ja,ngCloak:Da,ngController:Pa,ngForm:pa,ngHide:ps,ngIf:La,ngInclude:qa,ngInit:Ba,ngNonBindable:is,ngPluralize:us,ngRepeat:cs,ngShow:hs,ngStyle:ds,ngSwitch:$s,ngSwitchWhen:vs,ngSwitchDefault:ms,ngOptions:ss,ngTransclude:ys,ngModel:es,ngList:Ha,ngChange:Na,pattern:ks,ngPattern:ks,required:Ss,ngRequired:Ss,minlength:Os,ngMinlength:Os,maxlength:As,ngMaxlength:As,ngValue:Oa,ngModelOptions:rs}).directive({ngInclude:Fa}).directive(sa).directive(Ra),t.provider({$anchorScroll:pe,$animate:po,$animateCss:mo,$$animateJs:fo,$$animateQueue:ho,$$AnimateRunner:vo,$$animateAsyncRun:$o,$browser:ye,$cacheFactory:be,$controller:Me,$document:Ve,$$isDocumentHidden:Te,$exceptionHandler:Ne,$filter:Zn,$$forceReflow:Eo,$interpolate:We,$interval:Ge,$http:Fe,$httpParamSerializer:je,$httpParamSerializerJQLike:_e,$httpBackend:He,$xhrFactory:Be,$jsonpCallbacks:No,$location:cn,$log:ln,$parse:kn,$rootScope:jn,$q:An,$$q:On,$sce:Ln,$sceDelegate:Un,$sniffer:qn,$templateCache:we,$templateRequest:Fn,$$testability:Bn,$timeout:Hn,$window:Gn,$$rAF:In,$$jqLite:oe,$$Map:eo,$$cookieReader:Jn})}]).info({angularVersion:"1.6.6"})}function At(){return++Ri}function Ot(t){return Vt(t.replace(Li,"ms-"))}function Mt(t,e){return e.toUpperCase()}function Vt(t){return t.replace(Ui,Mt)}function Tt(t){return!Hi.test(t)}function Nt(t){var e=t.nodeType;return e===Vi||!e||e===ji}function It(t){for(var e in Pi[t.ng339])return!0;return!1}function jt(t,e){var n,r,i,a,s=e.createDocumentFragment(),u=[];if(Tt(t))u.push(e.createTextNode(t));else{for(n=s.appendChild(e.createElement("div")),r=(zi.exec(t)||["",""])[1].toLowerCase(),i=Gi[r]||Gi._default,n.innerHTML=i[1]+t.replace(Wi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=W(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(t){s.appendChild(t)}),s}function _t(e,n){n=n||t.document;var r;return(r=Bi.exec(e))?[n.createElement(r[1])]:(r=jt(e,n))?r.childNodes:[]}function Dt(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}function Pt(t){if(t instanceof Pt)return t;var e;if(C(t)&&(t=wi(t),e=!0),!(this instanceof Pt)){if(e&&"<"!==t.charAt(0))throw Fi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Pt(t)}e?Gt(this,_t(t)):A(t)?Xt(t):Gt(this,t)}function Rt(t){return t.cloneNode(!0)}function Ut(t,e){!e&&Nt(t)&&si.cleanData([t]),t.querySelectorAll&&si.cleanData(t.querySelectorAll("*"))}function Lt(t,e,n,r){if(b(r))throw Fi("offargs","jqLite#off() does not support the `selector` argument");var i=Ft(t),a=i&&i.events,s=i&&i.handle;if(s)if(e){var u=function(e){var r=a[e];b(n)&&F(r||[],n),b(n)&&r&&r.length>0||(t.removeEventListener(e,s),delete a[e])};o(e.split(" "),function(t){u(t),qi[t]&&u(qi[t])})}else for(e in a)"$destroy"!==e&&t.removeEventListener(e,s),delete a[e]}function qt(t,e){var n=t.ng339,r=n&&Pi[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Lt(t)),delete Pi[n],t.ng339=void 0}}function Ft(t,e){var n=t.ng339,r=n&&Pi[n];return e&&!r&&(t.ng339=n=At(),r=Pi[n]={events:{},data:{},handle:void 0}),r}function Bt(t,e,n){if(Nt(t)){var r,i=b(n),o=!i&&e&&!w(e),a=!e,s=Ft(t,!o),u=s&&s.data;if(i)u[Vt(e)]=n;else{if(a)return u;if(o)return u&&u[Vt(e)];for(r in e)u[Vt(r)]=e[r]}}}function Ht(t,e){return!!t.getAttribute&&(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1}function zt(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",wi((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+wi(e)+" "," ")))})}function Wt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=wi(t),n.indexOf(" "+t+" ")===-1&&(n+=t+" ")}),t.setAttribute("class",wi(n))}}function Gt(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;r<n;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function Kt(t,e){return Jt(t,"$"+(e||"ngController")+"Controller")}function Jt(t,e,n){t.nodeType===ji&&(t=t.documentElement);for(var r=yi(e)?e:[e];t;){for(var i=0,o=r.length;i<o;i++)if(b(n=si.data(t,r[i])))return n;t=t.parentNode||t.nodeType===_i&&t.host}}function Zt(t){for(Ut(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Yt(t,e){e||Ut(t);var n=t.parentNode;n&&n.removeChild(t)}function Qt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):si(n).on("load",e)}function Xt(e){function n(){t.document.removeEventListener("DOMContentLoaded",n),t.removeEventListener("load",n),e()}"complete"===t.document.readyState?t.setTimeout(e):(t.document.addEventListener("DOMContentLoaded",n),t.addEventListener("load",n))}function te(t,e){var n=Zi[e.toLowerCase()];return n&&Yi[L(t)]&&n}function ee(t){return Qi[t]}function ne(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||re;o>1&&(i=Ct(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function re(t,e,n){n.call(t,e)}function ie(t,e,n){var r=e.relatedTarget;r&&(r===t||Ki.call(t,r))||n.call(t,e)}function oe(){this.$get=function(){return f(Pt,{hasClass:function(t,e){return t.attr&&(t=t[0]),Ht(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Wt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),zt(t,e)}})}}function ae(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r="undefined"==typeof t?"undefined":_typeof(t);return n="function"===r||"object"===r&&null!==t?t.$$hashKey=r+":"+(e||u)():r+":"+t}function se(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function ue(t){return Function.prototype.toString.call(t)}function ce(t){var e=ue(t).replace(ao,""),n=e.match(no)||e.match(ro);return n}function le(t){var e=ce(t);return e?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function fe(t,e,n){var r,i,a;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw C(n)&&n||(n=t.name||le(t)),so("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=ce(t),o(i[1].split(io),function(t){t.replace(oo,function(t,e,n){r.push(n)})})}t.$inject=r}}else yi(t)?(a=t.length-1,vt(t[a],"fn"),r=t.slice(0,a)):vt(t,"fn",!0);return r}function he(t,e){function n(t){return function(e,n){return w(e)?void o(e,s(t)):t(e,n)}}function r(t,e){if(mt(t,"service"),(A(e)||yi(e))&&(e=x.instantiate(e)),!e.$get)throw so("pget","Provider '{0}' must define $get factory method.",t);return b[t+$]=e}function i(t,e){return function(){var n=k.invoke(e,this);if(y(n))throw so("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function a(t,e,n){return r(t,{$get:n!==!1?i(t,e):e})}function u(t,e){return a(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return a(t,m(e),!1)}function l(t,e){mt(t,"constant"),b[t]=e,E[t]=e}function f(t,e){var n=x.get(t+$),r=n.$get;n.$get=function(){var t=k.invoke(r,n);return k.invoke(e,null,{$delegate:t})}}function h(t){$t(y(t)||yi(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;e<n;e++){var r=t[e],i=x.get(r[0]);i[r[1]].apply(i,r[2])}}if(!g.get(t)){g.set(t,!0);try{C(t)?(e=ci(t),k.modules[t]=e,n=n.concat(h(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):A(t)?n.push(x.invoke(t)):yi(t)?n.push(x.invoke(t)):vt(t,"module")}catch(i){throw yi(t)&&(t=t[t.length-1]),i.message&&i.stack&&i.stack.indexOf(i.message)===-1&&(i=i.message+"\n"+i.stack),so("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}function p(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===d)throw so("cdep","Circular dependency found: {0}",e+" <- "+v.join(" <- "));return t[e]}try{return v.unshift(e),t[e]=d,t[e]=n(e,r),t[e]}catch(i){throw t[e]===d&&delete t[e],i}finally{v.shift()}}function i(t,n,i){for(var o=[],a=he.$$annotate(t,e,i),s=0,u=a.length;s<u;s++){var c=a[s];if("string"!=typeof c)throw so("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(t){if(ai||"function"!=typeof t)return!1;var e=t.$$ngIsClass;return j(e)||(e=t.$$ngIsClass=/^(?:class\b|constructor\()/.test(ue(t))),e}function a(t,e,n,r){"string"==typeof n&&(r=n,n=null);var a=i(t,n,r);return yi(t)&&(t=t[t.length-1]),o(t)?(a.unshift(null),new(Function.prototype.bind.apply(t,a))):t.apply(e,a)}function s(t,e,n){var r=yi(t)?t[t.length-1]:t,o=i(t,e,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:he.$$annotate,has:function(e){return b.hasOwnProperty(e+$)||t.hasOwnProperty(e)}}}e=e===!0;var d={},$="Provider",v=[],g=new to,b={$provide:{provider:n(r),factory:n(a),service:n(u),value:n(c),constant:n(l),decorator:f}},x=b.$injector=p(b,function(t,e){throw vi.isString(e)&&v.push(e),so("unpr","Unknown provider: {0}",v.join(" <- "))}),E={},S=p(E,function(t,e){var n=x.get(t+$,e);return k.invoke(n.$get,n,void 0,t)}),k=S;b["$injector"+$]={$get:m(S)},k.modules=x.modules=bt();var O=h(t);return k=S.get("$injector"),k.strictDi=e,o(O,function(t){t&&k.invoke(t)}),k}function pe(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){if("a"===L(t))return e=t,!0}),e}function o(){var t=s.yOffset;if(A(t))t=t();else if(R(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function s(t){t=C(t)?t:E(t)?t.toString():n.hash();var e;t?(e=u.getElementById(t))?a(e):(e=i(u.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var u=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){t===e&&""===t||Qt(function(){r.$evalAsync(s)})}),s}]}function de(t,e){return t||e?t?e?(yi(t)&&(t=t.join(" ")),yi(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function $e(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===co)return n}}function ve(t){C(t)&&(t=t.split(" "));var e=bt();return o(t,function(t){t.length&&(e[t]=!0)}),e}function me(t){return w(t)?t:{}}function ge(t,e,n,r){function i(t){try{t.apply(null,G(arguments,1))}finally{if(m--,0===m)for(;g.length;)try{g.pop()()}catch(e){n.error(e)}}}function a(t){var e=t.indexOf("#");return e===-1?"":t.substr(e)}function s(){E=null,c()}function u(){b=S(),b=y(b)?null:b,z(b,O)&&(b=O),O=b,w=b}function c(){var t=w;u(),x===l.url()&&t===b||(x=l.url(),w=b,o(k,function(t){t(l.url(),b)}))}var l=this,f=t.location,h=t.history,p=t.setTimeout,d=t.clearTimeout,v={};l.isMock=!1;var m=0,g=[];l.$$completeOutstandingRequest=i,l.$$incOutstandingRequestCount=function(){m++},l.notifyWhenNoOutstandingRequests=function(t){0===m?t():g.push(t)};var b,w,x=f.href,C=e.find("base"),E=null,S=r.history?function(){try{return h.state}catch(t){}}:$;u(),l.url=function(e,n,i){if(y(i)&&(i=null),f!==t.location&&(f=t.location),h!==t.history&&(h=t.history),e){var o=w===i;if(x===e&&(!r.history||o))return l;var s=x&&Xe(x)===Xe(e);return x=e,w=i,!r.history||s&&o?(s||(E=e),n?f.replace(e):s?f.hash=a(e):f.href=e,f.href!==e&&(E=e)):(h[n?"replaceState":"pushState"](i,"",e),u()),E&&(E=e),l}return E||f.href.replace(/%27/g,"'")},l.state=function(){return b};var k=[],A=!1,O=null;l.onUrlChange=function(e){return A||(r.history&&si(t).on("popstate",s),si(t).on("hashchange",s),A=!0),k.push(e),e},l.$$applicationDestroyed=function(){si(t).off("hashchange popstate",s)},l.$$checkUrlChange=c,l.baseHref=function(){var t=C.attr("href");return t?t.replace(/^(https?:)?\/\/[^\/]*/,""):""},l.defer=function(t,e){var n;return m++,n=p(function(){delete v[n],i(t)},e||0),v[n]=!0,n},l.defer.cancel=function(t){return!!v[t]&&(delete v[t],d(t),i($),!0)}}function ye(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new ge(t,r,e,n)}]}function be(){this.$get=function(){function t(t,n){function i(t){t!==h&&(p?p===t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}function o(t,e){t!==e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,s=f({},n,{id:t}),u=bt(),c=n&&n.capacity||Number.MAX_VALUE,l=bt(),h=null,p=null;return e[t]={put:function(t,e){if(!y(e)){if(c<Number.MAX_VALUE){var n=l[t]||(l[t]={key:t});i(n)}return t in u||a++,u[t]=e,a>c&&this.remove(p.key),e}},get:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;e===h&&(h=e.p),e===p&&(p=e.n),o(e.n,e.p),delete l[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=bt(),a=0,l=bt(),h=p=null},destroy:function(){u=null,s=null,l=null,delete e[t]},info:function(){return f({},s,{size:a})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function we(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function xe(){}function Ce(e,n){function r(t,e,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,i=bt();return o(t,function(t,o){if(t in O)return void(i[o]=O[t]);var a=t.match(r);if(!a)throw go("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(O[t]=i[o])}),i}function i(t,e){var n={isolateScope:null,bindToController:null};if(w(t.scope)&&(t.bindToController===!0?(n.bindToController=r(t.scope,e,!0),n.isolateScope={}):n.isolateScope=r(t.scope,e,!1)),w(t.bindToController)&&(n.bindToController=r(t.bindToController,e,!0)),n.bindToController&&!t.controller)throw go("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);return n}function a(t){var e=t.charAt(0);if(!e||e!==ni(e))throw go("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw go("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}function u(t){var e=t.require||t.controller&&t.name;return!yi(e)&&w(e)&&o(e,function(t,n){var r=t.match(E),i=t.substring(r[0].length);i||(e[n]=r[0]+n)}),e}function c(t,e){if(t&&(!C(t)||!/[EACM]/.test(t)))throw go("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",t,e);return t||"EA"}var l={},h="Directive",p=/^\s*directive:\s*([\w-]+)\s+(.*)$/,g=/(([\w-]+)(?::([^;]+))?;?)/,x=U("ngSrc,ngSrcset,src,srcset"),E=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,S=/^(on[a-z]+|formaction)$/,O=bt();this.directive=function P(t,n){return $t(t,"name"),mt(t,"directive"),C(t)?(a(t),$t(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+h,["$injector","$exceptionHandler",function(e,n){var r=[];return o(l[t],function(i,o){try{var a=e.invoke(i);A(a)?a={compile:m(a)}:!a.compile&&a.link&&(a.compile=m(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||t,a.require=u(a),a.restrict=c(a.restrict,t),a.$$moduleName=i.$$moduleName,r.push(a)}catch(s){n(s)}}),r}])),l[t].push(n)):o(t,s(P)),this},this.component=function R(t,e){function n(t){function n(e){return A(e)||yi(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var i=e.template||e.templateUrl?e.template:"",a={controller:r,controllerAs:Oe(e.controller)||e.controllerAs||"$ctrl",template:n(i),templateUrl:n(e.templateUrl),transclude:e.transclude,scope:{},bindToController:e.bindings||{},restrict:"E",require:e.require};return o(e,function(t,e){"$"===e.charAt(0)&&(a[e]=t)}),a}if(!C(t))return o(t,s(K(this,R))),this;var r=e.controller||function(){};return o(e,function(t,e){"$"===e.charAt(0)&&(n[e]=t,A(r)&&(r[e]=t))}),n.$inject=["$injector"],this.directive(t,n)},this.aHrefSanitizationWhitelist=function(t){return b(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};var M=!0;this.debugInfoEnabled=function(t){return b(t)?(M=t,this):M};var T=!1;this.preAssignBindingsEnabled=function(t){return b(t)?(T=t,this):T};var N=!1;this.strictComponentBindingsEnabled=function(t){return b(t)?(N=t,this):N};var I=10;this.onChangesTtl=function(t){return arguments.length?(I=t,this):I};var _=!0;this.commentDirectivesEnabled=function(t){return arguments.length?(_=t,this):_};var D=!0;this.cssClassDirectivesEnabled=function(t){return arguments.length?(D=t,this):D},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,n,r,a,s,u,c,m,O,P){function R(){try{if(!--It)throw At=void 0,go("infchng","{0} $onChanges() iterations reached. Aborting!\n",I);c.$apply(function(){for(var t=[],e=0,n=At.length;e<n;++e)try{At[e]()}catch(r){t.push(r)}if(At=void 0,t.length)throw t})}finally{It++}}function U(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t;
}function q(t,e,n){Mt.innerHTML="<span "+e+">";var r=Mt.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}function B(t,e){try{t.addClass(e)}catch(n){}}function W(t,e,n,r,i){t instanceof si||(t=si(t));var o=Z(t,e,t,n,r,i);W.$$addScopeClass(t);var a=null;return function(e,n,r){if(!t)throw go("multilink","This element has already been linked.");$t(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new()),r=r||{};var s=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;s&&s.$$boundTransclude&&(s=s.$$boundTransclude),a||(a=J(c));var l;if(l="html"!==a?si(gt(a,si("<div>").append(t).html())):n?Ji.clone.call(t):t,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return W.$$addScopeInfo(l,e),n&&n(l,e),o&&o(e,l,l,s),n||(t=o=null),l}}function J(t){var e=t&&t[0];return e&&"foreignobject"!==L(e)&&pi.call(e).match(/SVG/)?"svg":"html"}function Z(t,e,n,r,i,o){function a(t,n,r,i){var o,a,s,u,c,l,f,h,$;if(p){var v=n.length;for($=new Array(v),c=0;c<d.length;c+=3)f=d[c],$[f]=n[f]}else $=n;for(c=0,l=d.length;c<l;)s=$[d[c++]],o=d[c++],a=d[c++],o?(o.scope?(u=t.$new(),W.$$addScopeInfo(si(s),u)):u=t,h=o.transcludeOnThisElement?Q(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?Q(t,e):null,o(a,u,s,r,h)):a&&a(t,s.childNodes,void 0,i)}for(var s,u,c,l,f,h,p,d=[],$=yi(t)||t instanceof si,v=0;v<t.length;v++)s=new U,11===ai&&Y(t,v,$),u=X(t[v],[],s,0===v?r:void 0,i),c=u.length?ot(u,t[v],s,e,n,null,[],[],o):null,c&&c.scope&&W.$$addScopeClass(s.$$element),f=c&&c.terminal||!(l=t[v].childNodes)||!l.length?null:Z(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||f)&&(d.push(v,c,f),h=!0,p=p||c),o=null;return h?a:null}function Y(t,e,n){var r,i=t[e],o=i.parentNode;if(i.nodeType===Ni)for(;;){if(r=o?i.nextSibling:t[e+1],!r||r.nodeType!==Ni)break;i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===t[e+1]&&t.splice(e+1,1)}}function Q(t,e,n){function r(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=bt();for(var o in e.$$slots)e.$$slots[o]?i[o]=Q(t,e.$$slots[o],n):i[o]=null;return r}function X(t,e,n,r,i){var o,a,s,u=t.nodeType,c=n.$attr;switch(u){case Vi:a=L(t),ct(e,Se(a),"E",r,i);for(var l,f,h,p,d,$,v=t.attributes,m=0,y=v&&v.length;m<y;m++){var b=!1,x=!1;l=v[m],f=l.name,d=l.value,p=Se(f),$=Pt.test(p),$&&(f=f.replace(bo,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var E=p.match(Ut);E&&lt(E[1])&&(b=f,x=f.substr(0,f.length-5)+"end",f=f.substr(0,f.length-6)),h=Se(f.toLowerCase()),c[h]=f,!$&&n.hasOwnProperty(h)||(n[h]=d,te(t,h)&&(n[h]=!0)),wt(t,e,d,h,$),ct(e,h,"A",r,i,b,x)}if("input"===a&&"hidden"===t.getAttribute("type")&&t.setAttribute("autocomplete","off"),!Nt)break;if(s=t.className,w(s)&&(s=s.animVal),C(s)&&""!==s)for(;o=g.exec(s);)h=Se(o[2]),ct(e,h,"C",r,i)&&(n[h]=wi(o[3])),s=s.substr(o.index+o[0].length);break;case Ni:mt(e,t.nodeValue);break;case Ii:if(!Vt)break;tt(t,e,n,r,i)}return e.sort(dt),e}function tt(t,e,n,r,i){try{var o=p.exec(t.nodeValue);if(o){var a=Se(o[1]);ct(e,a,"M",r,i)&&(n[a]=wi(o[2]))}}catch(s){}}function nt(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw go("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType===Vi&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return si(r)}function rt(t,e,n){return function(r,i,o,a,s){return i=nt(i[0],e,n),t(r,i,o,a,s)}}function it(t,e,n,r,i,o){var a;return t?W(e,n,r,i,o):function(){return a||(a=W(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}function ot(t,e,n,i,a,s,u,c,l){function h(t,e,n,r){t&&(n&&(t=rt(t,n,r)),t.require=d.require,t.directiveName=$,(E===d||d.$$isolateScope)&&(t=Ct(t,{isolateScope:!0})),u.push(t)),e&&(n&&(e=rt(e,n,r)),e.require=d.require,e.directiveName=$,(E===d||d.$$isolateScope)&&(e=Ct(e,{isolateScope:!0})),c.push(e))}function p(t,i,a,s,l){function h(t,e,n,r){var i;if(V(t)||(r=n,n=e,e=t,t=void 0),N&&(i=g),n||(n=N?k.parent():k),!r)return l(t,e,i,n,R);var o=l.$$slots[r];if(o)return o(t,e,i,n,R);if(y(o))throw go("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,et(k))}var p,d,$,v,m,g,b,k,O,M;e===a?(O=n,k=n.$$element):(k=si(a),O=new U(k,n)),m=i,E?v=i.$new(!0):x&&(m=i.$parent),l&&(b=h,b.$$boundTransclude=l,b.isSlotFilled=function(t){return!!l.$$slots[t]}),C&&(g=st(k,O,b,C,v,i,E)),E&&(W.$$addScopeInfo(k,v,!0,!(S&&(S===E||S===E.$$originalDirective))),W.$$addScopeClass(k,!0),v.$$isolateBindings=E.$$isolateBindings,M=kt(i,O,v,v.$$isolateBindings,E),M.removeWatches&&v.$on("$destroy",M.removeWatches));for(var I in g){var j=C[I],_=g[I],D=j.$$bindings.bindToController;if(T){D?_.bindingInfo=kt(m,O,_.instance,D,j):_.bindingInfo={};var P=_();P!==_.instance&&(_.instance=P,k.data("$"+j.name+"Controller",P),_.bindingInfo.removeWatches&&_.bindingInfo.removeWatches(),_.bindingInfo=kt(m,O,_.instance,D,j))}else _.instance=_(),k.data("$"+j.name+"Controller",_.instance),_.bindingInfo=kt(m,O,_.instance,D,j)}for(o(C,function(t,e){var n=t.require;t.bindToController&&!yi(n)&&w(n)&&f(g[e].instance,at(e,n,k,g))}),o(g,function(t){var e=t.instance;if(A(e.$onChanges))try{e.$onChanges(t.bindingInfo.initialChanges)}catch(n){r(n)}if(A(e.$onInit))try{e.$onInit()}catch(n){r(n)}A(e.$doCheck)&&(m.$watch(function(){e.$doCheck()}),e.$doCheck()),A(e.$onDestroy)&&m.$on("$destroy",function(){e.$onDestroy()})}),p=0,d=u.length;p<d;p++)$=u[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);var R=i;for(E&&(E.template||null===E.templateUrl)&&(R=v),t&&t(R,a.childNodes,void 0,l),p=c.length-1;p>=0;p--)$=c[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);o(g,function(t){var e=t.instance;A(e.$postLink)&&e.$postLink()})}l=l||{};for(var d,$,v,m,g,b=-Number.MAX_VALUE,x=l.newScopeDirective,C=l.controllerDirectives,E=l.newIsolateScopeDirective,S=l.templateDirective,k=l.nonTlbTranscludeDirective,O=!1,M=!1,N=l.hasElementTranscludeDirective,I=n.$$element=si(e),j=s,_=i,D=!1,P=!1,R=0,q=t.length;R<q;R++){d=t[R];var F=d.$$start,B=d.$$end;if(F&&(I=nt(e,F,B)),v=void 0,b>d.priority)break;if(g=d.scope,g&&(d.templateUrl||(w(g)?(vt("new/isolated scope",E||x,d,I),E=d):vt("new/isolated scope",E,d,I)),x=x||d),$=d.name,!D&&(d.replace&&(d.templateUrl||d.template)||d.transclude&&!d.$$tlb)){for(var H,z=R+1;H=t[z++];)if(H.transclude&&!H.$$tlb||H.replace&&(H.templateUrl||H.template)){P=!0;break}D=!0}if(!d.templateUrl&&d.controller&&(C=C||bt(),vt("'"+$+"' controller",C[$],d,I),C[$]=d),g=d.transclude)if(O=!0,d.$$tlb||(vt("transclusion",k,d,I),k=d),"element"===g)N=!0,b=d.priority,v=I,I=n.$$element=si(W.$$createComment($,n[$])),e=I[0],xt(a,G(v),e),v[0].$$parentNode=v[0].parentNode,_=it(P,v,i,b,j&&j.name,{nonTlbTranscludeDirective:k});else{var J=bt();if(w(g)){v=[];var Z=bt(),Y=bt();o(g,function(t,e){var n="?"===t.charAt(0);t=n?t.substring(1):t,Z[t]=e,J[e]=null,Y[e]=n}),o(I.contents(),function(t){var e=Z[Se(L(t))];e?(Y[e]=!0,J[e]=J[e]||[],J[e].push(t)):v.push(t)}),o(Y,function(t,e){if(!t)throw go("reqslot","Required transclusion slot `{0}` was not filled.",e)});for(var Q in J)J[Q]&&(J[Q]=it(P,J[Q],i))}else v=si(Rt(e)).contents();I.empty(),_=it(P,v,i,void 0,void 0,{needsNewScope:d.$$isolateScope||d.$$newScope}),_.$$slots=J}if(d.template)if(M=!0,vt("template",S,d,I),S=d,g=A(d.template)?d.template(I,n):d.template,g=Dt(g),d.replace){if(j=d,v=Tt(g)?[]:Ae(gt(d.templateNamespace,wi(g))),e=v[0],1!==v.length||e.nodeType!==Vi)throw go("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");xt(a,I,e);var tt={$attr:{}},ot=X(e,[],tt),ct=t.splice(R+1,t.length-(R+1));(E||x)&&ut(ot,E,x),t=t.concat(ot).concat(ct),ft(n,tt),q=t.length}else I.html(g);if(d.templateUrl)M=!0,vt("template",S,d,I),S=d,d.replace&&(j=d),p=ht(t.splice(R,t.length-R),I,n,a,O&&_,u,c,{controllerDirectives:C,newScopeDirective:x!==d&&x,newIsolateScopeDirective:E,templateDirective:S,nonTlbTranscludeDirective:k}),q=t.length;else if(d.compile)try{m=d.compile(I,n,_);var lt=d.$$originalDirective||d;A(m)?h(null,K(lt,m),F,B):m&&h(K(lt,m.pre),K(lt,m.post),F,B)}catch(pt){r(pt,et(I))}d.terminal&&(p.terminal=!0,b=Math.max(b,d.priority))}return p.scope=x&&x.scope===!0,p.transcludeOnThisElement=O,p.templateOnThisElement=M,p.transclude=_,l.hasElementTranscludeDirective=N,p}function at(t,e,n,r){var i;if(C(e)){var a=e.match(E),s=e.substring(a[0].length),u=a[1]||a[3],c="?"===a[2];if("^^"===u?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var l="$"+s+"Controller";i=u?n.inheritedData(l):n.data(l)}if(!i&&!c)throw go("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,t)}else if(yi(e)){i=[];for(var f=0,h=e.length;f<h;f++)i[f]=at(t,e[f],n,r)}else w(e)&&(i={},o(e,function(e,o){i[o]=at(t,e,n,r)}));return i||null}function st(t,e,n,r,i,o,a){var s=bt();for(var c in r){var l=r[c],f={$scope:l===a||l.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},h=l.controller;"@"===h&&(h=e[l.name]);var p=u(h,f,!0,l.controllerAs);s[l.name]=p,t.data("$"+l.name+"Controller",p.instance)}return s}function ut(t,e,n){for(var r=0,i=t.length;r<i;r++)t[r]=d(t[r],{$$isolateScope:e,$$newScope:n})}function ct(t,n,r,o,a,s,u){if(n===a)return null;var c=null;if(l.hasOwnProperty(n))for(var f,p=e.get(n+h),$=0,v=p.length;$<v;$++)if(f=p[$],(y(o)||o>f.priority)&&f.restrict.indexOf(r)!==-1){if(s&&(f=d(f,{$$start:s,$$end:u})),!f.$$bindings){var m=f.$$bindings=i(f,f.name);w(m.isolateScope)&&(f.$$isolateBindings=m.isolateScope)}t.push(f),c=f}return c}function lt(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+h),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function ft(t,e){var n=e.$attr,r=t.$attr;o(t,function(r,i){"$"!==i.charAt(0)&&(e[i]&&e[i]!==r&&(r.length?r+=("style"===i?";":" ")+e[i]:r=e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,i){t.hasOwnProperty(i)||"$"===i.charAt(0)||(t[i]=e,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function ht(t,e,n,i,s,u,c,l){var f,h,p=[],$=e[0],v=t.shift(),m=d(v,{templateUrl:null,transclude:null,replace:null,$$originalDirective:v}),g=A(v.templateUrl)?v.templateUrl(e,n):v.templateUrl,y=v.templateNamespace;return e.empty(),a(g).then(function(r){var a,d,b,x;if(r=Dt(r),v.replace){if(b=Tt(r)?[]:Ae(gt(y,wi(r))),a=b[0],1!==b.length||a.nodeType!==Vi)throw go("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v.name,g);d={$attr:{}},xt(i,e,a);var C=X(a,[],d);w(v.scope)&&ut(C,!0),t=C.concat(t),ft(n,d)}else a=$,e.html(r);for(t.unshift(m),f=ot(t,a,n,s,e,v,u,c,l),o(i,function(t,n){t===a&&(i[n]=e[0])}),h=Z(e[0].childNodes,s);p.length;){var E=p.shift(),S=p.shift(),k=p.shift(),A=p.shift(),O=e[0];if(!E.$$destroyed){if(S!==$){var M=S.className;l.hasElementTranscludeDirective&&v.replace||(O=Rt(a)),xt(k,si(S),O),B(si(O),M)}x=f.transcludeOnThisElement?Q(E,f.transclude,A):A,f(h,E,O,i,x)}}p=null})["catch"](function(t){k(t)&&r(t)}),function(t,e,n,r,i){var o=i;e.$$destroyed||(p?p.push(e,n,r,o):(f.transcludeOnThisElement&&(o=Q(e,f.transclude,i)),f(h,e,n,r,o)))}}function dt(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function vt(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw go("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,et(r))}function mt(t,e){var r=n(e,!0);r&&t.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;return n&&W.$$addBindingClass(e),function(t,e){var i=e.parent();n||W.$$addBindingClass(i),W.$$addBindingInfo(i,r.expressions),t.$watch(r,function(t){e[0].nodeValue=t})}}})}function gt(e,n){switch(e=ni(e||"html")){case"svg":case"math":var r=t.document.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function yt(t,e){if("srcdoc"===e)return m.HTML;var n=L(t);if("src"===e||"ngSrc"===e){if(["img","video","audio","source","track"].indexOf(n)===-1)return m.RESOURCE_URL}else if("xlinkHref"===e||"form"===n&&"action"===e||"link"===n&&"href"===e)return m.RESOURCE_URL}function wt(t,e,r,i,o){var a=yt(t,i),s=!o,u=x[i]||o,c=n(r,s,a,u);if(c){if("multiple"===i&&"select"===L(t))throw go("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",et(t));if(S.test(i))throw go("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");e.push({priority:100,compile:function(){return{pre:function(t,e,o){var s=o.$$observers||(o.$$observers=bt()),l=o[i];l!==r&&(c=l&&n(l,!0,a,u),r=l),c&&(o[i]=c(t),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||t).$watch(c,function(t,e){"class"===i&&t!==e?o.$updateClass(t,e):o.$set(i,t)}))}}}})}}function xt(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;i<o;i++)if(e[i]===a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;c<f;c++,l++)l<f?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var h=t.document.createDocumentFragment();for(i=0;i<s;i++)h.appendChild(n[i]);for(si.hasData(a)&&(si.data(r,si.data(a)),si(a).off("$destroy")),si.cleanData(h.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function Ct(t,e){return f(function(){return t.apply(null,arguments)},t,e)}function Et(t,e,n,i,o,a){try{t(e,n,i,o,a)}catch(s){r(s,et(n))}}function St(t,e){if(N)throw go("missingattr","Attribute '{0}' of '{1}' is non-optional and must be set!",t,e)}function kt(t,e,r,i,a){function u(e,n,i){A(r.$onChanges)&&!H(n,i)&&(At||(t.$$postDigest(R),At=[]),l||(l={},At.push(c)),l[e]&&(i=l[e].previousValue),l[e]=new Ee(i,n))}function c(){r.$onChanges(l),l=void 0}var l,f=[],h={};return o(i,function(i,o){var c,l,p,d,v,m=i.attrName,g=i.optional,y=i.mode;switch(y){case"@":g||ei.call(e,m)||(St(m,a.name),r[o]=e[m]=void 0),v=e.$observe(m,function(t){if(C(t)||j(t)){var e=r[o];u(o,t,e),r[o]=t}}),e.$$observers[m].$$scope=t,c=e[m],C(c)?r[o]=n(c)(t):j(c)&&(r[o]=c),h[o]=new Ee(yo,r[o]),f.push(v);break;case"=":if(!ei.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]),d=l.literal?z:H,p=l.assign||function(){throw c=r[o]=l(t),go("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[m],m,a.name)},c=r[o]=l(t);var b=function(e){return d(e,r[o])||(d(e,c)?p(t,e=r[o]):r[o]=e),c=e};b.$stateful=!0,v=i.collection?t.$watchCollection(e[m],b):t.$watch(s(e[m],b),null,l.literal),f.push(v);break;case"<":if(!ei.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]);var w=l.literal,x=r[o]=l(t);h[o]=new Ee(yo,r[o]),v=t.$watch(l,function(t,e){if(e===t){if(e===x||w&&z(e,x))return;e=x}u(o,t,e),r[o]=t},w),f.push(v);break;case"&":if(g||ei.call(e,m)||St(m,a.name),l=e.hasOwnProperty(m)?s(e[m]):$,l===$&&g)break;r[o]=function(e){return l(t,e)}}}),{initialChanges:h,removeWatches:f.length&&function(){for(var t=0,e=f.length;t<e;++t)f[t]()}}}var At,Ot=/^\w/,Mt=t.document.createElement("div"),Vt=_,Nt=D,It=I;U.prototype={$normalize:Se,$addClass:function(t){t&&t.length>0&&O.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&O.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=ke(t,e);n&&n.length&&O.addClass(this.$$element,n);var r=ke(e,t);r&&r.length&&O.removeClass(this.$$element,r)},$set:function(t,e,n,i){var a,s=this.$$element[0],u=te(s,t),c=ee(t),l=t;if(u?(this.$$element.prop(t,e),i=u):c&&(this[c]=e,l=c),this[t]=e,i?this.$attr[t]=i:(i=this.$attr[t],i||(this.$attr[t]=i=pt(t,"-"))),a=L(this.$$element),"a"===a&&("href"===t||"xlinkHref"===t)||"img"===a&&"src"===t)this[t]=e=P(e,"src"===t);else if("img"===a&&"srcset"===t&&b(e)){for(var f="",h=wi(e),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,$=h.split(d),v=Math.floor($.length/2),m=0;m<v;m++){var g=2*m;f+=P(wi($[g]),!0),f+=" "+wi($[g+1])}var w=wi($[2*m]).split(/\s/);f+=P(wi(w[0]),!0),2===w.length&&(f+=" "+wi(w[1])),this[t]=e=f}n!==!1&&(null===e||y(e)?this.$$element.removeAttr(i):Ot.test(i)?this.$$element.attr(i,e):q(this.$$element[0],i,e));var x=this.$$observers;x&&o(x[l],function(t){try{t(e)}catch(n){r(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=bt()),i=r[t]||(r[t]=[]);return i.push(e),c.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||y(n[t])||e(n[t])}),function(){F(i,e)}}};var jt=n.startSymbol(),_t=n.endSymbol(),Dt="{{"===jt&&"}}"===_t?v:function(t){return t.replace(/\{\{/g,jt).replace(/}}/g,_t)},Pt=/^ngAttr[A-Z]/,Ut=/^(.+)Start$/;return W.$$addBindingInfo=M?function(t,e){var n=t.data("$binding")||[];yi(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:$,W.$$addBindingClass=M?function(t){B(t,"ng-binding")}:$,W.$$addScopeInfo=M?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:$,W.$$addScopeClass=M?function(t,e){B(t,e?"ng-isolate-scope":"ng-scope")}:$,W.$$createComment=function(e,n){var r="";return M&&(r=" "+(e||"")+": ",n&&(r+=n+" ")),t.document.createComment(r)},W}]}function Ee(t,e){this.previousValue=t,this.currentValue=e}function Se(t){return t.replace(bo,"").replace(wo,Mt)}function ke(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function Ae(t){t=si(t);var e=t.length;if(e<=1)return t;for(;e--;){var n=t[e];(n.nodeType===Ii||n.nodeType===Ni&&""===n.nodeValue.trim())&&fi.call(t,e,1)}return t}function Oe(t,e){if(e&&C(e))return e;if(C(t)){var n=Co.exec(t);if(n)return n[3]}}function Me(){var t={},e=!1;this.has=function(e){return t.hasOwnProperty(e)},this.register=function(e,n){mt(e,"controller"),w(e)?f(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(n,i){function o(t,e,n,i){if(!t||!w(t.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=n}return function(r,a,s,u){var c,l,h,p;if(s=s===!0,u&&C(u)&&(p=u),C(r)){if(l=r.match(Co),!l)throw xo("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);if(h=l[1],p=p||l[3],r=t.hasOwnProperty(h)?t[h]:gt(a.$scope,h,!0)||(e?gt(i,h,!0):void 0),!r)throw xo("ctrlreg","The controller with the name '{0}' is not registered.",h);vt(r,h,!0)}if(s){var d=(yi(r)?r[r.length-1]:r).prototype;return c=Object.create(d||null),p&&o(a,p,c,h||r.name),f(function(){var t=n.invoke(r,c,a,h);return t!==c&&(w(t)||A(t))&&(c=t,p&&o(a,p,c,h||r.name)),c},{instance:c,identifier:p})}return c=n.instantiate(r,a,h),p&&o(a,p,c,h||r.name),c}}]}function Ve(){this.$get=["$window",function(t){return si(t.document)}]}function Te(){this.$get=["$document","$rootScope",function(t,e){function n(){i=r.hidden}var r=t[0],i=r&&r.hidden;return t.on("visibilitychange",n),e.$on("$destroy",function(){t.off("visibilitychange",n)}),function(){return i}}]}function Ne(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function Ie(t){return w(t)?S(t)?t.toISOString():Z(t):t}function je(){this.$get=function(){return function(t){if(!t)return"";var e=[];return a(t,function(t,n){null===t||y(t)||A(t)||(yi(t)?o(t,function(t){e.push(at(n)+"="+at(Ie(t)))}):e.push(at(n)+"="+at(Ie(t))))}),e.join("&")}}}function _e(){this.$get=function(){return function(t){function e(t,r,i){null===t||y(t)||(yi(t)?o(t,function(t,n){e(t,r+"["+(w(t)?n:"")+"]")}):w(t)&&!S(t)?a(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(at(r)+"="+at(Ie(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function De(t,e){if(C(t)){var n=t.replace(Mo,"").trim();if(n){var r=e("Content-Type"),i=r&&0===r.indexOf(So);if(i||Pe(n))try{t=Y(n)}catch(o){if(!i)return t;throw Vo("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',t,o)}}}return t}function Pe(t){var e=t.match(Ao);return e&&Oo[e[0]].test(t)}function Re(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=bt();return C(t)?o(t.split("\n"),function(t){n=t.indexOf(":"),e(ni(wi(t.substr(0,n))),wi(t.substr(n+1)))}):w(t)&&o(t,function(t,n){e(ni(n),wi(t))}),r}function Ue(t){var e;return function(n){if(e||(e=Re(t)),n){var r=e[ni(n)];return void 0===r&&(r=null),r}return e}}function Le(t,e,n,r){return A(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function qe(t){return 200<=t&&t<300}function Fe(){var t=this.defaults={transformResponse:[De],transformRequest:[function(t){return!w(t)||T(t)||I(t)||N(t)?t:Z(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:Ct(ko),put:Ct(ko),patch:Ct(ko)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},e=!1;this.useApplyAsync=function(t){return b(t)?(e=!!t,this):e};var n=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(i,a,s,u,c,l,h,p){function d(e){function n(t,e){for(var n=0,r=e.length;n<r;){var i=e[n++],o=e[n++];t=t.then(i,o)}return e.length=0,t}function a(){i.$$completeOutstandingRequest($)}function s(t,e){var n,r={};return o(t,function(t,i){A(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}function u(e){var n,r,i,o=t.headers,a=f({},e.headers);o=f({},o.common,o[ni(e.method)]);t:for(n in o){r=ni(n);for(i in a)if(ni(i)===r)continue t;a[n]=o[n]}return s(a,Ct(e))}function c(e){var n=e.headers,r=Le(e.data,Ue(n),void 0,e.transformRequest);return y(r)&&o(n,function(t,e){"content-type"===ni(e)&&delete n[e]}),y(e.withCredentials)&&!y(t.withCredentials)&&(e.withCredentials=t.withCredentials),g(e,r).then(d,d)}function d(t){var e=f({},t);return e.data=Le(t.data,t.headers,t.status,v.transformResponse),qe(t.status)?e:l.reject(e)}if(!w(e))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);if(!C(p.valueOf(e.url)))throw r("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",e.url);var v=f({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer,jsonpCallbackParam:t.jsonpCallbackParam},e);v.headers=u(e),v.method=ri(v.method),v.paramSerializer=C(v.paramSerializer)?h.get(v.paramSerializer):v.paramSerializer,i.$$incOutstandingRequestCount();var m=[],b=[],x=l.resolve(v);return o(k,function(t){(t.request||t.requestError)&&m.unshift(t.request,t.requestError),(t.response||t.responseError)&&b.push(t.response,t.responseError)}),x=n(x,m),x=x.then(c),x=n(x,b),x=x["finally"](a)}function v(t){o(arguments,function(t){d[t]=function(e,n){return d(f({},n||{},{method:t,url:e}))}})}function m(t){o(arguments,function(t){d[t]=function(e,n,r){return d(f({},r||{},{method:t,url:e,data:n}))}})}function g(n,r){function i(t){if(t){var n={};return o(t,function(t,r){n[r]=function(n){function r(){t(n)}e?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),n}}function u(t,n,r,i,o){function a(){f(n,t,r,i,o)}v&&(qe(t)?v.put(M,[t,n,Re(r),i,o]):v.remove(M)),e?c.$applyAsync(a):(a(),c.$$phase||c.$apply())}function f(t,e,r,i,o){e=e>=-1?e:0,(qe(e)?g.resolve:g.reject)({data:t,status:e,headers:Ue(r),config:n,statusText:i,xhrStatus:o})}function h(t){f(t.data,t.status,Ct(t.headers()),t.statusText,t.xhrStatus)}function $(){var t=d.pendingRequests.indexOf(n);t!==-1&&d.pendingRequests.splice(t,1)}var v,m,g=l.defer(),k=g.promise,A=n.headers,O="jsonp"===ni(n.method),M=n.url;if(O?M=p.getTrustedResourceUrl(M):C(M)||(M=p.valueOf(M)),M=x(M,n.paramSerializer(n.params)),O&&(M=E(M,n.jsonpCallbackParam)),d.pendingRequests.push(n),k.then($,$),!n.cache&&!t.cache||n.cache===!1||"GET"!==n.method&&"JSONP"!==n.method||(v=w(n.cache)?n.cache:w(t.cache)?t.cache:S),v&&(m=v.get(M),b(m)?_(m)?m.then(h,h):yi(m)?f(m[1],m[0],Ct(m[2]),m[3],m[4]):f(m,200,{},"OK","complete"):v.put(M,k)),y(m)){var V=Wn(n.url)?s()[n.xsrfCookieName||t.xsrfCookieName]:void 0;V&&(A[n.xsrfHeaderName||t.xsrfHeaderName]=V),a(n.method,M,r,u,A,n.timeout,n.withCredentials,n.responseType,i(n.eventHandlers),i(n.uploadEventHandlers))}return k}function x(t,e){return e.length>0&&(t+=(t.indexOf("?")===-1?"?":"&")+e),t}function E(t,e){if(/[&?][^=]+=JSON_CALLBACK/.test(t))throw Vo("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',t);var n=new RegExp("[&?]"+e+"=");if(n.test(t))throw Vo("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',e,t);return t+=(t.indexOf("?")===-1?"?":"&")+e+"=JSON_CALLBACK"}var S=u("$http");t.paramSerializer=C(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;var k=[];return o(n,function(t){k.unshift(C(t)?h.get(t):h.invoke(t))}),d.pendingRequests=[],v("get","delete","head","jsonp"),m("post","put","patch"),d.defaults=t,d}]}function Be(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function He(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(t,e,n,r){return ze(t,r,t.defer,e,n[0])}]}function ze(t,e,n,r,i){function a(t,e,n){t=t.replace("JSON_CALLBACK",e);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r.wasCalled(e)||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p,d,$){function v(){w&&w(),x&&x.abort()}function m(t,e,r,i,o,a){b(A)&&n.cancel(A),w=x=null,t(e,r,i,o,a)}if(s=s||t.url(),"jsonp"===ni(i))var g=r.createCallback(s),w=a(s,g,function(t,e){var n=200===t&&r.getResponse(g);m(c,t,n,"",e,"complete"),r.removeCallback(g)});else{var x=e(i,s);x.open(i,s,!0),o(l,function(t,e){b(t)&&x.setRequestHeader(e,t)}),x.onload=function(){var t=x.statusText||"",e="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=e?200:"file"===zn(s).protocol?404:0),m(c,n,e,x.getAllResponseHeaders(),t,"complete")};var C=function(){m(c,-1,null,null,"","error")},E=function(){m(c,-1,null,null,"","abort")},S=function(){m(c,-1,null,null,"","timeout")};if(x.onerror=C,x.onabort=E,x.ontimeout=S,o(d,function(t,e){x.addEventListener(e,t)}),o($,function(t,e){x.upload.addEventListener(e,t)}),h&&(x.withCredentials=!0),p)try{x.responseType=p}catch(k){if("json"!==p)throw k}x.send(y(u)?null:u)}if(f>0)var A=n(v,f);else _(f)&&f.then(v)}}function We(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(h,t).replace(p,e)}function s(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function u(o,u,h,p){function d(t){try{return t=T(t),p&&!b(t)?t:wt(t)}catch(e){r(To.interr(o,e))}}if(!o.length||o.indexOf(t)===-1){var $;if(!u){var v=a(o);$=m(v),$.exp=o,$.expressions=[],$.$$watchDelegate=s}return $}p=!!p;for(var g,w,x,C=0,E=[],S=[],k=o.length,O=[],M=[];C<k;){if((g=o.indexOf(t,C))===-1||(w=o.indexOf(e,g+c))===-1){C!==k&&O.push(a(o.substring(C)));break}C!==g&&O.push(a(o.substring(C,g))),x=o.substring(g+c,w),E.push(x),S.push(n(x,d)),C=w+l,M.push(O.length),O.push("")}if(h&&O.length>1&&To.throwNoconcat(o),!u||E.length){var V=function(t){for(var e=0,n=E.length;e<n;e++){if(p&&y(t[e]))return;O[M[e]]=t[e]}return O.join("")},T=function(t){return h?i.getTrusted(h,t):i.valueOf(t)};return f(function(t){var e=0,n=E.length,i=new Array(n);try{for(;e<n;e++)i[e]=S[e](t);return V(i)}catch(a){r(To.interr(o,a))}},{exp:o,expressions:E,$$watchDelegate:function(t,e){var n;return t.$watchGroup(S,function(r,i){var o=V(r);A(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var c=t.length,l=e.length,h=new RegExp(t.replace(/./g,o),"g"),p=new RegExp(e.replace(/./g,o),"g");return u.startSymbol=function(){return t},u.endSymbol=function(){return e},u}]}function Ge(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,h):o($)}var f=arguments.length>4,h=f?G(arguments,4):[],p=e.setInterval,d=e.clearInterval,$=0,v=b(c)&&!c,m=(v?r:n).defer(),g=m.promise;return u=b(u)?u:0,g.$$intervalId=p(function(){v?i.defer(l):t.$evalAsync(l),m.notify($++),u>0&&$>=u&&(m.resolve($),d(g.$$intervalId),delete a[g.$$intervalId]),v||t.$apply()},s),a[g.$$intervalId]=m,g}var a={};return o.cancel=function(t){return!!(t&&t.$$intervalId in a)&&(Nn(a[t.$$intervalId].promise),a[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete a[t.$$intervalId],!0)},o}]}function Ke(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=ot(e[n]);return e.join("/")}function Je(t,e){var n=zn(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=p(n.port)||jo[n.protocol]||null}function Ze(t,e){if(Do.test(t))throw _o("badpath",'Invalid url "{0}".',t);var n="/"!==t.charAt(0);n&&(t="/"+t);var r=zn(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=rt(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!==e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Ye(t,e){return t.slice(0,e.length)===e}function Qe(t,e){if(Ye(e,t))return e.substr(t.length)}function Xe(t){var e=t.indexOf("#");return e===-1?t:t.substr(0,e)}function tn(t){return t.replace(/(#.+)|#$/,"$1")}function en(t){return t.substr(0,Xe(t).lastIndexOf("/")+1)}function nn(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function rn(t,e,n){this.$$html5=!0,n=n||"",Je(t,this),this.$$parse=function(t){var n=Qe(e,t);if(!C(n))throw _o("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Ze(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=it(this.$$search),n=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return b(o=Qe(t,r))?(a=o,s=n&&b(o=Qe(n,o))?e+(Qe("/",o)||o):t+a):b(o=Qe(e,r))?s=e+o:e===r+"/"&&(s=e),s&&this.$$parse(s),!!s}}function on(t,e,n){Je(t,this),this.$$parse=function(r){function i(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return Ye(e,n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,a=Qe(t,r)||Qe(e,r);y(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",y(a)&&(t=r,this.replace())):(o=Qe(n,a),y(o)&&(o=a)),Ze(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(e,n){return Xe(t)===Xe(e)&&(this.$$parse(e),!0)}}function an(t,e,n){this.$$html5=!0,on.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t===Xe(r)?o=r:(a=Qe(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=Ke(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url,this.$$urlUpdatedByLocation=!0}}function sn(t){return function(){return this[t]}}function un(t,e){return function(n){return y(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function cn(){var t="!",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return b(e)?(t=e,this):t},this.html5Mode=function(t){return j(t)?(e.enabled=t,this):w(t)?(j(t.enabled)&&(e.enabled=t.enabled),j(t.requireBase)&&(e.requireBase=t.requireBase),(j(t.rewriteLinks)||C(t.rewriteLinks))&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,h=r.baseHref(),p=r.url();if(e.enabled){if(!h&&e.requireBase)throw _o("nobase","$location in HTML5 mode requires a <base> tag to be present!");
f=nn(p)+(h||"/"),l=i.history?rn:an}else f=Xe(p),l=on;var d=en(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(p,p),c.$$state=r.state();var $=/^\s*(javascript|mailto):/i;o.on("click",function(t){var i=e.rewriteLinks;if(i&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!==t.which&&2!==t.button){for(var s=si(t.target);"a"!==L(s[0]);)if(s[0]===o[0]||!(s=s.parent())[0])return;if(!C(i)||!y(s.attr(i))){var u=s.prop("href"),l=s.attr("href")||s.attr("xlink:href");w(u)&&"[object SVGAnimatedString]"===u.toString()&&(u=zn(u.animVal).href),$.test(u)||!u||s.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(u,l)&&(t.preventDefault(),c.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),tn(c.absUrl())!==tn(p)&&r.url(c.absUrl(),!0);var v=!0;return r.onUrlChange(function(t,e){return Ye(t,d)?(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=tn(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(v=!1,u(i,o)))}),void(n.$$phase||n.$digest())):void(a.location.href=t)}),n.$watch(function(){if(v||c.$$urlUpdatedByLocation){c.$$urlUpdatedByLocation=!1;var t=tn(r.url()),e=tn(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(v||l)&&(v=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))}))}c.$$replace=!1}),c}]}function ln(){var t=!0,e=this;this.debugEnabled=function(e){return b(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return k(t)&&(t.stack&&a?t=t.message&&t.stack.indexOf(t.message)===-1?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||$;return function(){var t=[];return o(arguments,function(e){t.push(r(e))}),Function.prototype.apply.call(i,e,t)}}var a=ai||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function fn(t){return t+""}function hn(t,e){return"undefined"!=typeof t?t:e}function pn(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function dn(t,e){var n=t(e);return!n.$stateful}function $n(t,e){switch(t.type){case Bo.MemberExpression:if(t.computed)return!1;break;case Bo.UnaryExpression:return Ho;case Bo.BinaryExpression:return"+"!==t.operator&&Ho;case Bo.CallExpression:return!1}return void 0===e?zo:e}function vn(t,e,n){var r,i,a,s=t.isPure=$n(t,n);switch(t.type){case Bo.Program:r=!0,o(t.body,function(t){vn(t.expression,e,s),r=r&&t.expression.constant}),t.constant=r;break;case Bo.Literal:t.constant=!0,t.toWatch=[];break;case Bo.UnaryExpression:vn(t.argument,e,s),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case Bo.BinaryExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case Bo.LogicalExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case Bo.ConditionalExpression:vn(t.test,e,s),vn(t.alternate,e,s),vn(t.consequent,e,s),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case Bo.Identifier:t.constant=!1,t.toWatch=[t];break;case Bo.MemberExpression:vn(t.object,e,s),t.computed&&vn(t.property,e,s),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=t.constant?[]:[t];break;case Bo.CallExpression:a=!!t.filter&&dn(e,t.callee.name),r=a,i=[],o(t.arguments,function(t){vn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=a?i:[t];break;case Bo.AssignmentExpression:vn(t.left,e,s),vn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case Bo.ArrayExpression:r=!0,i=[],o(t.elements,function(t){vn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=i;break;case Bo.ObjectExpression:r=!0,i=[],o(t.properties,function(t){vn(t.value,e,s),r=r&&t.value.constant,i.push.apply(i,t.value.toWatch),t.computed&&(vn(t.key,e,!1),r=r&&t.key.constant,i.push.apply(i,t.key.toWatch))}),t.constant=r,t.toWatch=i;break;case Bo.ThisExpression:t.constant=!1,t.toWatch=[];break;case Bo.LocalsExpression:t.constant=!1,t.toWatch=[]}}function mn(t){if(1===t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function gn(t){return t.type===Bo.Identifier||t.type===Bo.MemberExpression}function yn(t){if(1===t.body.length&&gn(t.body[0].expression))return{type:Bo.AssignmentExpression,left:t.body[0].expression,right:{type:Bo.NGValueParameter},operator:"="}}function bn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===Bo.Literal||t.body[0].expression.type===Bo.ArrayExpression||t.body[0].expression.type===Bo.ObjectExpression)}function wn(t){return t.constant}function xn(t){this.$filter=t}function Cn(t){this.$filter=t}function En(t,e,n){this.ast=new Bo(t,n),this.astCompiler=n.csp?new Cn(e):new xn(e)}function Sn(t){return A(t.valueOf)?t.valueOf():Uo.call(t)}function kn(){var t,e,n=bt(),r={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(t,e){r[t]=e},this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(i){function a(t,e){var r,o,a;switch("undefined"==typeof t?"undefined":_typeof(t)){case"string":if(t=t.trim(),a=t,r=n[a],!r){":"===t.charAt(0)&&":"===t.charAt(1)&&(o=!0,t=t.substring(2));var s=new Fo(d),p=new En(s,i,d);r=p.parse(t),r.constant?r.$$watchDelegate=f:o?r.$$watchDelegate=r.literal?l:c:r.inputs&&(r.$$watchDelegate=u),n[a]=r}return h(r,e);case"function":return h(t,e);default:return h($,e)}}function s(t,e,n){return null==t||null==e?t===e:!("object"===("undefined"==typeof t?"undefined":_typeof(t))&&(t=Sn(t),"object"===("undefined"==typeof t?"undefined":_typeof(t))&&!n))&&(t===e||t!==t&&e!==e)}function u(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],t.$watch(function(t){var e=a(t);return s(e,u,a.isPure)||(o=r(t,void 0,void 0,[e]),u=e&&Sn(e)),o},e,n,i)}for(var c=[],l=[],f=0,h=a.length;f<h;f++)c[f]=s,l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;n<i;n++){var u=a[n](t);(e||(e=!s(u,c[n],a[n].isPure)))&&(l[n]=u,c[n]=u&&Sn(u))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function c(t,e,n,r,i){function o(t){return r(t)}function a(t,n,r){c=t,A(e)&&e(t,n,r),b(t)&&r.$$postDigest(function(){b(c)&&s()})}var s,c;return s=r.inputs?u(t,a,n,r,i):t.$watch(o,a,n)}function l(t,e,n,r){function i(t){var e=!0;return o(t,function(t){b(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return r(t)},function(t,n,r){s=t,A(e)&&e(t,n,r),i(t)&&r.$$postDigest(function(){i(s)&&a()})},n)}function f(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function h(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==l&&n!==c,o=i?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return b(a)?s:a};return r=!t.inputs,n&&n!==u?(o.$$watchDelegate=n,o.inputs=t.inputs):e.$stateful||(o.$$watchDelegate=u,o.inputs=t.inputs?t.inputs:[t]),o.inputs&&(o.inputs=o.inputs.map(function(t){return t.isPure===zo?function(e){return t(e)}:t})),o}var p=Ci().noUnsafeEval,d={csp:p,literals:B(r),isIdentifierStart:A(t)&&t,isIdentifierContinue:A(e)&&e};return a}]}function An(){var t=!0;this.$get=["$rootScope","$exceptionHandler",function(e,n){return Mn(function(t){e.$evalAsync(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function On(){var t=!0;this.$get=["$browser","$exceptionHandler",function(e,n){return Mn(function(t){e.defer(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function Mn(t,e,n){function i(){return new a}function a(){var t=this.promise=new s;this.resolve=function(e){h(t,e)},this.reject=function(e){d(t,e)},this.notify=function(e){v(t,e)}}function s(){this.$$state={status:0}}function u(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=void 0;try{for(var a=0,s=o.length;a<s;++a){Tn(e),i=o[a][0],r=o[a][e.status];try{A(r)?h(i,r(e.value)):1===e.status?h(i,e.value):d(i,e.value)}catch(u){d(i,u)}}}finally{--O,n&&0===O&&t(c)}}function c(){for(;!O&&M.length;){var t=M.shift();if(!Vn(t)){Tn(t);var n="Possibly unhandled rejection: "+St(t.value);k(t.value)?e(t.value,n):e(n)}}}function l(e){!n||e.pending||2!==e.status||Vn(e)||(0===O&&0===M.length&&t(c),M.push(e)),!e.processScheduled&&e.pending&&(e.processScheduled=!0,++O,t(function(){u(e)}))}function h(t,e){t.$$state.status||(e===t?$(t,S("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):p(t,e))}function p(t,e){function n(e){a||(a=!0,p(t,e))}function r(e){a||(a=!0,$(t,e))}function i(e){v(t,e)}var o,a=!1;try{(w(e)||A(e))&&(o=e.then),A(o)?(t.$$state.status=-1,o.call(e,n,r,i)):(t.$$state.value=e,t.$$state.status=1,l(t.$$state))}catch(s){r(s)}}function d(t,e){t.$$state.status||$(t,e)}function $(t,e){t.$$state.value=e,t.$$state.status=2,l(t.$$state)}function v(n,r){var i=n.$$state.pending;n.$$state.status<=0&&i&&i.length&&t(function(){for(var t,n,o=0,a=i.length;o<a;o++){n=i[o][0],t=i[o][3];try{v(n,A(t)?t(r):r)}catch(s){e(s)}}})}function m(t){var e=new s;return d(e,t),e}function g(t,e,n){var r=null;try{A(n)&&(r=n())}catch(i){return m(i)}return _(r)?r.then(function(){return e(t)},m):e(t)}function b(t,e,n,r){var i=new s;return h(i,t),i.then(e,n,r)}function x(t){var e=new s,n=0,r=yi(t)?[]:{};return o(t,function(t,i){n++,b(t).then(function(t){r[i]=t,--n||h(e,r)},function(t){d(e,t)})}),0===n&&h(e,r),e}function C(t){var e=i();return o(t,function(t){b(t).then(e.resolve,e.reject)}),e.promise}function E(t){function e(t){h(r,t)}function n(t){d(r,t)}if(!A(t))throw S("norslvr","Expected resolverFn, got '{0}'",t);var r=new s;return t(e,n),r}var S=r("$q",TypeError),O=0,M=[];f(s.prototype,{then:function(t,e,n){if(y(t)&&y(e)&&y(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&l(this.$$state),r},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return g(e,V,t)},function(e){return g(e,m,t)},e)}});var V=b;return E.prototype=s.prototype,E.defer=i,E.reject=m,E.when=b,E.resolve=V,E.all=x,E.race=C,E}function Vn(t){return!!t.pur}function Tn(t){t.pur=!0}function Nn(t){Tn(t.$$state)}function In(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function jn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$exceptionHandler","$parse","$browser",function(r,c,l){function f(t){t.currentScope.$$destroyed=!0}function h(t){9===ai&&(t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function p(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function d(t){if(E.$$phase)throw n("inprog","{0} already in progress",E.$$phase);E.$$phase=t}function v(){E.$$phase=null}function m(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function g(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function b(){}function x(){for(;O.length;)try{O.shift()()}catch(t){r(t)}s=null}function C(){null===s&&(s=l.defer(function(){E.$apply(x)}))}p.prototype={constructor:p,$new:function(e,n){var r;return n=n||this,e?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!==this)&&r.$on("$destroy",f),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,s=o.$$watchers,u={fn:e,last:b,get:i,exp:r||t,eq:!!n};return a=null,A(e)||(u.fn=$),s||(s=o.$$watchers=[],s.$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,m(this,1),function(){var t=F(s,u);t>=0&&(m(o,-1),t<s.$$digestWatchIndex&&s.$$digestWatchIndex--),a=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(i,i,s)):e(i,r,s)}var r=new Array(t.length),i=new Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(i,i,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=s.$watch(t,function(t,o){i[e]=t,r[e]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function n(t){o=t;var e,n,r,s,u;if(!y(o)){if(w(o))if(i(o)){a!==p&&(a=p,v=a.length=0,f++),e=o.length,v!==e&&(f++,a.length=v=e);for(var c=0;c<e;c++)u=a[c],s=o[c],r=u!==u&&s!==s,r||u===s||(f++,a[c]=s)}else{a!==d&&(a=d={},v=0,f++),e=0;for(n in o)ei.call(o,n)&&(e++,s=o[n],u=a[n],n in a?(r=u!==u&&s!==s,r||u===s||(f++,a[n]=s)):(v++,a[n]=s,f++));if(v>e){f++;for(n in a)ei.call(o,n)||(v--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if($?($=!1,e(o,o,u)):e(o,s,u),l)if(w(o))if(i(o)){s=new Array(o.length);for(var t=0;t<o.length;t++)s[t]=o[t]}else{s={};for(var n in o)ei.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,l=e.length>1,f=0,h=c(t,n),p=[],d={},$=!0,v=0;return this.$watch(h,r)},$digest:function(){var t,i,o,u,c,f,h,p,$,m,g,y=e,w=this,C=[];d("$digest"),l.$$checkUrlChange(),this===E&&null!==s&&(l.defer.cancel(s),x()),a=null;do{h=!1,$=w;for(var O=0;O<S.length;O++){try{g=S[O],u=g.fn,u(g.scope,g.locals)}catch(V){r(V)}a=null}S.length=0;t:do{if(f=$.$$watchers)for(f.$$digestWatchIndex=f.length;f.$$digestWatchIndex--;)try{if(t=f[f.$$digestWatchIndex])if(c=t.get,(i=c($))===(o=t.last)||(t.eq?z(i,o):gi(i)&&gi(o))){if(t===a){h=!1;break t}}else h=!0,a=t,t.last=t.eq?B(i,null):i,u=t.fn,u(i,o===b?i:o,$),y<5&&(m=4-y,C[m]||(C[m]=[]),C[m].push({msg:A(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:i,oldVal:o}))}catch(V){r(V)}if(!(p=$.$$watchersCount&&$.$$childHead||$!==w&&$.$$nextSibling))for(;$!==w&&!(p=$.$$nextSibling);)$=$.$parent}while($=p);if((h||S.length)&&!y--)throw v(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,C)}while(h||S.length);for(v();M<k.length;)try{k[M++]()}catch(V){r(V)}k.length=M=0,l.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===E&&l.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var e in this.$$listenerCount)g(this,this.$$listenerCount[e],e);t&&t.$$childHead===this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail===this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=$,this.$on=this.$watch=this.$watchGroup=function(){return $},this.$$listeners={},this.$$nextSibling=null,h(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){E.$$phase||S.length||l.defer(function(){S.length&&E.$digest()}),S.push({scope:this,fn:c(t),locals:e})},$$postDigest:function(t){k.push(t)},$apply:function(t){try{d("$apply");try{return this.$eval(t)}finally{v()}}catch(e){r(e)}finally{try{E.$digest()}catch(e){throw r(e),e}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&O.push(e),t=c(t),C()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);r!==-1&&(n[r]=null,g(i,1,t))}},$emit:function(t,e){var n,i,o,a=[],s=this,u=!1,c={name:t,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=W([c],arguments,1);do{for(n=s.$$listeners[t]||a,c.currentScope=s,i=0,o=n.length;i<o;i++)if(n[i])try{n[i].apply(null,l)}catch(f){r(f)}else n.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(t,e){var n=this,i=n,o=n,a={name:t,targetScope:n,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return a;for(var s,u,c,l=W([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[t]||[],u=0,c=s.length;u<c;u++)if(s[u])try{s[u].apply(null,l)}catch(f){r(f)}else s.splice(u,1),u--,c--;if(!(o=i.$$listenerCount[t]&&i.$$childHead||i!==n&&i.$$nextSibling))for(;i!==n&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var E=new p,S=E.$$asyncQueue=[],k=E.$$postDigestQueue=[],O=E.$$applyAsyncQueue=[],M=0;return E}]}function _n(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=zn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Dn(t){return t.replace(Ko,Mt)}function Pn(t){if("self"===t)return t;if(C(t)){if(t.indexOf("***")>-1)throw Wo("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=xi(t).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+t+"$")}if(O(t))return new RegExp("^"+t.source+"$");throw Wo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Rn(t){var e=[];return b(t)&&o(t,function(t){e.push(Pn(t))}),e}function Un(){this.SCE_CONTEXTS=Go;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=Rn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=Rn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Wn(e):!!t.exec(e.href)}function i(n){var i,o,a=zn(n.toString()),s=!1;for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!0;break}if(s)for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!1;break}return s}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw Wo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||y(e)||""===e)return e;if("string"!=typeof e)throw Wo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function s(t){return t instanceof l?t.$$unwrapTrustedValue():t}function u(t,e){if(null===e||y(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===Go.RESOURCE_URL){if(i(e))return e;throw Wo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===Go.HTML)return c(e);throw Wo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw Wo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[Go.HTML]=o(l),f[Go.CSS]=o(l),f[Go.URL]=o(l),f[Go.JS]=o(l),f[Go.RESOURCE_URL]=o(f[Go.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Ln(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&ai<8)throw Wo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=Ct(Go);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Go,function(t,e){var n=ni(e);r[Dn("parse_as_"+n)]=function(e){return i(t,e)},r[Dn("get_trusted_"+n)]=function(e){return a(t,e)},r[Dn("trust_as_"+n)]=function(e){return s(t,e)}}),r}]}function qn(){this.$get=["$window","$document",function(t,e){var n={},r=t.nw&&t.nw.process,i=!r&&t.chrome&&(t.chrome.app&&t.chrome.app.runtime||!t.chrome.app&&t.chrome.runtime&&t.chrome.runtime.id),o=!i&&t.history&&t.history.pushState,a=p((/android (\d+)/.exec(ni((t.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((t.navigator||{}).userAgent),u=e[0]||{},c=u.body&&u.body.style,l=!1,f=!1;return c&&(l=!!("transition"in c||"webkitTransition"in c),f=!!("animation"in c||"webkitAnimation"in c)),{history:!(!o||a<4||s),hasEvent:function(t){if("input"===t&&ai)return!1;if(y(n[t])){var e=u.createElement("div");n[t]="on"+t in e}return n[t]},csp:Ci(),transitions:l,animations:f,android:a}}]}function Fn(){var t;this.httpOptions=function(e){return e?(t=e,this):t},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(e,n,r,i,o){function a(s,u){function c(t){return u||(t=Jo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,t.status,t.statusText),e(t)),i.reject(t)}a.totalPendingRequests++,C(s)&&!y(n.get(s))||(s=o.getTrustedResourceUrl(s));var l=r.defaults&&r.defaults.transformResponse;return yi(l)?l=l.filter(function(t){return t!==De}):l===De&&(l=null),r.get(s,f({cache:n,transformResponse:l},t))["finally"](function(){a.totalPendingRequests--}).then(function(t){return n.put(s,t.data),t.data},c)}return a.totalPendingRequests=0,a}]}function Bn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={};return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),i=[];return o(r,function(t){var r=vi.element(t).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+xi(e)+"(\\s|\\||$)");o.test(r)&&i.push(t)}else r.indexOf(e)!==-1&&i.push(t)})}),i},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',s=t.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function Hn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){A(o)||(u=s,s=o,o=$);var c,l=G(arguments,3),f=b(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(e){h.reject(e),i(e)}finally{delete a[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(t){return!!(t&&t.$$timeoutId in a)&&(Nn(a[t.$$timeoutId].promise),a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId))},o}]}function zn(t){var e=t;return ai&&(Zo.setAttribute("href",e),e=Zo.href),Zo.setAttribute("href",e),{href:Zo.href,protocol:Zo.protocol?Zo.protocol.replace(/:$/,""):"",host:Zo.host,search:Zo.search?Zo.search.replace(/^\?/,""):"",hash:Zo.hash?Zo.hash.replace(/^#/,""):"",hostname:Zo.hostname,port:Zo.port,pathname:"/"===Zo.pathname.charAt(0)?Zo.pathname:"/"+Zo.pathname}}function Wn(t){var e=C(t)?zn(t):t;return e.protocol===Yo.protocol&&e.host===Yo.host}function Gn(){this.$get=m(t)}function Kn(t){function e(t){try{return t.cookie||""}catch(e){return""}}function n(t){try{return decodeURIComponent(t)}catch(e){return t}}var r=t[0]||{},i={},o="";return function(){var t,a,s,u,c,l=e(r);if(l!==o)for(o=l,t=o.split("; "),i={},s=0;s<t.length;s++)a=t[s],u=a.indexOf("="),u>0&&(c=n(a.substring(0,u)),y(i[c])&&(i[c]=n(a.substring(u+1))));return i}}function Jn(){this.$get=Kn}function Zn(t){function e(r,i){if(w(r)){var a={};return o(r,function(t,n){a[n]=e(n,t)}),a}return t.factory(r+n,i)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",er),e("date",vr),e("filter",Yn),e("json",mr),e("limitTo",gr),e("lowercase",ia),e("number",nr),e("orderBy",br),e("uppercase",oa)}function Yn(){return function(t,e,n,o){if(!i(t)){if(null==t)return t;throw r("filter")("notarray","Expected array but received: {0}",t)}o=o||"$";var a,s,u=tr(e);switch(u){case"function":a=e;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Qn(e,n,o,s);break;default:return t}return Array.prototype.filter.call(t,a)}}function Qn(t,e,n,r){var i,o=w(t)&&n in t;return e===!0?e=z:A(e)||(e=function(t,e){return!y(t)&&(null===t||null===e?t===e:!(w(e)||w(t)&&!g(t))&&(t=ni(""+t),e=ni(""+e),t.indexOf(e)!==-1))}),i=function(i){return o&&!w(i)?Xn(i,t[n],e,n,!1):Xn(i,t,e,n,r)}}function Xn(t,e,n,r,i,o){var a=tr(t),s=tr(e);if("string"===s&&"!"===e.charAt(0))return!Xn(t,e.substring(1),n,r,i);if(yi(t))return t.some(function(t){return Xn(t,e,n,r,i)});switch(a){case"object":var u;if(i){for(u in t)if(u.charAt&&"$"!==u.charAt(0)&&Xn(t[u],e,n,r,!0))return!0;return!o&&Xn(t,e,n,r,!1)}if("object"===s){for(u in e){var c=e[u];if(!A(c)&&!y(c)){var l=u===r,f=l?t:t[u];if(!Xn(f,c,n,r,l,l))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function tr(t){return null===t?"null":"undefined"==typeof t?"undefined":_typeof(t)}function er(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return y(n)&&(n=e.CURRENCY_SYM),y(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:or(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function nr(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:or(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function rr(t){var e,n,r,i,o,a=0;for((n=t.indexOf(Xo))>-1&&(t=t.replace(Xo,"")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;t.charAt(r)===ta;r++);if(r===(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)===ta;)o--;for(n-=r,e=[],i=0;r<=o;r++,i++)e[i]=+t.charAt(r)}return n>Qo&&(e=e.splice(0,Qo-1),a=n-1,n=1),{d:e,e:a,i:n}}function ir(t,e,n,r){var i=t.d,o=i.length-t.i;e=y(e)?Math.min(Math.max(n,o),r):+e;var a=e+t.i,s=i[a];if(a>0){i.splice(Math.max(t.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(s>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;for(;o<Math.max(0,e);o++)i.push(0);var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)}function or(t,e,n,r,i){if(!C(t)&&!E(t)||isNaN(t))return"";var o,a=!isFinite(t),s=!1,u=Math.abs(t)+"",c="";if(a)c="∞";else{o=rr(u),ir(o,i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,h=o.e,p=[];for(s=l.reduce(function(t,e){return t&&!e},!0);f<0;)l.unshift(0),f++;f>0?p=l.splice(f,l.length):(p=l,l=[0]);var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize,l.length).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),p.length&&(c+=r+p.join("")),h&&(c+="e+"+h)}return t<0&&!s?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function ar(t,e,n,r){var i="";for((t<0||r&&t<=0)&&(r?t=-t+1:(t=-t,i="-")),t=""+t;t.length<e;)t=ta+t;return n&&(t=t.substr(t.length-e)),i+t}function sr(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&n===-12&&(a=12),ar(a,e,r,i)}}function ur(t,e,n){return function(r,i){var o=r["get"+t](),a=(n?"STANDALONE":"")+(e?"SHORT":""),s=ri(a+t);return i[s][o]}}function cr(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=ar(Math[r>0?"floor":"ceil"](r/60),2)+ar(Math.abs(r%60),2)}function lr(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(e<=4?5:12)-e)}function fr(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function hr(t){return function(e){var n=lr(e.getFullYear()),r=fr(e),i=+r-+n,o=1+Math.round(i/6048e5);return ar(o,t)}}function pr(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function dr(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function $r(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function vr(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,s=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=p(e[9]+e[10]),o=p(e[9]+e[11])),a.call(r,p(e[1]),p(e[2])-1,p(e[3]));var u=p(e[4]||0)-i,c=p(e[5]||0)-o,l=p(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return s.call(r,u,c,l,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,C(n)&&(n=ra.test(n)?p(n):e(n)),E(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;r;)s=na.exec(r),s?(c=W(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=Q(i,l),n=tt(n,i,!0)),o(c,function(e){a=ea[e],u+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function mr(){return function(t,e){return y(e)&&(e=2),Z(t,e)}}function gr(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):p(e),gi(e)?t:(E(t)&&(t=t.toString()),i(t)?(n=!n||isNaN(n)?0:p(n),n=n<0?Math.max(0,t.length+n):n,e>=0?yr(t,n,n+e):0===n?yr(t,e,t.length):yr(t,Math.max(0,n+e),n)):t)}}function yr(t,e,n){return C(t)?t.slice(e,n):li.call(t,e,n)}function br(t){function e(e){return e.map(function(e){var n=1,r=v;if(A(e))r=e;else if(C(e)&&("+"!==e.charAt(0)&&"-"!==e.charAt(0)||(n="-"===e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(r=t(e),r.constant))){var i=r();r=function(t){return t[i]}}return{get:r,descending:n}})}function n(t){switch("undefined"==typeof t?"undefined":_typeof(t)){case"number":case"boolean":case"string":return!0;default:return!1}}function o(t){return A(t.valueOf)&&(t=t.valueOf(),n(t))?t:g(t)&&(t=t.toString(),n(t))?t:t}function a(t,e){var n="undefined"==typeof t?"undefined":_typeof(t);return null===t?(n="string",t="null"):"object"===n&&(t=o(t)),{value:t,type:n,index:e}}function s(t,e){var n=0,r=t.type,i=e.type;if(r===i){var o=t.value,a=e.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(w(o)&&(o=t.index),w(a)&&(a=e.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(t,n,o,u){function c(t,e){return{value:t,tieBreaker:{value:e,type:"number",index:e},predicateValues:f.map(function(n){return a(n.get(t),e)})}}function l(t,e){for(var n=0,r=f.length;n<r;n++){var i=p(t.predicateValues[n],e.predicateValues[n]);if(i)return i*f[n].descending*h}return(p(t.tieBreaker,e.tieBreaker)||s(t.tieBreaker,e.tieBreaker))*h}if(null==t)return t;if(!i(t))throw r("orderBy")("notarray","Expected array but received: {0}",t);yi(n)||(n=[n]),0===n.length&&(n=["+"]);var f=e(n),h=o?-1:1,p=A(u)?u:s,d=Array.prototype.map.call(t,c);return d.sort(l),t=d.map(function(t){return t.value})}}function wr(t){return A(t)&&(t={link:t}),t.restrict=t.restrict||"AC",m(t)}function xr(t,e){t.$name=e}function Cr(t,e,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(e.name||e.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,
this.$$parentForm=ua,this.$$element=t,this.$$animate=r,Er(this)}function Er(t){t.$$classCache={},t.$$classCache[Wa]=!(t.$$classCache[za]=t.$$element.hasClass(za))}function Sr(t){function e(t,e,n,r){t[e]||(t[e]={}),a(t[e],n,r)}function n(t,e,n,r){t[e]&&s(t[e],n,r),kr(t[e])&&(t[e]=void 0)}function r(t,e,n){n&&!t.$$classCache[e]?(t.$$animate.addClass(t.$$element,e),t.$$classCache[e]=!0):!n&&t.$$classCache[e]&&(t.$$animate.removeClass(t.$$element,e),t.$$classCache[e]=!1)}function i(t,e,n){e=e?"-"+pt(e,"-"):"",r(t,za+e,n===!0),r(t,Wa+e,n===!1)}var o=t.clazz,a=t.set,s=t.unset;o.prototype.$setValidity=function(t,o,u){y(o)?e(this,"$pending",t,u):n(this,"$pending",t,u),j(o)?o?(s(this.$error,t,u),a(this.$$success,t,u)):(a(this.$error,t,u),s(this.$$success,t,u)):(s(this.$error,t,u),s(this.$$success,t,u)),this.$pending?(r(this,ca,!0),this.$valid=this.$invalid=void 0,i(this,"",null)):(r(this,ca,!1),this.$valid=kr(this.$error),this.$invalid=!this.$valid,i(this,"",this.$valid));var c;c=this.$pending&&this.$pending[t]?void 0:!this.$error[t]&&(!!this.$$success[t]||null),i(this,t,c),this.$$parentForm.$setValidity(t,c,this)}}function kr(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function Ar(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function Or(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r)}function Mr(t,e,n,r,i,o){var a=ni(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(){s=!0}),e.on("compositionend",function(){s=!1,c()})}var u,c=function(t){if(u&&(o.defer.cancel(u),u=null),!s){var i=e.val(),c=t&&t.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=wi(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||15<e&&e<19||37<=e&&e<=40||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",c),Ea[a]&&r.$$hasNativeValidators&&a===n.type&&e.on(Ca,function(t){if(!u){var e=this[ti],n=e.badInput,r=e.typeMismatch;u=o.defer(function(){u=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function Vr(t,e){if(S(t))return t;if(C(t)){ba.lastIndex=0;var n=ba.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=lr(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function Tr(t,e){return function(n,r){var i,a;if(S(n))return n;if(C(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),da.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Nr(t,e,n,r){return function(i,o,a,s,u,c,l){function f(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function h(t){return b(t)&&!S(t)?n(t)||void 0:t}Ir(i,o,a,s),Mr(i,o,a,s,u,c);var p,d=s&&s.$options.getOption("timezone");if(s.$$parserName=t,s.$parsers.push(function(t){if(s.$isEmpty(t))return null;if(e.test(t)){var r=n(t,p);return d&&(r=tt(r,d)),r}}),s.$formatters.push(function(t){if(t&&!S(t))throw Xa("datefmt","Expected `{0}` to be a date",t);return f(t)?(p=t,p&&d&&(p=tt(p,d,!0)),l("date")(t,r,d)):(p=null,"")}),b(a.min)||a.ngMin){var $;s.$validators.min=function(t){return!f(t)||y($)||n(t)>=$},a.$observe("min",function(t){$=h(t),s.$validate()})}if(b(a.max)||a.ngMax){var v;s.$validators.max=function(t){return!f(t)||y(v)||n(t)<=v},a.$observe("max",function(t){v=h(t),s.$validate()})}}}function Ir(t,e,n,r){var i=e[0],o=r.$$hasNativeValidators=w(i.validity);o&&r.$parsers.push(function(t){var n=e.prop(ti)||{};return n.badInput||n.typeMismatch?void 0:t})}function jr(t){t.$$parserName="number",t.$parsers.push(function(e){return t.$isEmpty(e)?null:ma.test(e)?parseFloat(e):void 0}),t.$formatters.push(function(e){if(!t.$isEmpty(e)){if(!E(e))throw Xa("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e})}function _r(t){return b(t)&&!E(t)&&(t=parseFloat(t)),gi(t)?void 0:t}function Dr(t){return(0|t)===t}function Pr(t){var e=t.toString(),n=e.indexOf(".");if(n===-1){if(-1<t&&t<1){var r=/e-(\d+)$/.exec(e);if(r)return Number(r[1])}return 0}return e.length-n-1}function Rr(t,e,n){var r=Number(t),i=!Dr(r),o=!Dr(e),a=!Dr(n);if(i||o||a){var s=i?Pr(r):0,u=o?Pr(e):0,c=a?Pr(n):0,l=Math.max(s,u,c),f=Math.pow(10,l);r*=f,e*=f,n*=f,i&&(r=Math.round(r)),o&&(e=Math.round(e)),a&&(n=Math.round(n))}return(r-e)%n===0}function Ur(t,e,n,r,i,o){Ir(t,e,n,r),jr(r),Mr(t,e,n,r,i,o);var a,s;if((b(n.min)||n.ngMin)&&(r.$validators.min=function(t){return r.$isEmpty(t)||y(a)||t>=a},n.$observe("min",function(t){a=_r(t),r.$validate()})),(b(n.max)||n.ngMax)&&(r.$validators.max=function(t){return r.$isEmpty(t)||y(s)||t<=s},n.$observe("max",function(t){s=_r(t),r.$validate()})),b(n.step)||n.ngStep){var u;r.$validators.step=function(t,e){return r.$isEmpty(e)||y(u)||Rr(e,a||0,u)},n.$observe("step",function(t){u=_r(t),r.$validate()})}}function Lr(t,e,n,r,i,o){function a(t,r){e.attr(t,n[t]),n.$observe(t,r)}function s(t){if(f=_r(t),!gi(r.$modelValue))if(l){var n=e.val();f>n&&(n=f,e.val(n)),r.$setViewValue(n)}else r.$validate()}function u(t){if(h=_r(t),!gi(r.$modelValue))if(l){var n=e.val();h<n&&(e.val(h),n=h<f?f:h),r.$setViewValue(n)}else r.$validate()}function c(t){p=_r(t),gi(r.$modelValue)||(l&&r.$viewValue!==e.val()?r.$setViewValue(e.val()):r.$validate())}Ir(t,e,n,r),jr(r),Mr(t,e,n,r,i,o);var l=r.$$hasNativeValidators&&"range"===e[0].type,f=l?0:void 0,h=l?100:void 0,p=l?1:void 0,d=e[0].validity,$=b(n.min),v=b(n.max),m=b(n.step),g=r.$render;r.$render=l&&b(d.rangeUnderflow)&&b(d.rangeOverflow)?function(){g(),r.$setViewValue(e.val())}:g,$&&(r.$validators.min=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(f)||e>=f},a("min",s)),v&&(r.$validators.max=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(h)||e<=h},a("max",u)),m&&(r.$validators.step=l?function(){return!d.stepMismatch}:function(t,e){return r.$isEmpty(e)||y(p)||Rr(e,f||0,p)},a("step",c))}function qr(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||$a.test(n)}}function Fr(t,e,n,r,i,o){Mr(t,e,n,r,i,o),Ar(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||va.test(n)}}function Br(t,e,n,r){var i=!n.ngTrim||"false"!==wi(n.ngTrim);y(n.name)&&e.attr("name",u());var o=function(t){var o;e[0].checked&&(o=n.value,i&&(o=wi(o)),r.$setViewValue(o,t&&t.type))};e.on("click",o),r.$render=function(){var t=n.value;i&&(t=wi(t)),e[0].checked=t===r.$viewValue},n.$observe("value",r.$render)}function Hr(t,e,n,r,i){var o;if(b(r)){if(o=t(r),!o.constant)throw Xa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function zr(t,e,n,r,i,o,a,s){var u=Hr(s,t,"ngTrueValue",n.ngTrueValue,!0),c=Hr(s,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return z(t,u)}),r.$parsers.push(function(t){return t?u:c})}function Wr(t,e){function n(t,e){if(!t||!t.length)return[];if(!e||!e.length)return t;var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i===e[o])continue t;n.push(i)}return n}function r(t){return t&&t.split(" ")}function i(t){var e=t;return yi(t)?e=t.map(i).join(" "):w(t)&&(e=Object.keys(t).filter(function(e){return t[e]}).join(" ")),e}function a(t){var e=t;if(yi(t))e=t.map(a);else if(w(t)){var n=!1;e=Object.keys(t).filter(function(e){var r=t[e];return!n&&y(r)&&(n=!0),r}),n&&e.push(void 0)}return e}t="ngClass"+t;var s;return["$parse",function(u){return{restrict:"AC",link:function(c,l,f){function h(t){t=$(r(t),1),f.$addClass(t)}function p(t){t=$(r(t),-1),f.$removeClass(t)}function d(t,e){var i=r(t),o=r(e),a=n(i,o),s=n(o,i),u=$(a,-1),c=$(s,1);f.$addClass(c),f.$removeClass(u)}function $(t,e){var n=[];return o(t,function(t){(e>0||S[t])&&(S[t]=(S[t]||0)+e,S[t]===+(e>0)&&n.push(t))}),n.join(" ")}function v(t){t===e?h(y):p(y),k=t}function m(t){var e=i(t);e!==y&&g(e)}function g(t){k===e&&d(y,t),y=t}var y,b=f[t].trim(),w=":"===b.charAt(0)&&":"===b.charAt(1),x=w?a:i,C=u(b,x),E=w?m:g,S=l.data("$classCounts"),k=!0;S||(S=bt(),l.data("$classCounts",S)),"ngClass"!==t&&(s||(s=u("$index",function(t){return 1&t})),c.$watch(s,v)),c.$watch(C,E,w)}}}]}function Gr(t,e,n,r,i,o,a,s,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(t),this.$$parentForm=ua,this.$options=ts,this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:t}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=e,Er(this),Kr(this)}function Kr(t){t.$$scope.$watch(function(e){var n=t.$$ngModelGet(e);if(n!==t.$modelValue&&(t.$modelValue===t.$modelValue||n===n)){t.$modelValue=t.$$rawModelValue=n,t.$$parserValid=void 0;for(var r=t.$formatters,i=r.length,o=n;i--;)o=r[i](o);t.$viewValue!==o&&(t.$$updateEmptyClasses(o),t.$viewValue=t.$$lastCommittedViewValue=o,t.$render(),t.$$runValidators(t.$modelValue,t.$viewValue,$))}return n})}function Jr(t){this.$$options=t}function Zr(t,e){o(e,function(e,n){b(t[n])||(t[n]=e)})}function Yr(t,e){t.prop("selected",e),t.attr("selected",e)}var Qr={objectMaxDepth:5},Xr=/^\/(.+)\/([a-z]*)$/,ti="validity",ei=Object.prototype.hasOwnProperty,ni=function(t){return C(t)?t.toLowerCase():t},ri=function(t){return C(t)?t.toUpperCase():t},ii=function(t){return C(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},oi=function(t){return C(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(t.charCodeAt(0)&-33)}):t};"i"!=="I".toLowerCase()&&(ni=ii,ri=oi);var ai,si,ui,ci,li=[].slice,fi=[].splice,hi=[].push,pi=Object.prototype.toString,di=Object.getPrototypeOf,$i=r("ng"),vi=t.angular||(t.angular={}),mi=0;ai=t.document.documentMode;var gi=Number.isNaN||function(t){return t!==t};$.$inject=[],v.$inject=[];var yi=Array.isArray,bi=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,wi=function(t){return C(t)?t.trim():t},xi=function(t){return t.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ci=function Ms(){function e(){try{return new Function(""),!1}catch(t){return!0}}if(!b(Ms.rules)){var n=t.document.querySelector("[ng-csp]")||t.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Ms.rules={noUnsafeEval:!r||r.indexOf("no-unsafe-eval")!==-1,noInlineStyle:!r||r.indexOf("no-inline-style")!==-1}}else Ms.rules={noUnsafeEval:e(),noInlineStyle:!1}}return Ms.rules},Ei=function Vs(){if(b(Vs.name_))return Vs.name_;var e,n,r,i,o=ki.length;for(n=0;n<o;++n)if(r=ki[n],e=t.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Vs.name_=i},Si=/:/g,ki=["ng-","data-ng-","ng:","x-ng-"],Ai=ut(t.document),Oi=/[A-Z]/g,Mi=!1,Vi=1,Ti=2,Ni=3,Ii=8,ji=9,_i=11,Di={full:"1.6.6",major:1,minor:6,dot:6,codeName:"interdimensional-cable"};Pt.expando="ng339";var Pi=Pt.cache={},Ri=1;Pt._data=function(t){return this.cache[t[this.expando]]||{}};var Ui=/-([a-z])/g,Li=/^-ms-/,qi={mouseleave:"mouseout",mouseenter:"mouseover"},Fi=r("jqLite"),Bi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Hi=/<|&#?\w+;/,zi=/<([\w:-]+)/,Wi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Gi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Gi.optgroup=Gi.option,Gi.tbody=Gi.tfoot=Gi.colgroup=Gi.caption=Gi.thead,Gi.th=Gi.td;var Ki=t.Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},Ji=Pt.prototype={ready:Xt,toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return si(t>=0?this[t]:this[this.length+t])},length:0,push:hi,sort:[].sort,splice:[].splice},Zi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Zi[ni(t)]=t});var Yi={};o("input,select,option,textarea,button,form,details".split(","),function(t){Yi[t]=!0});var Qi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:Bt,removeData:qt,hasData:It,cleanData:function(t){for(var e=0,n=t.length;e<n;e++)qt(t[e])}},function(t,e){Pt[e]=t}),o({data:Bt,inheritedData:Jt,scope:function(t){return si.data(t,"$scope")||Jt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return si.data(t,"$isolateScope")||si.data(t,"$isolateScopeNoTemplate")},controller:Kt,injector:function(t){return Jt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:Ht,css:function(t,e,n){return e=Ot(e),b(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,n){var r,i=t.nodeType;if(i!==Ni&&i!==Ti&&i!==Ii&&t.getAttribute){var o=ni(e),a=Zi[o];return b(n)?void(null===n||n===!1&&a?t.removeAttribute(e):t.setAttribute(e,a?o:n)):(r=t.getAttribute(e),a&&null!==r&&(r=o),null===r?void 0:r)}},prop:function(t,e,n){return b(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if(y(e)){var n=t.nodeType;return n===Vi||n===Ni?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(y(e)){if(t.multiple&&"select"===L(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),n}return t.value}t.value=e},html:function(t,e){return y(e)?t.innerHTML:(Ut(t,!0),void(t.innerHTML=e))},empty:Zt},function(t,e){Pt.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Zt&&y(2===t.length&&t!==Ht&&t!==Kt?e:n)){if(w(e)){for(r=0;r<o;r++)if(t===Bt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=y(a)?Math.min(o,1):o,u=0;u<s;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;r<o;r++)t(this[r],e,n);return this}}),o({removeData:qt,on:function(t,e,n,r){if(b(r))throw Fi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Nt(t)){var i=Ft(t,!0),o=i.events,a=i.handle;a||(a=i.handle=ne(t,o));for(var s=e.indexOf(" ")>=0?e.split(" "):[e],u=s.length,c=function(e,r,i){var s=o[e];s||(s=o[e]=[],s.specialHandlerWrapper=r,"$destroy"===e||i||t.addEventListener(e,a)),s.push(n)};u--;)e=s[u],qi[e]?(c(qi[e],ie),c(e,void 0,!0)):c(e)}},off:Lt,one:function(t,e,n){t=si(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;Ut(t),o(new Pt(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function Ts(t){var Ts=[];return o(t.childNodes,function(t){t.nodeType===Vi&&Ts.push(t)}),Ts},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Vi||n===_i){e=new Pt(e);for(var r=0,i=e.length;r<i;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===Vi){var n=t.firstChild;o(new Pt(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){Dt(t,si(e).eq(0).clone()[0])},remove:Yt,detach:function(t){Yt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;if(r){e=new Pt(e);for(var i=0,o=e.length;i<o;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}}},addClass:Wt,removeClass:zt,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;y(r)&&(r=!Ht(t,e)),(r?Wt:zt)(t,e)})},parent:function Ns(t){var Ns=t.parentNode;return Ns&&Ns.nodeType!==_i?Ns:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Rt,triggerHandler:function(t,e,n){var r,i,a,s=e.type||e,u=Ft(t),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:$,type:s,target:t},e.type&&(r=f(r,e)),i=Ct(l),a=n?[r].concat(n):[r],o(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){Pt.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;o<a;o++)y(i)?(i=t(this[o],e,n,r),b(i)&&(i=si(i))):Gt(i,t(this[o],e,n,r));return b(i)?i:this}}),Pt.prototype.bind=Pt.prototype.on,Pt.prototype.unbind=Pt.prototype.off;var Xi=Object.create(null);se.prototype={_idx:function(t){return t===this._lastKey?this._lastIndex:(this._lastKey=t,this._lastIndex=this._keys.indexOf(t),this._lastIndex)},_transformKey:function(t){return gi(t)?Xi:t},get:function(t){t=this._transformKey(t);var e=this._idx(t);if(e!==-1)return this._values[e]},set:function(t,e){t=this._transformKey(t);var n=this._idx(t);n===-1&&(n=this._lastIndex=this._keys.length),this._keys[n]=t,this._values[n]=e},"delete":function(t){t=this._transformKey(t);var e=this._idx(t);return e!==-1&&(this._keys.splice(e,1),this._values.splice(e,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var to=se,eo=[function(){this.$get=[function(){return to}]}],no=/^([^(]+?)=>/,ro=/^[^(]*\(\s*([^)]*)\)/m,io=/,/,oo=/^\s*(_?)(\S+?)\1\s*$/,ao=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,so=r("$injector");he.$$annotate=fe;var uo=r("$animate"),co=1,lo="ng-animate",fo=function(){this.$get=$},ho=function(){var t=new to,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=C(e)?e.split(" "):yi(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){o(e,function(e){var n=t.get(e);if(n){var r=ve(e.attr("class")),i="",a="";o(n,function(t,e){var n=!!r[e];t!==n&&(t?i+=(i.length?" ":"")+e:a+=(a.length?" ":"")+e)}),o(e,function(t){i&&Wt(t,i),a&&zt(t,a)}),t["delete"](e)}}),e.length=0}function s(n,o,s){var u=t.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(t.set(n,u),e.push(n),1===e.length&&r.$$postDigest(a))}return{enabled:$,on:$,off:$,pin:$,push:function(t,e,r,i){i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&s(t,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},po=["$provide",function(t){var e=this,n=null,r=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw uo("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.customFilter=function(t){return 1===arguments.length&&(r=A(t)?t:null),r},this.classNameFilter=function(t){if(1===arguments.length&&(n=t instanceof RegExp?t:null)){var e=new RegExp("[(\\s|\\/)]"+lo+"[(\\s|\\/)]");if(e.test(n.toString()))throw n=null,uo("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',lo)}return n},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=$e(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&si(r),i=i&&si(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",me(o))},move:function(n,r,i,o){return r=r&&si(r),i=i&&si(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",me(o))},leave:function(e,n){return t.push(e,"leave",me(n),function(){e.remove()})},addClass:function(e,n,r){return r=me(r),r.addClass=de(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=me(r),r.removeClass=de(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=me(i),i.addClass=de(i.addClass,n),i.removeClass=de(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=me(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=de(o.tempClasses,i),t.push(e,"animate",o)}}}]}],$o=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),n.length>1||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},vo=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(t,e,n,r,i){function a(t){this.setHost(t);var e=n(),o=function(t){i(t,0,!1)};this._doneCallbacks=[],this._tick=function(t){r()?o(t):e(t)},this._state=0}var s=0,u=1,c=2;return a.chain=function(t,e){function n(){return r===t.length?void e(!0):void t[r](function(t){return t===!1?void e(!1):(r++,void n())})}var r=0;n()},a.all=function(t,e){function n(n){i=i&&n,++r===t.length&&e(i)}var r=0,i=!0;o(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){this._state===c?t():this._doneCallbacks.push(t)},progress:$,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){e===!1?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;e._state===s&&(e._state=u,e._tick(function(){e._resolve(t)}))},_resolve:function(t){this._state!==c&&(o(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=c)}},a}]},mo=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(e.addClass(a.addClass),a.addClass=null),a.removeClass&&(e.removeClass(a.removeClass),a.removeClass=null),a.to&&(e.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=B(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(e.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},go=r("$compile"),yo=new xe;Ce.$inject=["$provide","$$sanitizeUriProvider"],Ee.prototype.isFirstChange=function(){return this.previousValue===yo};var bo=/^((?:x|data)[:\-_])/i,wo=/[:\-_]+(.)/g,xo=r("$controller"),Co=/^(\S+)(\s+as\s+([\w$]+))?$/,Eo=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof si&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},So="application/json",ko={"Content-Type":So+";charset=utf-8"},Ao=/^\[|^\{(?!\{)/,Oo={"[":/]$/,"{":/}$/},Mo=/^\)]\}',?\n/,Vo=r("$http"),To=vi.$interpolateMinErr=r("$interpolate");To.throwNoconcat=function(t){throw To("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},To.interr=function(t,e){return To("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var No=function(){this.$get=function(){function t(t){var e=function n(t){n.data=t,n.called=!0};return e.id=t,e}var e=vi.callbacks,n={};return{createCallback:function(r){var i="_"+(e.$$counter++).toString(36),o="angular.callbacks."+i,a=t(i);return n[o]=e[i]=a,o},wasCalled:function(t){return n[t].called},getResponse:function(t){return n[t].data},removeCallback:function(t){var r=n[t];delete e[r.id],delete n[t]}}}},Io=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,jo={http:80,https:443,ftp:21},_o=r("$location"),Do=/^\s*[\\\/]{2,}/,Po={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:sn("$$absUrl"),url:function(t){if(y(t))return this.$$url;var e=Io.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:sn("$$protocol"),host:sn("$$host"),port:sn("$$port"),path:un("$$path",function(t){return t=null!==t?t.toString():"","/"===t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(C(t)||E(t))t=t.toString(),this.$$search=rt(t);else{if(!w(t))throw _o("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=B(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:y(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:un("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([an,on,rn],function(t){t.prototype=Object.create(Po),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==rn||!this.$$html5)throw _o("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=y(e)?null:e,this.$$urlUpdatedByLocation=!0,this}});var Ro=r("$parse"),Uo={}.constructor.prototype.valueOf,Lo=bt();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){Lo[t]=!0});var qo={n:"\n",f:"\f",r:"\r",t:"\t",v:"\x0B","'":"'",'"':'"'},Fo=function(t){this.options=t};Fo.prototype={constructor:Fo,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=Lo[e],o=Lo[n],a=Lo[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return e.indexOf(t)!==-1},peek:function(t){var e=t||1;return this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(t){return"0"<=t&&t<="9"&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"\t"===t||"\n"===t||"\x0B"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=b(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw Ro("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=ni(this.text.charAt(this.index));if("."===n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=qo[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var Bo=function(t,e){this.lexer=t,this.options=e};Bo.Program="Program",Bo.ExpressionStatement="ExpressionStatement",Bo.AssignmentExpression="AssignmentExpression",Bo.ConditionalExpression="ConditionalExpression",Bo.LogicalExpression="LogicalExpression",Bo.BinaryExpression="BinaryExpression",Bo.UnaryExpression="UnaryExpression",Bo.CallExpression="CallExpression",Bo.MemberExpression="MemberExpression",Bo.Identifier="Identifier",Bo.Literal="Literal",Bo.ArrayExpression="ArrayExpression",Bo.Property="Property",Bo.ObjectExpression="ObjectExpression",Bo.ThisExpression="ThisExpression",Bo.LocalsExpression="LocalsExpression",Bo.NGValueParameter="NGValueParameter",Bo.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:Bo.Program,body:t}},expressionStatement:function(){return{type:Bo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t=this.expression();this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();if(this.expect("=")){if(!gn(t))throw Ro("lval","Trying to assign a value to a non l-value");t={type:Bo.AssignmentExpression,left:t,right:this.assignment(),operator:"="}}return t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:Bo.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:Bo.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:Bo.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:Bo.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:Bo.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary();
},primary:function Is(){var Is;this.expect("(")?(Is=this.filterChain(),this.consume(")")):this.expect("[")?Is=this.arrayDeclaration():this.expect("{")?Is=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?Is=B(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?Is={type:Bo.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?Is=this.identifier():this.peek().constant?Is=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(Is={type:Bo.CallExpression,callee:Is,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(Is={type:Bo.MemberExpression,object:Is,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?Is={type:Bo.MemberExpression,object:Is,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return Is},filter:function(t){for(var e=[t],n={type:Bo.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.filterChain());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:Bo.Identifier,name:t.text}},constant:function(){return{type:Bo.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Bo.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:Bo.Property,kind:"init"},this.peek().constant?(t.key=this.constant(),t.computed=!1,this.consume(":"),t.value=this.expression()):this.peek().identifier?(t.key=this.identifier(),t.computed=!1,this.peek(":")?(this.consume(":"),t.value=this.expression()):t.value=t.key):this.peek("[")?(this.consume("["),t.key=this.expression(),this.consume("]"),t.computed=!0,this.consume(":"),t.value=this.expression()):this.throwError("invalid key",this.peek()),e.push(t)}while(this.expect(","));return this.consume("}"),{type:Bo.ObjectExpression,properties:e}},throwError:function(t,e){throw Ro("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw Ro("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw Ro("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{"this":{type:Bo.ThisExpression},$locals:{type:Bo.LocalsExpression}}};var Ho=1,zo=2;xn.prototype={compile:function(t){var e=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},vn(t,e.$filter);var n,r="";if(this.stage="assign",n=yn(t)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var a=mn(t.body);e.stage="inputs",o(a,function(t,n){var r="fn"+n;e.state[r]={vars:[],body:[],own:{}},e.state.computing=r;var i=e.nextId();e.recurse(t,i),e.return_(i),e.state.inputs.push({name:r,isPure:t.isPure}),t.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(t);var s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",u=new Function("$filter","getStringValue","ifDefined","plus",s)(this.$filter,fn,hn,pn);return this.state=this.stage=void 0,u},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e.name+"="+n.generateFunction(e.name,"s")),e.isPure&&t.push(e.name,".isPure="+JSON.stringify(e.isPure)+";")}),e.length&&t.push("fn.inputs=["+e.map(function(t){return t.name}).join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,r,i,a){var s,u,c,l,f,h=this;if(r=r||$,!a&&b(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,r,i,!0));switch(t.type){case Bo.Program:o(t.body,function(e,n){h.recurse(e.expression,void 0,void 0,function(t){u=t}),n!==t.body.length-1?h.current().body.push(u,";"):h.return_(u)});break;case Bo.Literal:l=this.escape(t.value),this.assign(e,l),r(e||l);break;case Bo.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){u=t}),l=t.operator+"("+this.ifDefined(u,0)+")",this.assign(e,l),r(l);break;case Bo.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){s=t}),this.recurse(t.right,void 0,void 0,function(t){u=t}),l="+"===t.operator?this.plus(s,u):"-"===t.operator?this.ifDefined(s,0)+t.operator+this.ifDefined(u,0):"("+s+")"+t.operator+"("+u+")",this.assign(e,l),r(l);break;case Bo.LogicalExpression:e=e||this.nextId(),h.recurse(t.left,e),h.if_("&&"===t.operator?e:h.not(e),h.lazyRecurse(t.right,e)),r(e);break;case Bo.ConditionalExpression:e=e||this.nextId(),h.recurse(t.test,e),h.if_(e,h.lazyRecurse(t.alternate,e),h.lazyRecurse(t.consequent,e)),r(e);break;case Bo.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",t.name)),function(){h.if_("inputs"===h.stage||"s",function(){i&&1!==i&&h.if_(h.isNull(h.nonComputedMember("s",t.name)),h.lazyAssign(h.nonComputedMember("s",t.name),"{}")),h.assign(e,h.nonComputedMember("s",t.name))})},e&&h.lazyAssign(e,h.nonComputedMember("l",t.name))),r(e);break;case Bo.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),h.recurse(t.object,s,void 0,function(){h.if_(h.notNull(s),function(){t.computed?(u=h.nextId(),h.recurse(t.property,u),h.getStringValue(u),i&&1!==i&&h.if_(h.not(h.computedMember(s,u)),h.lazyAssign(h.computedMember(s,u),"{}")),l=h.computedMember(s,u),h.assign(e,l),n&&(n.computed=!0,n.name=u)):(i&&1!==i&&h.if_(h.isNull(h.nonComputedMember(s,t.property.name)),h.lazyAssign(h.nonComputedMember(s,t.property.name),"{}")),l=h.nonComputedMember(s,t.property.name),h.assign(e,l),n&&(n.computed=!1,n.name=t.property.name))},function(){h.assign(e,"undefined")}),r(e)},!!i);break;case Bo.CallExpression:e=e||this.nextId(),t.filter?(u=h.filter(t.callee.name),c=[],o(t.arguments,function(t){var e=h.nextId();h.recurse(t,e),c.push(e)}),l=u+"("+c.join(",")+")",h.assign(e,l),r(e)):(u=h.nextId(),s={},c=[],h.recurse(t.callee,u,s,function(){h.if_(h.notNull(u),function(){o(t.arguments,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l=s.name?h.member(s.context,s.name,s.computed)+"("+c.join(",")+")":u+"("+c.join(",")+")",h.assign(e,l)},function(){h.assign(e,"undefined")}),r(e)}));break;case Bo.AssignmentExpression:u=this.nextId(),s={},this.recurse(t.left,void 0,s,function(){h.if_(h.notNull(s.context),function(){h.recurse(t.right,u),l=h.member(s.context,s.name,s.computed)+t.operator+u,h.assign(e,l),r(e||l)})},1);break;case Bo.ArrayExpression:c=[],o(t.elements,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l="["+c.join(",")+"]",this.assign(e,l),r(e||l);break;case Bo.ObjectExpression:c=[],f=!1,o(t.properties,function(t){t.computed&&(f=!0)}),f?(e=e||this.nextId(),this.assign(e,"{}"),o(t.properties,function(t){t.computed?(s=h.nextId(),h.recurse(t.key,s)):s=t.key.type===Bo.Identifier?t.key.name:""+t.key.value,u=h.nextId(),h.recurse(t.value,u),h.assign(h.member(e,s,t.computed),u)})):(o(t.properties,function(e){h.recurse(e.value,t.constant?void 0:h.nextId(),void 0,function(t){c.push(h.escape(e.key.type===Bo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),l="{"+c.join(",")+"}",this.assign(e,l)),r(e||l);break;case Bo.ThisExpression:this.assign(e,"s"),r(e||"s");break;case Bo.LocalsExpression:this.assign(e,"l"),r(e||"l");break;case Bo.NGValueParameter:this.assign(e,"v"),r(e||"v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){if(t)return this.current().body.push(t,"=",e,";"),t},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},isNull:function(t){return t+"==null"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){var n=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/,r=/[^$_a-zA-Z0-9]/g;return n.test(e)?t+"."+e:t+'["'+e.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(C(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(E(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw Ro("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},Cn.prototype={compile:function(t){var e=this;vn(t,e.$filter);var n,r;(n=yn(t))&&(r=this.recurse(n));var i,a=mn(t.body);a&&(i=[],o(a,function(t,n){var r=e.recurse(t);r.isPure=t.isPure,t.input=r,i.push(r),t.watchId=n}));var s=[];o(t.body,function(t){s.push(e.recurse(t.expression))});var u=0===t.body.length?$:1===t.body.length?s[0]:function(t,e){var n;return o(s,function(r){n=r(t,e)}),n};return r&&(u.assign=function(t,e,n){return r(t,n,e)}),i&&(u.inputs=i),u},recurse:function(t,e,n){var r,i,a,s=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case Bo.Literal:return this.value(t.value,e);case Bo.UnaryExpression:return i=this.recurse(t.argument),this["unary"+t.operator](i,e);case Bo.BinaryExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case Bo.LogicalExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case Bo.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case Bo.Identifier:return s.identifier(t.name,e,n);case Bo.MemberExpression:return r=this.recurse(t.object,!1,!!n),t.computed||(i=t.property.name),t.computed&&(i=this.recurse(t.property)),t.computed?this.computedMember(r,i,e,n):this.nonComputedMember(r,i,e,n);case Bo.CallExpression:return a=[],o(t.arguments,function(t){a.push(s.recurse(t))}),t.filter&&(i=this.$filter(t.callee.name)),t.filter||(i=this.recurse(t.callee,!0)),t.filter?function(t,n,r,o){for(var s=[],u=0;u<a.length;++u)s.push(a[u](t,n,r,o));var c=i.apply(void 0,s,o);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,o){var s,u=i(t,n,r,o);if(null!=u.value){for(var c=[],l=0;l<a.length;++l)c.push(a[l](t,n,r,o));s=u.value.apply(u.context,c)}return e?{value:s}:s};case Bo.AssignmentExpression:return r=this.recurse(t.left,!0,1),i=this.recurse(t.right),function(t,n,o,a){var s=r(t,n,o,a),u=i(t,n,o,a);return s.context[s.name]=u,e?{value:u}:u};case Bo.ArrayExpression:return a=[],o(t.elements,function(t){a.push(s.recurse(t))}),function(t,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](t,n,r,i));return e?{value:o}:o};case Bo.ObjectExpression:return a=[],o(t.properties,function(t){t.computed?a.push({key:s.recurse(t.key),computed:!0,value:s.recurse(t.value)}):a.push({key:t.key.type===Bo.Identifier?t.key.name:""+t.key.value,computed:!1,value:s.recurse(t.value)})}),function(t,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(t,n,r,i)]=a[s].value(t,n,r,i):o[a[s].key]=a[s].value(t,n,r,i);return e?{value:o}:o};case Bo.ThisExpression:return function(t){return e?{value:t}:t};case Bo.LocalsExpression:return function(t,n){return e?{value:n}:n};case Bo.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?-a:-0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=pn(s,u);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=(b(s)?s:0)-(b(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n){return function(r,i,o,a){var s=i&&t in i?i:r;n&&1!==n&&s&&null==s[t]&&(s[t]={});var u=s?s[t]:void 0;return e?{context:s,name:t,value:u}:u}},computedMember:function(t,e,n,r){return function(i,o,a,s){var u,c,l=t(i,o,a,s);return null!=l&&(u=e(i,o,a,s),u=fn(u),r&&1!==r&&l&&!l[u]&&(l[u]={}),c=l[u]),n?{context:l,name:u,value:c}:c}},nonComputedMember:function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s);r&&1!==r&&u&&null==u[e]&&(u[e]={});var c=null!=u?u[e]:void 0;return n?{context:u,name:e,value:c}:c}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}},En.prototype={constructor:En,parse:function(t){var e=this.ast.ast(t),n=this.astCompiler.compile(e);return n.literal=bn(e),n.constant=wn(e),n}};var Wo=r("$sce"),Go={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Ko=/_([a-z])/g,Jo=r("$compile"),Zo=t.document.createElement("a"),Yo=zn(t.location.href);Kn.$inject=["$document"],Zn.$inject=["$provide"];var Qo=22,Xo=".",ta="0";er.$inject=["$locale"],nr.$inject=["$locale"];var ea={yyyy:sr("FullYear",4,0,!1,!0),yy:sr("FullYear",2,0,!0,!0),y:sr("FullYear",1,0,!1,!0),MMMM:ur("Month"),MMM:ur("Month",!0),MM:sr("Month",2,1),M:sr("Month",1,1),LLLL:ur("Month",!1,!0),dd:sr("Date",2),d:sr("Date",1),HH:sr("Hours",2),H:sr("Hours",1),hh:sr("Hours",2,-12),h:sr("Hours",1,-12),mm:sr("Minutes",2),m:sr("Minutes",1),ss:sr("Seconds",2),s:sr("Seconds",1),sss:sr("Milliseconds",3),EEEE:ur("Day"),EEE:ur("Day",!0),a:pr,Z:cr,ww:hr(2),w:hr(1),G:dr,GG:dr,GGG:dr,GGGG:$r},na=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,ra=/^-?\d+$/;vr.$inject=["$locale"];var ia=m(ni),oa=m(ri);br.$inject=["$parse"];var aa=m({restrict:"E",compile:function(t,e){if(!e.href&&!e.xlinkHref)return function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===pi.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),sa={};o(Zi,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!==t){var r=Se("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),sa[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Qi,function(t,e){sa[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(Xr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=Se("ng-"+t);sa[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===pi.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){return e?(i.$set(a,e),void(ai&&o&&r.prop(o,i[a]))):void("href"===t&&i.$set(a,null))})}}}});var ua={$addControl:$,$$renameControl:xr,$removeControl:$,$setValidity:$,$setDirty:$,$setPristine:$,$setSubmitted:$},ca="ng-pending",la="ng-submitted";Cr.$inject=["$element","$attrs","$scope","$animate","$interpolate"],Cr.prototype={$rollbackViewValue:function(){o(this.$$controls,function(t){t.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(t){t.$commitViewValue()})},$addControl:function(t){mt(t.$name,"input"),this.$$controls.push(t),t.$name&&(this[t.$name]=t),t.$$parentForm=this},$$renameControl:function(t,e){var n=t.$name;this[n]===t&&delete this[n],this[e]=t,t.$name=e},$removeControl:function(t){t.$name&&this[t.$name]===t&&delete this[t.$name],o(this.$pending,function(e,n){this.$setValidity(n,null,t)},this),o(this.$error,function(e,n){this.$setValidity(n,null,t)},this),o(this.$$success,function(e,n){this.$setValidity(n,null,t)},this),F(this.$$controls,t),t.$$parentForm=ua},$setDirty:function(){this.$$animate.removeClass(this.$$element,Ga),this.$$animate.addClass(this.$$element,Ka),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Ga,Ka+" "+la),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(t){t.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(t){t.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,la),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},Sr({clazz:Cr,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);i===-1&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(F(r,n),0===r.length&&delete t[e])}});var fa=function(t){return["$timeout","$parse",function(e,n){function r(t){return""===t?n('this[""]').assign:n(t).assign||$}var i={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:Cr,compile:function(n,i){n.addClass(Ga).addClass(za);var o=i.name?"name":!(!t||!i.ngForm)&&"ngForm";return{pre:function(t,n,i,a){var s=a[0];if(!("action"in i)){var u=function(e){t.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),e.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){e(function(){n[0].removeEventListener("submit",u)},0,!1)})}var c=a[1]||s.$$parentForm;c.$addControl(s);var l=o?r(s.$name):$;o&&(l(t,s),i.$observe(o,function(e){s.$name!==e&&(l(t,void 0),s.$$parentForm.$$renameControl(s,e),(l=r(s.$name))(t,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(t,void 0),f(s,ua)})}}}};return i}]},ha=fa(),pa=fa(!0),da=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,$a=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,va=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,ma=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,ga=/^(\d{4,})-(\d{2})-(\d{2})$/,ya=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ba=/^(\d{4,})-W(\d\d)$/,wa=/^(\d{4,})-(\d\d)$/,xa=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ca="keydown wheel mousedown",Ea=bt();o("date,datetime-local,month,time,week".split(","),function(t){Ea[t]=!0});var Sa={text:Or,date:Nr("date",ga,Tr(ga,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Nr("datetimelocal",ya,Tr(ya,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:Nr("time",xa,Tr(xa,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Nr("week",ba,Vr,"yyyy-Www"),month:Nr("month",wa,Tr(wa,["yyyy","MM"]),"yyyy-MM"),number:Ur,url:qr,email:Fr,radio:Br,range:Lr,checkbox:zr,hidden:$,button:$,submit:$,reset:$,file:$},ka=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Sa[ni(a.type)]||Sa.text)(i,o,a,s[0],e,t,n,r)}}}}],Aa=/^(true|false|\d+)$/,Oa=function(){function t(t,e,n){var r=b(n)?n:9===ai?"":null;t.prop("value",r),e.$set("value",n)}return{restrict:"A",priority:100,compile:function(e,n){return Aa.test(n.ngValue)?function(e,n,r){var i=e.$eval(r.ngValue);t(n,r,i)}:function(e,n,r){e.$watch(r.ngValue,function(e){t(n,r,e)})}}}},Ma=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=wt(t)})}}}}],Va=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=y(t)?"":t})}}}}],Ta=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(e){return t.valueOf(e)});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){var n=o(e);r.html(t.getTrustedHtml(n)||"")})}}}}],Na=m({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),Ia=Wr("",!0),ja=Wr("Odd",0),_a=Wr("Even",1),Da=wr({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),Pa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Ra={},Ua={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=Se("ng-"+t);Ra[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e]);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};Ua[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var La=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=yt(s.clone),t.leave(c).done(function(t){t!==!1&&(c=null)}),s=null))})}}}],qa=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:vi.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,$=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).done(function(t){t!==!1&&(h=null)}),h=p,p=null)};r.$watch(o,function(o){var u=function(t){t===!1||!b(s)||s&&!r.$eval(s)||e()},h=++d;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&h===d){var e=r.$new();c.template=t;var s=l(e,function(t){$(),n.enter(t,null,i).done(u)});f=e,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h===d&&($(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):($(),c.template=null)})}}}}],Fa=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return pi.call(r[0]).match(/SVG/)?(r.empty(),void e(jt(o.template,t.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],Ba=wr({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Ha=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?wi(i):i,u=function(t){if(!y(t)){var e=[];return t&&o(t.split(s),function(t){t&&e.push(a?wi(t):t)}),e}};r.$parsers.push(u),r.$formatters.push(function(t){if(yi(t))return t.join(i)}),r.$isEmpty=function(t){return!t||!t.length}}}},za="ng-valid",Wa="ng-invalid",Ga="ng-pristine",Ka="ng-dirty",Ja="ng-untouched",Za="ng-touched",Ya="ng-empty",Qa="ng-not-empty",Xa=r("ngModel");Gr.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Gr.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var t=this.$$parse(this.$$attr.ngModel+"()"),e=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(e){var n=this.$$parsedNgModel(e);return A(n)&&(n=t(e)),n},this.$$ngModelSet=function(t,n){A(this.$$parsedNgModel(t))?e(t,{$$$p:n}):this.$$parsedNgModelAssign(t,n)}}else if(!this.$$parsedNgModel.assign)throw Xa("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,et(this.$$element))},$render:$,$isEmpty:function(t){return y(t)||""===t||null===t||t!==t},$$updateEmptyClasses:function(t){this.$isEmpty(t)?(this.$$animate.removeClass(this.$$element,Qa),this.$$animate.addClass(this.$$element,Ya)):(this.$$animate.removeClass(this.$$element,Ya),this.$$animate.addClass(this.$$element,Qa))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Ka),this.$$animate.addClass(this.$$element,Ga)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Ga),this.$$animate.addClass(this.$$element,Ka),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,Ja,Za)},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,Za,Ja)},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!gi(this.$modelValue)){var t=this.$$lastCommittedViewValue,e=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(e,t,function(t){i||n===t||(o.$modelValue=t?e:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(t,e,n){function r(){var t=l.$$parserName||"parse";return y(l.$$parserValid)?(s(t,null),!0):(l.$$parserValid||(o(l.$validators,function(t,e){s(e,null)}),o(l.$asyncValidators,function(t,e){s(e,null)})),s(t,l.$$parserValid),l.$$parserValid)}function i(){var n=!0;return o(l.$validators,function(r,i){var o=Boolean(r(t,e));n=n&&o,s(i,o)}),!!n||(o(l.$asyncValidators,function(t,e){s(e,null)}),!1)}function a(){var n=[],r=!0;o(l.$asyncValidators,function(i,o){var a=i(t,e);if(!_(a))throw Xa("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){r=!1,s(o,!1)}))}),n.length?l.$$q.all(n).then(function(){u(r)},$):u(!0)}function s(t,e){c===l.$$currentValidationRunId&&l.$setValidity(t,e)}function u(t){c===l.$$currentValidationRunId&&n(t)}this.$$currentValidationRunId++;var c=this.$$currentValidationRunId,l=this;return r()&&i()?void a():void u(!1)},$commitViewValue:function(){var t=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==t||""===t&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(t),this.$$lastCommittedViewValue=t,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){function t(){r.$modelValue!==o&&r.$$writeModelToScope()}var e=this.$$lastCommittedViewValue,n=e,r=this;if(this.$$parserValid=!y(n)||void 0,this.$$parserValid)for(var i=0;i<this.$parsers.length;i++)if(n=this.$parsers[i](n),y(n)){this.$$parserValid=!1;break}gi(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var o=this.$modelValue,a=this.$options.getOption("allowInvalid");this.$$rawModelValue=n,a&&(this.$modelValue=n,t()),this.$$runValidators(n,this.$$lastCommittedViewValue,function(e){a||(r.$modelValue=e?n:void 0,t())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(t){try{t()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(t,e){this.$viewValue=t,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(e)},$$debounceViewValueCommit:function(t){var e=this.$options.getOption("debounce");E(e[t])?e=e[t]:E(e["default"])&&(e=e["default"]),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;e>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},e):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(t){this.$options=this.$options.createChild(t)}},Sr({clazz:Gr,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]}});var ts,es=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Gr,priority:1,compile:function(e){return e.addClass(Ga).addClass(Ja).addClass(za),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$options.getOption("updateOn")&&n.on(a.$options.getOption("updateOn"),function(t){a.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(){a.$touched||(t.$$phase?e.$evalAsync(o):e.$apply(o))})}}}}}],ns=/(\s+|^)default(\s+|$)/;Jr.prototype={getOption:function(t){return this.$$options[t]},createChild:function(t){var e=!1;return t=f({},t),o(t,function(n,r){"$inherit"===n?"*"===r?e=!0:(t[r]=this.$$options[r],"updateOn"===r&&(t.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(t.updateOnDefault=!1,t[r]=wi(n.replace(ns,function(){
return t.updateOnDefault=!0," "})))},this),e&&(delete t["*"],Zr(t,this.$$options)),Zr(t,ts.$$options),new Jr(t)}},ts=new Jr({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var rs=function(){function t(t,e){this.$$attrs=t,this.$$scope=e}return t.$inject=["$attrs","$scope"],t.prototype={$onInit:function(){var t=this.parentCtrl?this.parentCtrl.$options:ts,e=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=t.createChild(e)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:t}},is=wr({terminal:!0,priority:1e3}),os=r("ngOptions"),as=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ss=["$compile","$document","$parse",function(e,n,r){function a(t,e,n){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var s=t.match(as);if(!s)throw os("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,et(e));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],h=r(s[2]?s[1]:u),p=l&&r(l),d=p||h,$=f&&r(f),v=f?function(t,e){return $(n,e)}:function(t){return ae(t)},m=function(t,e){return v(t,C(t,e))},g=r(s[2]||s[1]),y=r(s[3]||""),b=r(s[4]||""),w=r(s[8]),x={},C=c?function(t,e){return x[c]=e,x[u]=t,x}:function(t){return x[u]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:r(w,function(t){var e=[];t=t||[];for(var r=a(t),i=r.length,o=0;o<i;o++){var u=t===r?o:r[o],c=t[u],l=C(c,u),f=v(c,l);if(e.push(f),s[2]||s[1]){var h=g(n,l);e.push(h)}if(s[4]){var p=b(n,l);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},r=w(n)||[],i=a(r),s=i.length,u=0;u<s;u++){var c=r===i?u:i[u],l=r[c],h=C(l,c),p=d(n,h),$=v(p,h),x=g(n,h),E=y(n,h),S=b(n,h),k=new o($,p,x,E,S);t.push(k),e[$]=k}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){return f?B(t.viewValue):t.viewValue}}}}}function s(t,r,i,s){function l(t,e){var n=u.cloneNode(!1);e.appendChild(n),h(t,n)}function f(t){var e=C.getOptionFromViewValue(t),n=e&&e.element;return n&&!n.selected&&(n.selected=!0),e}function h(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),e.value=t.selectValue}function p(){var t=C&&d.readValue();if(C)for(var e=C.items.length-1;e>=0;e--){var n=C.items[e];Yt(b(n.group)?n.element.parentNode:n.element)}C=E.getOptions();var i={};if(C.items.forEach(function(t){var e;b(t.group)?(e=i[t.group],e||(e=c.cloneNode(!1),S.appendChild(e),e.label=null===t.group?"null":t.group,i[t.group]=e),l(t,e)):l(t,S)}),r[0].appendChild(S),$.$render(),!$.$isEmpty(t)){var o=d.readValue(),a=E.trackBy||v;(a?z(t,o):t===o)||($.$setViewValue(o),$.$render())}}for(var d=s[0],$=s[1],v=i.multiple,m=0,g=r.children(),y=g.length;m<y;m++)if(""===g[m].value){d.hasEmptyOption=!0,d.emptyOption=g.eq(m);break}r.empty();var w=!!d.emptyOption,x=si(u.cloneNode(!1));x.val("?");var C,E=a(i.ngOptions,r,t),S=n[0].createDocumentFragment();d.generateUnknownOptionValue=function(t){return"?"},v?(d.writeValue=function(t){if(C){var e=t&&t.map(f)||[];C.items.forEach(function(t){t.element.selected&&!q(e,t)&&(t.element.selected=!1)})}},d.readValue=function(){var t=r.val()||[],e=[];return o(t,function(t){var n=C.selectValueMap[t];n&&!n.disabled&&e.push(C.getViewValueFromOption(n))}),e},E.trackBy&&t.$watchCollection(function(){if(yi($.$viewValue))return $.$viewValue.map(function(t){return E.getTrackByValue(t)})},function(){$.$render()})):(d.writeValue=function(t){if(C){var e=r[0].options[r[0].selectedIndex],n=C.getOptionFromViewValue(t);e&&e.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(d.removeUnknownOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):d.selectUnknownOrEmptyOption(t)}},d.readValue=function(){var t=C.selectValueMap[r.val()];return t&&!t.disabled?(d.unselectEmptyOption(),d.removeUnknownOption(),C.getViewValueFromOption(t)):null},E.trackBy&&t.$watch(function(){return E.getTrackByValue($.$viewValue)},function(){$.$render()})),w&&(e(d.emptyOption)(t),r.prepend(d.emptyOption),d.emptyOption[0].nodeType===Ii?(d.hasEmptyOption=!1,d.registerOption=function(t,e){""===e.val()&&(d.hasEmptyOption=!0,d.emptyOption=e,d.emptyOption.removeClass("ng-scope"),$.$render(),e.on("$destroy",function(){var t=d.$isEmptyOptionSelected();d.hasEmptyOption=!1,d.emptyOption=void 0,t&&$.$render()}))}):d.emptyOption.removeClass("ng-scope")),t.$watchCollection(E.getWatchables,p)}var u=t.document.createElement("option"),c=t.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=$},post:s}}}],us=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},v={},m=e.startSymbol(),g=e.endSymbol(),b=m+f+"-"+p+g,w=vi.noop;o(u,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+ni(n[2]);d[r]=s.attr(u.$attr[e])}}),o(d,function(t,n){v[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=gi(r);if(i||r in d||(r=t.pluralCat(r-p)),!(r===l||i&&gi(l))){w();var o=v[r];y(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=$,c()):w=a.$watch(o,c),l=r}})}}}],cs=["$parse","$animate","$compile",function(t,e,n){var a="$$NG_REMOVED",s=r("ngRepeat"),u=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))},c=function(t){return t.clone[0]},l=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,f){var h=f.ngRepeat,p=n.$$createComment("end ngRepeat",h),d=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!d)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",h);var $=d[1],v=d[2],m=d[3],g=d[4];if(d=$.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/),!d)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",$);var y=d[3]||d[1],b=d[2];if(m&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(m)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(m)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",m);var w,x,C,E,S={$id:ae};return g?w=t(g):(C=function(t,e){return ae(e)},E=function(t){return t}),function(t,n,r,f,d){w&&(x=function(e,n,r){return b&&(S[b]=e),S[y]=n,S.$index=r,w(t,S)});var $=bt();t.$watchCollection(v,function(r){var f,v,g,w,S,k,A,O,M,V,T,N,I=n[0],j=bt();if(m&&(t[m]=r),i(r))M=r,O=x||C;else{O=x||E,M=[];for(var _ in r)ei.call(r,_)&&"$"!==_.charAt(0)&&M.push(_)}for(w=M.length,T=new Array(w),f=0;f<w;f++)if(S=r===M?f:M[f],k=r[S],A=O(S,k,f),$[A])V=$[A],delete $[A],j[A]=V,T[f]=V;else{if(j[A])throw o(T,function(t){t&&t.scope&&($[t.id]=t)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",h,A,k);T[f]={id:A,scope:void 0,clone:void 0},j[A]=!0}for(var D in $){if(V=$[D],N=yt(V.clone),e.leave(N),N[0].parentNode)for(f=0,v=N.length;f<v;f++)N[f][a]=!0;V.scope.$destroy()}for(f=0;f<w;f++)if(S=r===M?f:M[f],k=r[S],V=T[f],V.scope){g=I;do g=g.nextSibling;while(g&&g[a]);c(V)!==g&&e.move(yt(V.clone),null,I),I=l(V),u(V.scope,f,y,k,b,S,w)}else d(function(t,n){V.scope=n;var r=p.cloneNode(!1);t[t.length++]=r,e.enter(t,null,I),I=r,V.clone=t,j[V.id]=V,u(V.scope,f,y,k,b,S,w)});$=j})}}}}],ls="ng-hide",fs="ng-hide-animate",hs=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,ls,{tempClasses:fs})})}}}],ps=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,ls,{tempClasses:fs})})}}}],ds=wr(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),$s=["$animate","$compile",function(t,e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],h=function(t,e){return function(n){n!==!1&&t.splice(e,1)}};n.$watch(s,function(n){for(var r,i;l.length;)t.cancel(l.pop());for(r=0,i=f.length;r<i;++r){var s=yt(c[r].clone);f[r].$destroy();var p=l[r]=t.leave(s);p.done(h(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],vs=wr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){var a=n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(t,e,n){return n[e-1]!==t});o(a,function(t){r.cases["!"+t]=r.cases["!"+t]||[],r.cases["!"+t].push({transclude:i,element:e})})}}),ms=wr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),gs=r("ngTransclude"),ys=["$compile",function(t){return{restrict:"EAC",terminal:!0,compile:function(e){var n=t(e.contents());return e.empty(),function(t,e,r,i,o){function a(t,n){t.length&&u(t)?e.append(t):(s(),n.$destroy())}function s(){n(t,function(t){e.append(t)})}function u(t){for(var e=0,n=t.length;e<n;e++){var r=t[e];if(r.nodeType!==Ni||r.nodeValue.trim())return!0}}if(!o)throw gs("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",et(e));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var c=r.ngTransclude||r.ngTranscludeSlot;o(a,null,c),c&&!o.isSlotFilled(c)&&s()}}}}],bs=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"===n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],ws={$setViewValue:$,$render:$},xs=["$element","$scope",function(e,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(t){u||(u=!0,n.$$postDigest(function(){n.$$destroyed||(u=!1,o.ngModelCtrl.$setViewValue(o.readValue()),t&&o.ngModelCtrl.$render())}))}var o=this,a=new to;o.selectValueMap={},o.ngModelCtrl=ws,o.multiple=!1,o.unknownOption=si(t.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),e.prepend(o.unknownOption),Yr(o.unknownOption,!0),e.val(n)},o.updateUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),Yr(o.unknownOption,!0),e.val(n)},o.generateUnknownOptionValue=function(t){return"? "+ae(t)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(e.val(""),Yr(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&Yr(o.emptyOption,!1)},n.$on("$destroy",function(){o.renderUnknownOption=$}),o.readValue=function(){var t=e.val(),n=t in o.selectValueMap?o.selectValueMap[t]:t;return o.hasOption(n)?n:null},o.writeValue=function(t){var n=e[0].options[e[0].selectedIndex];if(n&&Yr(si(n),!1),o.hasOption(t)){o.removeUnknownOption();var r=ae(t);e.val(r in o.selectValueMap?r:t);var i=e[0].options[e[0].selectedIndex];Yr(si(i),!0)}else o.selectUnknownOrEmptyOption(t)},o.addOption=function(t,e){if(e[0].nodeType!==Ii){mt(t,'"option value"'),""===t&&(o.hasEmptyOption=!0,o.emptyOption=e);var n=a.get(t)||0;a.set(t,n+1),r()}},o.removeOption=function(t){var e=a.get(t);e&&(1===e?(a["delete"](t),""===t&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(t,e-1))},o.hasOption=function(t){return!!a.get(t)},o.$hasEmptyOption=function(){return o.hasEmptyOption},o.$isUnknownOptionSelected=function(){return e[0].options[0]===o.unknownOption[0]},o.$isEmptyOptionSelected=function(){return o.hasEmptyOption&&e[0].options[e[0].selectedIndex]===o.emptyOption[0]},o.selectUnknownOrEmptyOption=function(t){null==t&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(t):o.renderUnknownOption(t)};var s=!1,u=!1;o.registerOption=function(t,e,n,a,s){if(n.$attr.ngValue){var u,c=NaN;n.$observe("value",function(t){var n,r=e.prop("selected");b(c)&&(o.removeOption(u),delete o.selectValueMap[c],n=!0),c=ae(t),u=t,o.selectValueMap[c]=t,o.addOption(t,e),e.attr("value",c),n&&r&&i()})}else a?n.$observe("value",function(t){o.readValue();var n,r=e.prop("selected");b(u)&&(o.removeOption(u),n=!0),u=t,o.addOption(t,e),n&&r&&i()}):s?t.$watch(s,function(t,r){n.$set("value",t);var a=e.prop("selected");r!==t&&o.removeOption(r),o.addOption(t,e),r&&a&&i()}):o.addOption(n.value,e);n.$observe("disabled",function(t){("true"===t||t&&e.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),e.on("$destroy",function(){var t=o.readValue(),e=n.value;o.removeOption(e),r(),(o.multiple&&t&&t.indexOf(e)!==-1||t===e)&&i(!0)})}}],Cs=function(){function t(t,e,n,r){var i=r[0],a=r[1];if(!a)return void(i.registerOption=$);if(i.ngModelCtrl=a,e.on("change",function(){i.removeUnknownOption(),t.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var t=[];return o(e.find("option"),function(e){if(e.selected&&!e.disabled){var n=e.value;t.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),t},i.writeValue=function(t){o(e.find("option"),function(e){var n=!!t&&(q(t,e.value)||q(t,i.selectValueMap[e.value])),r=e.selected;n!==r&&Yr(si(e),n)})};var s,u=NaN;t.$watch(function(){u!==a.$viewValue||z(s,a.$viewValue)||(s=Ct(a.$viewValue),a.$render()),u=a.$viewValue}),a.$isEmpty=function(t){return!t||0===t.length}}}function e(t,e,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:xs,priority:1,link:{pre:t,post:e}}},Es=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){var r,i;return b(n.ngValue)||(b(n.value)?r=t(n.value,!0):(i=t(e.text(),!0),i||n.$set("value",e.text()))),function(t,e,n){var o="$selectController",a=e.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(t,e,n,r,i)}}}}],Ss=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},ks=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,i){if(i){var o,a=n.ngPattern||n.pattern;n.$observe("pattern",function(t){if(C(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,et(e));o=t||void 0,i.$validate()}),i.$validators.pattern=function(t,e){return i.$isEmpty(e)||y(o)||o.test(e)}}}}},As=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=p(t);i=gi(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return i<0||r.$isEmpty(e)||e.length<=i}}}}},Os=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=p(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};return t.angular.bootstrap?void(t.console&&console.log("WARNING: Tried to load angular more than once.")):(dt(),kt(vi),vi.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return e==-1?0:t.length-e-1}function n(t,n){var r=n;void 0===r&&(r=Math.min(e(t),3));var i=Math.pow(10,r),o=(t*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,e){var i=0|t,o=n(t,e);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void si(function(){ct(t.document,lt)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvZnQvYW5ndWxhci5qcyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIndpbmRvdyIsImVycm9ySGFuZGxpbmdDb25maWciLCJjb25maWciLCJpc09iamVjdCIsImlzRGVmaW5lZCIsIm9iamVjdE1heERlcHRoIiwibWluRXJyQ29uZmlnIiwiaXNWYWxpZE9iamVjdE1heERlcHRoIiwiTmFOIiwibWF4RGVwdGgiLCJpc051bWJlciIsIm1pbkVyciIsIm1vZHVsZSIsIkVycm9yQ29uc3RydWN0b3IiLCJFcnJvciIsInBhcmFtUHJlZml4IiwiaSIsImNvZGUiLCJhcmd1bWVudHMiLCJ0ZW1wbGF0ZSIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZUFyZ3MiLCJzbGljZUFyZ3MiLCJtYXAiLCJhcmciLCJ0b0RlYnVnU3RyaW5nIiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZXgiLCJzbGljZSIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImlzQXJyYXlMaWtlIiwiaXNXaW5kb3ciLCJpc0FycmF5IiwiaXNTdHJpbmciLCJqcUxpdGUiLCJPYmplY3QiLCJBcnJheSIsIml0ZW0iLCJmb3JFYWNoIiwiY29udGV4dCIsImtleSIsImlzRnVuY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc1ByaW1pdGl2ZSIsImlzQmxhbmtPYmplY3QiLCJmb3JFYWNoU29ydGVkIiwia2V5cyIsInNvcnQiLCJyZXZlcnNlUGFyYW1zIiwiaXRlcmF0b3JGbiIsInZhbHVlIiwibmV4dFVpZCIsInVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJkZWVwIiwiaWkiLCJqIiwiamoiLCJzcmMiLCJpc0RhdGUiLCJEYXRlIiwidmFsdWVPZiIsImlzUmVnRXhwIiwiUmVnRXhwIiwibm9kZU5hbWUiLCJjbG9uZU5vZGUiLCJpc0VsZW1lbnQiLCJjbG9uZSIsImV4dGVuZCIsIm1lcmdlIiwidG9JbnQiLCJzdHIiLCJwYXJzZUludCIsImluaGVyaXQiLCJwYXJlbnQiLCJleHRyYSIsImNyZWF0ZSIsIm5vb3AiLCJpZGVudGl0eSIsIiQiLCJ2YWx1ZUZuIiwiaGFzQ3VzdG9tVG9TdHJpbmciLCJ0b1N0cmluZyIsImlzVW5kZWZpbmVkIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Vycm9yIiwidGFnIiwiaXNTY29wZSIsIiRldmFsQXN5bmMiLCIkd2F0Y2giLCJpc0ZpbGUiLCJpc0Zvcm1EYXRhIiwiaXNCbG9iIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlTGlrZSIsInRoZW4iLCJpc1R5cGVkQXJyYXkiLCJUWVBFRF9BUlJBWV9SRUdFWFAiLCJ0ZXN0IiwiaXNBcnJheUJ1ZmZlciIsIm5vZGUiLCJwcm9wIiwiYXR0ciIsImZpbmQiLCJtYWtlTWFwIiwiaXRlbXMiLCJzcGxpdCIsIm5vZGVOYW1lXyIsImVsZW1lbnQiLCJsb3dlcmNhc2UiLCJpbmNsdWRlcyIsImFycmF5IiwiaW5kZXhPZiIsImFycmF5UmVtb3ZlIiwic3BsaWNlIiwiY29weSIsInNvdXJjZSIsImRlc3RpbmF0aW9uIiwiY29weVJlY3Vyc2UiLCJwdXNoIiwiY29weUVsZW1lbnQiLCJzdGFja1NvdXJjZSIsInN0YWNrRGVzdCIsIm5nTWluRXJyIiwibmVlZHNSZWN1cnNlIiwiY29weVR5cGUiLCJ1bmRlZmluZWQiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiY29waWVkIiwiQXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsInNldCIsInJlIiwibGFzdEluZGV4IiwidHlwZSIsInNpbXBsZUNvbXBhcmUiLCJhIiwiYiIsImVxdWFscyIsIm8xIiwibzIiLCJrZXlTZXQiLCJ0MSIsInQyIiwiZ2V0VGltZSIsImNyZWF0ZU1hcCIsImNoYXJBdCIsImNvbmNhdCIsImFycmF5MSIsImFycmF5MiIsImFyZ3MiLCJzdGFydEluZGV4IiwiYmluZCIsInNlbGYiLCJmbiIsImN1cnJ5QXJncyIsImFwcGx5IiwidG9Kc29uUmVwbGFjZXIiLCJ2YWwiLCJkb2N1bWVudCIsInRvSnNvbiIsInByZXR0eSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tSnNvbiIsImpzb24iLCJwYXJzZSIsInRpbWV6b25lVG9PZmZzZXQiLCJ0aW1lem9uZSIsImZhbGxiYWNrIiwiQUxMX0NPTE9OUyIsInJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0IiwiaXNOdW1iZXJOYU4iLCJhZGREYXRlTWludXRlcyIsImRhdGUiLCJtaW51dGVzIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJjb252ZXJ0VGltZXpvbmVUb0xvY2FsIiwicmV2ZXJzZSIsImRhdGVUaW1lem9uZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwidGltZXpvbmVPZmZzZXQiLCJzdGFydGluZ1RhZyIsImVtcHR5IiwiZWxlbUh0bWwiLCJhcHBlbmQiLCJodG1sIiwibm9kZVR5cGUiLCJOT0RFX1RZUEVfVEVYVCIsImUiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJzcGxpdFBvaW50Iiwic3Vic3RyaW5nIiwidG9LZXlWYWx1ZSIsInBhcnRzIiwiYXJyYXlWYWx1ZSIsImVuY29kZVVyaVF1ZXJ5Iiwiam9pbiIsImVuY29kZVVyaVNlZ21lbnQiLCJwY3RFbmNvZGVTcGFjZXMiLCJnZXROZ0F0dHJpYnV0ZSIsIm5nQXR0ciIsIm5nQXR0clByZWZpeGVzIiwiZ2V0QXR0cmlidXRlIiwiYWxsb3dBdXRvQm9vdHN0cmFwIiwic2NyaXB0IiwiY3VycmVudFNjcmlwdCIsIkhUTUxTY3JpcHRFbGVtZW50IiwiU1ZHU2NyaXB0RWxlbWVudCIsImF0dHJpYnV0ZXMiLCJzcmNzIiwiZ2V0TmFtZWRJdGVtIiwiZXZlcnkiLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJsb2NhdGlvbiIsIm9yaWdpbiIsInByb3RvY29sIiwiYW5ndWxhckluaXQiLCJib290c3RyYXAiLCJhcHBFbGVtZW50IiwicHJlZml4IiwibmFtZSIsImhhc0F0dHJpYnV0ZSIsImNhbmRpZGF0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJpc0F1dG9Cb290c3RyYXBBbGxvd2VkIiwiY29uc29sZSIsImVycm9yIiwic3RyaWN0RGkiLCJtb2R1bGVzIiwiZGVmYXVsdENvbmZpZyIsImRvQm9vdHN0cmFwIiwiaW5qZWN0b3IiLCJ1bnNoaWZ0IiwiJHByb3ZpZGUiLCJkZWJ1Z0luZm9FbmFibGVkIiwiJGNvbXBpbGVQcm92aWRlciIsImNyZWF0ZUluamVjdG9yIiwiaW52b2tlIiwic2NvcGUiLCJjb21waWxlIiwiJGFwcGx5IiwiZGF0YSIsIk5HX0VOQUJMRV9ERUJVR19JTkZPIiwiTkdfREVGRVJfQk9PVFNUUkFQIiwiYW5ndWxhciIsInJlc3VtZUJvb3RzdHJhcCIsImV4dHJhTW9kdWxlcyIsInJlc3VtZURlZmVycmVkQm9vdHN0cmFwIiwicmVsb2FkV2l0aERlYnVnSW5mbyIsInJlbG9hZCIsImdldFRlc3RhYmlsaXR5Iiwicm9vdEVsZW1lbnQiLCJnZXQiLCJzbmFrZV9jYXNlIiwic2VwYXJhdG9yIiwiU05BS0VfQ0FTRV9SRUdFWFAiLCJsZXR0ZXIiLCJwb3MiLCJ0b0xvd2VyQ2FzZSIsImJpbmRKUXVlcnkiLCJvcmlnaW5hbENsZWFuRGF0YSIsImJpbmRKUXVlcnlGaXJlZCIsImpxTmFtZSIsImpxIiwialF1ZXJ5Iiwib24iLCJKUUxpdGVQcm90b3R5cGUiLCJpc29sYXRlU2NvcGUiLCJjb250cm9sbGVyIiwiaW5oZXJpdGVkRGF0YSIsImNsZWFuRGF0YSIsImVsZW1zIiwiZXZlbnRzIiwiZWxlbSIsIl9kYXRhIiwiJGRlc3Ryb3kiLCJ0cmlnZ2VySGFuZGxlciIsIkpRTGl0ZSIsImFzc2VydEFyZyIsInJlYXNvbiIsImFzc2VydEFyZ0ZuIiwiYWNjZXB0QXJyYXlBbm5vdGF0aW9uIiwiYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkiLCJnZXR0ZXIiLCJwYXRoIiwiYmluZEZuVG9TY29wZSIsImxhc3RJbnN0YW5jZSIsImxlbiIsImdldEJsb2NrTm9kZXMiLCJub2RlcyIsImJsb2NrTm9kZXMiLCJlbmROb2RlIiwibmV4dFNpYmxpbmciLCJzZXR1cE1vZHVsZUxvYWRlciIsImVuc3VyZSIsImZhY3RvcnkiLCIkaW5qZWN0b3JNaW5FcnIiLCIkJG1pbkVyciIsInJlcXVpcmVzIiwiY29uZmlnRm4iLCJfaW5mbyIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUiLCJyZWNpcGVOYW1lIiwiZmFjdG9yeUZ1bmN0aW9uIiwiJCRtb2R1bGVOYW1lIiwiY29uZmlnQmxvY2tzIiwicnVuQmxvY2tzIiwiX2ludm9rZVF1ZXVlIiwiX2NvbmZpZ0Jsb2NrcyIsIl9ydW5CbG9ja3MiLCJpbmZvIiwidGhpcyIsInNlcnZpY2UiLCJjb25zdGFudCIsImRlY29yYXRvciIsImFuaW1hdGlvbiIsImZpbHRlciIsImRpcmVjdGl2ZSIsImNvbXBvbmVudCIsInJ1biIsImJsb2NrIiwic2hhbGxvd0NvcHkiLCJzZXJpYWxpemVPYmplY3QiLCJzZWVuIiwicHVibGlzaEV4dGVybmFsQVBJIiwidmVyc2lvbiIsInVwcGVyY2FzZSIsImNhbGxiYWNrcyIsIiQkY291bnRlciIsIiQkY3NwIiwiY3NwIiwiJCRlbmNvZGVVcmlTZWdtZW50IiwiJCRlbmNvZGVVcmlRdWVyeSIsIiQkc3RyaW5naWZ5IiwiYW5ndWxhck1vZHVsZSIsIiQkc2FuaXRpemVVcmkiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCIkQ29tcGlsZVByb3ZpZGVyIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsImlucHV0IiwiaW5wdXREaXJlY3RpdmUiLCJ0ZXh0YXJlYSIsImZvcm0iLCJmb3JtRGlyZWN0aXZlIiwic2NyaXB0RGlyZWN0aXZlIiwic2VsZWN0Iiwic2VsZWN0RGlyZWN0aXZlIiwib3B0aW9uIiwib3B0aW9uRGlyZWN0aXZlIiwibmdCaW5kIiwibmdCaW5kRGlyZWN0aXZlIiwibmdCaW5kSHRtbCIsIm5nQmluZEh0bWxEaXJlY3RpdmUiLCJuZ0JpbmRUZW1wbGF0ZSIsIm5nQmluZFRlbXBsYXRlRGlyZWN0aXZlIiwibmdDbGFzcyIsIm5nQ2xhc3NEaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbiIsIm5nQ2xhc3NFdmVuRGlyZWN0aXZlIiwibmdDbGFzc09kZCIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0Nsb2FrIiwibmdDbG9ha0RpcmVjdGl2ZSIsIm5nQ29udHJvbGxlciIsIm5nQ29udHJvbGxlckRpcmVjdGl2ZSIsIm5nRm9ybSIsIm5nRm9ybURpcmVjdGl2ZSIsIm5nSGlkZSIsIm5nSGlkZURpcmVjdGl2ZSIsIm5nSWYiLCJuZ0lmRGlyZWN0aXZlIiwibmdJbmNsdWRlIiwibmdJbmNsdWRlRGlyZWN0aXZlIiwibmdJbml0IiwibmdJbml0RGlyZWN0aXZlIiwibmdOb25CaW5kYWJsZSIsIm5nTm9uQmluZGFibGVEaXJlY3RpdmUiLCJuZ1BsdXJhbGl6ZSIsIm5nUGx1cmFsaXplRGlyZWN0aXZlIiwibmdSZXBlYXQiLCJuZ1JlcGVhdERpcmVjdGl2ZSIsIm5nU2hvdyIsIm5nU2hvd0RpcmVjdGl2ZSIsIm5nU3R5bGUiLCJuZ1N0eWxlRGlyZWN0aXZlIiwibmdTd2l0Y2giLCJuZ1N3aXRjaERpcmVjdGl2ZSIsIm5nU3dpdGNoV2hlbiIsIm5nU3dpdGNoV2hlbkRpcmVjdGl2ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSIsIm5nT3B0aW9ucyIsIm5nT3B0aW9uc0RpcmVjdGl2ZSIsIm5nVHJhbnNjbHVkZSIsIm5nVHJhbnNjbHVkZURpcmVjdGl2ZSIsIm5nTW9kZWwiLCJuZ01vZGVsRGlyZWN0aXZlIiwibmdMaXN0IiwibmdMaXN0RGlyZWN0aXZlIiwibmdDaGFuZ2UiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsInBhdHRlcm4iLCJwYXR0ZXJuRGlyZWN0aXZlIiwibmdQYXR0ZXJuIiwicmVxdWlyZWQiLCJyZXF1aXJlZERpcmVjdGl2ZSIsIm5nUmVxdWlyZWQiLCJtaW5sZW5ndGgiLCJtaW5sZW5ndGhEaXJlY3RpdmUiLCJuZ01pbmxlbmd0aCIsIm1heGxlbmd0aCIsIm1heGxlbmd0aERpcmVjdGl2ZSIsIm5nTWF4bGVuZ3RoIiwibmdWYWx1ZSIsIm5nVmFsdWVEaXJlY3RpdmUiLCJuZ01vZGVsT3B0aW9ucyIsIm5nTW9kZWxPcHRpb25zRGlyZWN0aXZlIiwibmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUiLCJuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyIsIm5nRXZlbnREaXJlY3RpdmVzIiwiJGFuY2hvclNjcm9sbCIsIiRBbmNob3JTY3JvbGxQcm92aWRlciIsIiRhbmltYXRlIiwiJEFuaW1hdGVQcm92aWRlciIsIiRhbmltYXRlQ3NzIiwiJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIiLCIkJGFuaW1hdGVKcyIsIiQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyIiwiJCRhbmltYXRlUXVldWUiLCIkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciIsIiQkQW5pbWF0ZVJ1bm5lciIsIiQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlciIsIiQkYW5pbWF0ZUFzeW5jUnVuIiwiJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIiLCIkYnJvd3NlciIsIiRCcm93c2VyUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJGNvbnRyb2xsZXIiLCIkQ29udHJvbGxlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJERvY3VtZW50UHJvdmlkZXIiLCIkJGlzRG9jdW1lbnRIaWRkZW4iLCIkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlciIsIiRleGNlcHRpb25IYW5kbGVyIiwiJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsIiRmaWx0ZXIiLCIkRmlsdGVyUHJvdmlkZXIiLCIkJGZvcmNlUmVmbG93IiwiJCRGb3JjZVJlZmxvd1Byb3ZpZGVyIiwiJGludGVycG9sYXRlIiwiJEludGVycG9sYXRlUHJvdmlkZXIiLCIkaW50ZXJ2YWwiLCIkSW50ZXJ2YWxQcm92aWRlciIsIiRodHRwIiwiJEh0dHBQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVyIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlciIsIiRodHRwQmFja2VuZCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJHhockZhY3RvcnkiLCIkeGhyRmFjdG9yeVByb3ZpZGVyIiwiJGpzb25wQ2FsbGJhY2tzIiwiJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIiLCIkbG9jYXRpb24iLCIkTG9jYXRpb25Qcm92aWRlciIsIiRsb2ciLCIkTG9nUHJvdmlkZXIiLCIkcGFyc2UiLCIkUGFyc2VQcm92aWRlciIsIiRyb290U2NvcGUiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCIkcSIsIiRRUHJvdmlkZXIiLCIkJHEiLCIkJFFQcm92aWRlciIsIiRzY2UiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIiRzbmlmZmVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJHRpbWVvdXQiLCIkVGltZW91dFByb3ZpZGVyIiwiJHdpbmRvdyIsIiRXaW5kb3dQcm92aWRlciIsIiQkckFGIiwiJCRSQUZQcm92aWRlciIsIiQkanFMaXRlIiwiJCRqcUxpdGVQcm92aWRlciIsIiQkTWFwIiwiJCRNYXBQcm92aWRlciIsIiQkY29va2llUmVhZGVyIiwiJCRDb29raWVSZWFkZXJQcm92aWRlciIsImFuZ3VsYXJWZXJzaW9uIiwianFOZXh0SWQiLCJqcUlkIiwiY3NzS2ViYWJUb0NhbWVsIiwia2ViYWJUb0NhbWVsIiwiTVNfSEFDS19SRUdFWFAiLCJmbkNhbWVsQ2FzZVJlcGxhY2UiLCJhbGwiLCJ0b1VwcGVyQ2FzZSIsIkRBU0hfTE9XRVJDQVNFX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJOT0RFX1RZUEVfRE9DVU1FTlQiLCJqcUxpdGVIYXNEYXRhIiwianFDYWNoZSIsIm5nMzM5IiwianFMaXRlQnVpbGRGcmFnbWVudCIsInRtcCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiVEFHX05BTUVfUkVHRVhQIiwiZXhlYyIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsIlhIVE1MX1RBR19SRUdFWFAiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwianFMaXRlUGFyc2VIVE1MIiwicGFyc2VkIiwiU0lOR0xFX1RBR19SRUdFWFAiLCJqcUxpdGVXcmFwTm9kZSIsIndyYXBwZXIiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiYXJnSXNTdHJpbmciLCJ0cmltIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVSZWFkeSIsImpxTGl0ZUNsb25lIiwianFMaXRlRGVhbG9jIiwib25seURlc2NlbmRhbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImpxTGl0ZU9mZiIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiaGFuZGxlIiwicmVtb3ZlSGFuZGxlciIsImxpc3RlbmVyRm5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk1PVVNFX0VWRU5UX01BUCIsImpxTGl0ZVJlbW92ZURhdGEiLCJleHBhbmRvSWQiLCJjcmVhdGVJZk5lY2Vzc2FyeSIsImpxTGl0ZURhdGEiLCJpc1NpbXBsZVNldHRlciIsImlzU2ltcGxlR2V0dGVyIiwibWFzc0dldHRlciIsImpxTGl0ZUhhc0NsYXNzIiwic2VsZWN0b3IiLCJqcUxpdGVSZW1vdmVDbGFzcyIsImNzc0NsYXNzZXMiLCJzZXRBdHRyaWJ1dGUiLCJjc3NDbGFzcyIsImpxTGl0ZUFkZENsYXNzIiwiZXhpc3RpbmdDbGFzc2VzIiwicm9vdCIsImVsZW1lbnRzIiwianFMaXRlQ29udHJvbGxlciIsImpxTGl0ZUluaGVyaXRlZERhdGEiLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lcyIsIk5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCIsImhvc3QiLCJqcUxpdGVFbXB0eSIsInJlbW92ZUNoaWxkIiwianFMaXRlUmVtb3ZlIiwia2VlcERhdGEiLCJqcUxpdGVEb2N1bWVudExvYWRlZCIsImFjdGlvbiIsIndpbiIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0IiwidHJpZ2dlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRCb29sZWFuQXR0ck5hbWUiLCJib29sZWFuQXR0ciIsIkJPT0xFQU5fQVRUUiIsIkJPT0xFQU5fRUxFTUVOVFMiLCJnZXRBbGlhc2VkQXR0ck5hbWUiLCJBTElBU0VEX0FUVFIiLCJjcmVhdGVFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXIiLCJldmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEZucyIsImV2ZW50Rm5zTGVuZ3RoIiwiaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwib3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZXJXcmFwcGVyIiwic3BlY2lhbEhhbmRsZXJXcmFwcGVyIiwiZGVmYXVsdEhhbmRsZXJXcmFwcGVyIiwiaGFuZGxlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwidGFyZ2V0IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJqcUxpdGVDb250YWlucyIsIiRnZXQiLCJoYXNDbGFzcyIsImNsYXNzZXMiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzaEtleSIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJOZ01hcFNoaW0iLCJfa2V5cyIsIl92YWx1ZXMiLCJfbGFzdEtleSIsIl9sYXN0SW5kZXgiLCJzdHJpbmdpZnlGbiIsIkZ1bmN0aW9uIiwiZXh0cmFjdEFyZ3MiLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkFSUk9XX0FSRyIsIkZOX0FSR1MiLCJhbm9uRm4iLCJhbm5vdGF0ZSIsIiRpbmplY3QiLCJhcmdEZWNsIiwibGFzdCIsIkZOX0FSR19TUExJVCIsIkZOX0FSRyIsInVuZGVyc2NvcmUiLCJtb2R1bGVzVG9Mb2FkIiwic3VwcG9ydE9iamVjdCIsImRlbGVnYXRlIiwicHJvdmlkZXJfIiwicHJvdmlkZXJJbmplY3RvciIsImluc3RhbnRpYXRlIiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwicmVzdWx0IiwiaW5zdGFuY2VJbmplY3RvciIsImZhY3RvcnlGbiIsImVuZm9yY2UiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwic2VydmljZU5hbWUiLCJkZWNvckZuIiwib3JpZ1Byb3ZpZGVyIiwib3JpZyRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJsb2FkTW9kdWxlcyIsIm1vZHVsZUZuIiwicnVuSW52b2tlUXVldWUiLCJpbnZva2VBcmdzIiwibG9hZGVkTW9kdWxlcyIsInN0YWNrIiwiY3JlYXRlSW50ZXJuYWxJbmplY3RvciIsImNhY2hlIiwiZ2V0U2VydmljZSIsImNhbGxlciIsIklOU1RBTlRJQVRJTkciLCJlcnIiLCJzaGlmdCIsImluamVjdGlvbkFyZ3MiLCJsb2NhbHMiLCIkJGFubm90YXRlIiwiaXNDbGFzcyIsImZ1bmMiLCJtc2llIiwiJCRuZ0lzQ2xhc3MiLCJUeXBlIiwiY3RvciIsImhhcyIsIk5nTWFwIiwicHJvdG9JbnN0YW5jZUluamVjdG9yIiwiYXV0b1Njcm9sbGluZ0VuYWJsZWQiLCJkaXNhYmxlQXV0b1Njcm9sbGluZyIsImdldEZpcnN0QW5jaG9yIiwibGlzdCIsInNvbWUiLCJnZXRZT2Zmc2V0Iiwib2Zmc2V0Iiwic2Nyb2xsIiwieU9mZnNldCIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsImVsZW1Ub3AiLCJ0b3AiLCJzY3JvbGxCeSIsImhhc2giLCJlbG0iLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwibmV3VmFsIiwib2xkVmFsIiwibWVyZ2VDbGFzc2VzIiwiZXh0cmFjdEVsZW1lbnROb2RlIiwiRUxFTUVOVF9OT0RFIiwic3BsaXRDbGFzc2VzIiwia2xhc3MiLCJwcmVwYXJlQW5pbWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwiQnJvd3NlciIsImNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQiLCJvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MiLCJwb3AiLCJnZXRIYXNoIiwidXJsIiwic3Vic3RyIiwiY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UiLCJwZW5kaW5nTG9jYXRpb24iLCJmaXJlU3RhdGVPclVybENoYW5nZSIsImNhY2hlU3RhdGUiLCJjYWNoZWRTdGF0ZSIsImdldEN1cnJlbnRTdGF0ZSIsImxhc3RDYWNoZWRTdGF0ZSIsImxhc3RIaXN0b3J5U3RhdGUiLCJwcmV2TGFzdEhpc3RvcnlTdGF0ZSIsImxhc3RCcm93c2VyVXJsIiwidXJsQ2hhbmdlTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJoaXN0b3J5IiwiY2xlYXJUaW1lb3V0IiwicGVuZGluZ0RlZmVySWRzIiwiaXNNb2NrIiwiJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQiLCJub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzIiwiY2FsbGJhY2siLCJiYXNlRWxlbWVudCIsInN0YXRlIiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJ1cmxDaGFuZ2VJbml0Iiwib25VcmxDaGFuZ2UiLCIkJGFwcGxpY2F0aW9uRGVzdHJveWVkIiwib2ZmIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwiZGVmZXIiLCJkZWxheSIsInRpbWVvdXRJZCIsImNhbmNlbCIsImRlZmVySWQiLCJjYWNoZUZhY3RvcnkiLCJjYWNoZUlkIiwicmVmcmVzaCIsImVudHJ5IiwiZnJlc2hFbmQiLCJzdGFsZUVuZCIsIm4iLCJwIiwibmV4dEVudHJ5IiwicHJldkVudHJ5IiwiY2FjaGVzIiwic2l6ZSIsInN0YXRzIiwiaWQiLCJjYXBhY2l0eSIsIk51bWJlciIsIk1BWF9WQUxVRSIsImxydUhhc2giLCJwdXQiLCJscnVFbnRyeSIsInJlbW92ZSIsInJlbW92ZUFsbCIsImRlc3Ryb3kiLCJVTklOSVRJQUxJWkVEX1ZBTFVFIiwiJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIiwicGFyc2VJc29sYXRlQmluZGluZ3MiLCJkaXJlY3RpdmVOYW1lIiwiaXNDb250cm9sbGVyIiwiTE9DQUxfUkVHRVhQIiwiYmluZGluZ3MiLCJkZWZpbml0aW9uIiwic2NvcGVOYW1lIiwiYmluZGluZ0NhY2hlIiwiJGNvbXBpbGVNaW5FcnIiLCJtb2RlIiwiY29sbGVjdGlvbiIsIm9wdGlvbmFsIiwiYXR0ck5hbWUiLCJwYXJzZURpcmVjdGl2ZUJpbmRpbmdzIiwiYmluZFRvQ29udHJvbGxlciIsImFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZSIsImdldERpcmVjdGl2ZVJlcXVpcmUiLCJyZXF1aXJlIiwiUkVRVUlSRV9QUkVGSVhfUkVHRVhQIiwiZ2V0RGlyZWN0aXZlUmVzdHJpY3QiLCJyZXN0cmljdCIsImhhc0RpcmVjdGl2ZXMiLCJTdWZmaXgiLCJDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAiLCJDTEFTU19ESVJFQ1RJVkVfUkVHRVhQIiwiQUxMX09SX05PVEhJTkdfQVRUUlMiLCJFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJkaXJlY3RpdmVGYWN0b3J5IiwiZGlyZWN0aXZlcyIsInByaW9yaXR5IiwicmVnaXN0ZXJDb21wb25lbnQiLCJtYWtlSW5qZWN0YWJsZSIsInRFbGVtZW50IiwidEF0dHJzIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCJ0ZW1wbGF0ZVVybCIsImRkbyIsImNvbnRyb2xsZXJBcyIsImlkZW50aWZpZXJGb3JDb250cm9sbGVyIiwidHJhbnNjbHVkZSIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCIsInN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCIsIlRUTCIsIm9uQ2hhbmdlc1R0bCIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCIsImNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWciLCJjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkIiwiZmx1c2hPbkNoYW5nZXNRdWV1ZSIsIm9uQ2hhbmdlc1F1ZXVlIiwiZXJyb3JzIiwiQXR0cmlidXRlcyIsImF0dHJpYnV0ZXNUb0NvcHkiLCJsIiwiJGF0dHIiLCIkJGVsZW1lbnQiLCJzZXRTcGVjaWFsQXR0ciIsInNwZWNpYWxBdHRySG9sZGVyIiwiYXR0cmlidXRlIiwicmVtb3ZlTmFtZWRJdGVtIiwic2V0TmFtZWRJdGVtIiwic2FmZUFkZENsYXNzIiwiY2xhc3NOYW1lIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCJpbnN0YW5jZSIsIiQkYWRkU2NvcGVJbmZvIiwicGFyZW50RWxlbWVudCIsIm5vZGVMaXN0IiwiJHJvb3RFbGVtZW50Iiwibm9kZUxpbmtGbiIsImNoaWxkTGlua0ZuIiwiY2hpbGRTY29wZSIsImlkeCIsImNoaWxkQm91bmRUcmFuc2NsdWRlRm4iLCJzdGFibGVOb2RlTGlzdCIsIm5vZGVMaW5rRm5Gb3VuZCIsIm5vZGVMaXN0TGVuZ3RoIiwibGlua0ZucyIsInRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IiwiY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4iLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJhdHRycyIsImxpbmtGbkZvdW5kIiwibm90TGl2ZUxpc3QiLCJtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzIiwiY29sbGVjdERpcmVjdGl2ZXMiLCJhcHBseURpcmVjdGl2ZXNUb05vZGUiLCJ0ZXJtaW5hbCIsInNpYmxpbmciLCJub2RlVmFsdWUiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImJvdW5kU2xvdHMiLCIkJHNsb3RzIiwic2xvdE5hbWUiLCJhdHRyc01hcCIsImFkZERpcmVjdGl2ZSIsImRpcmVjdGl2ZU5vcm1hbGl6ZSIsIm5OYW1lIiwibmdBdHRyTmFtZSIsImlzTmdBdHRyIiwibkF0dHJzIiwiYXR0clN0YXJ0TmFtZSIsImF0dHJFbmROYW1lIiwiTkdfQVRUUl9CSU5ESU5HIiwiUFJFRklYX1JFR0VYUCIsIm11bHRpRWxlbWVudE1hdGNoIiwiTVVMVElfRUxFTUVOVF9ESVJfUkUiLCJkaXJlY3RpdmVJc011bHRpRWxlbWVudCIsImFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsImFuaW1WYWwiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGF0aW9uR2VuZXJhdG9yIiwiZWFnZXIiLCJjb21waWxlZCIsImNvbXBpbGVOb2RlIiwidGVtcGxhdGVBdHRycyIsImpxQ29sbGVjdGlvbiIsIm9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSIsInByZUxpbmtGbnMiLCJwb3N0TGlua0ZucyIsImFkZExpbmtGbnMiLCJwcmUiLCJwb3N0IiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJsaW5rTm9kZSIsImNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlIiwiY2xvbmVBdHRhY2hGbiIsImhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlIiwiZWxlbWVudENvbnRyb2xsZXJzIiwic2NvcGVUb0NoaWxkIiwic2xvdFRyYW5zY2x1ZGVGbiIsImNvbnRyb2xsZXJTY29wZSIsInNjb3BlQmluZGluZ0luZm8iLCJuZXdTY29wZURpcmVjdGl2ZSIsImlzU2xvdEZpbGxlZCIsImNvbnRyb2xsZXJEaXJlY3RpdmVzIiwic2V0dXBDb250cm9sbGVycyIsInRlbXBsYXRlRGlyZWN0aXZlIiwiJCRvcmlnaW5hbERpcmVjdGl2ZSIsIiQkaXNvbGF0ZUJpbmRpbmdzIiwiaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzIiwicmVtb3ZlV2F0Y2hlcyIsIiRvbiIsImNvbnRyb2xsZXJEaXJlY3RpdmUiLCIkJGJpbmRpbmdzIiwiYmluZGluZ0luZm8iLCJjb250cm9sbGVyUmVzdWx0IiwiZ2V0Q29udHJvbGxlcnMiLCJjb250cm9sbGVySW5zdGFuY2UiLCIkb25DaGFuZ2VzIiwiaW5pdGlhbENoYW5nZXMiLCIkb25Jbml0IiwiJGRvQ2hlY2siLCIkb25EZXN0cm95IiwiaW52b2tlTGlua0ZuIiwiJHBvc3RMaW5rIiwiJHRlbXBsYXRlIiwiZGlyZWN0aXZlVmFsdWUiLCJ0ZXJtaW5hbFByaW9yaXR5Iiwibm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUZW1wbGF0ZSIsIiRjb21waWxlTm9kZSIsInJlcGxhY2VEaXJlY3RpdmUiLCJjaGlsZFRyYW5zY2x1ZGVGbiIsImRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiIsIm1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IiLCIkJHN0YXJ0IiwiJCRlbmQiLCJhc3NlcnROb0R1cGxpY2F0ZSIsIiQkdGxiIiwiY2FuZGlkYXRlRGlyZWN0aXZlIiwic2Nhbm5pbmdJbmRleCIsIiQkY3JlYXRlQ29tbWVudCIsInJlcGxhY2VXaXRoIiwiJCRwYXJlbnROb2RlIiwic2xvdHMiLCJzbG90TWFwIiwiZmlsbGVkU2xvdHMiLCJlbGVtZW50U2VsZWN0b3IiLCJjb250ZW50cyIsImZpbGxlZCIsIiQkbmV3U2NvcGUiLCJkZW5vcm1hbGl6ZVRlbXBsYXRlIiwicmVtb3ZlQ29tbWVudHMiLCJ0ZW1wbGF0ZU5hbWVzcGFjZSIsIm5ld1RlbXBsYXRlQXR0cnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZXMiLCJ1bnByb2Nlc3NlZERpcmVjdGl2ZXMiLCJtYXJrRGlyZWN0aXZlU2NvcGUiLCJtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyIsImNvbXBpbGVUZW1wbGF0ZVVybCIsIk1hdGgiLCJtYXgiLCJpbmhlcml0VHlwZSIsImRhdGFOYW1lIiwicHJvcGVydHkiLCJjb250cm9sbGVyS2V5IiwiJHNjb3BlIiwiJHRyYW5zY2x1ZGUiLCJuZXdTY29wZSIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiaWdub3JlQ2hpbGRMaW5rRm4iLCJkaWZmIiwid2hhdCIsInByZXZpb3VzRGlyZWN0aXZlIiwid3JhcE1vZHVsZU5hbWVJZkRlZmluZWQiLCJtb2R1bGVOYW1lIiwidGV4dCIsImludGVycG9sYXRlRm4iLCJ0ZW1wbGF0ZU5vZGUiLCJ0ZW1wbGF0ZU5vZGVQYXJlbnQiLCJoYXNDb21waWxlUGFyZW50IiwiJCRhZGRCaW5kaW5nQ2xhc3MiLCIkJGFkZEJpbmRpbmdJbmZvIiwiZXhwcmVzc2lvbnMiLCJnZXRUcnVzdGVkQ29udGV4dCIsImF0dHJOb3JtYWxpemVkTmFtZSIsIkhUTUwiLCJSRVNPVVJDRV9VUkwiLCJ0cnVzdGVkQ29udGV4dCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsImFsbE9yTm90aGluZyIsIiQkb2JzZXJ2ZXJzIiwibmV3VmFsdWUiLCIkJGludGVyIiwiJCRzY29wZSIsIm9sZFZhbHVlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJoYXNEYXRhIiwiYW5ub3RhdGlvbiIsInN0cmljdEJpbmRpbmdzQ2hlY2siLCJyZWNvcmRDaGFuZ2VzIiwiY3VycmVudFZhbHVlIiwicHJldmlvdXNWYWx1ZSIsIiQkcG9zdERpZ2VzdCIsImNoYW5nZXMiLCJ0cmlnZ2VyT25DaGFuZ2VzSG9vayIsIlNpbXBsZUNoYW5nZSIsInJlbW92ZVdhdGNoQ29sbGVjdGlvbiIsImxhc3RWYWx1ZSIsInBhcmVudEdldCIsInBhcmVudFNldCIsImNvbXBhcmUiLCJyZW1vdmVXYXRjaCIsIiRvYnNlcnZlIiwiX1VOSU5JVElBTElaRURfVkFMVUUiLCJsaXRlcmFsIiwiYXNzaWduIiwicGFyZW50VmFsdWVXYXRjaCIsInBhcmVudFZhbHVlIiwiJHN0YXRlZnVsIiwiJHdhdGNoQ29sbGVjdGlvbiIsImRlZXBXYXRjaCIsImluaXRpYWxWYWx1ZSIsIlNJTVBMRV9BVFRSX05BTUUiLCIkbm9ybWFsaXplIiwiJGFkZENsYXNzIiwiY2xhc3NWYWwiLCIkcmVtb3ZlQ2xhc3MiLCJuZXdDbGFzc2VzIiwidG9BZGQiLCJ0b2tlbkRpZmZlcmVuY2UiLCJ0b1JlbW92ZSIsIndyaXRlQXR0ciIsImJvb2xlYW5LZXkiLCJhbGlhc2VkS2V5Iiwib2JzZXJ2ZXIiLCJ0cmltbWVkU3Jjc2V0Iiwic3JjUGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImZsb29yIiwiaW5uZXJJZHgiLCJsYXN0VHVwbGUiLCJyZW1vdmVBdHRyIiwibGlzdGVuZXJzIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJiaW5kaW5nIiwiaXNvbGF0ZWQiLCJub1RlbXBsYXRlIiwiY29tbWVudCIsImNyZWF0ZUNvbW1lbnQiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsInN0cjEiLCJzdHIyIiwidmFsdWVzIiwidG9rZW5zMSIsInRva2VuczIiLCJvdXRlciIsInRva2VuIiwianFOb2RlcyIsImlkZW50IiwiQ05UUkxfUkVHIiwiZ2xvYmFscyIsInJlZ2lzdGVyIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJleHByZXNzaW9uIiwibGF0ZXIiLCIkY29udHJvbGxlck1pbkVyciIsImNvbnRyb2xsZXJQcm90b3R5cGUiLCJjaGFuZ2VMaXN0ZW5lciIsImhpZGRlbiIsImRvYyIsImV4Y2VwdGlvbiIsImNhdXNlIiwic2VyaWFsaXplVmFsdWUiLCJ2IiwidG9JU09TdHJpbmciLCJwYXJhbXMiLCJzZXJpYWxpemUiLCJ0b1NlcmlhbGl6ZSIsInRvcExldmVsIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJjb250ZW50VHlwZSIsImhhc0pzb25Db250ZW50VHlwZSIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwiJGh0dHBNaW5FcnIiLCJqc29uU3RhcnQiLCJKU09OX1NUQVJUIiwiSlNPTl9FTkRTIiwicGFyc2VIZWFkZXJzIiwiZmlsbEluUGFyc2VkIiwibGluZSIsImhlYWRlclZhbCIsImhlYWRlcktleSIsImhlYWRlcnNHZXR0ZXIiLCJoZWFkZXJzT2JqIiwidHJhbnNmb3JtRGF0YSIsInN0YXR1cyIsImZucyIsImlzU3VjY2VzcyIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZCIsImNvbW1vbiIsIkFjY2VwdCIsIkNPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OIiwicGF0Y2giLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwicGFyYW1TZXJpYWxpemVyIiwianNvbnBDYWxsYmFja1BhcmFtIiwidXNlQXBwbHlBc3luYyIsImludGVyY2VwdG9yRmFjdG9yaWVzIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdENvbmZpZyIsImNoYWluSW50ZXJjZXB0b3JzIiwicHJvbWlzZSIsInRoZW5GbiIsInJlamVjdEZuIiwiZXhlY3V0ZUhlYWRlckZucyIsImhlYWRlckNvbnRlbnQiLCJwcm9jZXNzZWRIZWFkZXJzIiwiaGVhZGVyRm4iLCJoZWFkZXIiLCJtZXJnZUhlYWRlcnMiLCJkZWZIZWFkZXJOYW1lIiwibG93ZXJjYXNlRGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJkZWZIZWFkZXJzIiwicmVxSGVhZGVycyIsImRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uIiwic2VydmVyUmVxdWVzdCIsInJlcURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kUmVxIiwicmVzcG9uc2UiLCJyZXNwIiwicmVqZWN0IiwicmVxdWVzdEludGVyY2VwdG9ycyIsInJlc3BvbnNlSW50ZXJjZXB0b3JzIiwicmVzb2x2ZSIsInJldmVyc2VkSW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXF1ZXN0IiwicmVxdWVzdEVycm9yIiwicmVzcG9uc2VFcnJvciIsImNyZWF0ZVNob3J0TWV0aG9kcyIsImNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhIiwiY3JlYXRlQXBwbHlIYW5kbGVycyIsImV2ZW50SGFuZGxlcnMiLCJhcHBseUhhbmRsZXJzIiwiY2FsbEV2ZW50SGFuZGxlciIsIiRhcHBseUFzeW5jIiwiJCRwaGFzZSIsImRvbmUiLCJoZWFkZXJzU3RyaW5nIiwic3RhdHVzVGV4dCIsInhoclN0YXR1cyIsInJlc29sdmVIdHRwUHJvbWlzZSIsInJlc29sdmVQcm9taXNlIiwiZGVmZXJyZWQiLCJyZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQiLCJyZW1vdmVQZW5kaW5nUmVxIiwicGVuZGluZ1JlcXVlc3RzIiwiY2FjaGVkUmVzcCIsImlzSnNvbnAiLCJnZXRUcnVzdGVkUmVzb3VyY2VVcmwiLCJidWlsZFVybCIsInNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtIiwiZGVmYXVsdENhY2hlIiwieHNyZlZhbHVlIiwidXJsSXNTYW1lT3JpZ2luIiwidGltZW91dCIsInJlc3BvbnNlVHlwZSIsInVwbG9hZEV2ZW50SGFuZGxlcnMiLCJzZXJpYWxpemVkUGFyYW1zIiwiY2FsbGJhY2tQYXJhbVJlZ2V4IiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwiWE1MSHR0cFJlcXVlc3QiLCJjcmVhdGVIdHRwQmFja2VuZCIsImNyZWF0ZVhociIsIiRicm93c2VyRGVmZXIiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tQYXRoIiwiX2NhbGxiYWNrIiwiYXN5bmMiLCJib2R5Iiwid2FzQ2FsbGVkIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJ4aHIiLCJhYm9ydCIsImNvbXBsZXRlUmVxdWVzdCIsImNyZWF0ZUNhbGxiYWNrIiwiZ2V0UmVzcG9uc2UiLCJyZW1vdmVDYWxsYmFjayIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwidXJsUmVzb2x2ZSIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlcXVlc3RBYm9ydGVkIiwicmVxdWVzdFRpbWVvdXQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsInVwbG9hZCIsInNlbmQiLCJlc2NhcGUiLCJjaCIsInVuZXNjYXBlVGV4dCIsImVzY2FwZWRTdGFydFJlZ2V4cCIsImVzY2FwZWRFbmRSZWdleHAiLCJjb25zdGFudFdhdGNoRGVsZWdhdGUiLCJvYmplY3RFcXVhbGl0eSIsImNvbnN0YW50SW50ZXJwIiwidW53YXRjaCIsInBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IiLCJnZXRWYWx1ZSIsIiRpbnRlcnBvbGF0ZU1pbkVyciIsImludGVyciIsInVuZXNjYXBlZFRleHQiLCJleHAiLCIkJHdhdGNoRGVsZWdhdGUiLCJlbmRJbmRleCIsInBhcnNlRm5zIiwidGV4dExlbmd0aCIsImV4cHJlc3Npb25Qb3NpdGlvbnMiLCJzdGFydFN5bWJvbExlbmd0aCIsImVuZFN5bWJvbExlbmd0aCIsInRocm93Tm9jb25jYXQiLCJjb21wdXRlIiwiZ2V0VHJ1c3RlZCIsIiR3YXRjaEdyb3VwIiwib2xkVmFsdWVzIiwiY3VyclZhbHVlIiwiaW50ZXJ2YWwiLCJjb3VudCIsImludm9rZUFwcGx5IiwiaGFzUGFyYW1zIiwiaXRlcmF0aW9uIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2tpcEFwcGx5IiwiJCRpbnRlcnZhbElkIiwibm90aWZ5IiwiaW50ZXJ2YWxzIiwibWFya1FFeGNlcHRpb25IYW5kbGVkIiwiZW5jb2RlUGF0aCIsInNlZ21lbnRzIiwicGFyc2VBYnNvbHV0ZVVybCIsImFic29sdXRlVXJsIiwibG9jYXRpb25PYmoiLCJwYXJzZWRVcmwiLCIkJHByb3RvY29sIiwiJCRob3N0IiwiaG9zdG5hbWUiLCIkJHBvcnQiLCJwb3J0IiwiREVGQVVMVF9QT1JUUyIsInBhcnNlQXBwVXJsIiwiRE9VQkxFX1NMQVNIX1JFR0VYIiwiJGxvY2F0aW9uTWluRXJyIiwicHJlZml4ZWQiLCIkJHBhdGgiLCJwYXRobmFtZSIsIiQkc2VhcmNoIiwic2VhcmNoIiwiJCRoYXNoIiwic3RhcnRzV2l0aCIsInN0cmlwQmFzZVVybCIsImJhc2UiLCJ0cmltRW1wdHlIYXNoIiwic3RyaXBGaWxlIiwibGFzdEluZGV4T2YiLCJzZXJ2ZXJCYXNlIiwiTG9jYXRpb25IdG1sNVVybCIsImFwcEJhc2UiLCJhcHBCYXNlTm9GaWxlIiwiYmFzZVByZWZpeCIsIiQkaHRtbDUiLCIkJHBhcnNlIiwicGF0aFVybCIsIiQkY29tcG9zZSIsIiQkdXJsIiwiJCRhYnNVcmwiLCIkJHVybFVwZGF0ZWRCeUxvY2F0aW9uIiwiJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4IiwicmVtb3ZlV2luZG93c0RyaXZlTmFtZSIsImZpcnN0UGF0aFNlZ21lbnRNYXRjaCIsIndpbmRvd3NGaWxlUGF0aEV4cCIsIndpdGhvdXRIYXNoVXJsIiwid2l0aG91dEJhc2VVcmwiLCJMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCIsImxvY2F0aW9uR2V0dGVyIiwibG9jYXRpb25HZXR0ZXJTZXR0ZXIiLCJwcmVwcm9jZXNzIiwiaHRtbDVNb2RlIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwid2hpY2giLCJidXR0b24iLCJhYnNIcmVmIiwicHJldmVudERlZmF1bHQiLCJpbml0aWFsaXppbmciLCJuZXdVcmwiLCJuZXdTdGF0ZSIsIiRkaWdlc3QiLCJjdXJyZW50UmVwbGFjZSIsIiQkcmVwbGFjZSIsInVybE9yU3RhdGVDaGFuZ2VkIiwiZGVidWciLCJkZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJmb3JtYXRTdGFja1RyYWNlIiwic291cmNlVVJMIiwiY29uc29sZUxvZyIsImxvZ0ZuIiwibG9nIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2FybiIsImdldFN0cmluZ1ZhbHVlIiwiaWZEZWZpbmVkIiwicGx1c0ZuIiwiciIsImlzU3RhdGVsZXNzIiwiZmlsdGVyTmFtZSIsImlzUHVyZSIsInBhcmVudElzUHVyZSIsIkFTVCIsIk1lbWJlckV4cHJlc3Npb24iLCJjb21wdXRlZCIsIlVuYXJ5RXhwcmVzc2lvbiIsIlBVUklUWV9BQlNPTFVURSIsIkJpbmFyeUV4cHJlc3Npb24iLCJvcGVyYXRvciIsIkNhbGxFeHByZXNzaW9uIiwiUFVSSVRZX1JFTEFUSVZFIiwiZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyIsImFzdCIsImFsbENvbnN0YW50cyIsImFyZ3NUb1dhdGNoIiwiaXNTdGF0ZWxlc3NGaWx0ZXIiLCJhc3RJc1B1cmUiLCJQcm9ncmFtIiwiZXhwciIsIkxpdGVyYWwiLCJ0b1dhdGNoIiwiYXJndW1lbnQiLCJsZWZ0IiwicmlnaHQiLCJMb2dpY2FsRXhwcmVzc2lvbiIsIkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImFsdGVybmF0ZSIsImNvbnNlcXVlbnQiLCJJZGVudGlmaWVyIiwib2JqZWN0IiwiY2FsbGVlIiwiQXNzaWdubWVudEV4cHJlc3Npb24iLCJBcnJheUV4cHJlc3Npb24iLCJPYmplY3RFeHByZXNzaW9uIiwicHJvcGVydGllcyIsIlRoaXNFeHByZXNzaW9uIiwiTG9jYWxzRXhwcmVzc2lvbiIsImdldElucHV0cyIsImxhc3RFeHByZXNzaW9uIiwiaXNBc3NpZ25hYmxlIiwiYXNzaWduYWJsZUFTVCIsIk5HVmFsdWVQYXJhbWV0ZXIiLCJpc0xpdGVyYWwiLCJpc0NvbnN0YW50IiwiQVNUQ29tcGlsZXIiLCJBU1RJbnRlcnByZXRlciIsIlBhcnNlciIsImxleGVyIiwiYXN0Q29tcGlsZXIiLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsImlkZW50U3RhcnQiLCJpZGVudENvbnRpbnVlIiwibGl0ZXJhbHMiLCJ0cnVlIiwiZmFsc2UiLCJudWxsIiwiYWRkTGl0ZXJhbCIsImxpdGVyYWxOYW1lIiwibGl0ZXJhbFZhbHVlIiwic2V0SWRlbnRpZmllckZucyIsImlkZW50aWZpZXJTdGFydCIsImlkZW50aWZpZXJDb250aW51ZSIsImludGVyY2VwdG9yRm4iLCJwYXJzZWRFeHByZXNzaW9uIiwib25lVGltZSIsImNhY2hlS2V5IiwiTGV4ZXIiLCIkcGFyc2VPcHRpb25zIiwicGFyc2VyIiwib25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIiwib25lVGltZVdhdGNoRGVsZWdhdGUiLCJpbnB1dHMiLCJpbnB1dHNXYXRjaERlbGVnYXRlIiwiYWRkSW50ZXJjZXB0b3IiLCJleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrIiwib2xkVmFsdWVPZlZhbHVlIiwiY29tcGFyZU9iamVjdElkZW50aXR5IiwicHJldHR5UHJpbnRFeHByZXNzaW9uIiwibGFzdFJlc3VsdCIsImlucHV0RXhwcmVzc2lvbnMiLCJvbGRJbnB1dFZhbHVlT2YiLCJuZXdJbnB1dFZhbHVlIiwib2xkSW5wdXRWYWx1ZU9mVmFsdWVzIiwib2xkSW5wdXRWYWx1ZXMiLCJjaGFuZ2VkIiwib25lVGltZVdhdGNoIiwib25lVGltZUxpc3RlbmVyIiwib2xkIiwiaXNBbGxEZWZpbmVkIiwiYWxsRGVmaW5lZCIsIndhdGNoRGVsZWdhdGUiLCJ1c2VJbnB1dHMiLCJyZWd1bGFyV2F0Y2giLCJzIiwibm9VbnNhZmVFdmFsIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJpc0lkZW50aWZpZXJDb250aW51ZSIsImVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zIiwicUZhY3RvcnkiLCJuZXh0VGljayIsImV4Y2VwdGlvbkhhbmRsZXIiLCJEZWZlcnJlZCIsIlByb21pc2UiLCJyZWplY3RQcm9taXNlIiwicHJvZ3Jlc3MiLCJub3RpZnlQcm9taXNlIiwicHJvY2Vzc1F1ZXVlIiwicGVuZGluZyIsInByb2Nlc3NTY2hlZHVsZWQiLCJtYXJrUVN0YXRlRXhjZXB0aW9uSGFuZGxlZCIsInF1ZXVlU2l6ZSIsInByb2Nlc3NDaGVja3MiLCJjaGVja1F1ZXVlIiwidG9DaGVjayIsImlzU3RhdGVFeGNlcHRpb25IYW5kbGVkIiwiZXJyb3JNZXNzYWdlIiwic2NoZWR1bGVQcm9jZXNzUXVldWUiLCIkJHJlamVjdCIsIiRxTWluRXJyIiwiJCRyZXNvbHZlIiwiZG9SZXNvbHZlIiwiZG9SZWplY3QiLCJkb05vdGlmeSIsImhhbmRsZUNhbGxiYWNrIiwicmVzb2x2ZXIiLCJjYWxsYmFja091dHB1dCIsIndoZW4iLCJlcnJiYWNrIiwicHJvZ3Jlc3NCYWNrIiwicHJvbWlzZXMiLCJjb3VudGVyIiwicmVzdWx0cyIsInJhY2UiLCIkUSIsInJlc29sdmVGbiIsIlR5cGVFcnJvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiZmluYWxseSIsInB1ciIsInEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmFmU3VwcG9ydGVkIiwicmFmIiwidGltZXIiLCJzdXBwb3J0ZWQiLCJjcmVhdGVDaGlsZFNjb3BlQ2xhc3MiLCJDaGlsZFNjb3BlIiwiJCR3YXRjaGVycyIsIiQkbmV4dFNpYmxpbmciLCIkJGNoaWxkSGVhZCIsIiQkY2hpbGRUYWlsIiwiJCRsaXN0ZW5lcnMiLCIkJGxpc3RlbmVyQ291bnQiLCIkJHdhdGNoZXJzQ291bnQiLCIkaWQiLCIkJENoaWxkU2NvcGUiLCIkcm9vdFNjb3BlTWluRXJyIiwibGFzdERpcnR5V2F0Y2giLCJhcHBseUFzeW5jSWQiLCJkaWdlc3RUdGwiLCJkZXN0cm95Q2hpbGRTY29wZSIsIiRldmVudCIsImN1cnJlbnRTY29wZSIsImNsZWFuVXBTY29wZSIsIiQkcHJldlNpYmxpbmciLCIkcm9vdCIsIlNjb3BlIiwiYmVnaW5QaGFzZSIsInBoYXNlIiwiY2xlYXJQaGFzZSIsImluY3JlbWVudFdhdGNoZXJzQ291bnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImNoaWxkIiwid2F0Y2hFeHAiLCJ3YXRjaGVyIiwiZXEiLCIkJGRpZ2VzdFdhdGNoSW5kZXgiLCJ3YXRjaEV4cHJlc3Npb25zIiwid2F0Y2hHcm91cEFjdGlvbiIsImNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkIiwiZmlyc3RSdW4iLCJuZXdWYWx1ZXMiLCJkZXJlZ2lzdGVyRm5zIiwic2hvdWxkQ2FsbCIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsImJvdGhOYU4iLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsImludGVybmFsT2JqZWN0IiwiJHdhdGNoQ29sbGVjdGlvbkFjdGlvbiIsImluaXRSdW4iLCJ2ZXJ5T2xkVmFsdWUiLCJ0cmFja1ZlcnlPbGRWYWx1ZSIsImNoYW5nZURldGVjdG9yIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwibmV4dCIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZVBvc2l0aW9uIiwiYXN5bmNRdWV1ZSIsInRyYXZlcnNlU2NvcGVzTG9vcCIsIm1zZyIsInBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIiwicG9zdERpZ2VzdFF1ZXVlIiwiZXZlbnROYW1lIiwiJGV2YWwiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwiX3N0b3BQcm9wYWdhdGlvbiIsInRhcmdldFNjb3BlIiwibGlzdGVuZXJBcmdzIiwiJCRhc3luY1F1ZXVlIiwiJCRwb3N0RGlnZXN0UXVldWUiLCIkJGFwcGx5QXN5bmNRdWV1ZSIsInVyaSIsImlzSW1hZ2UiLCJub3JtYWxpemVkVmFsIiwicmVnZXgiLCJzbmFrZVRvQ2FtZWwiLCJVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAiLCJhZGp1c3RNYXRjaGVyIiwibWF0Y2hlciIsIiRzY2VNaW5FcnIiLCJlc2NhcGVGb3JSZWdleHAiLCJhZGp1c3RNYXRjaGVycyIsIm1hdGNoZXJzIiwiYWRqdXN0ZWRNYXRjaGVycyIsIlNDRV9DT05URVhUUyIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwicmVzb3VyY2VVcmxCbGFja2xpc3QiLCJtYXRjaFVybCIsImlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kiLCJhbGxvd2VkIiwiZ2VuZXJhdGVIb2xkZXJUeXBlIiwiQmFzZSIsImhvbGRlclR5cGUiLCJ0cnVzdGVkVmFsdWUiLCIkJHVud3JhcFRydXN0ZWRWYWx1ZSIsInRydXN0QXMiLCJDb25zdHJ1Y3RvciIsImJ5VHlwZSIsIm1heWJlVHJ1c3RlZCIsInRydXN0ZWRWYWx1ZUhvbGRlckJhc2UiLCJodG1sU2FuaXRpemVyIiwiQ1NTIiwiVVJMIiwiSlMiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCJldmVudFN1cHBvcnQiLCJpc053IiwibnciLCJwcm9jZXNzIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImNocm9tZSIsImFwcCIsInJ1bnRpbWUiLCJoYXNIaXN0b3J5UHVzaFN0YXRlIiwicHVzaFN0YXRlIiwiYW5kcm9pZCIsImJveGVlIiwiYm9keVN0eWxlIiwidHJhbnNpdGlvbnMiLCJhbmltYXRpb25zIiwiaGFzRXZlbnQiLCJkaXZFbG0iLCJodHRwT3B0aW9ucyIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwiJHRlbXBsYXRlUmVxdWVzdE1pbkVyciIsInRvdGFsUGVuZGluZ1JlcXVlc3RzIiwidHJhbnNmb3JtZXIiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hdGNoZXMiLCJkYXRhQmluZGluZyIsImJpbmRpbmdOYW1lIiwiZmluZE1vZGVscyIsInByZWZpeGVzIiwiYXR0cmlidXRlRXF1YWxzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsIndoZW5TdGFibGUiLCJkZWZlcnJlZHMiLCIkJHRpbWVvdXRJZCIsInVybFBhcnNpbmdOb2RlIiwicmVxdWVzdFVybCIsIm9yaWdpblVybCIsIiQkQ29va2llUmVhZGVyIiwic2FmZUdldENvb2tpZSIsImNvb2tpZSIsInNhZmVEZWNvZGVVUklDb21wb25lbnQiLCJsYXN0Q29va2llcyIsImxhc3RDb29raWVTdHJpbmciLCJjb29raWVBcnJheSIsImN1cnJlbnRDb29raWVTdHJpbmciLCJmaWx0ZXJzIiwic3VmZml4IiwiY3VycmVuY3lGaWx0ZXIiLCJkYXRlRmlsdGVyIiwiZmlsdGVyRmlsdGVyIiwianNvbkZpbHRlciIsImxpbWl0VG9GaWx0ZXIiLCJsb3dlcmNhc2VGaWx0ZXIiLCJudW1iZXJGaWx0ZXIiLCJvcmRlckJ5RmlsdGVyIiwidXBwZXJjYXNlRmlsdGVyIiwiY29tcGFyYXRvciIsImFueVByb3BlcnR5S2V5IiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiZXhwcmVzc2lvblR5cGUiLCJnZXRUeXBlRm9yRmlsdGVyIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsImRlZXBDb21wYXJlIiwiZG9udE1hdGNoV2hvbGVPYmplY3QiLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWRWYWwiLCJtYXRjaEFueVByb3BlcnR5IiwiYWN0dWFsVmFsIiwiJGxvY2FsZSIsImZvcm1hdHMiLCJOVU1CRVJfRk9STUFUUyIsImFtb3VudCIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiQ1VSUkVOQ1lfU1lNIiwiUEFUVEVSTlMiLCJtYXhGcmFjIiwiZm9ybWF0TnVtYmVyIiwiR1JPVVBfU0VQIiwiREVDSU1BTF9TRVAiLCJudW1iZXIiLCJudW1TdHIiLCJkaWdpdHMiLCJudW1iZXJPZkludGVnZXJEaWdpdHMiLCJ6ZXJvcyIsImV4cG9uZW50IiwiWkVST19DSEFSIiwiTUFYX0RJR0lUUyIsInJvdW5kTnVtYmVyIiwicGFyc2VkTnVtYmVyIiwibWluRnJhYyIsImZyYWN0aW9uTGVuIiwibWluIiwicm91bmRBdCIsImRpZ2l0IiwiayIsImNhcnJ5IiwicmVkdWNlUmlnaHQiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc05hTiIsImlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsImlzWmVybyIsImFicyIsImZvcm1hdHRlZFRleHQiLCJpbnRlZ2VyTGVuIiwiZGVjaW1hbHMiLCJyZWR1Y2UiLCJncm91cHMiLCJsZ1NpemUiLCJnU2l6ZSIsIm5lZ1ByZSIsIm5lZ1N1ZiIsInBvc1ByZSIsInBvc1N1ZiIsInBhZE51bWJlciIsIm51bSIsIm5lZ1dyYXAiLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZVN0ckdldHRlciIsInNob3J0Rm9ybSIsInN0YW5kQWxvbmUiLCJwcm9wUHJlZml4IiwidGltZVpvbmVHZXR0ZXIiLCJ6b25lIiwicGFkZGVkWm9uZSIsImdldEZpcnN0VGh1cnNkYXlPZlllYXIiLCJ5ZWFyIiwiZGF5T2ZXZWVrT25GaXJzdCIsImdldERheSIsImdldFRodXJzZGF5VGhpc1dlZWsiLCJkYXRldGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwid2Vla0dldHRlciIsImZpcnN0VGh1cnMiLCJ0aGlzVGh1cnMiLCJyb3VuZCIsImFtcG1HZXR0ZXIiLCJnZXRIb3VycyIsIkFNUE1TIiwiZXJhR2V0dGVyIiwiRVJBUyIsImxvbmdFcmFHZXR0ZXIiLCJFUkFOQU1FUyIsImpzb25TdHJpbmdUb0RhdGUiLCJzdHJpbmciLCJSX0lTTzg2MDFfU1RSIiwidHpIb3VyIiwidHpNaW4iLCJkYXRlU2V0dGVyIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInRpbWVTZXR0ZXIiLCJzZXRVVENIb3VycyIsInNldEhvdXJzIiwibSIsIm1zIiwicGFyc2VGbG9hdCIsImZvcm1hdCIsIkRBVEVUSU1FX0ZPUk1BVFMiLCJOVU1CRVJfU1RSSU5HIiwiREFURV9GT1JNQVRTX1NQTElUIiwiREFURV9GT1JNQVRTIiwic3BhY2luZyIsImxpbWl0IiwiYmVnaW4iLCJJbmZpbml0eSIsInNsaWNlRm4iLCJlbmQiLCJwcm9jZXNzUHJlZGljYXRlcyIsInNvcnRQcmVkaWNhdGVzIiwicHJlZGljYXRlIiwiZGVzY2VuZGluZyIsIm9iamVjdFZhbHVlIiwiZ2V0UHJlZGljYXRlVmFsdWUiLCJkZWZhdWx0Q29tcGFyZSIsInYxIiwidjIiLCJ0eXBlMSIsInR5cGUyIiwidmFsdWUxIiwidmFsdWUyIiwic29ydFByZWRpY2F0ZSIsInJldmVyc2VPcmRlciIsImNvbXBhcmVGbiIsImdldENvbXBhcmlzb25PYmplY3QiLCJ0aWVCcmVha2VyIiwicHJlZGljYXRlVmFsdWVzIiwicHJlZGljYXRlcyIsImRvQ29tcGFyaXNvbiIsImNvbXBhcmVWYWx1ZXMiLCJuZ0RpcmVjdGl2ZSIsIm51bGxGb3JtUmVuYW1lQ29udHJvbCIsImNvbnRyb2wiLCIkbmFtZSIsIkZvcm1Db250cm9sbGVyIiwiJCRjb250cm9scyIsIiRlcnJvciIsIiQkc3VjY2VzcyIsIiRwZW5kaW5nIiwiJGRpcnR5IiwiJHByaXN0aW5lIiwiJHZhbGlkIiwiJGludmFsaWQiLCIkc3VibWl0dGVkIiwiJCRwYXJlbnRGb3JtIiwibnVsbEZvcm1DdHJsIiwiJCRhbmltYXRlIiwic2V0dXBWYWxpZGl0eSIsIiQkY2xhc3NDYWNoZSIsIklOVkFMSURfQ0xBU1MiLCJWQUxJRF9DTEFTUyIsImFkZFNldFZhbGlkaXR5TWV0aG9kIiwiY3JlYXRlQW5kU2V0IiwiY3RybCIsInVuc2V0QW5kQ2xlYW51cCIsInVuc2V0IiwiaXNPYmplY3RFbXB0eSIsImNhY2hlZFRvZ2dsZUNsYXNzIiwic3dpdGNoVmFsdWUiLCJ0b2dnbGVWYWxpZGF0aW9uQ3NzIiwidmFsaWRhdGlvbkVycm9yS2V5IiwiaXNWYWxpZCIsImNsYXp6IiwiJHNldFZhbGlkaXR5IiwiUEVORElOR19DTEFTUyIsImNvbWJpbmVkU3RhdGUiLCJzdHJpbmdCYXNlZElucHV0VHlwZSIsIiRmb3JtYXR0ZXJzIiwiJGlzRW1wdHkiLCJ0ZXh0SW5wdXRUeXBlIiwiYmFzZUlucHV0VHlwZSIsImNvbXBvc2luZyIsImV2IiwibmdUcmltIiwiJHZpZXdWYWx1ZSIsIiQkaGFzTmF0aXZlVmFsaWRhdG9ycyIsIiRzZXRWaWV3VmFsdWUiLCJkZWZlckxpc3RlbmVyIiwib3JpZ1ZhbHVlIiwia2V5Q29kZSIsIlBBUlRJQUxfVkFMSURBVElPTl9UWVBFUyIsIlBBUlRJQUxfVkFMSURBVElPTl9FVkVOVFMiLCJ2YWxpZGl0eSIsIlZBTElESVRZX1NUQVRFX1BST1BFUlRZIiwib3JpZ0JhZElucHV0IiwiYmFkSW5wdXQiLCJvcmlnVHlwZU1pc21hdGNoIiwidHlwZU1pc21hdGNoIiwiJHJlbmRlciIsIndlZWtQYXJzZXIiLCJpc29XZWVrIiwiZXhpc3RpbmdEYXRlIiwiV0VFS19SRUdFWFAiLCJ3ZWVrIiwiaG91cnMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiYWRkRGF5cyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJjcmVhdGVEYXRlUGFyc2VyIiwibWFwcGluZyIsImlzbyIsIklTT19EQVRFX1JFR0VYUCIsInl5eXkiLCJNTSIsImRkIiwiSEgiLCJtbSIsInNzIiwic3NzIiwicGFydCIsImNyZWF0ZURhdGVJbnB1dFR5cGUiLCJwYXJzZURhdGUiLCJpc1ZhbGlkRGF0ZSIsInBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUiLCJiYWRJbnB1dENoZWNrZXIiLCJwcmV2aW91c0RhdGUiLCIkb3B0aW9ucyIsImdldE9wdGlvbiIsIiQkcGFyc2VyTmFtZSIsIiRwYXJzZXJzIiwicGFyc2VkRGF0ZSIsIm5nTW9kZWxNaW5FcnIiLCJuZ01pbiIsIm1pblZhbCIsIiR2YWxpZGF0b3JzIiwiJHZhbGlkYXRlIiwibmdNYXgiLCJtYXhWYWwiLCJuYXRpdmVWYWxpZGF0aW9uIiwibnVtYmVyRm9ybWF0dGVyUGFyc2VyIiwiTlVNQkVSX1JFR0VYUCIsInBhcnNlTnVtYmVyQXR0clZhbCIsImlzTnVtYmVySW50ZWdlciIsImNvdW50RGVjaW1hbHMiLCJudW1TdHJpbmciLCJkZWNpbWFsU3ltYm9sSW5kZXgiLCJpc1ZhbGlkRm9yU3RlcCIsInZpZXdWYWx1ZSIsInN0ZXBCYXNlIiwic3RlcCIsImlzTm9uSW50ZWdlclZhbHVlIiwiaXNOb25JbnRlZ2VyU3RlcEJhc2UiLCJpc05vbkludGVnZXJTdGVwIiwidmFsdWVEZWNpbWFscyIsInN0ZXBCYXNlRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJkZWNpbWFsQ291bnQiLCJtdWx0aXBsaWVyIiwicG93IiwibnVtYmVySW5wdXRUeXBlIiwibmdTdGVwIiwic3RlcFZhbCIsIm1vZGVsVmFsdWUiLCJyYW5nZUlucHV0VHlwZSIsInNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyIiwiaHRtbEF0dHJOYW1lIiwiY2hhbmdlRm4iLCJtaW5DaGFuZ2UiLCIkbW9kZWxWYWx1ZSIsInN1cHBvcnRzUmFuZ2UiLCJlbFZhbCIsIm1heENoYW5nZSIsInN0ZXBDaGFuZ2UiLCJoYXNNaW5BdHRyIiwiaGFzTWF4QXR0ciIsImhhc1N0ZXBBdHRyIiwib3JpZ2luYWxSZW5kZXIiLCJyYW5nZVVuZGVyZmxvdyIsInJhbmdlT3ZlcmZsb3ciLCJzdGVwTWlzbWF0Y2giLCJ1cmxJbnB1dFR5cGUiLCJVUkxfUkVHRVhQIiwiZW1haWxJbnB1dFR5cGUiLCJlbWFpbCIsIkVNQUlMX1JFR0VYUCIsInJhZGlvSW5wdXRUeXBlIiwiZG9UcmltIiwiY2hlY2tlZCIsInBhcnNlQ29uc3RhbnRFeHByIiwicGFyc2VGbiIsImNoZWNrYm94SW5wdXRUeXBlIiwidHJ1ZVZhbHVlIiwibmdUcnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwiY2xhc3NEaXJlY3RpdmUiLCJhcnJheURpZmZlcmVuY2UiLCJjbGFzc1N0cmluZyIsInRvQ2xhc3NTdHJpbmciLCJjbGFzc1ZhbHVlIiwidG9GbGF0VmFsdWUiLCJmbGF0VmFsdWUiLCJoYXNVbmRlZmluZWQiLCJpbmRleFdhdGNoRXhwcmVzc2lvbiIsImFkZENsYXNzZXMiLCJkaWdlc3RDbGFzc0NvdW50cyIsInJlbW92ZUNsYXNzZXMiLCJ1cGRhdGVDbGFzc2VzIiwib2xkQ2xhc3NTdHJpbmciLCJuZXdDbGFzc1N0cmluZyIsIm9sZENsYXNzQXJyYXkiLCJuZXdDbGFzc0FycmF5IiwidG9SZW1vdmVBcnJheSIsInRvQWRkQXJyYXkiLCJ0b1JlbW92ZVN0cmluZyIsInRvQWRkU3RyaW5nIiwiY2xhc3NBcnJheSIsImNsYXNzZXNUb1VwZGF0ZSIsImNsYXNzQ291bnRzIiwibmdDbGFzc0luZGV4V2F0Y2hBY3Rpb24iLCJuZXdNb2R1bG8iLCJvbGRNb2R1bG8iLCJuZ0NsYXNzT25lVGltZVdhdGNoQWN0aW9uIiwibmV3Q2xhc3NWYWx1ZSIsIm5nQ2xhc3NXYXRjaEFjdGlvbiIsImlzT25lVGltZSIsIndhdGNoSW50ZXJjZXB0b3IiLCJ3YXRjaEV4cHJlc3Npb24iLCJ3YXRjaEFjdGlvbiIsIiRpbmRleCIsIk5nTW9kZWxDb250cm9sbGVyIiwiJCRyYXdNb2RlbFZhbHVlIiwiJGFzeW5jVmFsaWRhdG9ycyIsIiR2aWV3Q2hhbmdlTGlzdGVuZXJzIiwiJHVudG91Y2hlZCIsIiR0b3VjaGVkIiwiZGVmYXVsdE1vZGVsT3B0aW9ucyIsIiQkcGFyc2VkTmdNb2RlbCIsIiQkcGFyc2VkTmdNb2RlbEFzc2lnbiIsIiQkbmdNb2RlbEdldCIsIiQkbmdNb2RlbFNldCIsIiQkcGVuZGluZ0RlYm91bmNlIiwiJCRwYXJzZXJWYWxpZCIsIiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCIsImRlZmluZVByb3BlcnR5IiwiJCRhdHRyIiwiJCR0aW1lb3V0IiwiJCRleGNlcHRpb25IYW5kbGVyIiwic2V0dXBNb2RlbFdhdGNoZXIiLCJmb3JtYXR0ZXJzIiwiJCR1cGRhdGVFbXB0eUNsYXNzZXMiLCIkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUiLCIkJHJ1blZhbGlkYXRvcnMiLCJNb2RlbE9wdGlvbnMiLCIkJG9wdGlvbnMiLCJzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyIsIm9wdGlvbkVsIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJkb2N1bWVudE1vZGUiLCJydWxlcyIsIm5nQ3NwRWxlbWVudCIsIm5nQ3NwQXR0cmlidXRlIiwibm9JbmxpbmVTdHlsZSIsIm5hbWVfIiwiZWwiLCJOT0RFX1RZUEVfQVRUUklCVVRFIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJkb3QiLCJjb2RlTmFtZSIsImV4cGFuZG8iLCJtb3VzZWxlYXZlIiwibW91c2VlbnRlciIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyZWFkeSIsInJlbW92ZURhdGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjc3MiLCJyZXQiLCJsb3dlcmNhc2VkTmFtZSIsImlzQm9vbGVhbkF0dHIiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsImFyZzEiLCJhcmcyIiwibm9kZUNvdW50IiwidHlwZXMiLCJhZGRIYW5kbGVyIiwibm9FdmVudExpc3RlbmVyIiwib25lIiwib25GbiIsInJlcGxhY2VOb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGRyZW4iLCJjb250ZW50RG9jdW1lbnQiLCJwcmVwZW5kIiwid3JhcE5vZGUiLCJkZXRhY2giLCJhZnRlciIsIm5ld0VsZW1lbnQiLCJ0b2dnbGVDbGFzcyIsImNvbmRpdGlvbiIsImNsYXNzQ29uZGl0aW9uIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJleHRyYVBhcmFtZXRlcnMiLCJkdW1teUV2ZW50IiwiZXZlbnRGbnNDb3B5IiwiaGFuZGxlckFyZ3MiLCJhcmczIiwidW5iaW5kIiwibmFuS2V5IiwiX2lkeCIsIl90cmFuc2Zvcm1LZXkiLCJkZWxldGUiLCIkYW5pbWF0ZU1pbkVyciIsIk5HX0FOSU1BVEVfQ0xBU1NOQU1FIiwicG9zdERpZ2VzdEVsZW1lbnRzIiwidXBkYXRlRGF0YSIsImhhbmRsZUNTU0NsYXNzQ2hhbmdlcyIsImV4aXN0aW5nIiwiYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QiLCJhZGQiLCJjbGFzc2VzQWRkZWQiLCJjbGFzc2VzUmVtb3ZlZCIsInBpbiIsImRvbU9wZXJhdGlvbiIsImZyb20iLCJ0byIsInJ1bm5lciIsImNvbXBsZXRlIiwiY2xhc3NOYW1lRmlsdGVyIiwiY3VzdG9tRmlsdGVyIiwiJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyIsImZpbHRlckZuIiwicmVzZXJ2ZWRSZWdleCIsImRvbUluc2VydCIsImFmdGVyRWxlbWVudCIsImFmdGVyTm9kZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJlbnRlciIsIm1vdmUiLCJsZWF2ZSIsImFkZGNsYXNzIiwic2V0Q2xhc3MiLCJhbmltYXRlIiwidGVtcENsYXNzZXMiLCJ3YWl0Rm9yVGljayIsIndhaXRRdWV1ZSIsInBhc3NlZCIsIkFuaW1hdGVSdW5uZXIiLCJzZXRIb3N0IiwicmFmVGljayIsInRpbWVvdXRUaWNrIiwiX2RvbmVDYWxsYmFja3MiLCJfdGljayIsIl9zdGF0ZSIsIklOSVRJQUxfU1RBVEUiLCJET05FX1BFTkRJTkdfU1RBVEUiLCJET05FX0NPTVBMRVRFX1NUQVRFIiwiY2hhaW4iLCJydW5uZXJzIiwib25Qcm9ncmVzcyIsImdldFByb21pc2UiLCJyZXNvbHZlSGFuZGxlciIsInJlamVjdEhhbmRsZXIiLCJwYXVzZSIsInJlc3VtZSIsIl9yZXNvbHZlIiwiaW5pdGlhbE9wdGlvbnMiLCJhcHBseUFuaW1hdGlvbkNvbnRlbnRzIiwiY2xvc2VkIiwiJCRwcmVwYXJlZCIsImNsZWFudXBTdHlsZXMiLCJzdGFydCIsImlzRmlyc3RDaGFuZ2UiLCJkb21Ob2RlIiwib2Zmc2V0V2lkdGgiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIl9jcmVhdGVDYWxsYmFjayIsImNhbGxiYWNrSWQiLCJjYWxsZWQiLCJjYWxsYmFja01hcCIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsIl91cmwiLCJfc2VhcmNoIiwicGFyYW1WYWx1ZSIsIkxvY2F0aW9uIiwiJHBhcnNlTWluRXJyIiwiT1BFUkFUT1JTIiwiRVNDQVBFIiwiZiIsInQiLCInIiwiXCIiLCJsZXgiLCJ0b2tlbnMiLCJyZWFkU3RyaW5nIiwicGVlayIsInJlYWROdW1iZXIiLCJwZWVrTXVsdGljaGFyIiwicmVhZElkZW50IiwiaXMiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJvcDEiLCJvcDIiLCJvcDMiLCJ0aHJvd0Vycm9yIiwiY2hhcnMiLCJjb2RlUG9pbnRBdCIsImlzVmFsaWRJZGVudGlmaWVyU3RhcnQiLCJpc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlIiwiY3AiLCJjcDEiLCJjcDIiLCJpc0V4cE9wZXJhdG9yIiwiY29sU3RyIiwicGVla0NoIiwicXVvdGUiLCJyYXdTdHJpbmciLCJoZXgiLCJyZXAiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwiUHJvcGVydHkiLCJwcm9ncmFtIiwiZXhwcmVzc2lvblN0YXRlbWVudCIsImV4cGVjdCIsImZpbHRlckNoYWluIiwiYXNzaWdubWVudCIsInRlcm5hcnkiLCJsb2dpY2FsT1IiLCJjb25zdW1lIiwibG9naWNhbEFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImFkZGl0aXZlIiwibXVsdGlwbGljYXRpdmUiLCJ1bmFyeSIsInByaW1hcnkiLCJhcnJheURlY2xhcmF0aW9uIiwic2VsZlJlZmVyZW50aWFsIiwicGFyc2VBcmd1bWVudHMiLCJiYXNlRXhwcmVzc2lvbiIsInBlZWtUb2tlbiIsImtpbmQiLCJlMSIsImUyIiwiZTMiLCJlNCIsInBlZWtBaGVhZCIsIiRsb2NhbHMiLCJuZXh0SWQiLCJ2YXJzIiwib3duIiwiYXNzaWduYWJsZSIsInN0YWdlIiwiY29tcHV0aW5nIiwicmVjdXJzZSIsInJldHVybl8iLCJnZW5lcmF0ZUZ1bmN0aW9uIiwiZm5LZXkiLCJpbnRvSWQiLCJ3YXRjaElkIiwiZm5TdHJpbmciLCJVU0UiLCJTVFJJQ1QiLCJmaWx0ZXJQcmVmaXgiLCJ3YXRjaEZucyIsInZhcnNQcmVmaXgiLCJzZWN0aW9uIiwibmFtZUlkIiwicmVjdXJzaW9uRm4iLCJza2lwV2F0Y2hJZENoZWNrIiwiaWZfIiwibGF6eUFzc2lnbiIsImNvbXB1dGVkTWVtYmVyIiwibGF6eVJlY3Vyc2UiLCJwbHVzIiwibm90IiwiZ2V0SGFzT3duUHJvcGVydHkiLCJpc051bGwiLCJub25Db21wdXRlZE1lbWJlciIsIm5vdE51bGwiLCJtZW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJTQUZFX0lERU5USUZJRVIiLCJVTlNBRkVfQ0hBUkFDVEVSUyIsInN0cmluZ0VzY2FwZUZuIiwic3RyaW5nRXNjYXBlUmVnZXgiLCJjIiwic2tpcCIsImluaXQiLCJyaHMiLCJsaHMiLCJ1bmFyeSsiLCJ1bmFyeS0iLCJ1bmFyeSEiLCJiaW5hcnkrIiwiYmluYXJ5LSIsImJpbmFyeSoiLCJiaW5hcnkvIiwiYmluYXJ5JSIsImJpbmFyeT09PSIsImJpbmFyeSE9PSIsImJpbmFyeT09IiwiYmluYXJ5IT0iLCJiaW5hcnk8IiwiYmluYXJ5PiIsImJpbmFyeTw9IiwiYmluYXJ5Pj0iLCJiaW5hcnkmJiIsImJpbmFyeXx8IiwidGVybmFyeT86IiwiX3ZhbHVlMiIsInl5IiwieSIsIk1NTU0iLCJNTU0iLCJNIiwiTExMTCIsIkgiLCJoaCIsIkVFRUUiLCJFRUUiLCJaIiwid3ciLCJ3IiwiRyIsIkdHIiwiR0dHIiwiR0dHRyIsInhsaW5rSHJlZiIsInByb3BOYW1lIiwiZGVmYXVsdExpbmtGbiIsIm5vcm1hbGl6ZWQiLCJodG1sQXR0ciIsIiRhZGRDb250cm9sIiwiJCRyZW5hbWVDb250cm9sIiwiJHJlbW92ZUNvbnRyb2wiLCIkc2V0RGlydHkiLCIkc2V0UHJpc3RpbmUiLCIkc2V0U3VibWl0dGVkIiwiU1VCTUlUVEVEX0NMQVNTIiwiJHJvbGxiYWNrVmlld1ZhbHVlIiwiJGNvbW1pdFZpZXdWYWx1ZSIsIm5ld05hbWUiLCJvbGROYW1lIiwiUFJJU1RJTkVfQ0xBU1MiLCJESVJUWV9DTEFTUyIsIiRzZXRVbnRvdWNoZWQiLCJmb3JtRGlyZWN0aXZlRmFjdG9yeSIsImlzTmdGb3JtIiwiZ2V0U2V0dGVyIiwiZm9ybUVsZW1lbnQiLCJuYW1lQXR0ciIsImN0cmxzIiwiaGFuZGxlRm9ybVN1Ym1pc3Npb24iLCJwYXJlbnRGb3JtQ3RybCIsInNldHRlciIsIkRBVEVfUkVHRVhQIiwiREFURVRJTUVMT0NBTF9SRUdFWFAiLCJNT05USF9SRUdFWFAiLCJUSU1FX1JFR0VYUCIsImlucHV0VHlwZSIsImRhdGV0aW1lLWxvY2FsIiwidGltZSIsIm1vbnRoIiwicmFkaW8iLCJyYW5nZSIsImNoZWNrYm94Iiwic3VibWl0IiwicmVzZXQiLCJmaWxlIiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwidXBkYXRlRWxlbWVudFZhbHVlIiwicHJvcFZhbHVlIiwidHBsQXR0ciIsIiRjb21waWxlIiwidGVtcGxhdGVFbGVtZW50IiwibmdCaW5kSHRtbEdldHRlciIsIm5nQmluZEh0bWxXYXRjaCIsImdldFRydXN0ZWRIdG1sIiwiZm9yY2VBc3luY0V2ZW50cyIsImJsdXIiLCJmb2N1cyIsInByZXZpb3VzRWxlbWVudHMiLCJzcmNFeHAiLCJvbmxvYWRFeHAiLCJhdXRvU2Nyb2xsRXhwIiwiYXV0b3Njcm9sbCIsInByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiY2hhbmdlQ291bnRlciIsImNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQiLCJhZnRlckFuaW1hdGlvbiIsInRoaXNDaGFuZ2VJZCIsInRyaW1WYWx1ZXMiLCJVTlRPVUNIRURfQ0xBU1MiLCJUT1VDSEVEX0NMQVNTIiwiRU1QVFlfQ0xBU1MiLCJOT1RfRU1QVFlfQ0xBU1MiLCIkJGluaXRHZXR0ZXJTZXR0ZXJzIiwiaW52b2tlTW9kZWxHZXR0ZXIiLCJpbnZva2VNb2RlbFNldHRlciIsIiQkJHAiLCIkc2V0VG91Y2hlZCIsInByZXZWYWxpZCIsInByZXZNb2RlbFZhbHVlIiwiYWxsb3dJbnZhbGlkIiwidGhhdCIsImFsbFZhbGlkIiwiJCR3cml0ZU1vZGVsVG9TY29wZSIsImRvbmVDYWxsYmFjayIsInByb2Nlc3NQYXJzZUVycm9ycyIsImVycm9yS2V5Iiwic2V0VmFsaWRpdHkiLCJwcm9jZXNzU3luY1ZhbGlkYXRvcnMiLCJzeW5jVmFsaWRhdG9yc1ZhbGlkIiwidmFsaWRhdG9yIiwiQm9vbGVhbiIsInByb2Nlc3NBc3luY1ZhbGlkYXRvcnMiLCJ2YWxpZGF0b3JQcm9taXNlcyIsInZhbGlkYXRpb25Eb25lIiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCJ3cml0ZVRvTW9kZWxJZk5lZWRlZCIsIiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQiLCJkZWJvdW5jZURlbGF5IiwiJG92ZXJyaWRlTW9kZWxPcHRpb25zIiwiY3JlYXRlQ2hpbGQiLCJtb2RlbEN0cmwiLCJmb3JtQ3RybCIsIm9wdGlvbnNDdHJsIiwic2V0VG91Y2hlZCIsIkRFRkFVTFRfUkVHRVhQIiwiaW5oZXJpdEFsbCIsInVwZGF0ZU9uRGVmYXVsdCIsInVwZGF0ZU9uIiwiZGVib3VuY2UiLCJnZXR0ZXJTZXR0ZXIiLCJOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIiLCIkJGF0dHJzIiwicGFyZW50T3B0aW9ucyIsInBhcmVudEN0cmwiLCJtb2RlbE9wdGlvbnNEZWZpbml0aW9uIiwibmdPcHRpb25zTWluRXJyIiwiTkdfT1BUSU9OU19SRUdFWFAiLCJwYXJzZU9wdGlvbnNFeHByZXNzaW9uIiwib3B0aW9uc0V4cCIsInNlbGVjdEVsZW1lbnQiLCJPcHRpb24iLCJzZWxlY3RWYWx1ZSIsImxhYmVsIiwiZ3JvdXAiLCJkaXNhYmxlZCIsImdldE9wdGlvblZhbHVlc0tleXMiLCJvcHRpb25WYWx1ZXMiLCJvcHRpb25WYWx1ZXNLZXlzIiwia2V5TmFtZSIsIml0ZW1LZXkiLCJ2YWx1ZU5hbWUiLCJzZWxlY3RBcyIsInRyYWNrQnkiLCJzZWxlY3RBc0ZuIiwidmlld1ZhbHVlRm4iLCJ0cmFja0J5Rm4iLCJnZXRUcmFja0J5VmFsdWVGbiIsImdldFRyYWNrQnlWYWx1ZSIsImdldExvY2FscyIsImRpc3BsYXlGbiIsImdyb3VwQnlGbiIsImRpc2FibGVXaGVuRm4iLCJ2YWx1ZXNGbiIsImdldFdhdGNoYWJsZXMiLCJ3YXRjaGVkQXJyYXkiLCJvcHRpb25WYWx1ZXNMZW5ndGgiLCJkaXNhYmxlV2hlbiIsImdldE9wdGlvbnMiLCJvcHRpb25JdGVtcyIsInNlbGVjdFZhbHVlTWFwIiwib3B0aW9uSXRlbSIsImdldE9wdGlvbkZyb21WaWV3VmFsdWUiLCJnZXRWaWV3VmFsdWVGcm9tT3B0aW9uIiwibmdPcHRpb25zUG9zdExpbmsiLCJhZGRPcHRpb25FbGVtZW50Iiwib3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwidXBkYXRlT3B0aW9uRWxlbWVudCIsImdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uIiwidXBkYXRlT3B0aW9ucyIsInNlbGVjdEN0cmwiLCJyZWFkVmFsdWUiLCJncm91cEVsZW1lbnRNYXAiLCJncm91cEVsZW1lbnQiLCJvcHRHcm91cFRlbXBsYXRlIiwibGlzdEZyYWdtZW50IiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJpc05vdFByaW1pdGl2ZSIsImhhc0VtcHR5T3B0aW9uIiwiZW1wdHlPcHRpb24iLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwidW5rbm93bk9wdGlvbiIsImdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkT3B0aW9ucyIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsInJlbW92ZVVua25vd25PcHRpb24iLCJzZWxlY3RVbmtub3duT3JFbXB0eU9wdGlvbiIsInVuc2VsZWN0RW1wdHlPcHRpb24iLCJyZWdpc3Rlck9wdGlvbiIsIm9wdGlvblNjb3BlIiwibmVlZHNSZXJlbmRlciIsIiRpc0VtcHR5T3B0aW9uU2VsZWN0ZWQiLCJCUkFDRSIsIklTX1dIRU4iLCJ1cGRhdGVFbGVtZW50VGV4dCIsIm5ld1RleHQiLCJsYXN0Q291bnQiLCJudW1iZXJFeHAiLCJ3aGVuRXhwIiwid2hlbnMiLCJ3aGVuc0V4cEZucyIsImJyYWNlUmVwbGFjZW1lbnQiLCJ3YXRjaFJlbW92ZXIiLCJhdHRyaWJ1dGVOYW1lIiwidG1wTWF0Y2giLCJ3aGVuS2V5IiwiY291bnRJc05hTiIsInBsdXJhbENhdCIsIndoZW5FeHBGbiIsIk5HX1JFTU9WRUQiLCJuZ1JlcGVhdE1pbkVyciIsInVwZGF0ZVNjb3BlIiwidmFsdWVJZGVudGlmaWVyIiwia2V5SWRlbnRpZmllciIsImFycmF5TGVuZ3RoIiwiJGZpcnN0IiwiJGxhc3QiLCIkbWlkZGxlIiwiJG9kZCIsIiRldmVuIiwiZ2V0QmxvY2tTdGFydCIsImdldEJsb2NrRW5kIiwibmdSZXBlYXRFbmRDb21tZW50IiwiYWxpYXNBcyIsInRyYWNrQnlFeHAiLCJ0cmFja0J5RXhwR2V0dGVyIiwidHJhY2tCeUlkRXhwRm4iLCJ0cmFja0J5SWRBcnJheUZuIiwidHJhY2tCeUlkT2JqRm4iLCJoYXNoRm5Mb2NhbHMiLCJsYXN0QmxvY2tNYXAiLCJuZXh0Tm9kZSIsImNvbGxlY3Rpb25MZW5ndGgiLCJ0cmFja0J5SWQiLCJ0cmFja0J5SWRGbiIsImNvbGxlY3Rpb25LZXlzIiwibmV4dEJsb2NrT3JkZXIiLCJwcmV2aW91c05vZGUiLCJuZXh0QmxvY2tNYXAiLCJibG9ja0tleSIsIk5HX0hJREVfQ0xBU1MiLCJOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTIiwibmV3U3R5bGVzIiwib2xkU3R5bGVzIiwiY2FzZXMiLCJuZ1N3aXRjaENvbnRyb2xsZXIiLCJ3YXRjaEV4cHIiLCJzZWxlY3RlZFRyYW5zY2x1ZGVzIiwic2VsZWN0ZWRFbGVtZW50cyIsInByZXZpb3VzTGVhdmVBbmltYXRpb25zIiwic2VsZWN0ZWRTY29wZXMiLCJzcGxpY2VGYWN0b3J5Iiwic2VsZWN0ZWRUcmFuc2NsdWRlIiwiY2FzZUVsZW1lbnQiLCJzZWxlY3RlZFNjb3BlIiwiYW5jaG9yIiwibmdTd2l0Y2hXaGVuU2VwYXJhdG9yIiwid2hlbkNhc2UiLCJuZ1RyYW5zY2x1ZGVNaW5FcnIiLCJmYWxsYmFja0xpbmtGbiIsIm5nVHJhbnNjbHVkZUNsb25lQXR0YWNoRm4iLCJub3RXaGl0ZXNwYWNlIiwidXNlRmFsbGJhY2tDb250ZW50IiwibmdUcmFuc2NsdWRlU2xvdCIsIm5vb3BOZ01vZGVsQ29udHJvbGxlciIsIlNlbGVjdENvbnRyb2xsZXIiLCJzY2hlZHVsZVJlbmRlciIsInJlbmRlclNjaGVkdWxlZCIsInNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlIiwicmVuZGVyQWZ0ZXIiLCJ1cGRhdGVTY2hlZHVsZWQiLCJvcHRpb25zTWFwIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInVua25vd25WYWwiLCJ1cGRhdGVVbmtub3duT3B0aW9uIiwic2VsZWN0RW1wdHlPcHRpb24iLCJyZWFsVmFsIiwiaGFzT3B0aW9uIiwiY3VycmVudGx5U2VsZWN0ZWRPcHRpb24iLCJoYXNoZWRWYWwiLCJhZGRPcHRpb24iLCJyZW1vdmVPcHRpb24iLCIkaGFzRW1wdHlPcHRpb24iLCIkaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQiLCJvcHRpb25BdHRycyIsImludGVycG9sYXRlVmFsdWVGbiIsImludGVycG9sYXRlVGV4dEZuIiwicmVtb3ZhbCIsInByZXZpb3VzbHlTZWxlY3RlZCIsInJlbW92ZVZhbHVlIiwic2VsZWN0UHJlTGluayIsInNob3VsZEJlU2VsZWN0ZWQiLCJjdXJyZW50bHlTZWxlY3RlZCIsImxhc3RWaWV3IiwibGFzdFZpZXdSZWYiLCJzZWxlY3RQb3N0TGluayIsInNlbGVjdEN0cmxOYW1lIiwicGF0dGVybkV4cCIsImludFZhbCIsImdldERlY2ltYWxzIiwiZ2V0VkYiLCJvcHRfcHJlY2lzaW9uIiwiUExVUkFMX0NBVEVHT1JZIiwiWkVSTyIsIk9ORSIsIlRXTyIsIkZFVyIsIk1BTlkiLCJPVEhFUiIsIkRBWSIsIkZJUlNUREFZT0ZXRUVLIiwiTU9OVEgiLCJTSE9SVERBWSIsIlNIT1JUTU9OVEgiLCJTVEFOREFMT05FTU9OVEgiLCJXRUVLRU5EUkFOR0UiLCJmdWxsRGF0ZSIsImxvbmdEYXRlIiwibWVkaXVtIiwibWVkaXVtRGF0ZSIsIm1lZGl1bVRpbWUiLCJzaG9ydCIsInNob3J0RGF0ZSIsInNob3J0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QUFRLFNBQVUsWUFBYSxVQUFXLFdBQVksWUFDbElDLGNBQWlCLEVBQUcsR0FDcEJDLFNBQVksa0JBQ1pDLFNBQVksWUFDWkMsT0FBVSxxQkFDVkMsV0FBYyxXQUNkQyxXQUFjLFlBQ2RDLFFBQVMsZ0JBQ1RDLFVBQWEsU0FDYkMsVUFBYSxVQUVmbjhCLGdCQUNFSSxhQUFnQixJQUNoQkssWUFBZSxJQUNmRCxVQUFhLElBQ2JILFdBQ0VvQyxNQUFTLEVBQ1RELE9BQVUsRUFDVmxDLFFBQVcsRUFDWGMsUUFBVyxFQUNYZzdCLE9BQVUsRUFDVjE1QixPQUFVLElBQ1ZDLE9BQVUsR0FDVkMsT0FBVSxHQUNWQyxPQUFVLEtBRVZKLE1BQVMsRUFDVEQsT0FBVSxFQUNWbEMsUUFBVyxFQUNYYyxRQUFXLEVBQ1hnN0IsT0FBVSxFQUNWMTVCLE9BQVUsS0FDVkMsT0FBVSxHQUNWQyxPQUFVLElBQ1ZDLE9BQVUsTUFHZGhqQyxHQUFNLFFBQ053OEQsU0FBWSxRQUNadEgsVUFBYSxTQUFtQnoxRCxFQUFHdTdELEdBQ2pDLEdBQUkxc0YsR0FBUSxFQUFKbXhCLEVBQVVnOUQsRUFBSzFCLEVBQU10N0QsRUFBR3U3RCxFQUFlLE9BQVMsSUFBTDFzRixHQUFrQixHQUFSbXVGLEVBQUdua0QsRUFDdkQyaUQsRUFBZ0JFLElBQ2pCRixFQUFnQk0sZ0JBSzlCN3JGLElBQU8sV0FDTHFNLEdBQVl6TyxFQUFPeUssU0FBVWlFLFFBRTlCMU8sU0FFRkEsT0FBT3FRLFFBQVE0RixRQUFROHlELGVBQWlCL29FLE9BQU9xUSxRQUFRakosUUFBUXFELFNBQVMya0YsTUFBTXJqQixRQUFRIiwiZmlsZSI6InNvZnQvYW5ndWxhci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS42LjZcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qIGV4cG9ydGVkXG4gICAgbWluRXJyQ29uZmlnLFxuICAgIGVycm9ySGFuZGxpbmdDb25maWcsXG4gICAgaXNWYWxpZE9iamVjdE1heERlcHRoXG4gICovXG5cbiAgdmFyIG1pbkVyckNvbmZpZyA9IHtcbiAgICBvYmplY3RNYXhEZXB0aDogNVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5lcnJvckhhbmRsaW5nQ29uZmlnXG4gICAqIEBtb2R1bGUgbmdcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbmZpZ3VyZSBzZXZlcmFsIGFzcGVjdHMgb2YgZXJyb3IgaGFuZGxpbmcgaW4gQW5ndWxhckpTIGlmIHVzZWQgYXMgYSBzZXR0ZXIgb3IgcmV0dXJuIHRoZVxuICAgKiBjdXJyZW50IGNvbmZpZ3VyYXRpb24gaWYgdXNlZCBhcyBhIGdldHRlci4gVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6XG4gICAqXG4gICAqIC0gKipvYmplY3RNYXhEZXB0aCoqOiBUaGUgbWF4aW11bSBkZXB0aCB0byB3aGljaCBvYmplY3RzIGFyZSB0cmF2ZXJzZWQgd2hlbiBzdHJpbmdpZmllZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gICAqXG4gICAqIE9taXR0ZWQgb3IgdW5kZWZpbmVkIG9wdGlvbnMgd2lsbCBsZWF2ZSB0aGUgY29ycmVzcG9uZGluZyBjb25maWd1cmF0aW9uIHZhbHVlcyB1bmNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBNYXkgb25seSBjb250YWluIHRoZSBvcHRpb25zIHRoYXQgbmVlZCB0byBiZVxuICAgKiAgICAgdXBkYXRlZC4gU3VwcG9ydGVkIGtleXM6XG4gICAqXG4gICAqICogYG9iamVjdE1heERlcHRoYCAgKip7TnVtYmVyfSoqIC0gVGhlIG1heCBkZXB0aCBmb3Igc3RyaW5naWZ5aW5nIG9iamVjdHMuIFNldHRpbmcgdG8gYVxuICAgKiAgIG5vbi1wb3NpdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgcmVtb3ZlcyB0aGUgbWF4IGRlcHRoIGxpbWl0LlxuICAgKiAgIERlZmF1bHQ6IDVcbiAgICovXG4gIGZ1bmN0aW9uIGVycm9ySGFuZGxpbmdDb25maWcoY29uZmlnKSB7XG4gICAgaWYgKGlzT2JqZWN0KGNvbmZpZykpIHtcbiAgICAgIGlmIChpc0RlZmluZWQoY29uZmlnLm9iamVjdE1heERlcHRoKSkge1xuICAgICAgICBtaW5FcnJDb25maWcub2JqZWN0TWF4RGVwdGggPSBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgoY29uZmlnLm9iamVjdE1heERlcHRoKSA/IGNvbmZpZy5vYmplY3RNYXhEZXB0aCA6IE5hTjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pbkVyckNvbmZpZztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heERlcHRoXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgobWF4RGVwdGgpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIobWF4RGVwdGgpICYmIG1heERlcHRoID4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAgICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOlxuICAgKlxuICAgKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICAgKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpO1xuICAgKlxuICAgKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAgICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZVxuICAgKiByZXN1bHRpbmcgZXJyb3Igd2lsbCByZXBsYWNlIHswfSB3aXRoIHRoZSB2YWx1ZSBvZiBmb28sIGFuZCB7MX0gd2l0aCB0aGVcbiAgICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICAgKiB0YWtlLlxuICAgKlxuICAgKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gICAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLlxuICAgKlxuICAgKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAgICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuXG4gICAqIEluc3RhbmNlcyBzaG91bGQgaGF2ZSBuYW1lcyBvZiB0aGUgZm9ybSBuYW1lc3BhY2VNaW5FcnIgZm9yIGEgbWluRXJyIGNyZWF0ZWRcbiAgICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gICAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IEVycm9yQ29uc3RydWN0b3IgQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yIHRvIGJlIGluc3RhbnRpYXRlZCB3aGVuIHJldHVybmluZ1xuICAgKiAgIGVycm9yIGZyb20gcmV0dXJuZWQgZnVuY3Rpb24sIGZvciBjYXNlcyB3aGVuIGEgcGFydGljdWxhciB0eXBlIG9mIGVycm9yIGlzIHVzZWZ1bC5cbiAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAgICovXG5cbiAgZnVuY3Rpb24gbWluRXJyKG1vZHVsZSwgRXJyb3JDb25zdHJ1Y3Rvcikge1xuICAgIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29kZSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgICBtZXNzYWdlID0gJ1snICsgKG1vZHVsZSA/IG1vZHVsZSArICc6JyA6ICcnKSArIGNvZGUgKyAnXSAnLFxuICAgICAgICAgIHRlbXBsYXRlQXJncyA9IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKGFyZywgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoKTtcbiAgICAgIH0pLFxuICAgICAgICAgIHBhcmFtUHJlZml4LFxuICAgICAgICAgIGk7XG5cbiAgICAgIG1lc3NhZ2UgKz0gdGVtcGxhdGUucmVwbGFjZSgvXFx7XFxkK1xcfS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gK21hdGNoLnNsaWNlKDEsIC0xKTtcblxuICAgICAgICBpZiAoaW5kZXggPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlQXJnc1tpbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgbWVzc2FnZSArPSAnXFxuaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuNi42LycgKyAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTtcblxuICAgICAgZm9yIChpID0gMCwgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gcGFyYW1QcmVmaXggKyAncCcgKyBpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHRlbXBsYXRlQXJnc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgICB9O1xuICB9XG5cbiAgLyogV2UgbmVlZCB0byB0ZWxsIEVTTGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi9cbiAgLyogZXhwb3J0ZWRcbiAgICBhbmd1bGFyLFxuICAgIG1zaWUsXG4gICAganFMaXRlLFxuICAgIGpRdWVyeSxcbiAgICBzbGljZSxcbiAgICBzcGxpY2UsXG4gICAgcHVzaCxcbiAgICB0b1N0cmluZyxcbiAgICBtaW5FcnJDb25maWcsXG4gICAgZXJyb3JIYW5kbGluZ0NvbmZpZyxcbiAgICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgsXG4gICAgbmdNaW5FcnIsXG4gICAgYW5ndWxhck1vZHVsZSxcbiAgICB1aWQsXG4gICAgUkVHRVhfU1RSSU5HX1JFR0VYUCxcbiAgICBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSxcbiAgXG4gICAgbG93ZXJjYXNlLFxuICAgIHVwcGVyY2FzZSxcbiAgICBtYW51YWxMb3dlcmNhc2UsXG4gICAgbWFudWFsVXBwZXJjYXNlLFxuICAgIG5vZGVOYW1lXyxcbiAgICBpc0FycmF5TGlrZSxcbiAgICBmb3JFYWNoLFxuICAgIGZvckVhY2hTb3J0ZWQsXG4gICAgcmV2ZXJzZVBhcmFtcyxcbiAgICBuZXh0VWlkLFxuICAgIHNldEhhc2hLZXksXG4gICAgZXh0ZW5kLFxuICAgIHRvSW50LFxuICAgIGluaGVyaXQsXG4gICAgbWVyZ2UsXG4gICAgbm9vcCxcbiAgICBpZGVudGl0eSxcbiAgICB2YWx1ZUZuLFxuICAgIGlzVW5kZWZpbmVkLFxuICAgIGlzRGVmaW5lZCxcbiAgICBpc09iamVjdCxcbiAgICBpc0JsYW5rT2JqZWN0LFxuICAgIGlzU3RyaW5nLFxuICAgIGlzTnVtYmVyLFxuICAgIGlzTnVtYmVyTmFOLFxuICAgIGlzRGF0ZSxcbiAgICBpc0Vycm9yLFxuICAgIGlzQXJyYXksXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc1JlZ0V4cCxcbiAgICBpc1dpbmRvdyxcbiAgICBpc1Njb3BlLFxuICAgIGlzRmlsZSxcbiAgICBpc0Zvcm1EYXRhLFxuICAgIGlzQmxvYixcbiAgICBpc0Jvb2xlYW4sXG4gICAgaXNQcm9taXNlTGlrZSxcbiAgICB0cmltLFxuICAgIGVzY2FwZUZvclJlZ2V4cCxcbiAgICBpc0VsZW1lbnQsXG4gICAgbWFrZU1hcCxcbiAgICBpbmNsdWRlcyxcbiAgICBhcnJheVJlbW92ZSxcbiAgICBjb3B5LFxuICAgIHNpbXBsZUNvbXBhcmUsXG4gICAgZXF1YWxzLFxuICAgIGNzcCxcbiAgICBqcSxcbiAgICBjb25jYXQsXG4gICAgc2xpY2VBcmdzLFxuICAgIGJpbmQsXG4gICAgdG9Kc29uUmVwbGFjZXIsXG4gICAgdG9Kc29uLFxuICAgIGZyb21Kc29uLFxuICAgIGNvbnZlcnRUaW1lem9uZVRvTG9jYWwsXG4gICAgdGltZXpvbmVUb09mZnNldCxcbiAgICBzdGFydGluZ1RhZyxcbiAgICB0cnlEZWNvZGVVUklDb21wb25lbnQsXG4gICAgcGFyc2VLZXlWYWx1ZSxcbiAgICB0b0tleVZhbHVlLFxuICAgIGVuY29kZVVyaVNlZ21lbnQsXG4gICAgZW5jb2RlVXJpUXVlcnksXG4gICAgYW5ndWxhckluaXQsXG4gICAgYm9vdHN0cmFwLFxuICAgIGdldFRlc3RhYmlsaXR5LFxuICAgIHNuYWtlX2Nhc2UsXG4gICAgYmluZEpRdWVyeSxcbiAgICBhc3NlcnRBcmcsXG4gICAgYXNzZXJ0QXJnRm4sXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHksXG4gICAgZ2V0dGVyLFxuICAgIGdldEJsb2NrTm9kZXMsXG4gICAgaGFzT3duUHJvcGVydHksXG4gICAgY3JlYXRlTWFwLFxuICAgIHN0cmluZ2lmeSxcbiAgXG4gICAgTk9ERV9UWVBFX0VMRU1FTlQsXG4gICAgTk9ERV9UWVBFX0FUVFJJQlVURSxcbiAgICBOT0RFX1RZUEVfVEVYVCxcbiAgICBOT0RFX1RZUEVfQ09NTUVOVCxcbiAgICBOT0RFX1RZUEVfRE9DVU1FTlQsXG4gICAgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UXG4gICovXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtb2R1bGVcbiAgICogQG5hbWUgbmdcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAaW5zdGFsbGF0aW9uXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiAjIG5nIChjb3JlIG1vZHVsZSlcbiAgICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICAgKiBjb250YWlucyB0aGUgZXNzZW50aWFsIGNvbXBvbmVudHMgZm9yIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiB0byBmdW5jdGlvbi4gVGhlIHRhYmxlIGJlbG93XG4gICAqIGxpc3RzIGEgaGlnaCBsZXZlbCBicmVha2Rvd24gb2YgZWFjaCBvZiB0aGUgc2VydmljZXMvZmFjdG9yaWVzLCBmaWx0ZXJzLCBkaXJlY3RpdmVzIGFuZCB0ZXN0aW5nXG4gICAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICAgKlxuICAgKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nXCI+PC9kaXY+XG4gICAqL1xuXG4gIHZhciBSRUdFWF9TVFJJTkdfUkVHRVhQID0gL15cXC8oLispXFwvKFthLXpdKikkLztcblxuICAvLyBUaGUgbmFtZSBvZiBhIGZvcm0gY29udHJvbCdzIFZhbGlkaXR5U3RhdGUgcHJvcGVydHkuXG4gIC8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxuICB2YXIgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkgPSAndmFsaWRpdHknO1xuXG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLmxvd2VyY2FzZVxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIHNpbmNlVmVyc2lvbj1cIjEuNS4wXCJcbiAgICogcmVtb3ZlVmVyc2lvbj1cIjEuNy4wXCJcbiAgICogVXNlIFtTdHJpbmcucHJvdG90eXBlLnRvTG93ZXJDYXNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvdG9Mb3dlckNhc2UpIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLlxuICAgKi9cbiAgdmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uIGxvd2VyY2FzZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2VcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBzaW5jZVZlcnNpb249XCIxLjUuMFwiXG4gICAqIHJlbW92ZVZlcnNpb249XCIxLjcuMFwiXG4gICAqIFVzZSBbU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RvVXBwZXJDYXNlKSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy5cbiAgICovXG4gIHZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbiB1cHBlcmNhc2Uoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZztcbiAgfTtcblxuICB2YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24gbWFudWFsTG93ZXJjYXNlKHMpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG4gICAgcmV0dXJuIGlzU3RyaW5nKHMpID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7XG4gICAgfSkgOiBzO1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgfTtcbiAgdmFyIG1hbnVhbFVwcGVyY2FzZSA9IGZ1bmN0aW9uIG1hbnVhbFVwcGVyY2FzZShzKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuICAgIHJldHVybiBpc1N0cmluZyhzKSA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApICYgfjMyKTtcbiAgICB9KSA6IHM7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICB9O1xuXG4gIC8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaFxuICAvLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kc1xuICAvLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMTM4N1xuICBpZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkge1xuICAgIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTtcbiAgICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7XG4gIH1cblxuICB2YXIgbXNpZSxcbiAgICAgIC8vIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSwgb3IgTmFOIGlmIFVBIGlzIG5vdCBJRS5cbiAganFMaXRlLFxuICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLlxuICBqUXVlcnksXG4gICAgICAvLyBkZWxheSBiaW5kaW5nXG4gIHNsaWNlID0gW10uc2xpY2UsXG4gICAgICBzcGxpY2UgPSBbXS5zcGxpY2UsXG4gICAgICBwdXNoID0gW10ucHVzaCxcbiAgICAgIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgICAgbmdNaW5FcnIgPSBtaW5FcnIoJ25nJyksXG5cblxuICAvKiogQG5hbWUgYW5ndWxhciAqL1xuICBhbmd1bGFyID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLFxuICAgICAgYW5ndWxhck1vZHVsZSxcbiAgICAgIHVpZCA9IDA7XG5cbiAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gIC8qKlxuICAgKiBkb2N1bWVudE1vZGUgaXMgYW4gSUUtb25seSBwcm9wZXJ0eVxuICAgKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvY2MxOTY5ODgodj12cy44NSkuYXNweFxuICAgKi9cbiAgbXNpZSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gb2JqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cyxcbiAgICogICAgICAgICAgICAgICAgICAgU3RyaW5nIC4uLilcbiAgICovXG4gIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xuXG4gICAgLy8gYG51bGxgLCBgdW5kZWZpbmVkYCBhbmQgYHdpbmRvd2AgYXJlIG5vdCBhcnJheS1saWtlXG4gICAgaWYgKG9iaiA9PSBudWxsIHx8IGlzV2luZG93KG9iaikpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGFycmF5cywgc3RyaW5ncyBhbmQgalF1ZXJ5L2pxTGl0ZSBvYmplY3RzIGFyZSBhcnJheSBsaWtlXG4gICAgLy8gKiBqcUxpdGUgaXMgZWl0aGVyIHRoZSBqUXVlcnkgb3IganFMaXRlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gICAgLy8gKiB3ZSBoYXZlIHRvIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YganFMaXRlIGZpcnN0IGFzIHRoaXMgbWV0aG9kIGlzIGNhbGxlZFxuICAgIC8vICAgdmlhIHRoZSBmb3JFYWNoIG1ldGhvZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUganFMaXRlIG9iamVjdCBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikgfHwganFMaXRlICYmIG9iaiBpbnN0YW5jZW9mIGpxTGl0ZSkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcbiAgICAvLyBcImxlbmd0aFwiIGluIG9iaiB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0xMTUwOClcbiAgICB2YXIgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gT2JqZWN0KG9iaikgJiYgb2JqLmxlbmd0aDtcblxuICAgIC8vIE5vZGVMaXN0IG9iamVjdHMgKHdpdGggYGl0ZW1gIG1ldGhvZCkgYW5kXG4gICAgLy8gb3RoZXIgb2JqZWN0cyB3aXRoIHN1aXRhYmxlIGxlbmd0aCBjaGFyYWN0ZXJpc3RpY3MgYXJlIGFycmF5LWxpa2VcbiAgICByZXR1cm4gaXNOdW1iZXIobGVuZ3RoKSAmJiAobGVuZ3RoID49IDAgJiYgKGxlbmd0aCAtIDEgaW4gb2JqIHx8IG9iaiBpbnN0YW5jZW9mIEFycmF5KSB8fCB0eXBlb2Ygb2JqLml0ZW0gPT09ICdmdW5jdGlvbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLmZvckVhY2hcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhblxuICAgKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSwgb2JqKWAsIHdoZXJlIGB2YWx1ZWBcbiAgICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxuICAgKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLlxuICAgKlxuICAgKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnNcbiAgICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICAgKlxuICAgKiBVbmxpa2UgRVMyNjInc1xuICAgKiBbQXJyYXkucHJvdG90eXBlLmZvckVhY2hdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40LjQuMTgpLFxuICAgKiBwcm92aWRpbmcgJ3VuZGVmaW5lZCcgb3IgJ251bGwnIHZhbHVlcyBmb3IgYG9iamAgd2lsbCBub3QgdGhyb3cgYSBUeXBlRXJyb3IsIGJ1dCByYXRoZXIganVzdFxuICAgKiByZXR1cm4gdGhlIHZhbHVlIHByb3ZpZGVkLlxuICAgKlxuICAgICBgYGBqc1xuICAgICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9O1xuICAgICAgIHZhciBsb2cgPSBbXTtcbiAgICAgICBhbmd1bGFyLmZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgICB9LCBsb2cpO1xuICAgICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6IG1hbGUnXSk7XG4gICAgIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFJlZmVyZW5jZSB0byBgb2JqYC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleSwgbGVuZ3RoO1xuICAgIGlmIChvYmopIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9PSAnbGVuZ3RoJyAmJiBrZXkgIT09ICduYW1lJyAmJiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgICB2YXIgaXNQcmltaXRpdmUgPSAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnO1xuICAgICAgICBmb3IgKGtleSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgICBpZiAoaXNQcmltaXRpdmUgfHwga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChvYmopKSB7XG4gICAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgaW5oZXJpdGluZyBPYmplY3QucHJvdG90eXBlLCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBuZWVkZWRcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgd2hpY2ggZG8gbm90IGhhdmUgYSBtZXRob2QgYGhhc093blByb3BlcnR5YFxuICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9XG5cbiAgLyoqXG4gICAqIHdoZW4gdXNpbmcgZm9yRWFjaCB0aGUgcGFyYW1zIGFyZSB2YWx1ZSwga2V5LCBidXQgaXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGhhdmUga2V5LCB2YWx1ZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICopfSBpdGVyYXRvckZuXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfVxuICAgKi9cbiAgZnVuY3Rpb24gcmV2ZXJzZVBhcmFtcyhpdGVyYXRvckZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBpdGVyYXRvckZuKGtleSwgdmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuXG4gICAqXG4gICAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmVcbiAgICogd2UgaGl0IG51bWJlciBwcmVjaXNpb24gaXNzdWVzIGluIEphdmFTY3JpcHQuXG4gICAqXG4gICAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAgICovXG4gIGZ1bmN0aW9uIG5leHRVaWQoKSB7XG4gICAgcmV0dXJuICsrdWlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LlxuICAgKiBAcGFyYW0gb2JqIG9iamVjdFxuICAgKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpXG4gICAqL1xuICBmdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkge1xuICAgIGlmIChoKSB7XG4gICAgICBvYmouJCRoYXNoS2V5ID0gaDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIG9iai4kJGhhc2hLZXk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmFzZUV4dGVuZChkc3QsIG9ianMsIGRlZXApIHtcbiAgICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBvYmpzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIHZhciBvYmogPSBvYmpzW2ldO1xuICAgICAgaWYgKCFpc09iamVjdChvYmopICYmICFpc0Z1bmN0aW9uKG9iaikpIGNvbnRpbnVlO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICB2YXIgc3JjID0gb2JqW2tleV07XG5cbiAgICAgICAgaWYgKGRlZXAgJiYgaXNPYmplY3Qoc3JjKSkge1xuICAgICAgICAgIGlmIChpc0RhdGUoc3JjKSkge1xuICAgICAgICAgICAgZHN0W2tleV0gPSBuZXcgRGF0ZShzcmMudmFsdWVPZigpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNyYykpIHtcbiAgICAgICAgICAgIGRzdFtrZXldID0gbmV3IFJlZ0V4cChzcmMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3JjLm5vZGVOYW1lKSB7XG4gICAgICAgICAgICBkc3Rba2V5XSA9IHNyYy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQoc3JjKSkge1xuICAgICAgICAgICAgZHN0W2tleV0gPSBzcmMuY2xvbmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChkc3Rba2V5XSkpIGRzdFtrZXldID0gaXNBcnJheShzcmMpID8gW10gOiB7fTtcbiAgICAgICAgICAgIGJhc2VFeHRlbmQoZHN0W2tleV0sIFtzcmNdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHN0W2tleV0gPSBzcmM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRIYXNoS2V5KGRzdCwgaCk7XG4gICAgcmV0dXJuIGRzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5leHRlbmRcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiAgICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4gICAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbiAgICpcbiAgICogKipOb3RlOioqIEtlZXAgaW4gbWluZCB0aGF0IGBhbmd1bGFyLmV4dGVuZGAgZG9lcyBub3Qgc3VwcG9ydCByZWN1cnNpdmUgbWVyZ2UgKGRlZXAgY29weSkuIFVzZVxuICAgKiB7QGxpbmsgYW5ndWxhci5tZXJnZX0gZm9yIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiAgICovXG4gIGZ1bmN0aW9uIGV4dGVuZChkc3QpIHtcbiAgICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICogQG5nZG9jIGZ1bmN0aW9uXG4gICogQG5hbWUgYW5ndWxhci5tZXJnZVxuICAqIEBtb2R1bGUgbmdcbiAgKiBAa2luZCBmdW5jdGlvblxuICAqXG4gICogQGRlc2NyaXB0aW9uXG4gICogRGVlcGx5IGV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4gICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4gICogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLm1lcmdlKHt9LCBvYmplY3QxLCBvYmplY3QyKWAuXG4gICpcbiAgKiBVbmxpa2Uge0BsaW5rIGFuZ3VsYXIuZXh0ZW5kIGV4dGVuZCgpfSwgYG1lcmdlKClgIHJlY3Vyc2l2ZWx5IGRlc2NlbmRzIGludG8gb2JqZWN0IHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICogb2JqZWN0cywgcGVyZm9ybWluZyBhIGRlZXAgY29weS5cbiAgKlxuICAqIEBkZXByZWNhdGVkXG4gICogc2luY2VWZXJzaW9uPVwiMS42LjVcIlxuICAqIFRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYnV0IHdpbGwgbm90IGJlIHJlbW92ZWQgaW4gdGhlIDEueCBsaWZlY3ljbGUuXG4gICogVGhlcmUgYXJlIGVkZ2UgY2FzZXMgKHNlZSB7QGxpbmsgYW5ndWxhci5tZXJnZSNrbm93bi1pc3N1ZXMga25vd24gaXNzdWVzfSkgdGhhdCBhcmUgbm90XG4gICogc3VwcG9ydGVkIGJ5IHRoaXMgZnVuY3Rpb24uIFdlIHN1Z2dlc3RcbiAgKiB1c2luZyBbbG9kYXNoJ3MgbWVyZ2UoKV0oaHR0cHM6Ly9sb2Rhc2guY29tL2RvY3MvNC4xNy40I21lcmdlKSBpbnN0ZWFkLlxuICAqXG4gICogQGtub3duSXNzdWVcbiAgKiBUaGlzIGlzIGEgbGlzdCBvZiAoa25vd24pIG9iamVjdCB0eXBlcyB0aGF0IGFyZSBub3QgaGFuZGxlZCBjb3JyZWN0bHkgYnkgdGhpcyBmdW5jdGlvbjpcbiAgKiAtIFtgQmxvYmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iKVxuICAqIC0gW2BNZWRpYVN0cmVhbWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9NZWRpYVN0cmVhbSlcbiAgKiAtIFtgQ2FudmFzR3JhZGllbnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzR3JhZGllbnQpXG4gICogLSBBbmd1bGFySlMge0BsaW5rICRyb290U2NvcGUuU2NvcGUgc2NvcGVzfTtcbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4gICovXG4gIGZ1bmN0aW9uIG1lcmdlKGRzdCkge1xuICAgIHJldHVybiBiYXNlRXh0ZW5kKGRzdCwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSW50KHN0cikge1xuICAgIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcbiAgfVxuXG4gIHZhciBpc051bWJlck5hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc051bWJlck5hTihudW0pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bSAhPT0gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkge1xuICAgIHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZShwYXJlbnQpLCBleHRyYSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICAgKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgICBgYGBqc1xuICAgICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykge1xuICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgICAgKGNhbGxiYWNrIHx8IGFuZ3VsYXIubm9vcCkocmVzdWx0KTtcbiAgICAgICB9XG4gICAgIGBgYFxuICAgKi9cbiAgZnVuY3Rpb24gbm9vcCgpIHt9XG4gIG5vb3AuJGluamVjdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5pZGVudGl0eVxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdHMgZmlyc3QgYXJndW1lbnQuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICAgKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgKlxuICAgICBgYGBqc1xuICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmFuc2Zvcm1hdGlvbkZuLCB2YWx1ZSkge1xuICAgICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBhbmd1bGFyLmlkZW50aXR5KSh2YWx1ZSk7XG4gICAgIH07XG4gIFxuICAgICAvLyBFLmcuXG4gICAgIGZ1bmN0aW9uIGdldFJlc3VsdChmbiwgaW5wdXQpIHtcbiAgICAgICByZXR1cm4gKGZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKGlucHV0KTtcbiAgICAgfTtcbiAgXG4gICAgIGdldFJlc3VsdChmdW5jdGlvbihuKSB7IHJldHVybiBuICogMjsgfSwgMjEpOyAgIC8vIHJldHVybnMgNDJcbiAgICAgZ2V0UmVzdWx0KG51bGwsIDIxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgICBnZXRSZXN1bHQodW5kZWZpbmVkLCAyMSk7ICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIDIxXG4gICAgIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIHRvIGJlIHJldHVybmVkLlxuICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHBhc3NlZCBpbi5cbiAgICovXG4gIGZ1bmN0aW9uIGlkZW50aXR5KCQpIHtcbiAgICByZXR1cm4gJDtcbiAgfVxuICBpZGVudGl0eS4kaW5qZWN0ID0gW107XG5cbiAgZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiB2YWx1ZVJlZigpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQ3VzdG9tVG9TdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqLnRvU3RyaW5nKSAmJiBvYmoudG9TdHJpbmcgIT09IHRvU3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkXG4gICAqIEBtb2R1bGUgbmdcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gICAqL1xuICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGRlZmluZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGRlZmluZWQuXG4gICAqL1xuICBmdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5pc09iamVjdFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90XG4gICAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4gTm90ZSB0aGF0IEphdmFTY3JpcHQgYXJyYXlzIGFyZSBvYmplY3RzLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vaXNvYmplY3Q0XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAgICovXG4gIGZ1bmN0aW9uIGlzQmxhbmtPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgIWdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5pc1N0cmluZ1xuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyXG4gICAqIEBtb2R1bGUgbmdcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgTnVtYmVyYC5cbiAgICpcbiAgICogVGhpcyBpbmNsdWRlcyB0aGUgXCJzcGVjaWFsXCIgbnVtYmVycyBgTmFOYCwgYCtJbmZpbml0eWAgYW5kIGAtSW5maW5pdHlgLlxuICAgKlxuICAgKiBJZiB5b3Ugd2lzaCB0byBleGNsdWRlIHRoZXNlIHRoZW4geW91IGNhbiB1c2UgdGhlIG5hdGl2ZVxuICAgKiBbYGlzRmluaXRlJ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvaXNGaW5pdGUpXG4gICAqIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgTnVtYmVyYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlXG4gICAqIEBtb2R1bGUgbmdcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYERhdGVgLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuaXNBcnJheVxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuIEFsaWFzIG9mIEFycmF5LmlzQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXG4gICAqL1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBFcnJvcmAuXG4gICAqIExvb3NlbHkgYmFzZWQgb24gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaXNlcnJvclxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgIHZhciB0YWcgPSB0b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRXhjZXB0aW9uXSc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnW29iamVjdCBET01FeGNlcHRpb25dJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuaXNGdW5jdGlvblxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBpc1Njb3BlKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGaWxlXSc7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Zvcm1EYXRhKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Jsb2Iob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xuICB9XG5cbiAgdmFyIFRZUEVEX0FSUkFZX1JFR0VYUCA9IC9eXFxbb2JqZWN0ICg/OlVpbnQ4fFVpbnQ4Q2xhbXBlZHxVaW50MTZ8VWludDMyfEludDh8SW50MTZ8SW50MzJ8RmxvYXQzMnxGbG9hdDY0KUFycmF5XSQvO1xuICBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNOdW1iZXIodmFsdWUubGVuZ3RoKSAmJiBUWVBFRF9BUlJBWV9SRUdFWFAudGVzdCh0b1N0cmluZy5jYWxsKHZhbHVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FycmF5QnVmZmVyKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG4gIH1cblxuICB2YXIgdHJpbSA9IGZ1bmN0aW9uIHRyaW0odmFsdWUpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gQ29waWVkIGZyb206XG4gIC8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvbG9jYWxfY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTEwMjFcbiAgLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLlxuICB2YXIgZXNjYXBlRm9yUmVnZXhwID0gZnVuY3Rpb24gZXNjYXBlRm9yUmVnZXhwKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC8oWy0oKVtcXF17fSs/Ki4kXnwsOiM8IVxcXFxdKS9nLCAnXFxcXCQxJylcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIC5yZXBsYWNlKC9cXHgwOC9nLCAnXFxcXHgwOCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnRcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gICAqL1xuICBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiAhIShub2RlICYmIChub2RlLm5vZGVOYW1lIC8vIFdlIGFyZSBhIGRpcmVjdCBlbGVtZW50LlxuICAgIHx8IG5vZGUucHJvcCAmJiBub2RlLmF0dHIgJiYgbm9kZS5maW5kKSk7IC8vIFdlIGhhdmUgYW4gb24gYW5kIGZpbmQgbWV0aG9kIHBhcnQgb2YgalF1ZXJ5IEFQSS5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gc3RyICdrZXkxLGtleTIsLi4uJ1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn1cbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VNYXAoc3RyKSB7XG4gICAgdmFyIG9iaiA9IHt9LFxuICAgICAgICBpdGVtcyA9IHN0ci5zcGxpdCgnLCcpLFxuICAgICAgICBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqW2l0ZW1zW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkge1xuICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbWVudC5ub2RlTmFtZSB8fCBlbGVtZW50WzBdICYmIGVsZW1lbnRbMF0ubm9kZU5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBvYmopICE9PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuY29weVxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuICAgKlxuICAgKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLlxuICAgKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheXMpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKVxuICAgKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LlxuICAgKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byBgZGVzdGluYXRpb25gIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgT25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIHRha2VuIGludG8gYWNjb3VudC4gTm9uLWVudW1lcmFibGUgcHJvcGVydGllcyAoYm90aCBvbiBgc291cmNlYFxuICAgKiAgIGFuZCBvbiBgZGVzdGluYXRpb25gKSB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LlxuICAgKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC5cbiAgICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gICAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLlxuICAgKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwiY29weUV4YW1wbGVcIiBuYW1lPVwiYW5ndWxhci1jb3B5XCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPlxuICAgICAgICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48L2xhYmVsPjxiciAvPlxuICAgICAgICAgICAgPGxhYmVsPkFnZTogIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ1c2VyLmFnZVwiIC8+PC9sYWJlbD48YnIgLz5cbiAgICAgICAgICAgIEdlbmRlcjogPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJtYWxlXCIgLz5tYWxlPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJmZW1hbGVcIiAvPmZlbWFsZTwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicmVzZXQoKVwiPlJFU0VUPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXBkYXRlKHVzZXIpXCI+U0FWRTwvYnV0dG9uPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8cHJlPmZvcm0gPSB7e3VzZXIgfCBqc29ufX08L3ByZT5cbiAgICAgICAgICA8cHJlPm1hc3RlciA9IHt7bWFzdGVyIHwganNvbn19PC9wcmU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAvLyBNb2R1bGU6IGNvcHlFeGFtcGxlXG4gICAgICAgIGFuZ3VsYXIuXG4gICAgICAgICAgbW9kdWxlKCdjb3B5RXhhbXBsZScsIFtdKS5cbiAgICAgICAgICBjb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUubWFzdGVyID0ge307XG4gIFxuICAgICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIEV4YW1wbGUgd2l0aCAxIGFyZ3VtZW50XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAgICAgfTtcbiAgXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHNcbiAgICAgICAgICAgICAgYW5ndWxhci5jb3B5KHVzZXIsICRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAgICAgfTtcbiAgXG4gICAgICAgICAgICAkc2NvcGUucmVzZXQoKTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgKi9cbiAgZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCkge1xuICAgIHZhciBzdGFja1NvdXJjZSA9IFtdO1xuICAgIHZhciBzdGFja0Rlc3QgPSBbXTtcbiAgICBtYXhEZXB0aCA9IGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkgPyBtYXhEZXB0aCA6IE5hTjtcblxuICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgaWYgKGlzVHlwZWRBcnJheShkZXN0aW5hdGlvbikgfHwgaXNBcnJheUJ1ZmZlcihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLCAnQ2FuXFwndCBjb3B5ISBUeXBlZEFycmF5IGRlc3RpbmF0aW9uIGNhbm5vdCBiZSBtdXRhdGVkLicpO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwaScsICdDYW5cXCd0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gRW1wdHkgdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIGlmIChrZXkgIT09ICckJGhhc2hLZXknKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgICByZXR1cm4gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb3B5RWxlbWVudChzb3VyY2UsIG1heERlcHRoKTtcblxuICAgIGZ1bmN0aW9uIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKSB7XG4gICAgICBtYXhEZXB0aC0tO1xuICAgICAgaWYgKG1heERlcHRoIDwgMCkge1xuICAgICAgICByZXR1cm4gJy4uLic7XG4gICAgICB9XG4gICAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTtcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNvdXJjZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjb3B5RWxlbWVudChzb3VyY2VbaV0sIG1heERlcHRoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzb3VyY2UgJiYgdHlwZW9mIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBTbG93IHBhdGgsIHdoaWNoIG11c3QgcmVseSBvbiBoYXNPd25Qcm9wZXJ0eVxuICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSwgbWF4RGVwdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2xvd2VzdCBwYXRoIC0tLSBoYXNPd25Qcm9wZXJ0eSBjYW4ndCBiZSBjYWxsZWQgYXMgYSBtZXRob2RcbiAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEhhc2hLZXkoZGVzdGluYXRpb24sIGgpO1xuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvcHlFbGVtZW50KHNvdXJjZSwgbWF4RGVwdGgpIHtcbiAgICAgIC8vIFNpbXBsZSB2YWx1ZXNcbiAgICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuXG4gICAgICAvLyBBbHJlYWR5IGNvcGllZCB2YWx1ZXNcbiAgICAgIHZhciBpbmRleCA9IHN0YWNrU291cmNlLmluZGV4T2Yoc291cmNlKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgICAgICB0aHJvdyBuZ01pbkVycignY3B3cycsICdDYW5cXCd0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmVlZHNSZWN1cnNlID0gZmFsc2U7XG4gICAgICB2YXIgZGVzdGluYXRpb24gPSBjb3B5VHlwZShzb3VyY2UpO1xuXG4gICAgICBpZiAoZGVzdGluYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDogT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAgICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuXG4gICAgICByZXR1cm4gbmVlZHNSZWN1cnNlID8gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpIDogZGVzdGluYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29weVR5cGUoc291cmNlKSB7XG4gICAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwoc291cmNlKSkge1xuICAgICAgICBjYXNlICdbb2JqZWN0IEludDhBcnJheV0nOlxuICAgICAgICBjYXNlICdbb2JqZWN0IEludDE2QXJyYXldJzpcbiAgICAgICAgY2FzZSAnW29iamVjdCBJbnQzMkFycmF5XSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgVWludDhBcnJheV0nOlxuICAgICAgICBjYXNlICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgVWludDE2QXJyYXldJzpcbiAgICAgICAgY2FzZSAnW29iamVjdCBVaW50MzJBcnJheV0nOlxuICAgICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKGNvcHlFbGVtZW50KHNvdXJjZS5idWZmZXIpLCBzb3VyY2UuYnl0ZU9mZnNldCwgc291cmNlLmxlbmd0aCk7XG5cbiAgICAgICAgY2FzZSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nOlxuICAgICAgICAgIC8vIFN1cHBvcnQ6IElFMTBcbiAgICAgICAgICBpZiAoIXNvdXJjZS5zbGljZSkge1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgaW4gdGhpcyBjYXNlIHdlIGtub3cgdGhlIGVudmlyb25tZW50IHN1cHBvcnRzIEFycmF5QnVmZmVyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgICAgICAgICAgdmFyIGNvcGllZCA9IG5ldyBBcnJheUJ1ZmZlcihzb3VyY2UuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShjb3BpZWQpLnNldChuZXcgVWludDhBcnJheShzb3VyY2UpKTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgICAgICAgIHJldHVybiBjb3BpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoMCk7XG5cbiAgICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKHNvdXJjZS52YWx1ZU9mKCkpO1xuXG4gICAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChzb3VyY2Uuc291cmNlLCBzb3VyY2UudG9TdHJpbmcoKS5tYXRjaCgvW14vXSokLylbMF0pO1xuICAgICAgICAgIHJlLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgICAgICAgcmV0dXJuIHJlO1xuXG4gICAgICAgIGNhc2UgJ1tvYmplY3QgQmxvYl0nOlxuICAgICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKFtzb3VyY2VdLCB7IHR5cGU6IHNvdXJjZS50eXBlIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UuY2xvbmVOb2RlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGZ1bmN0aW9uIHNpbXBsZUNvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiIHx8IGEgIT09IGEgJiYgYiAhPT0gYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5lcXVhbHNcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICAgKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLlxuICAgKlxuICAgKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAgKlxuICAgKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLlxuICAgKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICAgKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC5cbiAgICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YVNjcmlwdCwgTmFOID09IE5hTiA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byBOYU4gYXMgZXF1YWwpXG4gICAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAgICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbFxuICAgKiAgIHJlcHJlc2VudGF0aW9uIG1hdGNoZXMpLlxuICAgKlxuICAgKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzXG4gICAqIHRoYXQgYmVnaW4gd2l0aCBgJGAgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICAgKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJlcXVhbHNFeGFtcGxlXCIgbmFtZT1cImVxdWFsc0V4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxmb3JtIG5vdmFsaWRhdGU+XG4gICAgICAgICAgICA8aDM+VXNlciAxPC9oMz5cbiAgICAgICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlcjEubmFtZVwiPlxuICAgICAgICAgICAgQWdlOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwidXNlcjEuYWdlXCI+XG4gIFxuICAgICAgICAgICAgPGgzPlVzZXIgMjwvaDM+XG4gICAgICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIyLm5hbWVcIj5cbiAgICAgICAgICAgIEFnZTogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInVzZXIyLmFnZVwiPlxuICBcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJDb21wYXJlXCIgbmctY2xpY2s9XCJjb21wYXJlKClcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgVXNlciAxOiA8cHJlPnt7dXNlcjEgfCBqc29ufX08L3ByZT5cbiAgICAgICAgICAgIFVzZXIgMjogPHByZT57e3VzZXIyIHwganNvbn19PC9wcmU+XG4gICAgICAgICAgICBFcXVhbDogPHByZT57e3Jlc3VsdH19PC9wcmU+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZXF1YWxzRXhhbXBsZScsIFtdKS5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudXNlcjEgPSB7fTtcbiAgICAgICAgICAgICRzY29wZS51c2VyMiA9IHt9O1xuICAgICAgICAgICAgJHNjb3BlLmNvbXBhcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnJlc3VsdCA9IGFuZ3VsYXIuZXF1YWxzKCRzY29wZS51c2VyMSwgJHNjb3BlLnVzZXIyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIGZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHtcbiAgICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAobzEgPT09IG51bGwgfHwgbzIgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTlxuICAgIHZhciB0MSA9IHR5cGVvZiBvMSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobzEpLFxuICAgICAgICB0MiA9IHR5cGVvZiBvMiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobzIpLFxuICAgICAgICBsZW5ndGgsXG4gICAgICAgIGtleSxcbiAgICAgICAga2V5U2V0O1xuICAgIGlmICh0MSA9PT0gdDIgJiYgdDEgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShvMSkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT09IG8yLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUNvbXBhcmUobzEuZ2V0VGltZSgpLCBvMi5nZXRUaW1lKCkpO1xuICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChvMSkpIHtcbiAgICAgICAgaWYgKCFpc1JlZ0V4cChvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT09IG8yLnRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fCBpc0FycmF5KG8yKSB8fCBpc0RhdGUobzIpIHx8IGlzUmVnRXhwKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBrZXlTZXQgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgZm9yIChrZXkgaW4gbzEpIHtcbiAgICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnIHx8IGlzRnVuY3Rpb24obzFba2V5XSkpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAga2V5U2V0W2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoa2V5IGluIG8yKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGtleVNldCkgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIGlzRGVmaW5lZChvMltrZXldKSAmJiAhaXNGdW5jdGlvbihvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgY3NwID0gZnVuY3Rpb24gY3NwKCkge1xuICAgIGlmICghaXNEZWZpbmVkKGNzcC5ydWxlcykpIHtcblxuICAgICAgdmFyIG5nQ3NwRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJyk7XG5cbiAgICAgIGlmIChuZ0NzcEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG5nQ3NwQXR0cmlidXRlID0gbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnbmctY3NwJykgfHwgbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1uZy1jc3AnKTtcbiAgICAgICAgY3NwLnJ1bGVzID0ge1xuICAgICAgICAgIG5vVW5zYWZlRXZhbDogIW5nQ3NwQXR0cmlidXRlIHx8IG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLXVuc2FmZS1ldmFsJykgIT09IC0xLFxuICAgICAgICAgIG5vSW5saW5lU3R5bGU6ICFuZ0NzcEF0dHJpYnV0ZSB8fCBuZ0NzcEF0dHJpYnV0ZS5pbmRleE9mKCduby1pbmxpbmUtc3R5bGUnKSAhPT0gLTFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgICBub1Vuc2FmZUV2YWw6IG5vVW5zYWZlRXZhbCgpLFxuICAgICAgICAgIG5vSW5saW5lU3R5bGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcC5ydWxlcztcblxuICAgIGZ1bmN0aW9uIG5vVW5zYWZlRXZhbCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcsIG5vLW5ldy1mdW5jXG4gICAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBtb2R1bGUgbmdcbiAgICogQG5hbWUgbmdKcVxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0pxIHRoZSBuYW1lIG9mIHRoZSBsaWJyYXJ5IGF2YWlsYWJsZSB1bmRlciBgd2luZG93YFxuICAgKiB0byBiZSB1c2VkIGZvciBhbmd1bGFyLmVsZW1lbnRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBmb3JjZSB0aGUgYW5ndWxhci5lbGVtZW50IGxpYnJhcnkuICBUaGlzIHNob3VsZCBiZVxuICAgKiB1c2VkIHRvIGZvcmNlIGVpdGhlciBqcUxpdGUgYnkgbGVhdmluZyBuZy1qcSBibGFuayBvciBzZXR0aW5nIHRoZSBuYW1lIG9mXG4gICAqIHRoZSBqcXVlcnkgdmFyaWFibGUgdW5kZXIgd2luZG93IChlZy4galF1ZXJ5KS5cbiAgICpcbiAgICogU2luY2UgYW5ndWxhciBsb29rcyBmb3IgdGhpcyBkaXJlY3RpdmUgd2hlbiBpdCBpcyBsb2FkZWQgKGRvZXNuJ3Qgd2FpdCBmb3IgdGhlXG4gICAqIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQpLCBpdCBtdXN0IGJlIHBsYWNlZCBvbiBhbiBlbGVtZW50IHRoYXQgY29tZXMgYmVmb3JlIHRoZSBzY3JpcHRcbiAgICogd2hpY2ggbG9hZHMgYW5ndWxhci4gQWxzbywgb25seSB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYG5nLWpxYCB3aWxsIGJlIHVzZWQgYW5kIGFsbFxuICAgKiBvdGhlcnMgaWdub3JlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBmb3JjZSBqcUxpdGUgdXNpbmcgdGhlIGBuZ0pxYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICA8IWRvY3R5cGUgaHRtbD5cbiAgIDxodG1sIG5nLWFwcCBuZy1qcT5cbiAgIC4uLlxuICAgLi4uXG4gICA8L2h0bWw+XG4gICBgYGBcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYSBqUXVlcnkgYmFzZWQgbGlicmFyeSBvZiBhIGRpZmZlcmVudCBuYW1lLlxuICAgKiBUaGUgbGlicmFyeSBuYW1lIG11c3QgYmUgYXZhaWxhYmxlIGF0IHRoZSB0b3AgbW9zdCAnd2luZG93Jy5cbiAgIGBgYGh0bWxcbiAgIDwhZG9jdHlwZSBodG1sPlxuICAgPGh0bWwgbmctYXBwIG5nLWpxPVwialF1ZXJ5TGliXCI+XG4gICAuLi5cbiAgIC4uLlxuICAgPC9odG1sPlxuICAgYGBgXG4gICAqL1xuICB2YXIganEgPSBmdW5jdGlvbiBqcSgpIHtcbiAgICBpZiAoaXNEZWZpbmVkKGpxLm5hbWVfKSkgcmV0dXJuIGpxLm5hbWVfO1xuICAgIHZhciBlbDtcbiAgICB2YXIgaSxcbiAgICAgICAgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGgsXG4gICAgICAgIHByZWZpeCxcbiAgICAgICAgbmFtZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgICAgcHJlZml4ID0gbmdBdHRyUHJlZml4ZXNbaV07XG4gICAgICBlbCA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIHByZWZpeC5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnanFdJyk7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgbmFtZSA9IGVsLmdldEF0dHJpYnV0ZShwcmVmaXggKyAnanEnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpxLm5hbWVfID0gbmFtZTtcbiAgfTtcblxuICBmdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7XG4gICAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7XG4gIH1cblxuICBmdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuYmluZFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggY2FsbHMgZnVuY3Rpb24gYGZuYCBib3VuZCB0byBgc2VsZmAgKGBzZWxmYCBiZWNvbWVzIHRoZSBgdGhpc2AgZm9yXG4gICAqIGBmbmApLiBZb3UgY2FuIHN1cHBseSBvcHRpb25hbCBgYXJnc2AgdGhhdCBhcmUgcHJlYm91bmQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGZlYXR1cmUgaXMgYWxzb1xuICAgKiBrbm93biBhcyBbcGFydGlhbCBhcHBsaWNhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWFsX2FwcGxpY2F0aW9uKSwgYXNcbiAgICogZGlzdGluZ3Vpc2hlZCBmcm9tIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZyNDb250cmFzdF93aXRoX3BhcnRpYWxfZnVuY3Rpb25fYXBwbGljYXRpb24pLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBiZSBib3VuZC5cbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwcmVib3VuZCB0byB0aGUgYGZuYCBmdW5jdGlvbiBjYWxsLlxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmluZChzZWxmLCBmbikge1xuICAgIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107XG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICByZXR1cm4gY3VycnlBcmdzLmxlbmd0aCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShzZWxmLCBjb25jYXQoY3VycnlBcmdzLCBhcmd1bWVudHMsIDApKSA6IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncyk7XG4gICAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cykgOiBmbi5jYWxsKHNlbGYpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpLlxuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsID0gdmFsdWU7XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykge1xuICAgICAgdmFsID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoaXNXaW5kb3codmFsdWUpKSB7XG4gICAgICB2YWwgPSAnJFdJTkRPVyc7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAmJiB3aW5kb3cuZG9jdW1lbnQgPT09IHZhbHVlKSB7XG4gICAgICB2YWwgPSAnJERPQ1VNRU5UJztcbiAgICB9IGVsc2UgaWYgKGlzU2NvcGUodmFsdWUpKSB7XG4gICAgICB2YWwgPSAnJFNDT1BFJztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLnRvSnNvblxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZVxuICAgKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbcHJldHR5PTJdIElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICAgKiAgICBJZiBzZXQgdG8gYW4gaW50ZWdlciwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiB0aGF0IG1hbnkgc3BhY2VzIHBlciBpbmRlbnRhdGlvbi5cbiAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IEpTT04taWZpZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgb2JqYC5cbiAgICogQGtub3duSXNzdWVcbiAgICpcbiAgICogVGhlIFNhZmFyaSBicm93c2VyIHRocm93cyBhIGBSYW5nZUVycm9yYCBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAgd2hlbiBpdCB0cmllcyB0byBzdHJpbmdpZnkgYSBgRGF0ZWBcbiAgICogb2JqZWN0IHdpdGggYW4gaW52YWxpZCBkYXRlIHZhbHVlLiBUaGUgb25seSByZWxpYWJsZSB3YXkgdG8gcHJldmVudCB0aGlzIGlzIHRvIG1vbmtleXBhdGNoIHRoZVxuICAgKiBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2QgYXMgZm9sbG93czpcbiAgICpcbiAgICogYGBgXG4gICAqIHZhciBfRGF0ZXRvSlNPTiA9IERhdGUucHJvdG90eXBlLnRvSlNPTjtcbiAgICogRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAqICAgdHJ5IHtcbiAgICogICAgIHJldHVybiBfRGF0ZXRvSlNPTi5jYWxsKHRoaXMpO1xuICAgKiAgIH0gY2F0Y2goZSkge1xuICAgKiAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAqICAgICAgIHJldHVybiBudWxsO1xuICAgKiAgICAgfVxuICAgKiAgICAgdGhyb3cgZTtcbiAgICogICB9XG4gICAqIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE0MjIxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKCFpc051bWJlcihwcmV0dHkpKSB7XG4gICAgICBwcmV0dHkgPSBwcmV0dHkgPyAyIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb25cbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCBKU09OIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoanNvbikgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbjtcbiAgfVxuXG4gIHZhciBBTExfQ09MT05TID0gLzovZztcbiAgZnVuY3Rpb24gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZmFsbGJhY2spIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHksIEVkZ2UgMTMtMTUrXG4gICAgLy8gSUUvRWRnZSBkbyBub3QgXCJ1bmRlcnN0YW5kXCIgY29sb24gKGA6YCkgaW4gdGltZXpvbmVcbiAgICB0aW1lem9uZSA9IHRpbWV6b25lLnJlcGxhY2UoQUxMX0NPTE9OUywgJycpO1xuICAgIHZhciByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCA9IERhdGUucGFyc2UoJ0phbiAwMSwgMTk3MCAwMDowMDowMCAnICsgdGltZXpvbmUpIC8gNjAwMDA7XG4gICAgcmV0dXJuIGlzTnVtYmVyTmFOKHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0KSA/IGZhbGxiYWNrIDogcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBtaW51dGVzKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHJldmVyc2UpIHtcbiAgICByZXZlcnNlID0gcmV2ZXJzZSA/IC0xIDogMTtcbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGVUaW1lem9uZU9mZnNldCk7XG4gICAgcmV0dXJuIGFkZERhdGVNaW51dGVzKGRhdGUsIHJldmVyc2UgKiAodGltZXpvbmVPZmZzZXQgLSBkYXRlVGltZXpvbmVPZmZzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBmdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KS5jbG9uZSgpLmVtcHR5KCk7XG4gICAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOiBlbGVtSHRtbC5tYXRjaCgvXig8W14+XSs+KS8pWzFdLnJlcGxhY2UoL148KFtcXHctXSspLywgZnVuY3Rpb24gKG1hdGNoLCBub2RlTmFtZSkge1xuICAgICAgICByZXR1cm4gJzwnICsgbG93ZXJjYXNlKG5vZGVOYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpO1xuICAgIH1cbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXG4gICAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUgYW55IGludmFsaWQgdXJpIGNvbXBvbmVudC5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIGVzY2FwZWQgdXJsIHF1ZXJ5IHN0cmluZyBpbnRvIGtleS12YWx1ZSBwYWlycy5cbiAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLGJvb2xlYW58QXJyYXk+fVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VLZXlWYWx1ZSggLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBmb3JFYWNoKChrZXlWYWx1ZSB8fCAnJykuc3BsaXQoJyYnKSwgZnVuY3Rpb24gKGtleVZhbHVlKSB7XG4gICAgICB2YXIgc3BsaXRQb2ludCwga2V5LCB2YWw7XG4gICAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgICAga2V5ID0ga2V5VmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9cXCsvZywgJyUyMCcpO1xuICAgICAgICBzcGxpdFBvaW50ID0ga2V5VmFsdWUuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoc3BsaXRQb2ludCAhPT0gLTEpIHtcbiAgICAgICAgICBrZXkgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoMCwgc3BsaXRQb2ludCk7XG4gICAgICAgICAgdmFsID0ga2V5VmFsdWUuc3Vic3RyaW5nKHNwbGl0UG9pbnQgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChrZXkpKSB7XG4gICAgICAgICAgdmFsID0gaXNEZWZpbmVkKHZhbCkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHRydWU7XG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgICAgb2JqW2tleV0ucHVzaCh2YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSwgdmFsXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAoYXJyYXlWYWx1ZSkge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XG4gICAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aFxuICAgKiBzZWdtZW50czpcbiAgICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxuICAgKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAgICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAgICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICAgKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gICAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gICAqL1xuICBmdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkge1xuICAgIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLnJlcGxhY2UoLyUyNi9naSwgJyYnKS5yZXBsYWNlKC8lM0QvZ2ksICc9JykucmVwbGFjZSgvJTJCL2dpLCAnKycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbVxuICAgKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAgICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcbiAgICogICAgcXVlcnkgICAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gICAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICAgKiAgICB1bnJlc2VydmVkICAgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gICAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gICAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAgICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAgICovXG4gIGZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLnJlcGxhY2UoLyU0MC9naSwgJ0AnKS5yZXBsYWNlKC8lM0EvZ2ksICc6JykucmVwbGFjZSgvJTI0L2csICckJykucmVwbGFjZSgvJTJDL2dpLCAnLCcpLnJlcGxhY2UoLyUzQi9naSwgJzsnKS5yZXBsYWNlKC8lMjAvZywgcGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpO1xuICB9XG5cbiAgdmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbiAgZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7XG4gICAgdmFyIGF0dHIsXG4gICAgICAgIGksXG4gICAgICAgIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgICBpZiAoaXNTdHJpbmcoYXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpKSkge1xuICAgICAgICByZXR1cm4gYXR0cjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd0F1dG9Cb290c3RyYXAoZG9jdW1lbnQpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcblxuICAgIGlmICghc2NyaXB0KSB7XG4gICAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYGRvY3VtZW50LmN1cnJlbnRTY3JpcHRgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgYGN1cnJlbnRTY3JpcHRgIHByb3BlcnR5IGhhcyBiZWVuIGNsb2JiZXJlZCBqdXN0IHJldHVybiBmYWxzZSwgc2luY2UgdGhpcyBpbmRpY2F0ZXMgYSBwcm9iYWJsZSBhdHRhY2tcbiAgICBpZiAoIShzY3JpcHQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTFNjcmlwdEVsZW1lbnQgfHwgc2NyaXB0IGluc3RhbmNlb2Ygd2luZG93LlNWR1NjcmlwdEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzY3JpcHQuYXR0cmlidXRlcztcbiAgICB2YXIgc3JjcyA9IFthdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJyksIGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdocmVmJyksIGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCd4bGluazpocmVmJyldO1xuXG4gICAgcmV0dXJuIHNyY3MuZXZlcnkoZnVuY3Rpb24gKHNyYykge1xuICAgICAgaWYgKCFzcmMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXNyYy52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgbGluay5ocmVmID0gc3JjLnZhbHVlO1xuXG4gICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luID09PSBsaW5rLm9yaWdpbikge1xuICAgICAgICAvLyBTYW1lLW9yaWdpbiByZXNvdXJjZXMgYXJlIGFsd2F5cyBhbGxvd2VkLCBldmVuIGZvciBub24td2hpdGVsaXN0ZWQgc2NoZW1lcy5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyBEaXNhYmxlZCBib290c3RyYXBwaW5nIHVubGVzcyBhbmd1bGFyLmpzIHdhcyBsb2FkZWQgZnJvbSBhIGtub3duIHNjaGVtZSB1c2VkIG9uIHRoZSB3ZWIuXG4gICAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgYW5ndWxhci5qcyBidW5kbGVkIHdpdGggYnJvd3NlciBleHRlbnNpb25zIGZyb20gYmVpbmcgdXNlZCB0byBieXBhc3MgdGhlXG4gICAgICAvLyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSBpbiB3ZWIgcGFnZXMgYW5kIG90aGVyIGJyb3dzZXIgZXh0ZW5zaW9ucy5cbiAgICAgIHN3aXRjaCAobGluay5wcm90b2NvbCkge1xuICAgICAgICBjYXNlICdodHRwOic6XG4gICAgICAgIGNhc2UgJ2h0dHBzOic6XG4gICAgICAgIGNhc2UgJ2Z0cDonOlxuICAgICAgICBjYXNlICdibG9iOic6XG4gICAgICAgIGNhc2UgJ2ZpbGU6JzpcbiAgICAgICAgY2FzZSAnZGF0YTonOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIENhY2hlZCBhcyBpdCBoYXMgdG8gcnVuIGR1cmluZyBsb2FkaW5nIHNvIHRoYXQgZG9jdW1lbnQuY3VycmVudFNjcmlwdCBpcyBhdmFpbGFibGUuXG4gIHZhciBpc0F1dG9Cb290c3RyYXBBbGxvd2VkID0gYWxsb3dBdXRvQm9vdHN0cmFwKHdpbmRvdy5kb2N1bWVudCk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdBcHBcbiAgICogQG1vZHVsZSBuZ1xuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb25cbiAgICogICB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlfSBuYW1lIHRvIGxvYWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gICAqICAgY3JlYXRlZCBpbiBcInN0cmljdC1kaVwiIG1vZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYXBwbGljYXRpb24gd2lsbCBmYWlsIHRvIGludm9rZSBmdW5jdGlvbnMgd2hpY2hcbiAgICogICBkbyBub3QgdXNlIGV4cGxpY2l0IGZ1bmN0aW9uIGFubm90YXRpb24gKGFuZCBhcmUgdGh1cyB1bnN1aXRhYmxlIGZvciBtaW5pZmljYXRpb24pLCBhcyBkZXNjcmliZWRcbiAgICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICAgKiAgIHRyYWNraW5nIGRvd24gdGhlIHJvb3Qgb2YgdGhlc2UgYnVncy5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byAqKmF1dG8tYm9vdHN0cmFwKiogYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uLiBUaGUgYG5nQXBwYCBkaXJlY3RpdmVcbiAgICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gICAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy5cbiAgICpcbiAgICogVGhlcmUgYXJlIGEgZmV3IHRoaW5ncyB0byBrZWVwIGluIG1pbmQgd2hlbiB1c2luZyBgbmdBcHBgOlxuICAgKiAtIG9ubHkgb25lIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBjYW4gYmUgYXV0by1ib290c3RyYXBwZWQgcGVyIEhUTUwgZG9jdW1lbnQuIFRoZSBmaXJzdCBgbmdBcHBgXG4gICAqICAgZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJvb3QgZWxlbWVudCB0byBhdXRvLWJvb3RzdHJhcCBhcyBhblxuICAgKiAgIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAgICogICB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IGluc3RlYWQuXG4gICAqIC0gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICAgKiAtIERvIG5vdCB1c2UgYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHtAbGluayBuZy4kY29tcGlsZSN0cmFuc2NsdXNpb24gdHJhbnNjbHVzaW9ufSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIGBuZ0FwcGAuXG4gICAqICAgVGhpcyBpbmNsdWRlcyBkaXJlY3RpdmVzIHN1Y2ggYXMge0BsaW5rIG5nLm5nSWYgYG5nSWZgfSwge0BsaW5rIG5nLm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0gYW5kXG4gICAqICAge0BsaW5rIG5nUm91dGUubmdWaWV3IGBuZ1ZpZXdgfS5cbiAgICogICBEb2luZyB0aGlzIG1pc3BsYWNlcyB0aGUgYXBwIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgYCRyb290RWxlbWVudGB9IGFuZCB0aGUgYXBwJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yIGluamVjdG9yfSxcbiAgICogICBjYXVzaW5nIGFuaW1hdGlvbnMgdG8gc3RvcCB3b3JraW5nIGFuZCBtYWtpbmcgdGhlIGluamVjdG9yIGluYWNjZXNzaWJsZSBmcm9tIG91dHNpZGUgdGhlIGFwcC5cbiAgICpcbiAgICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzXG4gICAqIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3J9IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZC4gSXRcbiAgICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gICAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICAgKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gXG4gICAqIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuXG4gICAqXG4gICAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBcHBEZW1vXCIgbmFtZT1cIm5nLWFwcFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJuZ0FwcERlbW9Db250cm9sbGVyXCI+XG4gICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcERlbW8nLCBbXSkuY29udHJvbGxlcignbmdBcHBEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIFVzaW5nIGBuZ1N0cmljdERpYCwgeW91IHdvdWxkIHNlZSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICAgKlxuICAgPGV4YW1wbGUgbmctYXBwLWluY2x1ZGVkPVwidHJ1ZVwiIG5hbWU9XCJzdHJpY3QtZGlcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1hcHA9XCJuZ0FwcFN0cmljdERlbW9cIiBuZy1zdHJpY3QtZGk+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjFcIj5cbiAgICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gIFxuICAgICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgICAgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgIDwvZGl2PlxuICBcbiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMlwiPlxuICAgICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hXG4gIFxuICAgICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZVxuICAgICAgICAgICAgICAgIChzZWUgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgIDwvZGl2PlxuICBcbiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gIFxuICAgICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgICAgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb25zICh3aGljaCBhcmUgZGlzYWJsZWQgaW5cbiAgICAgICAgICAgICAgICBzdHJpY3QgbW9kZSkuIEFzIHN1Y2gsIHRoZSBjb250ZW50IG9mIHRoaXMgc2VjdGlvbiBpcyBub3RcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgICA8L3A+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgICAgLy8gQmFkQ29udHJvbGxlciB3aWxsIGZhaWwgdG8gaW5zdGFudGlhdGUsIGR1ZSB0byByZWx5aW5nIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uLFxuICAgICAgIC8vIHJhdGhlciB0aGFuIGFuIGV4cGxpY2l0IGFubm90YXRpb25cbiAgICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICAgIH0pXG4gICAgICAgLy8gVW5saWtlIEJhZENvbnRyb2xsZXIsIEdvb2RDb250cm9sbGVyMSBhbmQgR29vZENvbnRyb2xsZXIyIHdpbGwgbm90IGZhaWwgdG8gYmUgaW5zdGFudGlhdGVkLFxuICAgICAgIC8vIGR1ZSB0byB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9ucyB1c2luZyB0aGUgYXJyYXkgc3R5bGUgYW5kICRpbmplY3QgcHJvcGVydHksIHJlc3BlY3RpdmVseS5cbiAgICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgICB9XSlcbiAgICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIyJywgR29vZENvbnRyb2xsZXIyKTtcbiAgICAgICBmdW5jdGlvbiBHb29kQ29udHJvbGxlcjIoJHNjb3BlKSB7XG4gICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgfVxuICAgICAgIEdvb2RDb250cm9sbGVyMi4kaW5qZWN0ID0gWyckc2NvcGUnXTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgIGRpdltuZy1jb250cm9sbGVyXSB7XG4gICAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogLjVlbTtcbiAgICAgfVxuICAgICBkaXZbbmctY29udHJvbGxlcl49R29vZF0ge1xuICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2O1xuICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODtcbiAgICAgICAgIGNvbG9yOiAjM2M3NjNkO1xuICAgICB9XG4gICAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHtcbiAgICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTtcbiAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7XG4gICAgICAgICBjb2xvcjogI2E5NDQ0MjtcbiAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgIH1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7XG4gICAgdmFyIGFwcEVsZW1lbnQsXG4gICAgICAgIG1vZHVsZSxcbiAgICAgICAgY29uZmlnID0ge307XG5cbiAgICAvLyBUaGUgZWxlbWVudCBgZWxlbWVudGAgaGFzIHByaW9yaXR5IG92ZXIgYW55IG90aGVyIGVsZW1lbnQuXG4gICAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcblxuICAgICAgaWYgKCFhcHBFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBtb2R1bGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuICAgICAgdmFyIGNhbmRpZGF0ZTtcblxuICAgICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnXScpKSkge1xuICAgICAgICBhcHBFbGVtZW50ID0gY2FuZGlkYXRlO1xuICAgICAgICBtb2R1bGUgPSBjYW5kaWRhdGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChhcHBFbGVtZW50KSB7XG4gICAgICBpZiAoIWlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQpIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoJ0FuZ3VsYXI6IGRpc2FibGluZyBhdXRvbWF0aWMgYm9vdHN0cmFwLiA8c2NyaXB0PiBwcm90b2NvbCBpbmRpY2F0ZXMgJyArICdhbiBleHRlbnNpb24sIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgZG9lcyBub3QgbWF0Y2guJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbmZpZy5zdHJpY3REaSA9IGdldE5nQXR0cmlidXRlKGFwcEVsZW1lbnQsICdzdHJpY3QtZGknKSAhPT0gbnVsbDtcbiAgICAgIGJvb3RzdHJhcChhcHBFbGVtZW50LCBtb2R1bGUgPyBbbW9kdWxlXSA6IFtdLCBjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXAgZ3VpZGV9LlxuICAgKlxuICAgKiBBbmd1bGFyIHdpbGwgZGV0ZWN0IGlmIGl0IGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBicm93c2VyIG1vcmUgdGhhbiBvbmNlIGFuZCBvbmx5IGFsbG93IHRoZVxuICAgKiBmaXJzdCBsb2FkZWQgc2NyaXB0IHRvIGJlIGJvb3RzdHJhcHBlZCBhbmQgd2lsbCByZXBvcnQgYSB3YXJuaW5nIHRvIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yXG4gICAqIGVhY2ggb2YgdGhlIHN1YnNlcXVlbnQgc2NyaXB0cy4gVGhpcyBwcmV2ZW50cyBzdHJhbmdlIHJlc3VsdHMgaW4gYXBwbGljYXRpb25zLCB3aGVyZSBvdGhlcndpc2VcbiAgICogbXVsdGlwbGUgaW5zdGFuY2VzIG9mIEFuZ3VsYXIgdHJ5IHRvIHdvcmsgb24gdGhlIERPTS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIFByb3RyYWN0b3IgYmFzZWQgZW5kLXRvLWVuZCB0ZXN0cyBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb24gdG8gYm9vdHN0cmFwIG1hbnVhbGx5LlxuICAgKiBUaGV5IG11c3QgdXNlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIERvIG5vdCBib290c3RyYXAgdGhlIGFwcCBvbiBhbiBlbGVtZW50IHdpdGggYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHtAbGluayBuZy4kY29tcGlsZSN0cmFuc2NsdXNpb24gdHJhbnNjbHVzaW9ufSxcbiAgICogc3VjaCBhcyB7QGxpbmsgbmcubmdJZiBgbmdJZmB9LCB7QGxpbmsgbmcubmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSBhbmQge0BsaW5rIG5nUm91dGUubmdWaWV3IGBuZ1ZpZXdgfS5cbiAgICogRG9pbmcgdGhpcyBtaXNwbGFjZXMgdGhlIGFwcCB7QGxpbmsgbmcuJHJvb3RFbGVtZW50IGAkcm9vdEVsZW1lbnRgfSBhbmQgdGhlIGFwcCdzIHtAbGluayBhdXRvLiRpbmplY3RvciBpbmplY3Rvcn0sXG4gICAqIGNhdXNpbmcgYW5pbWF0aW9ucyB0byBzdG9wIHdvcmtpbmcgYW5kIG1ha2luZyB0aGUgaW5qZWN0b3IgaW5hY2Nlc3NpYmxlIGZyb20gb3V0c2lkZSB0aGUgYXBwLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8IWRvY3R5cGUgaHRtbD5cbiAgICogPGh0bWw+XG4gICAqIDxib2R5PlxuICAgKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJXZWxjb21lQ29udHJvbGxlclwiPlxuICAgKiAgIHt7Z3JlZXRpbmd9fVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogPHNjcmlwdCBzcmM9XCJhbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gICAqIDxzY3JpcHQ+XG4gICAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdkZW1vJywgW10pXG4gICAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7XG4gICAqICAgfSk7XG4gICAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTtcbiAgICogPC9zY3JpcHQ+XG4gICAqIDwvYm9keT5cbiAgICogPC9odG1sPlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLlxuICAgKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpXG4gICAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBgY29uZmlnYCBibG9jay5cbiAgICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIGFuIG9iamVjdCBmb3IgZGVmaW5pbmcgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYXBwbGljYXRpb24uIFRoZVxuICAgKiAgICAgZm9sbG93aW5nIGtleXMgYXJlIHN1cHBvcnRlZDpcbiAgICpcbiAgICogKiBgc3RyaWN0RGlgIC0gZGlzYWJsZSBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGlzIG1lYW50IHRvXG4gICAqICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YXV0by4kaW5qZWN0b3J9IFJldHVybnMgdGhlIG5ld2x5IGNyZWF0ZWQgaW5qZWN0b3IgZm9yIHRoaXMgYXBwLlxuICAgKi9cbiAgZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMsIGNvbmZpZykge1xuICAgIGlmICghaXNPYmplY3QoY29uZmlnKSkgY29uZmlnID0ge307XG4gICAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzdHJpY3REaTogZmFsc2VcbiAgICB9O1xuICAgIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICAgIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uIGRvQm9vdHN0cmFwKCkge1xuICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgICB2YXIgdGFnID0gZWxlbWVudFswXSA9PT0gd2luZG93LmRvY3VtZW50ID8gJ2RvY3VtZW50JyA6IHN0YXJ0aW5nVGFnKGVsZW1lbnQpO1xuICAgICAgICAvLyBFbmNvZGUgYW5nbGUgYnJhY2tldHMgdG8gcHJldmVudCBpbnB1dCBmcm9tIGJlaW5nIHNhbml0aXplZCB0byBlbXB0eSBzdHJpbmcgIzg2ODMuXG4gICAgICAgIHRocm93IG5nTWluRXJyKCdidHN0cnBkJywgJ0FwcCBhbHJlYWR5IGJvb3RzdHJhcHBlZCB3aXRoIHRoaXMgZWxlbWVudCBcXCd7MH1cXCcnLCB0YWcucmVwbGFjZSgvPC8sICcmbHQ7JykucmVwbGFjZSgvPi8sICcmZ3Q7JykpO1xuICAgICAgfVxuXG4gICAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTtcbiAgICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24gKCRwcm92aWRlKSB7XG4gICAgICAgICRwcm92aWRlLnZhbHVlKCckcm9vdEVsZW1lbnQnLCBlbGVtZW50KTtcbiAgICAgIH1dKTtcblxuICAgICAgaWYgKGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIC8vIFB1c2hpbmcgc28gdGhhdCB0aGlzIG92ZXJyaWRlcyBgZGVidWdJbmZvRW5hYmxlZGAgc2V0dGluZyBkZWZpbmVkIGluIHVzZXIncyBgbW9kdWxlc2AuXG4gICAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbiAoJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgICAgfV0pO1xuICAgICAgfVxuXG4gICAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgICB2YXIgaW5qZWN0b3IgPSBjcmVhdGVJbmplY3Rvcihtb2R1bGVzLCBjb25maWcuc3RyaWN0RGkpO1xuICAgICAgaW5qZWN0b3IuaW52b2tlKFsnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGNvbXBpbGUnLCAnJGluamVjdG9yJywgZnVuY3Rpb24gYm9vdHN0cmFwQXBwbHkoc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIGluamVjdG9yO1xuICAgIH07XG5cbiAgICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gICAgdmFyIE5HX0RFRkVSX0JPT1RTVFJBUCA9IC9eTkdfREVGRVJfQk9PVFNUUkFQIS87XG5cbiAgICBpZiAod2luZG93ICYmIE5HX0VOQUJMRV9ERUJVR19JTkZPLnRlc3Qod2luZG93Lm5hbWUpKSB7XG4gICAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfRU5BQkxFX0RFQlVHX0lORk8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uIChleHRyYU1vZHVsZXMpIHtcbiAgICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgICAgIG1vZHVsZXMucHVzaChtb2R1bGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgICB9O1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCkpIHtcbiAgICAgIGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIucmVsb2FkV2l0aERlYnVnSW5mb1xuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVc2UgdGhpcyBmdW5jdGlvbiB0byByZWxvYWQgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gd2l0aCBkZWJ1ZyBpbmZvcm1hdGlvbiB0dXJuZWQgb24uXG4gICAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gICAqXG4gICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkZWJ1Z0luZm9FbmFibGVkfSBmb3IgbW9yZS5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbG9hZFdpdGhEZWJ1Z0luZm8oKSB7XG4gICAgd2luZG93Lm5hbWUgPSAnTkdfRU5BQkxFX0RFQlVHX0lORk8hJyArIHdpbmRvdy5uYW1lO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gICAqIEBtb2R1bGUgbmdcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gICAqIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VGVzdGFiaWxpdHkocm9vdEVsZW1lbnQpIHtcbiAgICB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmVsZW1lbnQocm9vdEVsZW1lbnQpLmluamVjdG9yKCk7XG4gICAgaWYgKCFpbmplY3Rvcikge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ3Rlc3QnLCAnbm8gaW5qZWN0b3IgZm91bmQgZm9yIGVsZW1lbnQgYXJndW1lbnQgdG8gZ2V0VGVzdGFiaWxpdHknKTtcbiAgICB9XG4gICAgcmV0dXJuIGluamVjdG9yLmdldCgnJCR0ZXN0YWJpbGl0eScpO1xuICB9XG5cbiAgdmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG4gIGZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKSB7XG4gICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICdfJztcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbiAobGV0dGVyLCBwb3MpIHtcbiAgICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGJpbmRKUXVlcnkoKSB7XG4gICAgdmFyIG9yaWdpbmFsQ2xlYW5EYXRhO1xuXG4gICAgaWYgKGJpbmRKUXVlcnlGaXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7XG4gICAgdmFyIGpxTmFtZSA9IGpxKCk7XG4gICAgalF1ZXJ5ID0gaXNVbmRlZmluZWQoanFOYW1lKSA/IHdpbmRvdy5qUXVlcnkgOiAvLyB1c2UgalF1ZXJ5IChpZiBwcmVzZW50KVxuICAgICFqcU5hbWUgPyB1bmRlZmluZWQgOiAvLyB1c2UganFMaXRlXG4gICAgd2luZG93W2pxTmFtZV07IC8vIHVzZSBqUXVlcnkgc3BlY2lmaWVkIGJ5IGBuZ0pxYFxuXG4gICAgLy8gVXNlIGpRdWVyeSBpZiBpdCBleGlzdHMgd2l0aCBwcm9wZXIgZnVuY3Rpb25hbGl0eSwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gdXMuXG4gICAgLy8gQW5ndWxhciAxLjIrIHJlcXVpcmVzIGpRdWVyeSAxLjcrIGZvciBvbigpL29mZigpIHN1cHBvcnQuXG4gICAgLy8gQW5ndWxhciAxLjMrIHRlY2huaWNhbGx5IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSAyLjErIGJ1dCBpdCBtYXkgd29yayB3aXRoIG9sZGVyXG4gICAgLy8gdmVyc2lvbnMuIEl0IHdpbGwgbm90IHdvcmsgZm9yIHN1cmUgd2l0aCBqUXVlcnkgPDEuNywgdGhvdWdoLlxuICAgIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuLm9uKSB7XG4gICAgICBqcUxpdGUgPSBqUXVlcnk7XG4gICAgICBleHRlbmQoalF1ZXJ5LmZuLCB7XG4gICAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsXG4gICAgICAgIGlzb2xhdGVTY29wZTogSlFMaXRlUHJvdG90eXBlLmlzb2xhdGVTY29wZSxcbiAgICAgICAgY29udHJvbGxlcjogLyoqIEB0eXBlIHs/fSAqL0pRTGl0ZVByb3RvdHlwZS5jb250cm9sbGVyLFxuICAgICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLFxuICAgICAgICBpbmhlcml0ZWREYXRhOiBKUUxpdGVQcm90b3R5cGUuaW5oZXJpdGVkRGF0YVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKVxuICAgICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlXG4gICAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuXG4gICAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7XG4gICAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24gKGVsZW1zKSB7XG4gICAgICAgIHZhciBldmVudHM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHtcbiAgICAgICAgICBldmVudHMgPSBqUXVlcnkuX2RhdGEoZWxlbSwgJ2V2ZW50cycpO1xuICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgICAgICBqUXVlcnkoZWxlbSkudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9yaWdpbmFsQ2xlYW5EYXRhKGVsZW1zKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGpxTGl0ZSA9IEpRTGl0ZTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7XG5cbiAgICAvLyBQcmV2ZW50IGRvdWJsZS1wcm94eWluZy5cbiAgICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIHRocm93IGVycm9yIGlmIHRoZSBhcmd1bWVudCBpcyBmYWxzeS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikge1xuICAgIGlmICghYXJnKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignYXJlcScsICdBcmd1bWVudCBcXCd7MH1cXCcgaXMgezF9JywgbmFtZSB8fCAnPycsIHJlYXNvbiB8fCAncmVxdWlyZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7XG4gICAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHtcbiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArIChhcmcgJiYgKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFyZykpID09PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYXJnKSkpO1xuICAgIHJldHVybiBhcmc7XG4gIH1cblxuICAvKipcbiAgICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHlcbiAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgIHRoZSBuYW1lIHRvIHRlc3RcbiAgICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBuYW1lIGlzIHVzZWQsIHN1Y2ggYXMgbW9kdWxlIG9yIGRpcmVjdGl2ZVxuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkge1xuICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpbmRGblRvU2NvcGU9dHJ1ZV1cbiAgICogQHJldHVybnMge09iamVjdH0gdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoXG4gICAqL1xuICAvL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWRcbiAgZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkge1xuICAgIGlmICghcGF0aCkgcmV0dXJuIG9iajtcbiAgICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICB2YXIga2V5O1xuICAgIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7XG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChvYmopIHtcbiAgICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgRE9NIHNpYmxpbmdzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGUgaW4gdGhlIGdpdmVuIGFycmF5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBsaWtlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHRoZSBpbnB1dHRlZCBvYmplY3Qgb3IgYSBqcUxpdGUgY29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBub2Rlc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QmxvY2tOb2Rlcyhub2Rlcykge1xuICAgIC8vIFRPRE8ocGVyZik6IHVwZGF0ZSBgbm9kZXNgIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0P1xuICAgIHZhciBub2RlID0gbm9kZXNbMF07XG4gICAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgYmxvY2tOb2RlcztcblxuICAgIGZvciAodmFyIGkgPSAxOyBub2RlICE9PSBlbmROb2RlICYmIChub2RlID0gbm9kZS5uZXh0U2libGluZyk7IGkrKykge1xuICAgICAgaWYgKGJsb2NrTm9kZXMgfHwgbm9kZXNbaV0gIT09IG5vZGUpIHtcbiAgICAgICAgaWYgKCFibG9ja05vZGVzKSB7XG4gICAgICAgICAgYmxvY2tOb2RlcyA9IGpxTGl0ZShzbGljZS5jYWxsKG5vZGVzLCAwLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBibG9ja05vZGVzIHx8IG5vZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGhvdXQgYSBwcm90b3R5cGUuIFRoaXMgb2JqZWN0IGlzIHVzZWZ1bCBmb3IgbG9va3VwIHdpdGhvdXQgaGF2aW5nIHRvXG4gICAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICAgKlxuICAgKiBSZWxhdGVkIG1pY3JvLWJlbmNobWFya3M6XG4gICAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAgICogLSBodHRwOi8vanNwZXJmLmNvbS9wcm90by1tYXAtbG9va3VwLzJcbiAgICogLSBodHRwOi8vanNwZXJmLmNvbS9mb3ItaW4tdnMtb2JqZWN0LWtleXMyXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCB8fCB1bmRlZmluZWRcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdmFyIE5PREVfVFlQRV9FTEVNRU5UID0gMTtcbiAgdmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xuICB2YXIgTk9ERV9UWVBFX1RFWFQgPSAzO1xuICB2YXIgTk9ERV9UWVBFX0NPTU1FTlQgPSA4O1xuICB2YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbiAgdmFyIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA9IDExO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgdHlwZVxuICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZVxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LlxuICAgKi9cblxuICBmdW5jdGlvbiBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpIHtcblxuICAgIHZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpO1xuICAgIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICAgIGZ1bmN0aW9uIGVuc3VyZShvYmosIG5hbWUsIGZhY3RvcnkpIHtcbiAgICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7XG4gICAgfVxuXG4gICAgdmFyIGFuZ3VsYXIgPSBlbnN1cmUod2luZG93LCAnYW5ndWxhcicsIE9iamVjdCk7XG5cbiAgICAvLyBXZSBuZWVkIHRvIGV4cG9zZSBgYW5ndWxhci4kJG1pbkVycmAgdG8gbW9kdWxlcyBzdWNoIGFzIGBuZ1Jlc291cmNlYCB0aGF0IHJlZmVyZW5jZSBpdCBkdXJpbmcgYm9vdHN0cmFwXG4gICAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gICAgcmV0dXJuIGVuc3VyZShhbmd1bGFyLCAnbW9kdWxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYW5ndWxhci5Nb2R1bGU+fSAqL1xuICAgICAgdmFyIG1vZHVsZXMgPSB7fTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlXG4gICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgICAqIG1vZHVsZXMuXG4gICAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmVcbiAgICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICAgKlxuICAgICAgICogUGFzc2luZyBvbmUgYXJndW1lbnQgcmV0cmlldmVzIGFuIGV4aXN0aW5nIHtAbGluayBhbmd1bGFyLk1vZHVsZX0sXG4gICAgICAgKiB3aGVyZWFzIHBhc3NpbmcgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBjcmVhdGVzIGEgbmV3IHtAbGluayBhbmd1bGFyLk1vZHVsZX1cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBNb2R1bGVcbiAgICAgICAqXG4gICAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGNvbnRyb2xsZXJzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgICAqIGBhbmd1bGFyLm1vZHVsZWAgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlXG4gICAgICAgKiB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVnaXN0ZXIgYSBuZXcgc2VydmljZVxuICAgICAgICogbXlNb2R1bGUudmFsdWUoJ2FwcE5hbWUnLCAnTXlDb29sQXBwJyk7XG4gICAgICAgKlxuICAgICAgICogLy8gY29uZmlndXJlIGV4aXN0aW5nIHNlcnZpY2VzIGluc2lkZSBpbml0aWFsaXphdGlvbiBibG9ja3MuXG4gICAgICAgKiBteU1vZHVsZS5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcbiAgICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xuICAgICAgICogfV0pO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogVGhlbiB5b3UgY2FuIGNyZWF0ZSBhbiBpbmplY3RvciBhbmQgbG9hZCB5b3VyIG1vZHVsZXMgbGlrZSB0aGlzOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnbXlNb2R1bGUnXSlcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEhvd2V2ZXIgaXQncyBtb3JlIGxpa2VseSB0aGF0IHlvdSdsbCBqdXN0IHVzZVxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3JcbiAgICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLlxuICAgICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz49fSByZXF1aXJlcyBJZiBzcGVjaWZpZWQgdGhlbiBuZXcgbW9kdWxlIGlzIGJlaW5nIGNyZWF0ZWQuIElmXG4gICAgICAgKiAgICAgICAgdW5zcGVjaWZpZWQgdGhlbiB0aGUgbW9kdWxlIGlzIGJlaW5nIHJldHJpZXZlZCBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNvbmZpZ0ZuIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBtb2R1bGUuIFNhbWUgYXNcbiAgICAgICAqICAgICAgICB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnIE1vZHVsZSNjb25maWcoKX0uXG4gICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG5cbiAgICAgICAgdmFyIF9pbmZvID0ge307XG5cbiAgICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkge1xuICAgICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7XG4gICAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdub21vZCcsICdNb2R1bGUgXFwnezB9XFwnIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCAnICsgJ3RoZSBtb2R1bGUgbmFtZSBvciBmb3Jnb3QgdG8gbG9hZCBpdC4gSWYgcmVnaXN0ZXJpbmcgYSBtb2R1bGUgZW5zdXJlIHRoYXQgeW91ICcgKyAnc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuJywgbmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEFycmF5LjwqPj59ICovXG4gICAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICAgIHZhciBjb25maWdCbG9ja3MgPSBbXTtcblxuICAgICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgICAgdmFyIHJ1bkJsb2NrcyA9IFtdO1xuXG4gICAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJywgJ3B1c2gnLCBjb25maWdCbG9ja3MpO1xuXG4gICAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgICB2YXIgbW9kdWxlSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAvLyBQcml2YXRlIHN0YXRlXG4gICAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgICAgX2NvbmZpZ0Jsb2NrczogY29uZmlnQmxvY2tzLFxuICAgICAgICAgICAgX3J1bkJsb2NrczogcnVuQmxvY2tzLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2luZm9cbiAgICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdD19IGluZm8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZHVsZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdHxNb2R1bGV9IFRoZSBjdXJyZW50IGluZm8gb2JqZWN0IGZvciB0aGlzIG1vZHVsZSBpZiBjYWxsZWQgYXMgYSBnZXR0ZXIsXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFJlYWQgYW5kIHdyaXRlIGN1c3RvbSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIG1vZHVsZS5cbiAgICAgICAgICAgICAqIEZvciBleGFtcGxlIHlvdSBjb3VsZCBwdXQgdGhlIHZlcnNpb24gb2YgdGhlIG1vZHVsZSBpbiBoZXJlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICAgKiBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSkuaW5mbyh7IHZlcnNpb246ICcxLjAuMCcgfSk7XG4gICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGUgdmVyc2lvbiBjb3VsZCB0aGVuIGJlIHJlYWQgYmFjayBvdXQgYnkgYWNjZXNzaW5nIHRoZSBtb2R1bGUgZWxzZXdoZXJlOlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAgICogdmFyIHZlcnNpb24gPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnKS5pbmZvKCkudmVyc2lvbjtcbiAgICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFlvdSBjYW4gYWxzbyByZXRyaWV2ZSB0aGlzIGluZm9ybWF0aW9uIGR1cmluZyBydW50aW1lIHZpYSB0aGVcbiAgICAgICAgICAgICAqIHtAbGluayAkaW5qZWN0b3IjbW9kdWxlcyBgJGluamVjdG9yLm1vZHVsZXNgfSBwcm9wZXJ0eTpcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAgICogdmFyIHZlcnNpb24gPSAkaW5qZWN0b3IubW9kdWxlc1snbXlNb2R1bGUnXS5pbmZvKCkudmVyc2lvbjtcbiAgICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbmZvOiBmdW5jdGlvbiBpbmZvKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHRocm93IG5nTWluRXJyKCdhb2JqJywgJ0FyZ3VtZW50IFxcJ3swfVxcJyBtdXN0IGJlIGFuIG9iamVjdCcsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIF9pbmZvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIF9pbmZvO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBIb2xkcyB0aGUgbGlzdCBvZiBtb2R1bGVzIHdoaWNoIHRoZSBpbmplY3RvciB3aWxsIGxvYWQgYmVmb3JlIHRoZSBjdXJyZW50IG1vZHVsZSBpc1xuICAgICAgICAgICAgICogbG9hZGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXJcbiAgICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAncHJvdmlkZXInKSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5XG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyRnVuY3Rpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdmYWN0b3J5JyksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZVxuICAgICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnc2VydmljZScpLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LlxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudFxuICAgICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50cyBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy5cbiAgICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCAkcHJvdmlkZS5jb25zdGFudCgpfS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RlY29yYXRvclxuICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkZWNvckZuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLlxuICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciAkcHJvdmlkZS5kZWNvcmF0b3IoKX0uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVjb3JhdG9yOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2RlY29yYXRvcicsIGNvbmZpZ0Jsb2NrcyksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW5cbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLlxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgdGFrZSBlZmZlY3Qgb25seSBpZiB0aGUgKipuZ0FuaW1hdGUqKiBtb2R1bGUgaXMgbG9hZGVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBEZWZpbmVzIGFuIGFuaW1hdGlvbiBob29rIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2l0aFxuICAgICAgICAgICAgICoge0BsaW5rICRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAgICAgKiAgICAgZXZlbnROYW1lIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkge1xuICAgICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgICAgICAgICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiAgICAgICB9XG4gICAgICAgICAgICAgKiAgICAgfVxuICAgICAgICAgICAgICogICB9XG4gICAgICAgICAgICAgKiB9KVxuICAgICAgICAgICAgICogYGBgXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogU2VlIHtAbGluayBuZy4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kXG4gICAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlclxuICAgICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUgLSB0aGlzIG11c3QgYmUgYSB2YWxpZCBhbmd1bGFyIGV4cHJlc3Npb24gaWRlbnRpZmllclxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLlxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICAgICAgICAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAgICAgICAgICAgKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgICAgICAgICAgICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAgICAgICAgICAgKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgICAgICAgICAgICogPC9kaXY+XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZVxuICAgICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RpcmVjdGl2ZVxuICAgICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlXG4gICAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxuICAgICAgICAgICAgICogZGlyZWN0aXZlcy5cbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb21waWxlUHJvdmlkZXInLCAnZGlyZWN0aXZlJyksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29tcG9uZW50XG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWwtY2FzZSAoaS5lLiBteUNvbXAgd2hpY2ggd2lsbCBtYXRjaCBhcyBteS1jb21wKVxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29tcG9uZW50IGRlZmluaXRpb24gb2JqZWN0IChhIHNpbXBsaWZpZWRcbiAgICAgICAgICAgICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSlcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNjb21wb25lbnQgJGNvbXBpbGVQcm92aWRlci5jb21wb25lbnQoKX0uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbXBvbmVudDogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29tcGlsZVByb3ZpZGVyJywgJ2NvbXBvbmVudCcpLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ1xuICAgICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2VcbiAgICAgICAgICAgICAqICAgIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy5cbiAgICAgICAgICAgICAqIEZvciBtb3JlIGFib3V0IGhvdyB0byBjb25maWd1cmUgc2VydmljZXMsIHNlZVxuICAgICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcnVuXG4gICAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cbiAgICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxuICAgICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4oYmxvY2spIHtcbiAgICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7XG4gICAgICAgICAgICBjb25maWcoY29uZmlnRm4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxuICAgICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAgICovXG4gICAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKHByb3ZpZGVyLCBtZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZWNpcGVOYW1lLCBmYWN0b3J5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGZhY3RvcnlGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGZhY3RvcnlGdW5jdGlvbikpIGZhY3RvcnlGdW5jdGlvbi4kJG1vZHVsZU5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICBxdWV1ZS5wdXNoKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qIGdsb2JhbCBzaGFsbG93Q29weTogdHJ1ZSAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgYW4gYXJyYXkgb3IgYSBwcmltaXRpdmUuXG4gICAqXG4gICAqIEFzc3VtZXMgdGhhdCB0aGVyZSBhcmUgbm8gcHJvdG8gcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICovXG4gIGZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7XG4gICAgaWYgKGlzQXJyYXkoc3JjKSkge1xuICAgICAgZHN0ID0gZHN0IHx8IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcmMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkc3RbaV0gPSBzcmNbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpKSB7XG4gICAgICBkc3QgPSBkc3QgfHwge307XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRzdCB8fCBzcmM7XG4gIH1cblxuICAvKiBleHBvcnRlZCB0b0RlYnVnU3RyaW5nICovXG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KG9iaiwgbWF4RGVwdGgpIHtcbiAgICB2YXIgc2VlbiA9IFtdO1xuXG4gICAgLy8gVGhlcmUgaXMgbm8gZGlyZWN0IHdheSB0byBzdHJpbmdpZnkgb2JqZWN0IHVudGlsIHJlYWNoaW5nIGEgc3BlY2lmaWMgZGVwdGhcbiAgICAvLyBhbmQgYSB2ZXJ5IGRlZXAgb2JqZWN0IGNhbiBjYXVzZSBhIHBlcmZvcm1hbmNlIGlzc3VlLCBzbyB3ZSBjb3B5IHRoZSBvYmplY3RcbiAgICAvLyBiYXNlZCBvbiB0aGlzIHNwZWNpZmljIGRlcHRoIGFuZCB0aGVuIHN0cmluZ2lmeSBpdC5cbiAgICBpZiAoaXNWYWxpZE9iamVjdE1heERlcHRoKG1heERlcHRoKSkge1xuICAgICAgLy8gVGhpcyBmaWxlIGlzIGFsc28gaW5jbHVkZWQgaW4gYGFuZ3VsYXItbG9hZGVyYCwgc28gYGNvcHkoKWAgbWlnaHQgbm90IGFsd2F5cyBiZSBhdmFpbGFibGUgaW5cbiAgICAgIC8vIHRoZSBjbG9zdXJlLiBUaGVyZWZvcmUsIGl0IGlzIGxhemlseSByZXRyaWV2ZWQgYXMgYGFuZ3VsYXIuY29weSgpYCB3aGVuIG5lZWRlZC5cbiAgICAgIG9iaiA9IGFuZ3VsYXIuY29weShvYmosIG51bGwsIG1heERlcHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgICB2YWwgPSB0b0pzb25SZXBsYWNlcihrZXksIHZhbCk7XG4gICAgICBpZiAoaXNPYmplY3QodmFsKSkge1xuXG4gICAgICAgIGlmIChzZWVuLmluZGV4T2YodmFsKSA+PSAwKSByZXR1cm4gJy4uLic7XG5cbiAgICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9EZWJ1Z1N0cmluZyhvYmosIG1heERlcHRoKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvYmoudG9TdHJpbmcoKS5yZXBsYWNlKC8gXFx7W1xcc1xcU10qJC8sICcnKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHtcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplT2JqZWN0KG9iaiwgbWF4RGVwdGgpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gICAgdmVyc2lvbjogdHJ1ZSxcbiAgXG4gICAgJENvbXBpbGVQcm92aWRlcixcbiAgXG4gICAgaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICBpbnB1dERpcmVjdGl2ZSxcbiAgICBpbnB1dERpcmVjdGl2ZSxcbiAgICBmb3JtRGlyZWN0aXZlLFxuICAgIHNjcmlwdERpcmVjdGl2ZSxcbiAgICBzZWxlY3REaXJlY3RpdmUsXG4gICAgb3B0aW9uRGlyZWN0aXZlLFxuICAgIG5nQmluZERpcmVjdGl2ZSxcbiAgICBuZ0JpbmRIdG1sRGlyZWN0aXZlLFxuICAgIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICAgIG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgbmdIaWRlRGlyZWN0aXZlLFxuICAgIG5nSWZEaXJlY3RpdmUsXG4gICAgbmdJbmNsdWRlRGlyZWN0aXZlLFxuICAgIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICAgIG5nSW5pdERpcmVjdGl2ZSxcbiAgICBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICAgIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICAgIG5nUmVwZWF0RGlyZWN0aXZlLFxuICAgIG5nU2hvd0RpcmVjdGl2ZSxcbiAgICBuZ1N0eWxlRGlyZWN0aXZlLFxuICAgIG5nU3dpdGNoRGlyZWN0aXZlLFxuICAgIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgbmdPcHRpb25zRGlyZWN0aXZlLFxuICAgIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICBuZ01vZGVsRGlyZWN0aXZlLFxuICAgIG5nTGlzdERpcmVjdGl2ZSxcbiAgICBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgICBwYXR0ZXJuRGlyZWN0aXZlLFxuICAgIHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgIG5nVmFsdWVEaXJlY3RpdmUsXG4gICAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gICAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMsXG4gICAgbmdFdmVudERpcmVjdGl2ZXMsXG4gIFxuICAgICRBbmNob3JTY3JvbGxQcm92aWRlcixcbiAgICAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAgICQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyLFxuICAgICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAgICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgICAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlcixcbiAgICAkQnJvd3NlclByb3ZpZGVyLFxuICAgICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgICAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAgICREYXRlUHJvdmlkZXIsXG4gICAgJERvY3VtZW50UHJvdmlkZXIsXG4gICAgJCRJc0RvY3VtZW50SGlkZGVuUHJvdmlkZXIsXG4gICAgJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgICAkRmlsdGVyUHJvdmlkZXIsXG4gICAgJCRGb3JjZVJlZmxvd1Byb3ZpZGVyLFxuICAgICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAgICRJbnRlcnZhbFByb3ZpZGVyLFxuICAgICRIdHRwUHJvdmlkZXIsXG4gICAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgICAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAgICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICR4aHJGYWN0b3J5UHJvdmlkZXIsXG4gICAgJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICAgJExvY2F0aW9uUHJvdmlkZXIsXG4gICAgJExvZ1Byb3ZpZGVyLFxuICAgICQkTWFwUHJvdmlkZXIsXG4gICAgJFBhcnNlUHJvdmlkZXIsXG4gICAgJFJvb3RTY29wZVByb3ZpZGVyLFxuICAgICRRUHJvdmlkZXIsXG4gICAgJCRRUHJvdmlkZXIsXG4gICAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLFxuICAgICRTY2VQcm92aWRlcixcbiAgICAkU2NlRGVsZWdhdGVQcm92aWRlcixcbiAgICAkU25pZmZlclByb3ZpZGVyLFxuICAgICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICAgJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLFxuICAgICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgICAkVGltZW91dFByb3ZpZGVyLFxuICAgICQkUkFGUHJvdmlkZXIsXG4gICAgJFdpbmRvd1Byb3ZpZGVyLFxuICAgICQkanFMaXRlUHJvdmlkZXIsXG4gICAgJCRDb29raWVSZWFkZXJQcm92aWRlclxuICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIGFuZ3VsYXIudmVyc2lvblxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBBbmd1bGFySlMgdmVyc2lvbi5cbiAgICpcbiAgICogVGhpcyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgXCIwLjkuMThcIi5cbiAgICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAgICogLSBgbWlub3JgIOKAkyBge251bWJlcn1gIOKAkyBNaW5vciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjlcIi5cbiAgICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMThcIi5cbiAgICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAgICovXG4gIHZhciB2ZXJzaW9uID0ge1xuICAgIC8vIFRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzIGBidWlsZGAgdGFzay5cbiAgICAvLyBUaGV5IG5lZWQgdG8gYmUgZG91YmxlLSBvciBzaW5nbGUtcXVvdGVkLlxuICAgIGZ1bGw6ICcxLjYuNicsXG4gICAgbWFqb3I6IDEsXG4gICAgbWlub3I6IDYsXG4gICAgZG90OiA2LFxuICAgIGNvZGVOYW1lOiAnaW50ZXJkaW1lbnNpb25hbC1jYWJsZSdcbiAgfTtcblxuICBmdW5jdGlvbiBwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcikge1xuICAgIGV4dGVuZChhbmd1bGFyLCB7XG4gICAgICAnZXJyb3JIYW5kbGluZ0NvbmZpZyc6IGVycm9ySGFuZGxpbmdDb25maWcsXG4gICAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLFxuICAgICAgJ2NvcHknOiBjb3B5LFxuICAgICAgJ2V4dGVuZCc6IGV4dGVuZCxcbiAgICAgICdtZXJnZSc6IG1lcmdlLFxuICAgICAgJ2VxdWFscyc6IGVxdWFscyxcbiAgICAgICdlbGVtZW50JzoganFMaXRlLFxuICAgICAgJ2ZvckVhY2gnOiBmb3JFYWNoLFxuICAgICAgJ2luamVjdG9yJzogY3JlYXRlSW5qZWN0b3IsXG4gICAgICAnbm9vcCc6IG5vb3AsXG4gICAgICAnYmluZCc6IGJpbmQsXG4gICAgICAndG9Kc29uJzogdG9Kc29uLFxuICAgICAgJ2Zyb21Kc29uJzogZnJvbUpzb24sXG4gICAgICAnaWRlbnRpdHknOiBpZGVudGl0eSxcbiAgICAgICdpc1VuZGVmaW5lZCc6IGlzVW5kZWZpbmVkLFxuICAgICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCxcbiAgICAgICdpc1N0cmluZyc6IGlzU3RyaW5nLFxuICAgICAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uLFxuICAgICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsXG4gICAgICAnaXNOdW1iZXInOiBpc051bWJlcixcbiAgICAgICdpc0VsZW1lbnQnOiBpc0VsZW1lbnQsXG4gICAgICAnaXNBcnJheSc6IGlzQXJyYXksXG4gICAgICAndmVyc2lvbic6IHZlcnNpb24sXG4gICAgICAnaXNEYXRlJzogaXNEYXRlLFxuICAgICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSxcbiAgICAgICd1cHBlcmNhc2UnOiB1cHBlcmNhc2UsXG4gICAgICAnY2FsbGJhY2tzJzogeyAkJGNvdW50ZXI6IDAgfSxcbiAgICAgICdnZXRUZXN0YWJpbGl0eSc6IGdldFRlc3RhYmlsaXR5LFxuICAgICAgJ3JlbG9hZFdpdGhEZWJ1Z0luZm8nOiByZWxvYWRXaXRoRGVidWdJbmZvLFxuICAgICAgJyQkbWluRXJyJzogbWluRXJyLFxuICAgICAgJyQkY3NwJzogY3NwLFxuICAgICAgJyQkZW5jb2RlVXJpU2VnbWVudCc6IGVuY29kZVVyaVNlZ21lbnQsXG4gICAgICAnJCRlbmNvZGVVcmlRdWVyeSc6IGVuY29kZVVyaVF1ZXJ5LFxuICAgICAgJyQkc3RyaW5naWZ5Jzogc3RyaW5naWZ5XG4gICAgfSk7XG5cbiAgICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcblxuICAgIGFuZ3VsYXJNb2R1bGUoJ25nJywgWyduZ0xvY2FsZSddLCBbJyRwcm92aWRlJywgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuZGlyZWN0aXZlKHtcbiAgICAgICAgYTogaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICB0ZXh0YXJlYTogaW5wdXREaXJlY3RpdmUsXG4gICAgICAgIGZvcm06IGZvcm1EaXJlY3RpdmUsXG4gICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICBzZWxlY3Q6IHNlbGVjdERpcmVjdGl2ZSxcbiAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsXG4gICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICBuZ0JpbmRIdG1sOiBuZ0JpbmRIdG1sRGlyZWN0aXZlLFxuICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgIG5nQ2xhc3NFdmVuOiBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxuICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgbmdJZjogbmdJZkRpcmVjdGl2ZSxcbiAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsXG4gICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXG4gICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgbmdTd2l0Y2hXaGVuOiBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsXG4gICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXG4gICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsXG4gICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgIG5nTWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICBuZ1ZhbHVlOiBuZ1ZhbHVlRGlyZWN0aXZlLFxuICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmVcbiAgICAgIH0pLmRpcmVjdGl2ZSh7XG4gICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmVcbiAgICAgIH0pLmRpcmVjdGl2ZShuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcykuZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJGFuY2hvclNjcm9sbDogJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlcixcbiAgICAgICAgJGFuaW1hdGVDc3M6ICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAgICAgICAkJGFuaW1hdGVKczogJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZVF1ZXVlOiAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcixcbiAgICAgICAgJCRBbmltYXRlUnVubmVyOiAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZUFzeW5jUnVuOiAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsXG4gICAgICAgICRjYWNoZUZhY3Rvcnk6ICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGNvbnRyb2xsZXI6ICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsXG4gICAgICAgICQkaXNEb2N1bWVudEhpZGRlbjogJCRJc0RvY3VtZW50SGlkZGVuUHJvdmlkZXIsXG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyOiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAgICAgICAkZmlsdGVyOiAkRmlsdGVyUHJvdmlkZXIsXG4gICAgICAgICQkZm9yY2VSZWZsb3c6ICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgICAgICAgJGludGVycG9sYXRlOiAkSW50ZXJwb2xhdGVQcm92aWRlcixcbiAgICAgICAgJGludGVydmFsOiAkSW50ZXJ2YWxQcm92aWRlcixcbiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVyOiAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyLFxuICAgICAgICAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZTogJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcixcbiAgICAgICAgJGh0dHBCYWNrZW5kOiAkSHR0cEJhY2tlbmRQcm92aWRlcixcbiAgICAgICAgJHhockZhY3Rvcnk6ICR4aHJGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICRqc29ucENhbGxiYWNrczogJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsXG4gICAgICAgICRsb2c6ICRMb2dQcm92aWRlcixcbiAgICAgICAgJHBhcnNlOiAkUGFyc2VQcm92aWRlcixcbiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLFxuICAgICAgICAkcTogJFFQcm92aWRlcixcbiAgICAgICAgJCRxOiAkJFFQcm92aWRlcixcbiAgICAgICAgJHNjZTogJFNjZVByb3ZpZGVyLFxuICAgICAgICAkc2NlRGVsZWdhdGU6ICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6ICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgICAgICAgJCR0ZXN0YWJpbGl0eTogJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlcixcbiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyLFxuICAgICAgICAkJHJBRjogJCRSQUZQcm92aWRlcixcbiAgICAgICAgJCRqcUxpdGU6ICQkanFMaXRlUHJvdmlkZXIsXG4gICAgICAgICQkTWFwOiAkJE1hcFByb3ZpZGVyLFxuICAgICAgICAkJGNvb2tpZVJlYWRlcjogJCRDb29raWVSZWFkZXJQcm92aWRlclxuICAgICAgfSk7XG4gICAgfV0pLmluZm8oeyBhbmd1bGFyVmVyc2lvbjogJzEuNi42JyB9KTtcbiAgfVxuXG4gIC8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAgICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICAgKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gICAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAgICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICAgKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gICAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbiAgLyogZ2xvYmFsXG4gICAgSlFMaXRlUHJvdG90eXBlOiB0cnVlLFxuICAgIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgICBBTElBU0VEX0FUVFI6IHRydWVcbiAgKi9cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vSlFMaXRlXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LlxuICAgKlxuICAgKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlXG4gICAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgXG4gICAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkIFwialF1ZXJ5IGxpdGVcIiBvciAqKmpxTGl0ZSoqLlxuICAgKlxuICAgKiBqcUxpdGUgaXMgYSB0aW55LCBBUEktY29tcGF0aWJsZSBzdWJzZXQgb2YgalF1ZXJ5IHRoYXQgYWxsb3dzXG4gICAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdFxuICAgKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LlxuICAgKlxuICAgKiBUbyB1c2UgYGpRdWVyeWAsIHNpbXBseSBlbnN1cmUgaXQgaXMgbG9hZGVkIGJlZm9yZSB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuIFlvdSBjYW4gYWxzbyB1c2UgdGhlXG4gICAqIHtAbGluayBuZ0pxIGBuZ0pxYH0gZGlyZWN0aXZlIHRvIHNwZWNpZnkgdGhhdCBqcWxpdGUgc2hvdWxkIGJlIHVzZWQgb3ZlciBqUXVlcnksIG9yIHRvIHVzZSBhXG4gICAqIHNwZWNpZmljIHZlcnNpb24gb2YgalF1ZXJ5IGlmIG11bHRpcGxlIHZlcnNpb25zIGV4aXN0IG9uIHRoZSBwYWdlLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPioqTm90ZToqKiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yXG4gICAqIGpxTGl0ZSAoc3VjaCBhcyB0aGUgZWxlbWVudCBhcmd1bWVudCBpbiBhIGRpcmVjdGl2ZSdzIGNvbXBpbGUgLyBsaW5rIGZ1bmN0aW9uKS4gVGhleSBhcmUgbmV2ZXIgcmF3IERPTSByZWZlcmVuY2VzLjwvZGl2PlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPioqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgZWxlbWVudHNcbiAgICogYnkgdGFnIG5hbWUgLyBDU1Mgc2VsZWN0b3IuIEZvciBsb29rdXBzIGJ5IHRhZyBuYW1lLCB0cnkgaW5zdGVhZCBgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKC4uLilgXG4gICAqIG9yIGAkZG9jdW1lbnQuZmluZCgpYCwgb3IgdXNlIHRoZSBzdGFuZGFyZCBET00gQVBJcywgZS5nLiBgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpYC48L2Rpdj5cbiAgICpcbiAgICogIyMgQW5ndWxhcidzIGpxTGl0ZVxuICAgKiBqcUxpdGUgcHJvdmlkZXMgb25seSB0aGUgZm9sbG93aW5nIGpRdWVyeSBtZXRob2RzOlxuICAgKlxuICAgKiAtIFtgYWRkQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZGRDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIC0gW2BhZnRlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FmdGVyLylcbiAgICogLSBbYGFwcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pXG4gICAqIC0gW2BhdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVyc1xuICAgKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2JpbmQvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykpIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gICAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICAgKiAtIFtgY2xvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jbG9uZS8pXG4gICAqIC0gW2Bjb250ZW50cygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRlbnRzLylcbiAgICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYC5cbiAgICogICBBcyBhIHNldHRlciwgZG9lcyBub3QgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ3Mgb3IgYXBwZW5kICdweCcsIGFuZCBhbHNvIGRvZXMgbm90IGhhdmUgYXV0b21hdGljIHByb3BlcnR5IHByZWZpeGluZy5cbiAgICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLylcbiAgICogLSBbYGRldGFjaCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RldGFjaC8pXG4gICAqIC0gW2BlbXB0eSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VtcHR5LylcbiAgICogLSBbYGVxKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZXEvKVxuICAgKiAtIFtgZmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxuICAgKiAtIFtgaGFzQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9oYXNDbGFzcy8pXG4gICAqIC0gW2BodG1sKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaHRtbC8pXG4gICAqIC0gW2BuZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAgICogLSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxuICAgKiAtIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudCBvYmplY3QgYXMgcGFyYW1ldGVyXG4gICAqIC0gW2BvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbmUvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcbiAgICogLSBbYHBhcmVudCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3BhcmVudC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAgICogLSBbYHByZXBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kLylcbiAgICogLSBbYHByb3AoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcbiAgICogLSBbYHJlYWR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVhZHkvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgYGFuZ3VsYXIuZWxlbWVudChjYWxsYmFjaylgIGluc3RlYWQgb2YgYGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoY2FsbGJhY2spYClcbiAgICogLSBbYHJlbW92ZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pXG4gICAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSBhdHRyaWJ1dGVzXG4gICAqIC0gW2ByZW1vdmVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUNsYXNzLykgLSBEb2VzIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcbiAgICogLSBbYHJlbW92ZURhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLylcbiAgICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICAgKiAtIFtgdGV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RleHQvKVxuICAgKiAtIFtgdG9nZ2xlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnNcbiAgICogLSBbYHVuYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3VuYmluZC8pIChfZGVwcmVjYXRlZF8sIHVzZSBbYG9mZigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZi8pKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBldmVudCBvYmplY3QgYXMgcGFyYW1ldGVyXG4gICAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICAgKiAtIFtgd3JhcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3dyYXAvKVxuICAgKlxuICAgKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICAgKiBBbmd1bGFyIGFsc28gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG1ldGhvZHMgYW5kIGV2ZW50cyB0byBib3RoIGpRdWVyeSBhbmQganFMaXRlOlxuICAgKlxuICAgKiAjIyMgRXZlbnRzXG4gICAqIC0gYCRkZXN0cm95YCAtIEFuZ3VsYXJKUyBpbnRlcmNlcHRzIGFsbCBqcUxpdGUvalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIHRoaXMgZXZlbnRcbiAgICogICAgb24gYWxsIERPTSBub2RlcyBiZWluZyByZW1vdmVkLiAgVGhpcyBjYW4gYmUgdXNlZCB0byBjbGVhbiB1cCBhbnkgM3JkIHBhcnR5IGJpbmRpbmdzIHRvIHRoZSBET01cbiAgICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAgICpcbiAgICogIyMjIE1ldGhvZHNcbiAgICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gICAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhc1xuICAgKiAgIGNhbWVsQ2FzZSBkaXJlY3RpdmUgbmFtZSwgdGhlbiB0aGUgY29udHJvbGxlciBmb3IgdGhpcyBkaXJlY3RpdmUgd2lsbCBiZSByZXRyaWV2ZWQgKGUuZy5cbiAgICogICBgJ25nTW9kZWwnYCkuXG4gICAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXG4gICAqIC0gYHNjb3BlKClgIC0gcmV0cmlldmVzIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gb2YgdGhlIGN1cnJlbnRcbiAgICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gICAqICAgYmUgZW5hYmxlZC5cbiAgICogLSBgaXNvbGF0ZVNjb3BlKClgIC0gcmV0cmlldmVzIGFuIGlzb2xhdGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGlmIG9uZSBpcyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGVcbiAgICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gICAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuXG4gICAqICAgUmVxdWlyZXMge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGVidWcgRGF0YX0gdG8gYmUgZW5hYmxlZC5cbiAgICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICAgKiAgIHBhcmVudCBlbGVtZW50IGlzIHJlYWNoZWQuXG4gICAqXG4gICAqIEBrbm93bklzc3VlIFlvdSBjYW5ub3Qgc3B5IG9uIGBhbmd1bGFyLmVsZW1lbnRgIGlmIHlvdSBhcmUgdXNpbmcgSmFzbWluZSB2ZXJzaW9uIDEueC4gU2VlXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0MjUxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS5cbiAgICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAgICovXG5cbiAgSlFMaXRlLmV4cGFuZG8gPSAnbmczMzknO1xuXG4gIHZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAgICBqcUlkID0gMTtcblxuICAvKlxuICAgKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gICAqL1xuICBKUUxpdGUuX2RhdGEgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIC8valF1ZXJ5IGFsd2F5cyByZXR1cm5zIGFuIG9iamVjdCBvbiBjYWNoZSBtaXNzXG4gICAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbiAgfTtcblxuICBmdW5jdGlvbiBqcU5leHRJZCgpIHtcbiAgICByZXR1cm4gKytqcUlkO1xuICB9XG5cbiAgdmFyIERBU0hfTE9XRVJDQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xuICB2YXIgTVNfSEFDS19SRUdFWFAgPSAvXi1tcy0vO1xuICB2YXIgTU9VU0VfRVZFTlRfTUFQID0geyBtb3VzZWxlYXZlOiAnbW91c2VvdXQnLCBtb3VzZWVudGVyOiAnbW91c2VvdmVyJyB9O1xuICB2YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTtcblxuICAvKipcbiAgICogQ29udmVydHMga2ViYWItY2FzZSB0byBjYW1lbENhc2UuXG4gICAqIFRoZXJlIGlzIGFsc28gYSBzcGVjaWFsIGNhc2UgZm9yIHRoZSBtcyBwcmVmaXggc3RhcnRpbmcgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIuXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gICAqL1xuICBmdW5jdGlvbiBjc3NLZWJhYlRvQ2FtZWwobmFtZSkge1xuICAgIHJldHVybiBrZWJhYlRvQ2FtZWwobmFtZS5yZXBsYWNlKE1TX0hBQ0tfUkVHRVhQLCAnbXMtJykpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm5DYW1lbENhc2VSZXBsYWNlKGFsbCwgbGV0dGVyKSB7XG4gICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGtlYmFiLWNhc2UgdG8gY2FtZWxDYXNlLlxuICAgKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICAgKi9cbiAgZnVuY3Rpb24ga2ViYWJUb0NhbWVsKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKERBU0hfTE9XRVJDQVNFX1JFR0VYUCwgZm5DYW1lbENhc2VSZXBsYWNlKTtcbiAgfVxuXG4gIHZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbiAgdmFyIEhUTUxfUkVHRVhQID0gLzx8JiM/XFx3KzsvO1xuICB2YXIgVEFHX05BTUVfUkVHRVhQID0gLzwoW1xcdzotXSspLztcbiAgdmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG4gIHZhciB3cmFwTWFwID0ge1xuICAgICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAgICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAgICdjb2wnOiBbMiwgJzx0YWJsZT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nXSxcbiAgICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgICAnX2RlZmF1bHQnOiBbMCwgJycsICcnXVxuICB9O1xuXG4gIHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcbiAgd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbiAgd3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbiAgZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7XG4gICAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpO1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlQWNjZXB0c0RhdGEobm9kZSkge1xuICAgIC8vIFRoZSB3aW5kb3cgb2JqZWN0IGNhbiBhY2NlcHQgZGF0YSBidXQgaGFzIG5vIG5vZGVUeXBlXG4gICAgLy8gT3RoZXJ3aXNlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZWxlbWVudHMgKDEpIGFuZCBkb2N1bWVudHMgKDkpXG4gICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICByZXR1cm4gbm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8ICFub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UO1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlSGFzRGF0YShub2RlKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGpxQ2FjaGVbbm9kZS5uZzMzOV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpIHtcbiAgICB2YXIgdG1wLFxuICAgICAgICB0YWcsXG4gICAgICAgIHdyYXAsXG4gICAgICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICAgIG5vZGVzID0gW10sXG4gICAgICAgIGk7XG5cbiAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgICAgLy8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG4gICAgICBub2Rlcy5wdXNoKGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoaHRtbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcbiAgICAgIHRtcCA9IGZyYWdtZW50LmFwcGVuZENoaWxkKGNvbnRleHQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFsnJywgJyddKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgd3JhcCA9IHdyYXBNYXBbdGFnXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuICAgICAgdG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBodG1sLnJlcGxhY2UoWEhUTUxfVEFHX1JFR0VYUCwgJzwkMT48LyQyPicpICsgd3JhcFsyXTtcblxuICAgICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgICBpID0gd3JhcFswXTtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICAgIH1cblxuICAgICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuICAgICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICAgIHRtcC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgICBmcmFnbWVudC50ZXh0Q29udGVudCA9ICcnO1xuICAgIGZyYWdtZW50LmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciBpbm5lciBIVE1MXG4gICAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlUGFyc2VIVE1MKGh0bWwsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCB8fCB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgdmFyIHBhcnNlZDtcblxuICAgIGlmIChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSB7XG4gICAgICByZXR1cm4gW2NvbnRleHQuY3JlYXRlRWxlbWVudChwYXJzZWRbMV0pXTtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VkID0ganFMaXRlQnVpbGRGcmFnbWVudChodG1sLCBjb250ZXh0KSkge1xuICAgICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZVdyYXBOb2RlKG5vZGUsIHdyYXBwZXIpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZCh3cmFwcGVyLCBub2RlKTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG5vZGUpO1xuICB9XG5cbiAgLy8gSUU5LTExIGhhcyBubyBtZXRob2QgXCJjb250YWluc1wiIGluIFNWRyBlbGVtZW50IGFuZCBpbiBOb2RlLnByb3RvdHlwZS4gQnVnICMxMDI1OS5cbiAgdmFyIGpxTGl0ZUNvbnRhaW5zID0gd2luZG93Lk5vZGUucHJvdG90eXBlLmNvbnRhaW5zIHx8IC8qKiBAdGhpcyAqL2Z1bmN0aW9uIChhcmcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIHJldHVybiAhISh0aGlzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGFyZykgJiAxNik7XG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGZ1bmN0aW9uIEpRTGl0ZShlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBhcmdJc1N0cmluZztcblxuICAgIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgICAgZWxlbWVudCA9IHRyaW0oZWxlbWVudCk7XG4gICAgICBhcmdJc1N0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKUUxpdGUpKSB7XG4gICAgICBpZiAoYXJnSXNTdHJpbmcgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT09ICc8Jykge1xuICAgICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmIChhcmdJc1N0cmluZykge1xuICAgICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oZWxlbWVudCkpIHtcbiAgICAgIGpxTGl0ZVJlYWR5KGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICAgIGlmICghb25seURlc2NlbmRhbnRzICYmIGpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSBqcUxpdGUuY2xlYW5EYXRhKFtlbGVtZW50XSk7XG5cbiAgICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgICBqcUxpdGUuY2xlYW5EYXRhKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb2ZmYXJncycsICdqcUxpdGUjb2ZmKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHNlbGVjdG9yYCBhcmd1bWVudCcpO1xuXG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gICAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZFxuXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICBmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIodHlwZSkge1xuICAgICAgICB2YXIgbGlzdGVuZXJGbnMgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGlmIChpc0RlZmluZWQoZm4pKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShpc0RlZmluZWQoZm4pICYmIGxpc3RlbmVyRm5zICYmIGxpc3RlbmVyRm5zLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yRWFjaCh0eXBlLnNwbGl0KCcgJyksIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJlbW92ZUhhbmRsZXIodHlwZSk7XG4gICAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkge1xuICAgIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gICAgaWYgKGV4cGFuZG9TdG9yZSkge1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgZGVsZXRlIGV4cGFuZG9TdG9yZS5kYXRhW25hbWVdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChleHBhbmRvU3RvcmUuaGFuZGxlKSB7XG4gICAgICAgIGlmIChleHBhbmRvU3RvcmUuZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICAgIH1cbiAgICAgICAganFMaXRlT2ZmKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTtcbiAgICAgIGVsZW1lbnQubmczMzkgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGRlbGV0ZSBET00gZXhwYW5kb3MuIElFIGFuZCBDaHJvbWUgZG9uJ3QgbGlrZSBpdFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBjcmVhdGVJZk5lY2Vzc2FyeSkge1xuICAgIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5LFxuICAgICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gICAgaWYgKGNyZWF0ZUlmTmVjZXNzYXJ5ICYmICFleHBhbmRvU3RvcmUpIHtcbiAgICAgIGVsZW1lbnQubmczMzkgPSBleHBhbmRvSWQgPSBqcU5leHRJZCgpO1xuICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0geyBldmVudHM6IHt9LCBkYXRhOiB7fSwgaGFuZGxlOiB1bmRlZmluZWQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwYW5kb1N0b3JlO1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG4gICAgICB2YXIgcHJvcDtcblxuICAgICAgdmFyIGlzU2ltcGxlU2V0dGVyID0gaXNEZWZpbmVkKHZhbHVlKTtcbiAgICAgIHZhciBpc1NpbXBsZUdldHRlciA9ICFpc1NpbXBsZVNldHRlciAmJiBrZXkgJiYgIWlzT2JqZWN0KGtleSk7XG4gICAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICFpc1NpbXBsZUdldHRlcik7XG4gICAgICB2YXIgZGF0YSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZGF0YTtcblxuICAgICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7XG4gICAgICAgIC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgICBkYXRhW2tlYmFiVG9DYW1lbChrZXkpXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1hc3NHZXR0ZXIpIHtcbiAgICAgICAgICAvLyBkYXRhKClcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHtcbiAgICAgICAgICAgIC8vIGRhdGEoJ2tleScpXG4gICAgICAgICAgICAvLyBkb24ndCBmb3JjZSBjcmVhdGlvbiBvZiBleHBhbmRvU3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2ViYWJUb0NhbWVsKGtleSldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgICBmb3IgKHByb3AgaW4ga2V5KSB7XG4gICAgICAgICAgICAgIGRhdGFba2ViYWJUb0NhbWVsKHByb3ApXSA9IGtleVtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmICghZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpLnJlcGxhY2UoL1tcXG5cXHRdL2csICcgJykuaW5kZXhPZignICcgKyBzZWxlY3RvciArICcgJykgPiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uIChjc3NDbGFzcykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKCgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoJyAnICsgdHJpbShjc3NDbGFzcykgKyAnICcsICcgJykpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpO1xuXG4gICAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24gKGNzc0NsYXNzKSB7XG4gICAgICAgIGNzc0NsYXNzID0gdHJpbShjc3NDbGFzcyk7XG4gICAgICAgIGlmIChleGlzdGluZ0NsYXNzZXMuaW5kZXhPZignICcgKyBjc3NDbGFzcyArICcgJykgPT09IC0xKSB7XG4gICAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykge1xuICAgIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gICAgaWYgKGVsZW1lbnRzKSB7XG5cbiAgICAgIC8vIGlmIGEgTm9kZSAodGhlIG1vc3QgY29tbW9uIGNhc2UpXG4gICAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICAvLyBpZiBhbiBBcnJheSBvciBOb2RlTGlzdCBhbmQgbm90IGEgV2luZG93XG4gICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBlbGVtZW50cy53aW5kb3cgIT09IGVsZW1lbnRzKSB7XG4gICAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGpxTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInKSArICdDb250cm9sbGVyJyk7XG4gIH1cblxuICBmdW5jdGlvbiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWRcbiAgICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UKSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSA9IGpxTGl0ZS5kYXRhKGVsZW1lbnQsIG5hbWVzW2ldKSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAgIC8vIGVsZW1lbnQgYXMgdGhlIHBhcmVudC4gVGhpcyBlbmFibGVzIGRpcmVjdGl2ZXMgd2l0aGluIGEgU2hhZG93IERPTSBvciBwb2x5ZmlsbGVkIFNoYWRvdyBET01cbiAgICAgIC8vIHRvIGxvb2t1cCBwYXJlbnQgY29udHJvbGxlcnMuXG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCAmJiBlbGVtZW50Lmhvc3Q7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlRW1wdHkoZWxlbWVudCkge1xuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlUmVtb3ZlKGVsZW1lbnQsIGtlZXBEYXRhKSB7XG4gICAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgICB3aW4gPSB3aW4gfHwgd2luZG93O1xuICAgIGlmICh3aW4uZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3JcbiAgICAgIC8vIGZyb20gdGhlIGFjdGlvbidzIHBvaW50IG9mIHZpZXdcbiAgICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseVxuICAgICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlXG4gICAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24ganFMaXRlUmVhZHkoZm4pIHtcbiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgaWYgKHdpbmRvdy5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGNhbiBub3QgdXNlIGpxTGl0ZSBzaW5jZSB3ZSBhcmUgbm90IGRvbmUgbG9hZGluZyBhbmQgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBsYXRlci5cblxuICAgICAgLy8gV29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5XG4gICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuXG4gICAgICAvLyBGYWxsYmFjayB0byB3aW5kb3cub25sb2FkIGZvciBvdGhlcnNcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gICAgfVxuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB2YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHtcbiAgICByZWFkeToganFMaXRlUmVhZHksXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIHZhbHVlID0gW107XG4gICAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhbHVlLnB1c2goJycgKyBlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICdbJyArIHZhbHVlLmpvaW4oJywgJykgKyAnXSc7XG4gICAgfSxcblxuICAgIGVxOiBmdW5jdGlvbiBlcShpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pO1xuICAgIH0sXG5cbiAgICBsZW5ndGg6IDAsXG4gICAgcHVzaDogcHVzaCxcbiAgICBzb3J0OiBbXS5zb3J0LFxuICAgIHNwbGljZTogW10uc3BsaWNlXG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuXG4gIC8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXG4gIC8vIHZhbHVlIG9uIGdldC5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBCT09MRUFOX0FUVFIgPSB7fTtcbiAgZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBCT09MRUFOX0FUVFJbbG93ZXJjYXNlKHZhbHVlKV0gPSB2YWx1ZTtcbiAgfSk7XG4gIHZhciBCT09MRUFOX0VMRU1FTlRTID0ge307XG4gIGZvckVhY2goJ2lucHV0LHNlbGVjdCxvcHRpb24sdGV4dGFyZWEsYnV0dG9uLGZvcm0sZGV0YWlscycuc3BsaXQoJywnKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgQk9PTEVBTl9FTEVNRU5UU1t2YWx1ZV0gPSB0cnVlO1xuICB9KTtcbiAgdmFyIEFMSUFTRURfQVRUUiA9IHtcbiAgICAnbmdNaW5sZW5ndGgnOiAnbWlubGVuZ3RoJyxcbiAgICAnbmdNYXhsZW5ndGgnOiAnbWF4bGVuZ3RoJyxcbiAgICAnbmdNaW4nOiAnbWluJyxcbiAgICAnbmdNYXgnOiAnbWF4JyxcbiAgICAnbmdQYXR0ZXJuJzogJ3BhdHRlcm4nLFxuICAgICduZ1N0ZXAnOiAnc3RlcCdcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkge1xuICAgIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lXG4gICAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07XG5cbiAgICAvLyBib29sZWFuQXR0ciBpcyBoZXJlIHR3aWNlIHRvIG1pbmltaXplIERPTSBhY2Nlc3NcbiAgICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QWxpYXNlZEF0dHJOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gQUxJQVNFRF9BVFRSW25hbWVdO1xuICB9XG5cbiAgZm9yRWFjaCh7XG4gICAgZGF0YToganFMaXRlRGF0YSxcbiAgICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuICAgIGhhc0RhdGE6IGpxTGl0ZUhhc0RhdGEsXG4gICAgY2xlYW5EYXRhOiBmdW5jdGlvbiBqcUxpdGVDbGVhbkRhdGEobm9kZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAganFMaXRlUmVtb3ZlRGF0YShub2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoZm4sIG5hbWUpIHtcbiAgICBKUUxpdGVbbmFtZV0gPSBmbjtcbiAgfSk7XG5cbiAgZm9yRWFjaCh7XG4gICAgZGF0YToganFMaXRlRGF0YSxcbiAgICBpbmhlcml0ZWREYXRhOiBqcUxpdGVJbmhlcml0ZWREYXRhLFxuXG4gICAgc2NvcGU6IGZ1bmN0aW9uIHNjb3BlKGVsZW1lbnQpIHtcbiAgICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IVxuICAgICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckc2NvcGUnKSB8fCBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50LCBbJyRpc29sYXRlU2NvcGUnLCAnJHNjb3BlJ10pO1xuICAgIH0sXG5cbiAgICBpc29sYXRlU2NvcGU6IGZ1bmN0aW9uIGlzb2xhdGVTY29wZShlbGVtZW50KSB7XG4gICAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJGlzb2xhdGVTY29wZScpIHx8IGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScpO1xuICAgIH0sXG5cbiAgICBjb250cm9sbGVyOiBqcUxpdGVDb250cm9sbGVyLFxuXG4gICAgaW5qZWN0b3I6IGZ1bmN0aW9uIGluamVjdG9yKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9LFxuXG4gICAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gICAgY3NzOiBmdW5jdGlvbiBjc3MoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIG5hbWUgPSBjc3NLZWJhYlRvQ2FtZWwobmFtZSk7XG5cbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LnN0eWxlW25hbWVdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhdHRyOiBmdW5jdGlvbiBhdHRyKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgcmV0O1xuICAgICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICAgIGlmIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9BVFRSSUJVVEUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8ICFlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICAgIHZhciBpc0Jvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW2xvd2VyY2FzZWROYW1lXTtcblxuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gc2V0dGVyXG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSAmJiBpc0Jvb2xlYW5BdHRyKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgaXNCb29sZWFuQXR0ciA/IGxvd2VyY2FzZWROYW1lIDogdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXR0ZXJcblxuICAgICAgICByZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcblxuICAgICAgICBpZiAoaXNCb29sZWFuQXR0ciAmJiByZXQgIT09IG51bGwpIHtcbiAgICAgICAgICByZXQgPSBsb3dlcmNhc2VkTmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpLlxuICAgICAgICByZXR1cm4gcmV0ID09PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwcm9wOiBmdW5jdGlvbiBwcm9wKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBlbGVtZW50W25hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgZ2V0VGV4dC4kZHYgPSAnJztcbiAgICAgIHJldHVybiBnZXRUZXh0O1xuXG4gICAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgICAgICAgIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUID8gZWxlbWVudC50ZXh0Q29udGVudCA6ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KCksXG5cbiAgICB2YWw6IGZ1bmN0aW9uIHZhbChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgaHRtbDogZnVuY3Rpb24gaHRtbChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgICB9XG4gICAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICBlbXB0eToganFMaXRlRW1wdHlcbiAgfSwgZnVuY3Rpb24gKGZuLCBuYW1lKSB7XG4gICAgLyoqXG4gICAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZVxuICAgICAqL1xuICAgIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAoYXJnMSwgYXJnMikge1xuICAgICAgdmFyIGksIGtleTtcbiAgICAgIHZhciBub2RlQ291bnQgPSB0aGlzLmxlbmd0aDtcblxuICAgICAgLy8ganFMaXRlSGFzQ2xhc3MgaGFzIG9ubHkgdHdvIGFyZ3VtZW50cywgYnV0IGlzIGEgZ2V0dGVyLW9ubHkgZm4sIHNvIHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGl0XG4gICAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuXG4gICAgICBpZiAoZm4gIT09IGpxTGl0ZUVtcHR5ICYmIGlzVW5kZWZpbmVkKGZuLmxlbmd0aCA9PT0gMiAmJiBmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIgPyBhcmcxIDogYXJnMikpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XG5cbiAgICAgICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgYnV0IHRoZSBvYmplY3QgcHJvcGVydGllcyBhcmUgdGhlIGtleS92YWx1ZXNcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkge1xuICAgICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnlcbiAgICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7XG4gICAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLlxuICAgICAgICAgIC8vIFRPRE86IGRvIHdlIHN0aWxsIG5lZWQgdGhpcz9cbiAgICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XG4gICAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICB2YXIgamogPSBpc1VuZGVmaW5lZCh2YWx1ZSkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50O1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpIHtcbiAgICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gZXZlbnRIYW5kbGVyKGV2ZW50LCB0eXBlKSB7XG4gICAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpXG4gICAgICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgfTtcblxuICAgICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07XG4gICAgICB2YXIgZXZlbnRGbnNMZW5ndGggPSBldmVudEZucyA/IGV2ZW50Rm5zLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24uY2FsbChldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFNvbWUgZXZlbnRzIGhhdmUgc3BlY2lhbCBoYW5kbGVycyB0aGF0IHdyYXAgdGhlIHJlYWwgaGFuZGxlclxuICAgICAgdmFyIGhhbmRsZXJXcmFwcGVyID0gZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyIHx8IGRlZmF1bHRIYW5kbGVyV3JhcHBlcjtcblxuICAgICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgICBpZiAoZXZlbnRGbnNMZW5ndGggPiAxKSB7XG4gICAgICAgIGV2ZW50Rm5zID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgaGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGV2ZW50Rm5zW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGxcbiAgICAvLyAgICAgICBldmVudHMgb24gYGVsZW1lbnRgXG4gICAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xuICAgIHJldHVybiBldmVudEhhbmRsZXI7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0SGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIodGFyZ2V0LCBldmVudCwgaGFuZGxlcikge1xuICAgIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlXG4gICAgLy8gUmVhZCBhYm91dCBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlOlxuICAgIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazhcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgLy8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG4gICAgaWYgKCFyZWxhdGVkIHx8IHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhanFMaXRlQ29udGFpbnMuY2FsbCh0YXJnZXQsIHJlbGF0ZWQpKSB7XG4gICAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgdHJhdmVyc2FsLlxuICAvLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlXG4gIC8vIHNlbGVjdG9yLlxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZm9yRWFjaCh7XG4gICAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcblxuICAgIG9uOiBmdW5jdGlvbiBqcUxpdGVPbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHtcbiAgICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTtcblxuICAgICAgLy8gRG8gbm90IGFkZCBldmVudCBoYW5kbGVycyB0byBub24tZWxlbWVudHMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuXG4gICAgICBpZiAoIWpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCB0cnVlKTtcbiAgICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgICAgIGlmICghaGFuZGxlKSB7XG4gICAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vc3RyaW5nLWluZGV4b2YtdnMtc3BsaXRcbiAgICAgIHZhciB0eXBlcyA9IHR5cGUuaW5kZXhPZignICcpID49IDAgPyB0eXBlLnNwbGl0KCcgJykgOiBbdHlwZV07XG4gICAgICB2YXIgaSA9IHR5cGVzLmxlbmd0aDtcblxuICAgICAgdmFyIGFkZEhhbmRsZXIgPSBmdW5jdGlvbiBhZGRIYW5kbGVyKHR5cGUsIHNwZWNpYWxIYW5kbGVyV3JhcHBlciwgbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgICBpZiAoIWV2ZW50Rm5zKSB7XG4gICAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV0gPSBbXTtcbiAgICAgICAgICBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgPSBzcGVjaWFsSGFuZGxlcldyYXBwZXI7XG4gICAgICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScgJiYgIW5vRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRGbnMucHVzaChmbik7XG4gICAgICB9O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICAgIGFkZEhhbmRsZXIoTU9VU0VfRVZFTlRfTUFQW3R5cGVdLCBzcGVjaWFsTW91c2VIYW5kbGVyV3JhcHBlcik7XG4gICAgICAgICAgYWRkSGFuZGxlcih0eXBlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEhhbmRsZXIodHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb2ZmOiBqcUxpdGVPZmYsXG5cbiAgICBvbmU6IGZ1bmN0aW9uIG9uZShlbGVtZW50LCB0eXBlLCBmbikge1xuICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgICAgLy9hZGQgdGhlIGxpc3RlbmVyIHR3aWNlIHNvIHRoYXQgd2hlbiBpdCBpcyBjYWxsZWRcbiAgICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZVxuICAgICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseVxuICAgICAgZWxlbWVudC5vbih0eXBlLCBmdW5jdGlvbiBvbkZuKCkge1xuICAgICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7XG4gICAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pO1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTtcbiAgICB9LFxuXG4gICAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7XG4gICAgICB2YXIgaW5kZXgsXG4gICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICAgICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChub2RlLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG5vZGU7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH0sXG5cbiAgICBjb250ZW50czogZnVuY3Rpb24gY29udGVudHMoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuY29udGVudERvY3VtZW50IHx8IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTtcbiAgICB9LFxuXG4gICAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoZWxlbWVudCwgbm9kZSkge1xuICAgICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICAgIGlmIChub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQgJiYgbm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCkgcmV0dXJuO1xuXG4gICAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGVsZW1lbnQsIG5vZGUpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHdyYXA6IGZ1bmN0aW9uIHdyYXAoZWxlbWVudCwgd3JhcE5vZGUpIHtcbiAgICAgIGpxTGl0ZVdyYXBOb2RlKGVsZW1lbnQsIGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXSk7XG4gICAgfSxcblxuICAgIHJlbW92ZToganFMaXRlUmVtb3ZlLFxuXG4gICAgZGV0YWNoOiBmdW5jdGlvbiBkZXRhY2goZWxlbWVudCkge1xuICAgICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICAgIH0sXG5cbiAgICBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoZWxlbWVudCwgbmV3RWxlbWVudCkge1xuICAgICAgdmFyIGluZGV4ID0gZWxlbWVudCxcbiAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBuZXdFbGVtZW50W2ldO1xuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgICAgIGluZGV4ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsXG4gICAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLFxuXG4gICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBmb3JFYWNoKHNlbGVjdG9yLnNwbGl0KCcgJyksIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkge1xuICAgICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID8gcGFyZW50IDogbnVsbDtcbiAgICB9LFxuXG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvbmU6IGpxTGl0ZUNsb25lLFxuXG4gICAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBleHRyYVBhcmFtZXRlcnMpIHtcblxuICAgICAgdmFyIGR1bW15RXZlbnQsIGV2ZW50Rm5zQ29weSwgaGFuZGxlckFyZ3M7XG4gICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gICAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07XG5cbiAgICAgIGlmIChldmVudEZucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVyc1xuICAgICAgICBkdW1teUV2ZW50ID0ge1xuICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uIGlzRGVmYXVsdFByZXZlbnRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBmdW5jdGlvbiBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCxcbiAgICAgICAgICB0eXBlOiBldmVudE5hbWUsXG4gICAgICAgICAgdGFyZ2V0OiBlbGVtZW50XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgYSBjdXN0b20gZXZlbnQgd2FzIHByb3ZpZGVkIHRoZW4gZXh0ZW5kIG91ciBkdW1teSBldmVudCB3aXRoIGl0XG4gICAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgICAgZXZlbnRGbnNDb3B5ID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgICBoYW5kbGVyQXJncyA9IGV4dHJhUGFyYW1ldGVycyA/IFtkdW1teUV2ZW50XS5jb25jYXQoZXh0cmFQYXJhbWV0ZXJzKSA6IFtkdW1teUV2ZW50XTtcblxuICAgICAgICBmb3JFYWNoKGV2ZW50Rm5zQ29weSwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgaWYgKCFkdW1teUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGZuLCBuYW1lKSB7XG4gICAgLyoqXG4gICAgICogY2hhaW5pbmcgZnVuY3Rpb25zXG4gICAgICovXG4gICAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gYW55IGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBuZWVkcyB0byBiZSB3cmFwcGVkXG4gICAgICAgICAgICB2YWx1ZSA9IGpxTGl0ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpxTGl0ZUFkZE5vZGVzKHZhbHVlLCBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiB0aGlzO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZlxuICBKUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uO1xuICBKUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xuXG4gIC8vIFByb3ZpZGVyIGZvciBwcml2YXRlICQkanFMaXRlIHNlcnZpY2VcbiAgLyoqIEB0aGlzICovXG4gIGZ1bmN0aW9uICQkanFMaXRlUHJvdmlkZXIoKSB7XG4gICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKEpRTGl0ZSwge1xuICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gaGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcykge1xuICAgICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICAgIHJldHVybiBqcUxpdGVIYXNDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgICByZXR1cm4ganFMaXRlQWRkQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAgICogSGFzaCBvZiBhOlxuICAgKiAgc3RyaW5nIGlzIHN0cmluZ1xuICAgKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAgICogIG9iamVjdCBpcyBlaXRoZXIgcmVzdWx0IG9mIGNhbGxpbmcgJCRoYXNoS2V5IGZ1bmN0aW9uIG9uIHRoZSBvYmplY3Qgb3IgdW5pcXVlbHkgZ2VuZXJhdGVkIGlkLFxuICAgKiAgICAgICAgIHRoYXQgaXMgYWxzbyBhc3NpZ25lZCB0byB0aGUgJCRoYXNoS2V5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHJldHVybnMge3N0cmluZ30gaGFzaCBzdHJpbmcgc3VjaCB0aGF0IHRoZSBzYW1lIGlucHV0IHdpbGwgaGF2ZSB0aGUgc2FtZSBoYXNoIHN0cmluZy5cbiAgICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzaEtleShvYmosIG5leHRVaWRGbikge1xuICAgIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgdmFyIG9ialR5cGUgPSB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopO1xuICAgIGlmIChvYmpUeXBlID09PSAnZnVuY3Rpb24nIHx8IG9ialR5cGUgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkge1xuICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG9ialR5cGUgKyAnOicgKyAobmV4dFVpZEZuIHx8IG5leHRVaWQpKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IG9ialR5cGUgKyAnOicgKyBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIC8vIEEgbWluaW1hbCBFUzIwMTUgTWFwIGltcGxlbWVudGF0aW9uLlxuICAvLyBTaG91bGQgYmUgYnVnL2ZlYXR1cmUgZXF1aXZhbGVudCB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnNcbiAgLy8gKGZvciB0aGUgZmVhdHVyZXMgcmVxdWlyZWQgaW4gQW5ndWxhcikuXG4gIC8vIFNlZSBodHRwczovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8jdGVzdC1NYXBcbiAgdmFyIG5hbktleSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZ1bmN0aW9uIE5nTWFwU2hpbSgpIHtcbiAgICB0aGlzLl9rZXlzID0gW107XG4gICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgdGhpcy5fbGFzdEtleSA9IE5hTjtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSAtMTtcbiAgfVxuICBOZ01hcFNoaW0ucHJvdG90eXBlID0ge1xuICAgIF9pZHg6IGZ1bmN0aW9uIF9pZHgoa2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSB0aGlzLl9sYXN0S2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXN0SW5kZXg7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYXN0S2V5ID0ga2V5O1xuICAgICAgdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG4gICAgICByZXR1cm4gdGhpcy5fbGFzdEluZGV4O1xuICAgIH0sXG4gICAgX3RyYW5zZm9ybUtleTogZnVuY3Rpb24gX3RyYW5zZm9ybUtleShrZXkpIHtcbiAgICAgIHJldHVybiBpc051bWJlck5hTihrZXkpID8gbmFuS2V5IDoga2V5O1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICAgIHZhciBpZHggPSB0aGlzLl9pZHgoa2V5KTtcbiAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbaWR4XTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIGtleSA9IHRoaXMuX3RyYW5zZm9ybUtleShrZXkpO1xuICAgICAgdmFyIGlkeCA9IHRoaXMuX2lkeChrZXkpO1xuICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgaWR4ID0gdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgICB9XG4gICAgICB0aGlzLl9rZXlzW2lkeF0gPSBrZXk7XG4gICAgICB0aGlzLl92YWx1ZXNbaWR4XSA9IHZhbHVlO1xuXG4gICAgICAvLyBTdXBwb3J0OiBJRTExXG4gICAgICAvLyBEbyBub3QgYHJldHVybiB0aGlzYCB0byBzaW11bGF0ZSB0aGUgcGFydGlhbCBJRTExIGltcGxlbWVudGF0aW9uXG4gICAgfSxcbiAgICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICAgIHZhciBpZHggPSB0aGlzLl9pZHgoa2V5KTtcbiAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2tleXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB0aGlzLl9sYXN0S2V5ID0gTmFOO1xuICAgICAgdGhpcy5fbGFzdEluZGV4ID0gLTE7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRm9yIG5vdywgYWx3YXlzIHVzZSBgTmdNYXBTaGltYCwgZXZlbiBpZiBgd2luZG93Lk1hcGAgaXMgYXZhaWxhYmxlLiBTb21lIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnNcbiAgLy8gYXJlIHN0aWxsIGJ1Z2d5IChvZnRlbiBpbiBzdWJ0bGUgd2F5cykgYW5kIGNhbiBjYXVzZSBoYXJkLXRvLWRlYnVnIGZhaWx1cmVzLiBXaGVuIG5hdGl2ZSBgTWFwYFxuICAvLyBpbXBsZW1lbnRhdGlvbnMgZ2V0IG1vcmUgc3RhYmxlLCB3ZSBjYW4gcmVjb25zaWRlciBzd2l0Y2hpbmcgdG8gYHdpbmRvdy5NYXBgICh3aGVuIGF2YWlsYWJsZSkuXG4gIHZhciBOZ01hcCA9IE5nTWFwU2hpbTtcblxuICB2YXIgJCRNYXBQcm92aWRlciA9IFsvKiogQHRoaXMgKi9mdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kZ2V0ID0gW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBOZ01hcDtcbiAgICB9XTtcbiAgfV07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3JcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYW4gaW5qZWN0b3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3JcbiAgICogZGVwZW5kZW5jeSBpbmplY3Rpb24gKHNlZSB7QGxpbmsgZ3VpZGUvZGkgZGVwZW5kZW5jeSBpbmplY3Rpb259KS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAgICogICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gV2hldGhlciB0aGUgaW5qZWN0b3Igc2hvdWxkIGJlIGluIHN0cmljdCBtb2RlLCB3aGljaFxuICAgKiAgICAgZGlzYWxsb3dzIGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gICAqIEByZXR1cm5zIHtpbmplY3Rvcn0gSW5qZWN0b3Igb2JqZWN0LiBTZWUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIFR5cGljYWwgdXNhZ2VcbiAgICogYGBganNcbiAgICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3JcbiAgICogICB2YXIgJGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pO1xuICAgKlxuICAgKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvblxuICAgKiAgIC8vIHVzZSB0aGUgdHlwZSBpbmZlcmVuY2UgdG8gYXV0byBpbmplY3QgYXJndW1lbnRzLCBvciB1c2UgaW1wbGljaXQgaW5qZWN0aW9uXG4gICAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJGRvY3VtZW50KSB7XG4gICAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xuICAgKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcFxuICAgKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZVxuICAgKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGUgZXh0cmEgYGluamVjdG9yKClgIGFkZGVkXG4gICAqIHRvIEpRdWVyeS9qcUxpdGUgZWxlbWVudHMuIFNlZSB7QGxpbmsgYW5ndWxhci5lbGVtZW50fS5cbiAgICpcbiAgICogKlRoaXMgaXMgZmFpcmx5IHJhcmUgYnV0IGNvdWxkIGJlIHRoZSBjYXNlIGlmIGEgdGhpcmQgcGFydHkgbGlicmFyeSBpcyBpbmplY3RpbmcgdGhlXG4gICAqIG1hcmt1cC4qXG4gICAqXG4gICAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBhIG5ldyBibG9jayBvZiBIVE1MIGNvbnRhaW5pbmcgYSBgbmctY29udHJvbGxlcmBcbiAgICogZGlyZWN0aXZlIGlzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYnkgSlF1ZXJ5LiBXZSB0aGVuIGNvbXBpbGUgYW5kIGxpbmtcbiAgICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDdHJsXCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTtcbiAgICogJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJGRpdik7XG4gICAqXG4gICAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgICogICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJGRpdikuc2NvcGUoKTtcbiAgICogICAkY29tcGlsZSgkZGl2KShzY29wZSk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtb2R1bGVcbiAgICogQG5hbWUgYXV0b1xuICAgKiBAaW5zdGFsbGF0aW9uXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAqL1xuXG4gIHZhciBBUlJPV19BUkcgPSAvXihbXihdKz8pPT4vO1xuICB2YXIgRk5fQVJHUyA9IC9eW14oXSpcXChcXHMqKFteKV0qKVxcKS9tO1xuICB2YXIgRk5fQVJHX1NQTElUID0gLywvO1xuICB2YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG4gIHZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZztcbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5Rm4oZm4pIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0cmFjdEFyZ3MoZm4pIHtcbiAgICB2YXIgZm5UZXh0ID0gc3RyaW5naWZ5Rm4oZm4pLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKSxcbiAgICAgICAgYXJncyA9IGZuVGV4dC5tYXRjaChBUlJPV19BUkcpIHx8IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgICByZXR1cm4gYXJncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFub25Gbihmbikge1xuICAgIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgICAvLyBkZWJ1Z2dpbmcuXG4gICAgdmFyIGFyZ3MgPSBleHRyYWN0QXJncyhmbik7XG4gICAgaWYgKGFyZ3MpIHtcbiAgICAgIHJldHVybiAnZnVuY3Rpb24oJyArIChhcmdzWzFdIHx8ICcnKS5yZXBsYWNlKC9bXFxzXFxyXFxuXSsvLCAnICcpICsgJyknO1xuICAgIH1cbiAgICByZXR1cm4gJ2ZuJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFubm90YXRlKGZuLCBzdHJpY3REaSwgbmFtZSkge1xuICAgIHZhciAkaW5qZWN0LCBhcmdEZWNsLCBsYXN0O1xuXG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7XG4gICAgICAgICRpbmplY3QgPSBbXTtcbiAgICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChzdHJpY3REaSkge1xuICAgICAgICAgICAgaWYgKCFpc1N0cmluZyhuYW1lKSB8fCAhbmFtZSkge1xuICAgICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdzdHJpY3RkaScsICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFyZ0RlY2wgPSBleHRyYWN0QXJncyhmbik7XG4gICAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24gKGFsbCwgdW5kZXJzY29yZSwgbmFtZSkge1xuICAgICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmbi4kaW5qZWN0ID0gJGluamVjdDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICBsYXN0ID0gZm4ubGVuZ3RoIC0gMTtcbiAgICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTtcbiAgICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gJGluamVjdDtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkaW5qZWN0b3JcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIGAkaW5qZWN0b3JgIGlzIHVzZWQgdG8gcmV0cmlldmUgb2JqZWN0IGluc3RhbmNlcyBhcyBkZWZpbmVkIGJ5XG4gICAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLFxuICAgKiBhbmQgbG9hZCBtb2R1bGVzLlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7XG4gICAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gICAqICAgZXhwZWN0KCRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAqICAgICByZXR1cm4gJGluamVjdG9yO1xuICAgKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gICAqIGBgYFxuICAgKlxuICAgKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gICAqXG4gICAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcbiAgICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAgICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKHNlcnZpY2VBKXt9KTtcbiAgICpcbiAgICogICAvLyBhbm5vdGF0ZWRcbiAgICogICBmdW5jdGlvbiBleHBsaWNpdChzZXJ2aWNlQSkge307XG4gICAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcbiAgICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAgICpcbiAgICogICAvLyBpbmxpbmVcbiAgICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogIyMgSW5mZXJlbmNlXG4gICAqXG4gICAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvblxuICAgKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAgICogYW5ub3RhdGlvbnMgaXMgZGlzYWxsb3dlZCB3aGVuIHRoZSBpbmplY3RvciBpcyBpbiBzdHJpY3QgbW9kZS5cbiAgICogKk5PVEU6KiBUaGlzIGRvZXMgbm90IHdvcmsgd2l0aCBtaW5pZmljYXRpb24sIGFuZCBvYmZ1c2NhdGlvbiB0b29scyBzaW5jZSB0aGVzZSB0b29scyBjaGFuZ2UgdGhlXG4gICAqIGFyZ3VtZW50IG5hbWVzLlxuICAgKlxuICAgKiAjIyBgJGluamVjdGAgQW5ub3RhdGlvblxuICAgKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAgICpcbiAgICogIyMgSW5saW5lXG4gICAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGluamVjdG9yI21vZHVsZXNcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgaGFzaCBjb250YWluaW5nIGFsbCB0aGUgbW9kdWxlcyB0aGF0IGhhdmUgYmVlbiBsb2FkZWQgaW50byB0aGVcbiAgICogJGluamVjdG9yLlxuICAgKlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3BlcnR5IHRvIGZpbmQgb3V0IGluZm9ybWF0aW9uIGFib3V0IGEgbW9kdWxlIHZpYSB0aGVcbiAgICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2luZm8gYG15TW9kdWxlLmluZm8oLi4uKWB9IG1ldGhvZC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGBgYFxuICAgKiB2YXIgaW5mbyA9ICRpbmplY3Rvci5tb2R1bGVzWyduZ0FuaW1hdGUnXS5pbmZvKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBwcm9wZXJ0eSB0byBhdHRlbXB0IHRvIG1vZGlmeSB0aGUgbW9kdWxlcyBhZnRlciB0aGUgYXBwbGljYXRpb25cbiAgICogaGFzIGJlZW4gYm9vdHN0cmFwcGVkLioqXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbmplY3RvciNnZXRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybiBhbiBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHRvIHJldHJpZXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGNhbGxlciBBbiBvcHRpb25hbCBzdHJpbmcgdG8gcHJvdmlkZSB0aGUgb3JpZ2luIG9mIHRoZSBmdW5jdGlvbiBjYWxsIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW5qZWN0b3IjaW52b2tlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gICAqICAgaW5qZWN0ZWQgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgZ3VpZGUvZGkgJGluamVjdCBBbm5vdGF0aW9ufSBydWxlcy5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBzZWxmIFRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuXG4gICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGludm9rZWQgYGZuYCBmdW5jdGlvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGluamVjdG9yI2hhc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW5qZWN0b3IjaW5zdGFudGlhdGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICAgKiBvcGVyYXRvciwgYW5kIHN1cHBsaWVzIGFsbCBvZiB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlXG4gICAqIGNvbnN0cnVjdG9yIGFubm90YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFR5cGUgQW5ub3RhdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXNcbiAgICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAgICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGluamVjdG9yI2Fubm90YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHNlcnZpY2UgbmFtZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIHJlcXVlc3RpbmcgZm9yIGluamVjdGlvbi4gVGhpcyBBUEkgaXNcbiAgICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAgICogZnVuY3Rpb24gaXMgaW52b2tlZC4gVGhlcmUgYXJlIHRocmVlIHdheXMgaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIGNhbiBiZSBhbm5vdGF0ZWQgd2l0aCB0aGUgbmVlZGVkXG4gICAqIGRlcGVuZGVuY2llcy5cbiAgICpcbiAgICogIyBBcmd1bWVudCBuYW1lc1xuICAgKlxuICAgKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gICAqIGJ5IGNvbnZlcnRpbmcgdGhlIGZ1bmN0aW9uIGludG8gYSBzdHJpbmcgdXNpbmcgYHRvU3RyaW5nKClgIG1ldGhvZCBhbmQgZXh0cmFjdGluZyB0aGUgYXJndW1lbnRcbiAgICogbmFtZXMuXG4gICAqIGBgYGpzXG4gICAqICAgLy8gR2l2ZW5cbiAgICogICBmdW5jdGlvbiBNeUNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUpIHtcbiAgICogICAgIC8vIC4uLlxuICAgKiAgIH1cbiAgICpcbiAgICogICAvLyBUaGVuXG4gICAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pO1xuICAgKiBgYGBcbiAgICpcbiAgICogWW91IGNhbiBkaXNhbGxvdyB0aGlzIG1ldGhvZCBieSB1c2luZyBzdHJpY3QgaW5qZWN0aW9uIG1vZGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICAgKiBhbm5vdGF0aW9uIHN0cmF0ZWdpZXMgYXJlIHN1cHBvcnRlZC5cbiAgICpcbiAgICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gICAqXG4gICAqIElmIGEgZnVuY3Rpb24gaGFzIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBhbmQgaXRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIHRoZW4gdGhlIHN0cmluZ3NcbiAgICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICAgKiBgYGBqc1xuICAgKiAgIC8vIEdpdmVuXG4gICAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gICAqICAgICAvLyAuLi5cbiAgICogICB9XG4gICAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICAgKiAgIE15Q29udHJvbGxlclsnJGluamVjdCddID0gWyckc2NvcGUnLCAnJHJvdXRlJ107XG4gICAqXG4gICAqICAgLy8gVGhlblxuICAgKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAgICogYGBgXG4gICAqXG4gICAqICMgVGhlIGFycmF5IG5vdGF0aW9uXG4gICAqXG4gICAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAgICogaXMgdmVyeSBpbmNvbnZlbmllbnQuIEluIHRoZXNlIHNpdHVhdGlvbnMgdXNpbmcgdGhlIGFycmF5IG5vdGF0aW9uIHRvIHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBpblxuICAgKiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbiBpcyBhIGJldHRlciBjaG9pY2U6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgLy8gV2Ugd2lzaCB0byB3cml0ZSB0aGlzIChub3QgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24gc2FmZSlcbiAgICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAgICogICAgIC8vIC4uLlxuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gd3JpdGUgYnJlYWsgaW5saW5pbmdcbiAgICogICB2YXIgdG1wRm4gPSBmdW5jdGlvbihvYmZ1c2NhdGVkQ29tcGlsZSwgb2JmdXNjYXRlZFJvb3RTY29wZSkge1xuICAgKiAgICAgLy8gLi4uXG4gICAqICAgfTtcbiAgICogICB0bXBGbi4kaW5qZWN0ID0gWyckY29tcGlsZScsICckcm9vdFNjb3BlJ107XG4gICAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAgICpcbiAgICogICAvLyBUbyBiZXR0ZXIgc3VwcG9ydCBpbmxpbmUgZnVuY3Rpb24gdGhlIGlubGluZSBhbm5vdGF0aW9uIGlzIHN1cHBvcnRlZFxuICAgKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAgICogICAgIC8vIC4uLlxuICAgKiAgIH1dKTtcbiAgICpcbiAgICogICAvLyBUaGVyZWZvcmVcbiAgICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoXG4gICAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAgICogICAgKS50b0VxdWFsKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIEZ1bmN0aW9uIGZvciB3aGljaCBkZXBlbmRlbnQgc2VydmljZSBuYW1lcyBuZWVkIHRvXG4gICAqIGJlIHJldHJpZXZlZCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gRGlzYWxsb3cgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAgICpcbiAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRwcm92aWRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHNcbiAgICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb25cbiAgICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS5cbiAgICpcbiAgICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2VcbiAgICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi5cbiAgICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhXG4gICAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZVxuICAgKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqXG4gICAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLlxuICAgKlxuICAgKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZVxuICAgKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvclxuICAgKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXJcbiAgICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuXG4gICAqXG4gICAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgcHJvdmlkZXIobmFtZSwgcHJvdmlkZXIpfSAtIHJlZ2lzdGVycyBhICoqc2VydmljZSBwcm92aWRlcioqIHdpdGggdGhlXG4gICAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfVxuICAgKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50IGNvbnN0YW50KG5hbWUsIG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5XG4gICAqICAgICBwcm92aWRlcnMgYW5kIHNlcnZpY2VzLlxuICAgKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG5hbWUsIG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnlcbiAgICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLlxuICAgKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgZmFjdG9yeShuYW1lLCBmbil9IC0gcmVnaXN0ZXJzIGEgc2VydmljZSAqKmZhY3RvcnkgZnVuY3Rpb24qKlxuICAgKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGNvbnRhaW4gdGhlXG4gICAqICAgICBnaXZlbiBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShuYW1lLCBGbil9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqXG4gICAqICAgICB0aGF0IHdpbGwgYmUgd3JhcHBlZCBpbiBhICoqc2VydmljZSBwcm92aWRlcioqIG9iamVjdCwgd2hvc2UgYCRnZXRgIHByb3BlcnR5IHdpbGwgaW5zdGFudGlhdGVcbiAgICogICAgICBhIG5ldyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3IobmFtZSwgZGVjb3JGbil9IC0gcmVnaXN0ZXJzIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB0aGF0XG4gICAqICAgICAgd2lsbCBiZSBhYmxlIHRvIG1vZGlmeSBvciByZXBsYWNlIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBhbm90aGVyIHNlcnZpY2UuXG4gICAqXG4gICAqIFNlZSB0aGUgaW5kaXZpZHVhbCBtZXRob2RzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHByb3ZpZGUjcHJvdmlkZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnNcbiAgICogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgd2hvc2UgaW5zdGFuY2VzIGFyZSByZXNwb25zaWJsZSBmb3IgXCJwcm92aWRpbmdcIiBhIGZhY3RvcnkgZm9yIGFcbiAgICogc2VydmljZS5cbiAgICpcbiAgICogU2VydmljZSBwcm92aWRlciBuYW1lcyBzdGFydCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRoZXkgcHJvdmlkZSBmb2xsb3dlZCBieSBgUHJvdmlkZXJgLlxuICAgKiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgaGFzIGEgcHJvdmlkZXIgY2FsbGVkXG4gICAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS5cbiAgICpcbiAgICogU2VydmljZSBwcm92aWRlciBvYmplY3RzIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHRoZSBwcm92aWRlclxuICAgKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGBcbiAgICogbWV0aG9kLCBvciBob3cgdGhhdCBzZXJ2aWNlIHdpbGwgYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfSBoYXMgYVxuICAgKiBtZXRob2Qge0BsaW5rIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWQgZGVidWdFbmFibGVkfVxuICAgKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlXG4gICAqIGNvbnNvbGUgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdQcm92aWRlcidgIGtleS5cbiAgICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKCkpfSBwcm92aWRlciBJZiB0aGUgcHJvdmlkZXIgaXM6XG4gICAqXG4gICAqICAgLSBgT2JqZWN0YDogdGhlbiBpdCBzaG91bGQgaGF2ZSBhIGAkZ2V0YCBtZXRob2QuIFRoZSBgJGdldGAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB1c2luZ1xuICAgKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC5cbiAgICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcbiAgICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICBcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgZXZlbnQgdHJhY2tpbmcgc2VydmljZSBhbmQgcmVnaXN0ZXIgaXQgdXNpbmdcbiAgICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICAgKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7XG4gICAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snO1xuICAgKlxuICAgKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkXG4gICAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICogICAgICB0cmFja2luZ1VybCA9IHVybDtcbiAgICogICAgfTtcbiAgICpcbiAgICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvblxuICAgKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9O1xuICAgKiAgICAgIHJldHVybiB7XG4gICAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnRcbiAgICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwO1xuICAgKiAgICAgICAgICBjb3VudCArPSAxO1xuICAgKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50O1xuICAgKiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAqICAgICAgICB9LFxuICAgKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybFxuICAgKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH07XG4gICAqICAgIH1dO1xuICAgKiAgfVxuICAgKlxuICAgKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgcG9zdFNweTtcbiAgICpcbiAgICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gICAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTtcbiAgICogICAgfSkpO1xuICAgKlxuICAgKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikge1xuICAgKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAgICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpO1xuICAgKiAgICB9KSk7XG4gICAqXG4gICAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikge1xuICAgKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7XG4gICAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTtcbiAgICogICAgfSkpO1xuICAgKlxuICAgKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7XG4gICAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpO1xuICAgKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTtcbiAgICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpO1xuICAgKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpO1xuICAgKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTtcbiAgICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTtcbiAgICogICAgfSkpO1xuICAgKiAgfSk7XG4gICAqIGBgYFxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcHJvdmlkZSNmYWN0b3J5XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBSZWdpc3RlciBhICoqc2VydmljZSBmYWN0b3J5KiosIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHRvIHJldHVybiB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAgICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlciBjb25zaXN0cyBvZiBvbmx5IGEgYCRnZXRgIHByb3BlcnR5LFxuICAgKiB3aGljaCBpcyB0aGUgZ2l2ZW4gc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgKiBZb3Ugc2hvdWxkIHVzZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoZ2V0Rm4pfSBpZiB5b3UgZG8gbm90IG5lZWQgdG9cbiAgICogY29uZmlndXJlIHlvdXIgc2VydmljZSBpbiBhIHByb3ZpZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59ICRnZXRGbiBUaGUgaW5qZWN0YWJsZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi5cbiAgICogICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3IgYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZVxuICAgKiBgYGBqc1xuICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ3BpbmcnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICogICAgIHJldHVybiBmdW5jdGlvbiBwaW5nKCkge1xuICAgKiAgICAgICByZXR1cm4gJGh0dHAuc2VuZCgnL3BpbmcnKTtcbiAgICogICAgIH07XG4gICAqICAgfV0pO1xuICAgKiBgYGBcbiAgICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAgICogYGBganNcbiAgICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gICAqICAgICBwaW5nKCk7XG4gICAqICAgfV0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHByb3ZpZGUjc2VydmljZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlXG4gICAqIGluc3RhbmNlLlxuICAgKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeVxuICAgKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5zdGFuY2UgaW5zdGFudGlhdGVkIGJ5IHRoZSBpbmplY3RvciBmcm9tIHRoZSBzZXJ2aWNlIGNvbnN0cnVjdG9yXG4gICAqIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBJbnRlcm5hbGx5IGl0IGxvb2tzIGEgYml0IGxpa2UgdGhpczpcbiAgICpcbiAgICogYGBgXG4gICAqIHtcbiAgICogICAkZ2V0OiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICpcbiAgICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAgICogYXMgYSB0eXBlL2NsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGNvbnN0cnVjdG9yIEFuIGluamVjdGFibGUgY2xhc3MgKGNvbnN0cnVjdG9yIGZ1bmN0aW9uKVxuICAgKiAgICAgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAgICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gICAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9LlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAgICogICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICogICB9O1xuICAgKlxuICAgKiAgIFBpbmcuJGluamVjdCA9IFsnJGh0dHAnXTtcbiAgICpcbiAgICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9waW5nJyk7XG4gICAqICAgfTtcbiAgICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gICAqIGBgYFxuICAgKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICAgKiBgYGBqc1xuICAgKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAgICogICAgIHBpbmcuc2VuZCgpO1xuICAgKiAgIH1dKTtcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRwcm92aWRlI3ZhbHVlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBSZWdpc3RlciBhICoqdmFsdWUgc2VydmljZSoqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBzdWNoIGFzIGEgc3RyaW5nLCBhXG4gICAqIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzXG4gICAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICAgKiBzZXJ2aWNlKiouIFRoYXQgYWxzbyBtZWFucyBpdCBpcyBub3QgcG9zc2libGUgdG8gaW5qZWN0IG90aGVyIHNlcnZpY2VzIGludG8gYSB2YWx1ZSBzZXJ2aWNlLlxuICAgKlxuICAgKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gICAqIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGJ1dCB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGJ5XG4gICAqIGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAgICogYGBganNcbiAgICogICAkcHJvdmlkZS52YWx1ZSgnQURNSU5fVVNFUicsICdhZG1pbicpO1xuICAgKlxuICAgKiAgICRwcm92aWRlLnZhbHVlKCdSb2xlTG9va3VwJywgeyBhZG1pbjogMCwgd3JpdGVyOiAxLCByZWFkZXI6IDIgfSk7XG4gICAqXG4gICAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAqICAgICByZXR1cm4gdmFsdWUgLyAyO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsXG4gICAqIGEgbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uIExpa2UgdGhlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSwgaXQgaXMgbm90XG4gICAqIHBvc3NpYmxlIHRvIGluamVjdCBvdGhlciBzZXJ2aWNlcyBpbnRvIGEgY29uc3RhbnQuXG4gICAqXG4gICAqIEJ1dCB1bmxpa2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9LCBhIGNvbnN0YW50IGNhbiBiZVxuICAgKiBpbmplY3RlZCBpbnRvIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYW5kIGl0IGNhbm5vdFxuICAgKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb25zdGFudC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgaW5zdGFuY2VcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogSGVyZSBhIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgY29uc3RhbnRzOlxuICAgKiBgYGBqc1xuICAgKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICAgKlxuICAgKiAgICRwcm92aWRlLmNvbnN0YW50KCdNWV9DT0xPVVJTJywgWydyZWQnLCAnYmx1ZScsICdncmV5J10pO1xuICAgKlxuICAgKiAgICRwcm92aWRlLmNvbnN0YW50KCdkb3VibGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgKiAgICAgcmV0dXJuIHZhbHVlICogMjtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRwcm92aWRlI2RlY29yYXRvclxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUmVnaXN0ZXIgYSAqKmRlY29yYXRvciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBBIGRlY29yYXRvciBmdW5jdGlvblxuICAgKiBpbnRlcmNlcHRzIHRoZSBjcmVhdGlvbiBvZiBhIHNlcnZpY2UsIGFsbG93aW5nIGl0IHRvIG92ZXJyaWRlIG9yIG1vZGlmeSB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gICAqIHNlcnZpY2UuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGRlY29yYXRvciBmdW5jdGlvbiBtYXkgYmUgdGhlIG9yaWdpbmFsIHNlcnZpY2UsIG9yIGEgbmV3IHNlcnZpY2VcbiAgICogdGhhdCByZXBsYWNlcyAob3Igd3JhcHMgYW5kIGRlbGVnYXRlcyB0bykgdGhlIG9yaWdpbmFsIHNlcnZpY2UuXG4gICAqXG4gICAqIFlvdSBjYW4gZmluZCBvdXQgbW9yZSBhYm91dCB1c2luZyBkZWNvcmF0b3JzIGluIHRoZSB7QGxpbmsgZ3VpZGUvZGVjb3JhdG9yc30gZ3VpZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICAgKiAgICBwcm92aWRlZCBhbmQgc2hvdWxkIHJldHVybiB0aGUgZGVjb3JhdGVkIHNlcnZpY2UgaW5zdGFuY2UuIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgdXNpbmdcbiAgICogICAgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgaW5qZWN0b3IuaW52b2tlfSBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBmdWxseSBpbmplY3RhYmxlLlxuICAgKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICAgKlxuICAgKiAgICAqIGAkZGVsZWdhdGVgIC0gVGhlIG9yaWdpbmFsIHNlcnZpY2UgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSByZXBsYWNlZCwgbW9ua2V5IHBhdGNoZWQsIGNvbmZpZ3VyZWQsXG4gICAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmdcbiAgICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LlxuICAgKiBgYGBqc1xuICAgKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gICAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjtcbiAgICogICAgIHJldHVybiAkZGVsZWdhdGU7XG4gICAqICAgfV0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlSW5qZWN0b3IobW9kdWxlc1RvTG9hZCwgc3RyaWN0RGkpIHtcbiAgICBzdHJpY3REaSA9IHN0cmljdERpID09PSB0cnVlO1xuICAgIHZhciBJTlNUQU5USUFUSU5HID0ge30sXG4gICAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJyxcbiAgICAgICAgcGF0aCA9IFtdLFxuICAgICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IE5nTWFwKCksXG4gICAgICAgIHByb3ZpZGVyQ2FjaGUgPSB7XG4gICAgICAkcHJvdmlkZToge1xuICAgICAgICBwcm92aWRlcjogc3VwcG9ydE9iamVjdChwcm92aWRlciksXG4gICAgICAgIGZhY3Rvcnk6IHN1cHBvcnRPYmplY3QoZmFjdG9yeSksXG4gICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgIHZhbHVlOiBzdXBwb3J0T2JqZWN0KHZhbHVlKSxcbiAgICAgICAgY29uc3RhbnQ6IHN1cHBvcnRPYmplY3QoY29uc3RhbnQpLFxuICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgfVxuICAgIH0sXG4gICAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSBwcm92aWRlckNhY2hlLiRpbmplY3RvciA9IGNyZWF0ZUludGVybmFsSW5qZWN0b3IocHJvdmlkZXJDYWNoZSwgZnVuY3Rpb24gKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICB9XG4gICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCAnVW5rbm93biBwcm92aWRlcjogezB9JywgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgIH0pLFxuICAgICAgICBpbnN0YW5jZUNhY2hlID0ge30sXG4gICAgICAgIHByb3RvSW5zdGFuY2VJbmplY3RvciA9IGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24gKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIHZhciBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgsIGNhbGxlcik7XG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UocHJvdmlkZXIuJGdldCwgcHJvdmlkZXIsIHVuZGVmaW5lZCwgc2VydmljZU5hbWUpO1xuICAgIH0pLFxuICAgICAgICBpbnN0YW5jZUluamVjdG9yID0gcHJvdG9JbnN0YW5jZUluamVjdG9yO1xuXG4gICAgcHJvdmlkZXJDYWNoZVsnJGluamVjdG9yJyArIHByb3ZpZGVyU3VmZml4XSA9IHsgJGdldDogdmFsdWVGbihwcm90b0luc3RhbmNlSW5qZWN0b3IpIH07XG4gICAgaW5zdGFuY2VJbmplY3Rvci5tb2R1bGVzID0gcHJvdmlkZXJJbmplY3Rvci5tb2R1bGVzID0gY3JlYXRlTWFwKCk7XG4gICAgdmFyIHJ1bkJsb2NrcyA9IGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpO1xuICAgIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKTtcbiAgICBpbnN0YW5jZUluamVjdG9yLnN0cmljdERpID0gc3RyaWN0RGk7XG4gICAgZm9yRWFjaChydW5CbG9ja3MsIGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKGZuKSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW5zdGFuY2VJbmplY3RvcjtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICRwcm92aWRlclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgZm9yRWFjaChrZXksIHJldmVyc2VQYXJhbXMoZGVsZWdhdGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVsZWdhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7XG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpO1xuICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHtcbiAgICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pO1xuICAgICAgfVxuICAgICAgaWYgKCFwcm92aWRlcl8uJGdldCkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3BnZXQnLCAnUHJvdmlkZXIgXFwnezB9XFwnIG11c3QgZGVmaW5lICRnZXQgZmFjdG9yeSBtZXRob2QuJywgbmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvdmlkZXJDYWNoZVtuYW1lICsgcHJvdmlkZXJTdWZmaXhdID0gcHJvdmlkZXJfO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgICByZXR1cm4gKC8qKiBAdGhpcyAqL2Z1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZhY3RvcnksIHRoaXMpO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgJ1Byb3ZpZGVyIFxcJ3swfVxcJyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkge1xuICAgICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICAgJGdldDogZW5mb3JjZSAhPT0gZmFsc2UgPyBlbmZvcmNlUmV0dXJuVmFsdWUobmFtZSwgZmFjdG9yeUZuKSA6IGZhY3RvcnlGblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VydmljZShuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbiAoJGluamVjdG9yKSB7XG4gICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgdmFsdWVGbih2YWwpLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb25zdGFudCcpO1xuICAgICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xuICAgICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICAgIG9yaWckZ2V0ID0gb3JpZ1Byb3ZpZGVyLiRnZXQ7XG5cbiAgICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7ICRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlIH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBNb2R1bGUgTG9hZGluZ1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpIHtcbiAgICAgIGFzc2VydEFyZyhpc1VuZGVmaW5lZChtb2R1bGVzVG9Mb2FkKSB8fCBpc0FycmF5KG1vZHVsZXNUb0xvYWQpLCAnbW9kdWxlc1RvTG9hZCcsICdub3QgYW4gYXJyYXknKTtcbiAgICAgIHZhciBydW5CbG9ja3MgPSBbXSxcbiAgICAgICAgICBtb2R1bGVGbjtcbiAgICAgIGZvckVhY2gobW9kdWxlc1RvTG9hZCwgZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgICBpZiAobG9hZGVkTW9kdWxlcy5nZXQobW9kdWxlKSkgcmV0dXJuO1xuICAgICAgICBsb2FkZWRNb2R1bGVzLnNldChtb2R1bGUsIHRydWUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJ1bkludm9rZVF1ZXVlKHF1ZXVlKSB7XG4gICAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBxdWV1ZVtpXSxcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KGludm9rZUFyZ3NbMF0pO1xuXG4gICAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoaXNTdHJpbmcobW9kdWxlKSkge1xuICAgICAgICAgICAgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7XG4gICAgICAgICAgICBpbnN0YW5jZUluamVjdG9yLm1vZHVsZXNbbW9kdWxlXSA9IG1vZHVsZUZuO1xuICAgICAgICAgICAgcnVuQmxvY2tzID0gcnVuQmxvY2tzLmNvbmNhdChsb2FkTW9kdWxlcyhtb2R1bGVGbi5yZXF1aXJlcykpLmNvbmNhdChtb2R1bGVGbi5fcnVuQmxvY2tzKTtcbiAgICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7XG4gICAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhc3NlcnRBcmdGbihtb2R1bGUsICdtb2R1bGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZS5tZXNzYWdlICYmIGUuc3RhY2sgJiYgZS5zdGFjay5pbmRleE9mKGUubWVzc2FnZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBTYWZhcmkgJiBGRidzIHN0YWNrIHRyYWNlcyBkb24ndCBjb250YWluIGVycm9yLm1lc3NhZ2UgY29udGVudFxuICAgICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAgIC8vIFNvIGlmIHN0YWNrIGRvZXNuJ3QgY29udGFpbiBtZXNzYWdlLCB3ZSBjcmVhdGUgYSBuZXcgc3RyaW5nIHRoYXQgY29udGFpbnMgYm90aC5cbiAgICAgICAgICAgIC8vIFNpbmNlIGVycm9yLnN0YWNrIGlzIHJlYWQtb25seSBpbiBTYWZhcmksIEknbSBvdmVycmlkaW5nIGUgYW5kIG5vdCBlLnN0YWNrIGhlcmUuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXgtYXNzaWduXG4gICAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xcbicgKyBlLnN0YWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgJ0ZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX0nLCBtb2R1bGUsIGUuc3RhY2sgfHwgZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydW5CbG9ja3M7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gaW50ZXJuYWwgSW5qZWN0b3JcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgICAgZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2NkZXAnLCAnQ2lyY3VsYXIgZGVwZW5kZW5jeSBmb3VuZDogezB9Jywgc2VydmljZU5hbWUgKyAnIDwtICcgKyBwYXRoLmpvaW4oJyA8LSAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBJTlNUQU5USUFUSU5HO1xuICAgICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gZmFjdG9yeShzZXJ2aWNlTmFtZSwgY2FsbGVyKTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW5qZWN0aW9uQXJncyhmbiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgJGluamVjdCA9IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gJGluamVjdFtpXTtcbiAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignaXRrbicsICdJbmNvcnJlY3QgaW5qZWN0aW9uIHRva2VuISBFeHBlY3RlZCBzZXJ2aWNlIG5hbWUgYXMgc3RyaW5nLCBnb3QgezB9Jywga2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXJncy5wdXNoKGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGxvY2Fsc1trZXldIDogZ2V0U2VydmljZShrZXksIHNlcnZpY2VOYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzQ2xhc3MoZnVuYykge1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAgICAgLy8gSUUgOS0xMSBkbyBub3Qgc3VwcG9ydCBjbGFzc2VzIGFuZCBJRTkgbGVha3Mgd2l0aCB0aGUgY29kZSBiZWxvdy5cbiAgICAgICAgaWYgKG1zaWUgfHwgdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3M7XG4gICAgICAgIGlmICghaXNCb29sZWFuKHJlc3VsdCkpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0OiBFZGdlIDEyLTEzIG9ubHlcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzYxNTYxMzUvXG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy4kJG5nSXNDbGFzcyA9IC9eKD86Y2xhc3NcXGJ8Y29uc3RydWN0b3JcXCgpLy50ZXN0KHN0cmluZ2lmeUZuKGZ1bmMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgc2VydmljZU5hbWUgPSBsb2NhbHM7XG4gICAgICAgICAgbG9jYWxzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcmdzID0gaW5qZWN0aW9uQXJncyhmbiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICAgIGZuID0gZm5bZm4ubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQ2xhc3MoZm4pKSB7XG4gICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2hcbiAgICAgICAgICAvLyAjNTM4OFxuICAgICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcmdzLnVuc2hpZnQobnVsbCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoZm4sIGFyZ3MpKSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgVHlwZSBpcyBhbm5vdGF0ZWQgYW5kIHVzZSBqdXN0IHRoZSBnaXZlbiBmdW5jdGlvbiBhdCBuLTEgYXMgcGFyYW1ldGVyXG4gICAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICAgIHZhciBjdG9yID0gaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGU7XG4gICAgICAgIHZhciBhcmdzID0gaW5qZWN0aW9uQXJncyhUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IGF0IHBvc2l0aW9uIDAgaXMgaWdub3JlZCBmb3IgaW52b2NhdGlvbiB3aXRoIGBuZXdgLCBidXQgcmVxdWlyZWQuXG4gICAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoY3RvciwgYXJncykpKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgICBpbnN0YW50aWF0ZTogaW5zdGFudGlhdGUsXG4gICAgICAgIGdldDogZ2V0U2VydmljZSxcbiAgICAgICAgYW5ub3RhdGU6IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUsXG4gICAgICAgIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcHJvdmlkZXJDYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lICsgcHJvdmlkZXJTdWZmaXgpIHx8IGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTtcblxuICAvKipcbiAgICogQG5nZG9jIHByb3ZpZGVyXG4gICAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlclxuICAgKiBAdGhpc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXNlIGAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJgIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZyB3aGVuZXZlclxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gY2hhbmdlcy5cbiAgICovXG4gIGZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHtcblxuICAgIHZhciBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBCeSBkZWZhdWx0LCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCAkYW5jaG9yU2Nyb2xsKCl9IHdpbGwgYXV0b21hdGljYWxseSBkZXRlY3QgY2hhbmdlcyB0b1xuICAgICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gZGlzYWJsZSBhdXRvbWF0aWMgc2Nyb2xsaW5nLlxuICAgICAqXG4gICAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAgICoge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwgJGFuY2hvclNjcm9sbCgpfSBpbiBvcmRlciB0byBzY3JvbGwgdG8gdGhlIGVsZW1lbnQgcmVsYXRlZCB0byB0aGVcbiAgICAgKiBjdXJyZW50IGhhc2guXG4gICAgICovXG4gICAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGFuY2hvclNjcm9sbFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQHJlcXVpcmVzICR3aW5kb3dcbiAgICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uXG4gICAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgICAqIGN1cnJlbnQgdmFsdWUgb2Yge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9LCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIHNwZWNpZmllZFxuICAgICAqIGluIHRoZVxuICAgICAqIFtIVE1MNSBzcGVjXShodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9icm93c2Vycy5odG1sI2FuLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAgICpcbiAgICAgKiBJdCBhbHNvIHdhdGNoZXMgdGhlIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgYXV0b21hdGljYWxseSBzY3JvbGxzIHRvXG4gICAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAgICoge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxQcm92aWRlciNkaXNhYmxlQXV0b1Njcm9sbGluZyAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIuZGlzYWJsZUF1dG9TY3JvbGxpbmcoKX0uXG4gICAgICpcbiAgICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgICAqIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKGVpdGhlciBmaXhlZCBvciBkeW5hbWljKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSB3aWxsIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgICAqIElmIHNldCwgc3BlY2lmaWVzIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldC4gVGhpcyBpcyBvZnRlbiB1c2VmdWwgd2hlbiB0aGVyZSBhcmUgZml4ZWRcbiAgICAgKiBwb3NpdGlvbmVkIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UsIHN1Y2ggYXMgbmF2YmFycywgaGVhZGVycyBldGMuXG4gICAgICpcbiAgICAgKiBgeU9mZnNldGAgY2FuIGJlIHNwZWNpZmllZCBpbiB2YXJpb3VzIHdheXM6XG4gICAgICogLSAqKm51bWJlcioqOiBBIGZpeGVkIG51bWJlciBvZiBwaXhlbHMgdG8gYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+PGJyIC8+XG4gICAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAgICogICBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9mZnNldCAoaW4gcGl4ZWxzKS48YnIgLz48YnIgLz5cbiAgICAgKiAtICoqanFMaXRlKio6IEEganFMaXRlL2pRdWVyeSBlbGVtZW50IHRvIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIG9mZnNldC4gVGhlIGRpc3RhbmNlIGZyb21cbiAgICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICAgKiAgICoqTm90ZSoqOiBUaGUgZWxlbWVudCB3aWxsIGJlIHRha2VuIGludG8gYWNjb3VudCBvbmx5IGFzIGxvbmcgYXMgaXRzIGBwb3NpdGlvbmAgaXMgc2V0IHRvXG4gICAgICogICBgZml4ZWRgLiBUaGlzIG9wdGlvbiBpcyB1c2VmdWwsIHdoZW4gZGVhbGluZyB3aXRoIHJlc3BvbnNpdmUgbmF2YmFycy9oZWFkZXJzIHRoYXQgYWRqdXN0XG4gICAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgICAqXG4gICAgICogPGJyIC8+XG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgKiBJbiBvcmRlciBmb3IgYHlPZmZzZXRgIHRvIHdvcmsgcHJvcGVybHksIHNjcm9sbGluZyBzaG91bGQgdGFrZSBwbGFjZSBvbiB0aGUgZG9jdW1lbnQncyByb290IGFuZFxuICAgICAqIG5vdCBzb21lIGNoaWxkIGVsZW1lbnQuXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIiBuYW1lPVwiYW5jaG9yLXNjcm9sbFwiPlxuICAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICAgPGRpdiBpZD1cInNjcm9sbEFyZWFcIiBuZy1jb250cm9sbGVyPVwiU2Nyb2xsQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICAgIDxhIGlkPVwiYm90dG9tXCI+PC9hPiBZb3UncmUgYXQgdGhlIGJvdHRvbSFcbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2ZpbGU+XG4gICAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAkc2NvcGUuZ290b0JvdHRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbG9jYXRpb24uaGFzaCB0byB0aGUgaWQgb2ZcbiAgICAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCB5b3Ugd2lzaCB0byBzY3JvbGwgdG8uXG4gICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2JvdHRvbScpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKVxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvZmlsZT5cbiAgICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICAgI3Njcm9sbEFyZWEge1xuICAgICAgICAgICAgIGhlaWdodDogMjgwcHg7XG4gICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgICNib3R0b20ge1xuICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDtcbiAgICAgICAgICAgfVxuICAgICAgICAgPC9maWxlPlxuICAgICAgIDwvZXhhbXBsZT5cbiAgICAgKlxuICAgICAqIDxociAvPlxuICAgICAqIFRoZSBleGFtcGxlIGJlbG93IGlsbHVzdHJhdGVzIHRoZSB1c2Ugb2YgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChzcGVjaWZpZWQgYXMgYSBmaXhlZCB2YWx1ZSkuXG4gICAgICogU2VlIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgJGFuY2hvclNjcm9sbC55T2Zmc2V0fSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlXCIgbmFtZT1cImFuY2hvci1zY3JvbGwtb2Zmc2V0XCI+XG4gICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZml4ZWQtaGVhZGVyXCIgbmctY29udHJvbGxlcj1cImhlYWRlckN0cmxcIj5cbiAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJnb3RvQW5jaG9yKHgpXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICAgICAgR28gdG8gYW5jaG9yIHt7eH19XG4gICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPGRpdiBpZD1cImFuY2hvcnt7eH19XCIgY2xhc3M9XCJhbmNob3JcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgICAgQW5jaG9yIHt7eH19IG9mIDVcbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2ZpbGU+XG4gICAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLnJ1bihbJyRhbmNob3JTY3JvbGwnLCBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsLnlPZmZzZXQgPSA1MDsgICAvLyBhbHdheXMgc2Nyb2xsIGJ5IDUwIGV4dHJhIHBpeGVsc1xuICAgICAgICAgICAgIH1dKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdoZWFkZXJDdHJsJywgWyckYW5jaG9yU2Nyb2xsJywgJyRsb2NhdGlvbicsICckc2NvcGUnLFxuICAgICAgICAgICAgICAgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCwgJGxvY2F0aW9uLCAkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSAnYW5jaG9yJyArIHg7XG4gICAgICAgICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5oYXNoKCkgIT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgICAgLy8gJGFuY2hvclNjcm9sbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2Nyb2xsIHRvIGl0XG4gICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYW5jaG9yJyArIHgpO1xuICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKSBleHBsaWNpdGx5LFxuICAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgJGxvY2F0aW9uLmhhc2ggaGFzbid0IGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgXSk7XG4gICAgICAgICA8L2ZpbGU+XG4gICAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAgIGJvZHkge1xuICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgICAgICAgICB9XG4gICAgICAgICAgICAuYW5jaG9yIHtcbiAgICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjAwcHggMTBweDtcbiAgICAgICAgICAgfVxuICAgICAgICAgICAgLmZpeGVkLWhlYWRlciB7XG4gICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDtcbiAgICAgICAgICAgfVxuICAgICAgICAgICAgLmZpeGVkLWhlYWRlciA+IGEge1xuICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICBtYXJnaW46IDVweCAxNXB4O1xuICAgICAgICAgICB9XG4gICAgICAgICA8L2ZpbGU+XG4gICAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAgIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZmlyc3QgYW5jaG9yIGZyb20gYSBOb2RlTGlzdFxuICAgICAgLy8gKHVzaW5nIGBBcnJheSNzb21lKClgIGluc3RlYWQgb2YgYGFuZ3VsYXIjZm9yRWFjaCgpYCBzaW5jZSBpdCdzIG1vcmUgcGVyZm9ybWFudFxuICAgICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZWxlbWVudDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFlPZmZzZXQoKSB7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IHNjcm9sbC55T2Zmc2V0O1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQob2Zmc2V0KSkge1xuICAgICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICAgIHZhciBzdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOdW1iZXIob2Zmc2V0KSkge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgICAgZWxlbS5zY3JvbGxJbnRvVmlldygpO1xuXG4gICAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIGBvZmZzZXRgIGlzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHdlIHNob3VsZCBzY3JvbGwgVVAgaW4gb3JkZXIgdG8gYWxpZ24gYGVsZW1gIHByb3Blcmx5LlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgICAvLyB0b3Agb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgICAgLy8gdGhhbiB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCwgdGhlbiBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCB3aWxsIGFsaWduIHRoZSBgZWxlbWAgc29tZVxuICAgICAgICAgICAgLy8gd2F5IGRvd24gdGhlIHBhZ2UuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBvZnRlbiB0aGUgY2FzZSBmb3IgZWxlbWVudHMgbmVhciB0aGUgYm90dG9tIG9mIHRoZSBwYWdlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgICAvLyB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IGFuZCB0aGUgb2Zmc2V0LCB3aGljaCBpcyBlbm91Z2ggdG8gYWxpZ24gdGhlIHRvcCBvZiBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgICAvLyBkZXNpcmVkIHBvc2l0aW9uLlxuICAgICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgICR3aW5kb3cuc2Nyb2xsQnkoMCwgZWxlbVRvcCAtIG9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2Nyb2xsKGhhc2gpIHtcbiAgICAgICAgLy8gQWxsb3cgbnVtZXJpYyBoYXNoZXNcbiAgICAgICAgaGFzaCA9IGlzU3RyaW5nKGhhc2gpID8gaGFzaCA6IGlzTnVtYmVyKGhhc2gpID8gaGFzaC50b1N0cmluZygpIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgICAgdmFyIGVsbTtcblxuICAgICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAgIC8vIGVsZW1lbnQgd2l0aCBnaXZlbiBpZFxuICAgICAgICBlbHNlIGlmIChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICAgICAgZWxzZSBpZiAoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSBzY3JvbGxUbyhlbG0pO1xuXG4gICAgICAgICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09PSAndG9wJywgc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSBzY3JvbGxUbyhudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAgIC8vIChubyB1cmwgY2hhbmdlLCBubyAkbG9jYXRpb24uaGFzaCgpIGNoYW5nZSksIGJyb3dzZXIgbmF0aXZlIGRvZXMgc2Nyb2xsXG4gICAgICBpZiAoYXV0b1Njcm9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge1xuICAgICAgICAgIHJldHVybiAkbG9jYXRpb24uaGFzaCgpO1xuICAgICAgICB9LCBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSBpbml0aWFsIHNjcm9sbCBpZiAkbG9jYXRpb24uaGFzaCBpcyBlbXB0eVxuICAgICAgICAgIGlmIChuZXdWYWwgPT09IG9sZFZhbCAmJiBuZXdWYWwgPT09ICcnKSByZXR1cm47XG5cbiAgICAgICAgICBqcUxpdGVEb2N1bWVudExvYWRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY3JvbGw7XG4gICAgfV07XG4gIH1cblxuICB2YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG4gIHZhciBFTEVNRU5UX05PREUgPSAxO1xuICB2YXIgTkdfQU5JTUFURV9DTEFTU05BTUUgPSAnbmctYW5pbWF0ZSc7XG5cbiAgZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsIGIpIHtcbiAgICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgICBpZiAoIWEpIHJldHVybiBiO1xuICAgIGlmICghYikgcmV0dXJuIGE7XG4gICAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgICBpZiAoaXNBcnJheShiKSkgYiA9IGIuam9pbignICcpO1xuICAgIHJldHVybiBhICsgJyAnICsgYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICAgIGlmIChlbG0ubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICByZXR1cm4gZWxtO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGl0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgaWYgKGlzU3RyaW5nKGNsYXNzZXMpKSB7XG4gICAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eSBuYW1lcyBpblxuICAgIC8vIE9iamVjdC5wcm90b3R5cGVcbiAgICB2YXIgb2JqID0gY3JlYXRlTWFwKCk7XG4gICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbiAoa2xhc3MpIHtcbiAgICAgIC8vIHNvbWV0aW1lcyB0aGUgc3BsaXQgbGVhdmVzIGVtcHR5IHN0cmluZyB2YWx1ZXNcbiAgICAgIC8vIGluY2FzZSBleHRyYSBzcGFjZXMgd2VyZSBhcHBsaWVkIHRvIHRoZSBvcHRpb25zXG4gICAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICAgIG9ialtrbGFzc10gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICAvLyBpZiBhbnkgb3RoZXIgdHlwZSBvZiBvcHRpb25zIHZhbHVlIGJlc2lkZXMgYW4gT2JqZWN0IHZhbHVlIGlzXG4gIC8vIHBhc3NlZCBpbnRvIHRoZSAkYW5pbWF0ZS5tZXRob2QoKSBhbmltYXRpb24gdGhlbiB0aGlzIGhlbHBlciBjb2RlXG4gIC8vIHdpbGwgYmUgcnVuIHdoaWNoIHdpbGwgaWdub3JlIGl0LiBXaGlsZSB0aGlzIHBhdGNoIGlzIG5vdCB0aGVcbiAgLy8gZ3JlYXRlc3Qgc29sdXRpb24gdG8gdGhpcywgYSBsb3Qgb2YgZXhpc3RpbmcgcGx1Z2lucyBkZXBlbmQgb25cbiAgLy8gJGFuaW1hdGUgdG8gZWl0aGVyIGNhbGwgdGhlIGNhbGxiYWNrICg8IDEuMikgb3IgcmV0dXJuIGEgcHJvbWlzZVxuICAvLyB0aGF0IGNhbiBiZSBjaGFuZ2VkLiBUaGlzIGhlbHBlciBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgdGhlIG9wdGlvbnNcbiAgLy8gYXJlIHdpcGVkIGNsZWFuIGluY2FzZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLlxuICBmdW5jdGlvbiBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIHJldHVybiBpc09iamVjdChvcHRpb25zKSA/IG9wdGlvbnMgOiB7fTtcbiAgfVxuXG4gIHZhciAkJENvcmVBbmltYXRlSnNQcm92aWRlciA9IC8qKiBAdGhpcyAqL2Z1bmN0aW9uICQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IG5vb3A7XG4gIH07XG5cbiAgLy8gdGhpcyBpcyBwcmVmaXhlZCB3aXRoIENvcmUgc2luY2UgaXQgY29uZmxpY3RzIHdpdGhcbiAgLy8gdGhlIGFuaW1hdGVRdWV1ZVByb3ZpZGVyIGRlZmluZWQgaW4gbmdBbmltYXRlL2FuaW1hdGVRdWV1ZS5qc1xuICB2YXIgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSAvKiogQHRoaXMgKi9mdW5jdGlvbiAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcigpIHtcbiAgICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gbmV3IE5nTWFwKCk7XG4gICAgdmFyIHBvc3REaWdlc3RFbGVtZW50cyA9IFtdO1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckJEFuaW1hdGVSdW5uZXInLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkJEFuaW1hdGVSdW5uZXIsICRyb290U2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICAgIG9uOiBub29wLFxuICAgICAgICBvZmY6IG5vb3AsXG4gICAgICAgIHBpbjogbm9vcCxcblxuICAgICAgICBwdXNoOiBmdW5jdGlvbiBwdXNoKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBkb21PcGVyYXRpb24pIHtcbiAgICAgICAgICBpZiAoZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBkb21PcGVyYXRpb24oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MgfHwgb3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgICAgICAgYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcblxuICAgICAgICAgIC8vIHNpbmNlIHRoZXJlIGFyZSBubyBhbmltYXRpb25zIHRvIHJ1biB0aGUgcnVubmVyIG5lZWRzIHRvIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgdGhhdCB0aGUgYW5pbWF0aW9uIGNhbGwgaXMgY29tcGxldGUuXG4gICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gdXBkYXRlRGF0YShkYXRhLCBjbGFzc2VzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoY2xhc3Nlcykge1xuICAgICAgICAgIGNsYXNzZXMgPSBpc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoJyAnKSA6IGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogW107XG4gICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBkYXRhW2NsYXNzTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzKCkge1xuICAgICAgICBmb3JFYWNoKHBvc3REaWdlc3RFbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCk7XG4gICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZyA9IHNwbGl0Q2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJykpO1xuICAgICAgICAgICAgdmFyIHRvQWRkID0gJyc7XG4gICAgICAgICAgICB2YXIgdG9SZW1vdmUgPSAnJztcbiAgICAgICAgICAgIGZvckVhY2goZGF0YSwgZnVuY3Rpb24gKHN0YXR1cywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgIHZhciBoYXNDbGFzcyA9ICEhZXhpc3RpbmdbY2xhc3NOYW1lXTtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gaGFzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICB0b0FkZCArPSAodG9BZGQubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0b1JlbW92ZSArPSAodG9SZW1vdmUubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsbSkge1xuICAgICAgICAgICAgICBpZiAodG9BZGQpIHtcbiAgICAgICAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBhZGQsIHJlbW92ZSkge1xuICAgICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCkgfHwge307XG5cbiAgICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgICAgdmFyIGNsYXNzZXNSZW1vdmVkID0gdXBkYXRlRGF0YShkYXRhLCByZW1vdmUsIGZhbHNlKTtcblxuICAgICAgICBpZiAoY2xhc3Nlc0FkZGVkIHx8IGNsYXNzZXNSZW1vdmVkKSB7XG5cbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2V0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mICRhbmltYXRlIHRoYXQgZG9lc24ndCBwZXJmb3JtIGFueSBhbmltYXRpb25zLCBpbnN0ZWFkIGp1c3RcbiAgICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBlbmFibGUgYW5pbWF0aW9ucyB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGhhcyB0byBiZSBsb2FkZWQuXG4gICAqXG4gICAqIFRvIHNlZSB0aGUgZnVuY3Rpb25hbCBpbXBsZW1lbnRhdGlvbiBjaGVjayBvdXQgYHNyYy9uZ0FuaW1hdGUvYW5pbWF0ZS5qc2AuXG4gICAqL1xuICB2YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCAvKiogQHRoaXMgKi9mdW5jdGlvbiAoJHByb3ZpZGUpIHtcbiAgICB2YXIgcHJvdmlkZXIgPSB0aGlzO1xuICAgIHZhciBjbGFzc05hbWVGaWx0ZXIgPSBudWxsO1xuICAgIHZhciBjdXN0b21GaWx0ZXIgPSBudWxsO1xuXG4gICAgdGhpcy4kJHJlZ2lzdGVyZWRBbmltYXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8qKlxuICAgICogQG5nZG9jIG1ldGhvZFxuICAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlclxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZVxuICAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgICogYW5pbWF0ZWQuXG4gICAgKlxuICAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAgKiAgIFRoZSBlbGVtZW50IHRvIGFuaW1hdGUsIHRoZSBgZG9uZUZ1bmN0aW9uYCBhbmQgdGhlIG9wdGlvbnMgZmVkIGludG8gdGhlIGFuaW1hdGlvbi4gRGVwZW5kaW5nXG4gICAgKiAgIG9uIHRoZSB0eXBlIG9mIGFuaW1hdGlvbiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGFuaW1hdGlvbiBmdW5jdGlvbi4gVGhlXG4gICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAgKlxuICAgICogICAtIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzZXMsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgICogICAtIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgICogICAtIGVudGVyLCBsZWF2ZSwgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAgKlxuICAgICogICBNYWtlIHN1cmUgdG8gdHJpZ2dlciB0aGUgYGRvbmVGdW5jdGlvbmAgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGZ1bGx5IGNvbXBsZXRlLlxuICAgICpcbiAgICAqIGBgYGpzXG4gICAgKiAgIHJldHVybiB7XG4gICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAgKiAgICAgZXZlbnRGbiA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUsIG9wdGlvbnMpIHtcbiAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBlbmRGdW5jdGlvbih3YXNDYW5jZWxsZWQpIHtcbiAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgKiAgICAgICB9XG4gICAgKiAgICAgfVxuICAgICogICB9XG4gICAgKiBgYGBcbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uICh0aGlzIGlzIHdoYXQgdGhlIGNsYXNzLWJhc2VkIENTUyB2YWx1ZSB3aWxsIGJlIGNvbXBhcmVkIHRvKS5cbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5cbiAgICAqL1xuICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAobmFtZSwgZmFjdG9yeSkge1xuICAgICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgIT09ICcuJykge1xuICAgICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsICdFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCBcXCcuXFwnIGdvdCBcXCd7MH1cXCcuJywgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXkgPSBuYW1lICsgJy1hbmltYXRpb24nO1xuICAgICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgICAkcHJvdmlkZS5mYWN0b3J5KGtleSwgZmFjdG9yeSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyI2N1c3RvbUZpbHRlclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2V0cyBhbmQvb3IgcmV0dXJucyB0aGUgY3VzdG9tIGZpbHRlciBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgdG8gXCJmaWx0ZXJcIiBhbmltYXRpb25zLCBpLmUuXG4gICAgICogZGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiBpcyBhbGxvd2VkIG9yIG5vdC4gV2hlbiBubyBmaWx0ZXIgaXMgc3BlY2lmaWVkICh0aGUgZGVmYXVsdCksIG5vXG4gICAgICogYW5pbWF0aW9uIHdpbGwgYmUgYmxvY2tlZC4gU2V0dGluZyB0aGUgYGN1c3RvbUZpbHRlcmAgdmFsdWUgd2lsbCBvbmx5IGFsbG93IGFuaW1hdGlvbnMgZm9yXG4gICAgICogd2hpY2ggdGhlIGZpbHRlciBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBpcyB0cnV0aHkuXG4gICAgICpcbiAgICAgKiBUaGlzIGFsbG93cyB0byBlYXNpbHkgY3JlYXRlIGFyYml0cmFyaWx5IGNvbXBsZXggcnVsZXMgZm9yIGZpbHRlcmluZyBhbmltYXRpb25zLCBzdWNoIGFzXG4gICAgICogYWxsb3dpbmcgc3BlY2lmaWMgZXZlbnRzIG9ubHksIG9yIGVuYWJsaW5nIGFuaW1hdGlvbnMgb24gc3BlY2lmaWMgc3VidHJlZXMgb2YgdGhlIERPTSwgZXRjLlxuICAgICAqIEZpbHRlcmluZyBhbmltYXRpb25zIGNhbiBhbHNvIGJvb3N0IHBlcmZvcm1hbmNlIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzLCBhcyB3ZWxsIGFzXG4gICAgICogYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICAgKiAgICoqQmVzdCBQcmFjdGljZToqKlxuICAgICAqICAgS2VlcCB0aGUgZmlsdGVyaW5nIGZ1bmN0aW9uIGFzIGxlYW4gYXMgcG9zc2libGUsIGJlY2F1c2UgaXQgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggRE9NXG4gICAgICogICBhY3Rpb24gKGUuZy4gaW5zZXJ0aW9uLCByZW1vdmFsLCBjbGFzcyBjaGFuZ2UpIHBlcmZvcm1lZCBieSBcImFuaW1hdGlvbi1hd2FyZVwiIGRpcmVjdGl2ZXMuXG4gICAgICogICBTZWUge0BsaW5rIGd1aWRlL2FuaW1hdGlvbnMjd2hpY2gtZGlyZWN0aXZlcy1zdXBwb3J0LWFuaW1hdGlvbnMtIGhlcmV9IGZvciBhIGxpc3Qgb2YgYnVpbHQtaW5cbiAgICAgKiAgIGRpcmVjdGl2ZXMgdGhhdCBzdXBwb3J0IGFuaW1hdGlvbnMuXG4gICAgICogICBQZXJmb3JtaW5nIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgb3IgdGltZS1jb25zdW1pbmcgb3BlcmF0aW9ucyBvbiBlYWNoIGNhbGwgb2YgdGhlXG4gICAgICogICBmaWx0ZXJpbmcgZnVuY3Rpb24gY2FuIG1ha2UgeW91ciBhbmltYXRpb25zIHNsdWdnaXNoLlxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHByZXNlbnQsIGBjdXN0b21GaWx0ZXJgIHdpbGwgYmUgY2hlY2tlZCBiZWZvcmVcbiAgICAgKiB7QGxpbmsgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXIgY2xhc3NOYW1lRmlsdGVyfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBmaWx0ZXJGbiAtIFRoZSBmaWx0ZXIgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGZpbHRlciBhbGwgYW5pbWF0aW9ucy5cbiAgICAgKiAgIElmIGEgZmFsc3kgdmFsdWUgaXMgcmV0dXJuZWQsIG5vIGFuaW1hdGlvbiB3aWxsIGJlIHBlcmZvcm1lZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkXG4gICAgICogICB3aXRoIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgICAqICAgLSAqKm5vZGUqKiBge0RPTUVsZW1lbnR9YCAtIFRoZSBET00gZWxlbWVudCB0byBiZSBhbmltYXRlZC5cbiAgICAgKiAgIC0gKipldmVudCoqIGB7U3RyaW5nfWAgLSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uIGV2ZW50IChlLmcuIGBlbnRlcmAsIGBsZWF2ZWAsIGBhZGRDbGFzc2BcbiAgICAgKiAgICAgZXRjKS5cbiAgICAgKiAgIC0gKipvcHRpb25zKiogYHtPYmplY3R9YCAtIEEgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB1c2VkIGZvciB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmVudCBmaWx0ZXIgZnVuY3Rpb24gb3IgYG51bGxgIGlmIHRoZXJlIGlzIG5vbmUgc2V0LlxuICAgICAqL1xuICAgIHRoaXMuY3VzdG9tRmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlckZuKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjdXN0b21GaWx0ZXIgPSBpc0Z1bmN0aW9uKGZpbHRlckZuKSA/IGZpbHRlckZuIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1c3RvbUZpbHRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBDU1MgY2xhc3MgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgY2hlY2tlZCB3aGVuIHBlcmZvcm1pbmdcbiAgICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICAgKiB0aGVyZWZvcmUgZW5hYmxlICRhbmltYXRlIHRvIGF0dGVtcHQgdG8gcGVyZm9ybSBhbiBhbmltYXRpb24gb24gYW55IGVsZW1lbnQgdGhhdCBpcyB0cmlnZ2VyZWQuXG4gICAgICogV2hlbiBzZXR0aW5nIHRoZSBgY2xhc3NOYW1lRmlsdGVyYCB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzXG4gICAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAgICogZm9yIGxvdy1wb3dlcmVkIGRldmljZXMgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbnMgY29udGFpbmluZyBhIGxvdCBvZiBzdHJ1Y3R1cmFsIG9wZXJhdGlvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgcHJlc2VudCwgYGNsYXNzTmFtZUZpbHRlcmAgd2lsbCBiZSBjaGVja2VkIGFmdGVyXG4gICAgICoge0BsaW5rICRhbmltYXRlUHJvdmlkZXIjY3VzdG9tRmlsdGVyIGN1c3RvbUZpbHRlcn0uIElmIGBjdXN0b21GaWx0ZXJgIGlzIHByZXNlbnQgYW5kIHJldHVybnNcbiAgICAgKiBmYWxzZSwgYGNsYXNzTmFtZUZpbHRlcmAgd2lsbCBub3QgYmUgY2hlY2tlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVnRXhwPX0gZXhwcmVzc2lvbiBUaGUgY2xhc3NOYW1lIGV4cHJlc3Npb24gd2hpY2ggd2lsbCBiZSBjaGVja2VkIGFnYWluc3QgYWxsIGFuaW1hdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtSZWdFeHB9IFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgZXhwcmVzc2lvbiB2YWx1ZS4gSWYgbnVsbCB0aGVuIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24gdmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLmNsYXNzTmFtZUZpbHRlciA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjbGFzc05hbWVGaWx0ZXIgPSBleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwID8gZXhwcmVzc2lvbiA6IG51bGw7XG4gICAgICAgIGlmIChjbGFzc05hbWVGaWx0ZXIpIHtcbiAgICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoJ1soXFxcXHN8XFxcXC8pXScgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArICdbKFxcXFxzfFxcXFwvKV0nKTtcbiAgICAgICAgICBpZiAocmVzZXJ2ZWRSZWdleC50ZXN0KGNsYXNzTmFtZUZpbHRlci50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lRmlsdGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywgJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzTmFtZUZpbHRlcjtcbiAgICB9O1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uICgkJGFuaW1hdGVRdWV1ZSkge1xuICAgICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgICAvLyBpZiBmb3Igc29tZSByZWFzb24gdGhlIHByZXZpb3VzIGVsZW1lbnQgd2FzIHJlbW92ZWRcbiAgICAgICAgLy8gZnJvbSB0aGUgZG9tIHNvbWV0aW1lIGJlZm9yZSB0aGlzIGNvZGUgcnVucyB0aGVuIGxldCdzXG4gICAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgICAgaWYgKGFmdGVyRWxlbWVudCkge1xuICAgICAgICAgIHZhciBhZnRlck5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoYWZ0ZXJFbGVtZW50KTtcbiAgICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGFmdGVyRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQuYWZ0ZXIoZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50RWxlbWVudC5wcmVwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVGhlICRhbmltYXRlIHNlcnZpY2UgZXhwb3NlcyBhIHNlcmllcyBvZiBET00gdXRpbGl0eSBtZXRob2RzIHRoYXQgcHJvdmlkZSBzdXBwb3J0XG4gICAgICAgKiBmb3IgYW5pbWF0aW9uIGhvb2tzLiBUaGUgZGVmYXVsdCBiZWhhdmlvciBpcyB0aGUgYXBwbGljYXRpb24gb2YgRE9NIG9wZXJhdGlvbnMsIGhvd2V2ZXIsXG4gICAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICAgKiB0byBlbnN1cmUgdGhhdCBhbmltYXRpb24gcnVucyB3aXRoIHRoZSB0cmlnZ2VyZWQgRE9NIG9wZXJhdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbnkgYW5pbWF0aW9ucy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXNuJ3RcbiAgICAgICAqIGluY2x1ZGVkIGFuZCBvbmx5IHdoZW4gaXQgaXMgYWN0aXZlIHRoZW4gdGhlIGFuaW1hdGlvbiBob29rcyB0aGF0IGAkYW5pbWF0ZWAgdHJpZ2dlcnMgd2lsbCBiZVxuICAgICAgICogZnVuY3Rpb25hbC4gT25jZSBhY3RpdmUgdGhlbiBhbGwgc3RydWN0dXJhbCBgbmctYCBkaXJlY3RpdmVzIHdpbGwgdHJpZ2dlciBhbmltYXRpb25zIGFzIHRoZXkgcGVyZm9ybVxuICAgICAgICogdGhlaXIgRE9NLXJlbGF0ZWQgb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKS4gT3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCxcbiAgICAgICAqIGBuZ1Nob3dgLCBgbmdIaWRlYCBhbmQgYG5nTWVzc2FnZXNgIGFsc28gcHJvdmlkZSBzdXBwb3J0IGZvciBhbmltYXRpb25zLlxuICAgICAgICpcbiAgICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhlYCRhbmltYXRlYCBzZXJ2aWNlIGlzIGFsd2F5cyB1c2VkIHdoZW4gZXhlY3V0aW5nIERPTS1yZWxhdGVkIHByb2NlZHVyZXMgd2l0aGluIGRpcmVjdGl2ZXMuXG4gICAgICAgKlxuICAgICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGVcbiAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZSBwYWdlfS5cbiAgICAgICAqL1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gd2UgZG9uJ3QgY2FsbCBpdCBkaXJlY3RseSBzaW5jZSBub24tZXhpc3RhbnQgYXJndW1lbnRzIG1heVxuICAgICAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBudWxsIHdpdGhpbiB0aGUgc3ViIGVuYWJsZWQgZnVuY3Rpb25cblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNvblxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyB1cCBhbiBldmVudCBsaXN0ZW5lciB0byBmaXJlIHdoZW5ldmVyIHRoZSBhbmltYXRpb24gZXZlbnQgKGVudGVyLCBsZWF2ZSwgbW92ZSwgZXRjLi4uKVxuICAgICAgICAgKiAgICBoYXMgZmlyZWQgb24gdGhlIGdpdmVuIGVsZW1lbnQgb3IgYW1vbmcgYW55IG9mIGl0cyBjaGlsZHJlbi4gT25jZSB0aGUgbGlzdGVuZXIgaXMgZmlyZWQsIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgICAgKiAgICBpcyBmaXJlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1zOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgKiAkYW5pbWF0ZS5vbignZW50ZXInLCBjb250YWluZXIsXG4gICAgICAgICAqICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVsZW1lbnQsIHBoYXNlKSB7XG4gICAgICAgICAqICAgICAgLy8gY29vbCB3ZSBkZXRlY3RlZCBhbiBlbnRlciBhbmltYXRpb24gd2l0aGluIHRoZSBjb250YWluZXJcbiAgICAgICAgICogICAgfVxuICAgICAgICAgKiApO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IHRoZSBhbmltYXRpb24gZXZlbnQgdGhhdCB3aWxsIGJlIGNhcHR1cmVkIChlLmcuIGVudGVyLCBsZWF2ZSwgbW92ZSwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBldGMuLi4pXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGF0IHdpbGwgY2FwdHVyZSBlYWNoIG9mIHRoZSBhbmltYXRpb24gZXZlbnRzIHRoYXQgYXJlIGZpcmVkIG9uIGl0c2VsZlxuICAgICAgICAgKiAgICAgYXMgd2VsbCBhcyBhbW9uZyBpdHMgY2hpbGRyZW5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBsaXN0ZW5lciBpcyB0cmlnZ2VyZWRcbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBhcmU6XG4gICAgICAgICAqICogYGVsZW1lbnRgIC0gVGhlIGNhcHR1cmVkIERPTSBlbGVtZW50IHRoYXQgdGhlIGFuaW1hdGlvbiB3YXMgZmlyZWQgb24uXG4gICAgICAgICAqICogYHBoYXNlYCAtIFRoZSBwaGFzZSBvZiB0aGUgYW5pbWF0aW9uLiBUaGUgdHdvIHBvc3NpYmxlIHBoYXNlcyBhcmUgKipzdGFydCoqICh3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRzKSBhbmQgKipjbG9zZSoqICh3aGVuIGl0IGVuZHMpLlxuICAgICAgICAgKi9cbiAgICAgICAgb246ICQkYW5pbWF0ZVF1ZXVlLm9uLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI29mZlxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVyZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIgYmFzZWQgb24gdGhlIGV2ZW50IHdoaWNoIGhhcyBiZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgZWxlbWVudC4gVGhpcyBtZXRob2RcbiAgICAgICAgICogY2FuIGJlIHVzZWQgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHM6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgXG4gICAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gcmVtb3ZlIGxpc3RlbmVycyBmb3IgYWxsIGFuaW1hdGlvbiBldmVudHMgZnJvbSB0aGUgY29udGFpbmVyIGVsZW1lbnRcbiAgICAgICAgICogJGFuaW1hdGUub2ZmKGNvbnRhaW5lcik7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgIG9uIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gcHJvdmlkZWQgYnkgYGNhbGxiYWNrYCB0aGF0IGlzIHNldFxuICAgICAgICAgKiAvLyB0byBsaXN0ZW4gZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGBjb250YWluZXJgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInLCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGV2ZW50fGNvbnRhaW5lciB0aGUgYW5pbWF0aW9uIGV2ZW50IChlLmcuIGVudGVyLCBsZWF2ZSwgbW92ZSxcbiAgICAgICAgICogYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBldGMuLi4pLCBvciB0aGUgY29udGFpbmVyIGVsZW1lbnQuIElmIGl0IGlzIHRoZSBlbGVtZW50LCBhbGwgb3RoZXJcbiAgICAgICAgICogYXJndW1lbnRzIGFyZSBpZ25vcmVkLlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoZSBldmVudCBsaXN0ZW5lciB3YXMgcGxhY2VkIG9uXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3YXMgcmVnaXN0ZXJlZCBhcyB0aGUgbGlzdGVuZXJcbiAgICAgICAgICovXG4gICAgICAgIG9mZjogJCRhbmltYXRlUXVldWUub2ZmLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI3BpblxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICAgKiAgICBvdXRzaWRlIG9mIHRoZSBET00gc3RydWN0dXJlIG9mIHRoZSBBbmd1bGFyIGFwcGxpY2F0aW9uLiBCeSBkb2luZyBzbywgYW55IGFuaW1hdGlvbiB0cmlnZ2VyZWQgdmlhIGAkYW5pbWF0ZWAgY2FuIGJlIGlzc3VlZCBvbiB0aGVcbiAgICAgICAgICogICAgZWxlbWVudCBkZXNwaXRlIGJlaW5nIG91dHNpZGUgdGhlIHJlYWxtIG9mIHRoZSBhcHBsaWNhdGlvbiBvciB3aXRoaW4gYW5vdGhlciBhcHBsaWNhdGlvbi4gU2F5IGZvciBleGFtcGxlIGlmIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAgICogICAgYXMgYSBkaXJlY3QgY2hpbGQgb2YgYGRvY3VtZW50LmJvZHlgLCB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHBpbm5pbmcgdGhlIGVsZW1lbnQgdmlhIGAkYW5pbWF0ZS5waW4oZWxlbWVudClgLiBLZWVwIGluIG1pbmRcbiAgICAgICAgICogICAgdGhhdCBjYWxsaW5nIGAkYW5pbWF0ZS5waW4oZWxlbWVudCwgcGFyZW50RWxlbWVudClgIHdpbGwgbm90IGFjdHVhbGx5IGluc2VydCBpbnRvIHRoZSBET00gYW55d2hlcmU7IGl0IHdpbGwganVzdCBjcmVhdGUgdGhlIGFzc29jaWF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgICBOb3RlIHRoYXQgdGhpcyBmZWF0dXJlIGlzIG9ubHkgYWN0aXZlIHdoZW4gdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBpcyB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudEVsZW1lbnQgdGhlIGhvc3QgcGFyZW50IGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0ZXJuYWwgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW5hYmxlZFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgICAqIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgaW4gZm91ciB3YXlzOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCgpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbGwgYW5pbWF0aW9uc1xuICAgICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGFuIGVsZW1lbnRcbiAgICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCBmb3IgY2hlY2tpbmcvc2V0dGluZyB0aGUgZW5hYmxlZCBzdGF0ZVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHdoZXRoZXIgb3Igbm90IHRoZSBhbmltYXRpb25zIHdpbGwgYmUgZW5hYmxlZCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZFxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbmNlbHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtQcm9taXNlfSBhbmltYXRpb25Qcm9taXNlIFRoZSBhbmltYXRpb24gcHJvbWlzZSB0aGF0IGlzIHJldHVybmVkIHdoZW4gYW4gYW5pbWF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbChydW5uZXIpIHtcbiAgICAgICAgICBpZiAocnVubmVyLmVuZCkge1xuICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbnRlclxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvclxuICAgICAgICAgKiAgIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnQgYW5kIHRoZW4gdHJpZ2dlcnMgYW4gYW5pbWF0aW9uLlxuICAgICAgICAgKiAgIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb25cbiAgICAgICAgICogICBoYXMgY29tcGxldGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET01cbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCBhZnRlciB3aGljaCB0aGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICAgKi9cbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBhZnRlci5wYXJlbnQoKTtcbiAgICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2VudGVyJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbnNlcnRzIChtb3ZlcykgdGhlIGVsZW1lbnQgaW50byBpdHMgbmV3IHBvc2l0aW9uIGluIHRoZSBET00gZWl0aGVyIGFmdGVyXG4gICAgICAgICAqICAgdGhlIGBhZnRlcmAgZWxlbWVudCAoaWYgcHJvdmlkZWQpIG9yIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnRcbiAgICAgICAgICogICBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICAgICAgICogICBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBpbnRvIHRoZSBuZXcgRE9NIHBvc2l0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhc1xuICAgICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgICBhZnRlciA9IGFmdGVyICYmIGpxTGl0ZShhZnRlcik7XG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbW92ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGFuIGFuaW1hdGlvbiBhbmQgdGhlbiByZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0XG4gICAgICAgICAqIGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgICAqL1xuICAgICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdsZWF2ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzc1xuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYWRkQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBhZGRpdGlvbiBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIGFkZENsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAgICogICBhbmltYXRpb24gaWYgZWxlbWVudCBhbHJlYWR5IGNvbnRhaW5zIHRoZSBDU1MgY2xhc3Mgb3IgaWYgdGhlIGNsYXNzIGlzIHJlbW92ZWQgYXQgYSBsYXRlciBzdGVwLlxuICAgICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAgICogICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgYWRkZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRjbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNyZW1vdmVDbGFzc1xuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYSByZW1vdmVDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIHJlbW92YWwgb2YgdGhlIHByb3ZpZGVkIENTUyBjbGFzcyhlcykuIFVwb25cbiAgICAgICAgICogICBleGVjdXRpb24sIHRoZSByZW1vdmVDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyBhZGRlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgICAqICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMucmVtb3ZlQ2xhc3MsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGJvdGggdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIGEgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudCBhbmQgKGR1cmluZyB0aGUgcHJvY2VzcylcbiAgICAgICAgICogICAgdHJpZ2dlcnMgYW4gYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBjbGFzcyBhZGRpdGlvbi9yZW1vdmFsLiBNdWNoIGxpa2UgYCRhbmltYXRlLmFkZENsYXNzYCBhbmRcbiAgICAgICAgICogICAgYCRhbmltYXRlLnJlbW92ZUNsYXNzYCwgYHNldENsYXNzYCB3aWxsIG9ubHkgZXZhbHVhdGUgdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQvcmVtb3ZlZCBvbmNlIGEgZGlnZXN0IGhhc1xuICAgICAgICAgKiAgICBwYXNzZWQuIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICAgKiAgICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgICAqICAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIHNldENsYXNzOiBmdW5jdGlvbiBzZXRDbGFzcyhlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBhZGQpO1xuICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgcmVtb3ZlKTtcbiAgICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnc2V0Q2xhc3MnLCBvcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhbmltYXRlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtcyBhbiBpbmxpbmUgYW5pbWF0aW9uIG9uIHRoZSBlbGVtZW50IHdoaWNoIGFwcGxpZXMgdGhlIHByb3ZpZGVkIHRvIGFuZCBmcm9tIENTUyBzdHlsZXMgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgICAqIElmIGFueSBkZXRlY3RlZCBDU1MgdHJhbnNpdGlvbiwga2V5ZnJhbWUgb3IgSmF2YVNjcmlwdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgdmFsdWUsIHRoZW4gdGhlIGFuaW1hdGlvbiB3aWxsIHRha2VcbiAgICAgICAgICogb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lLCB0aGVuIHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kXG4gICAgICAgICAqIGB0b2Agc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBhbG9uZ3NpZGUgdGhlIGdpdmVuIHRyYW5zaXRpb24uIElmIHRoZSBDU1Mgc3R5bGUgcHJvdmlkZWQgaW4gYGZyb21gIGRvZXMgbm90IGhhdmUgYSBjb3JyZXNwb25kaW5nXG4gICAgICAgICAqIHN0eWxlIGluIGB0b2AsIHRoZSBzdHlsZSBpbiBgZnJvbWAgaXMgYXBwbGllZCBpbW1lZGlhdGVseSwgYW5kIG5vIGFuaW1hdGlvbiBpcyBydW4uXG4gICAgICAgICAqIElmIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW1ldGVycyBpbnRvIHRoZSBgYW5pbWF0ZWBcbiAgICAgICAgICogbWV0aG9kIChvciBhcyBwYXJ0IG9mIHRoZSBgb3B0aW9uc2AgcGFyYW1ldGVyKTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICogbmdNb2R1bGUuYW5pbWF0aW9uKCcubXktaW5saW5lLWFuaW1hdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGRvbmUsIG9wdGlvbnMpIHtcbiAgICAgICAgICogICAgICAgLy9hbmltYXRpb25cbiAgICAgICAgICogICAgICAgZG9uZSgpO1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKiAgIH1cbiAgICAgICAgICogfSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIHRoZSBmcm9tIChzdGFydGluZykgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0byB0aGUgdG8gKGRlc3RpbmF0aW9uKSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGFuZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBjbGFzc05hbWUgYW4gb3B0aW9uYWwgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi4gSWZcbiAgICAgICAgICogICAgdGhpcyB2YWx1ZSBpcyBsZWZ0IGFzIGVtcHR5IHRoZW4gYSBDU1MgY2xhc3Mgb2YgYG5nLWlubGluZS1hbmltYXRlYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgICAqICAgIChOb3RlIHRoYXQgaWYgbm8gYW5pbWF0aW9uIGlzIGRldGVjdGVkIHRoZW4gdGhpcyB2YWx1ZSB3aWxsIG5vdCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LilcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKGVsZW1lbnQsIGZyb20sIHRvLCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSA/IGV4dGVuZChvcHRpb25zLmZyb20sIGZyb20pIDogZnJvbTtcbiAgICAgICAgICBvcHRpb25zLnRvID0gb3B0aW9ucy50byA/IGV4dGVuZChvcHRpb25zLnRvLCB0bykgOiB0bztcblxuICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAnbmctaW5saW5lLWFuaW1hdGUnO1xuICAgICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy50ZW1wQ2xhc3NlcywgY2xhc3NOYW1lKTtcbiAgICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYW5pbWF0ZScsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9XTtcblxuICB2YXIgJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIgPSAvKiogQHRoaXMgKi9mdW5jdGlvbiAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlcigpIHtcbiAgICB0aGlzLiRnZXQgPSBbJyQkckFGJywgZnVuY3Rpb24gKCQkckFGKSB7XG4gICAgICB2YXIgd2FpdFF1ZXVlID0gW107XG5cbiAgICAgIGZ1bmN0aW9uIHdhaXRGb3JUaWNrKGZuKSB7XG4gICAgICAgIHdhaXRRdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgaWYgKHdhaXRRdWV1ZS5sZW5ndGggPiAxKSByZXR1cm47XG4gICAgICAgICQkckFGKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdhaXRRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgd2FpdFF1ZXVlW2ldKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhaXRRdWV1ZSA9IFtdO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICB3YWl0Rm9yVGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGFzc2VkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YWl0Rm9yVGljayhjYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XTtcbiAgfTtcblxuICB2YXIgJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyID0gLyoqIEB0aGlzICovZnVuY3Rpb24gJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHEnLCAnJHNuaWZmZXInLCAnJCRhbmltYXRlQXN5bmNSdW4nLCAnJCRpc0RvY3VtZW50SGlkZGVuJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRxLCAkc25pZmZlciwgJCRhbmltYXRlQXN5bmNSdW4sICQkaXNEb2N1bWVudEhpZGRlbiwgJHRpbWVvdXQpIHtcblxuICAgICAgdmFyIElOSVRJQUxfU1RBVEUgPSAwO1xuICAgICAgdmFyIERPTkVfUEVORElOR19TVEFURSA9IDE7XG4gICAgICB2YXIgRE9ORV9DT01QTEVURV9TVEFURSA9IDI7XG5cbiAgICAgIEFuaW1hdGVSdW5uZXIuY2hhaW4gPSBmdW5jdGlvbiAoY2hhaW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gY2hhaW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFpbltpbmRleF0oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQW5pbWF0ZVJ1bm5lci5hbGwgPSBmdW5jdGlvbiAocnVubmVycywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHRydWU7XG4gICAgICAgIGZvckVhY2gocnVubmVycywgZnVuY3Rpb24gKHJ1bm5lcikge1xuICAgICAgICAgIHJ1bm5lci5kb25lKG9uUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBvblByb2dyZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgICAgc3RhdHVzID0gc3RhdHVzICYmIHJlc3BvbnNlO1xuICAgICAgICAgIGlmICgrK2NvdW50ID09PSBydW5uZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIEFuaW1hdGVSdW5uZXIoaG9zdCkge1xuICAgICAgICB0aGlzLnNldEhvc3QoaG9zdCk7XG5cbiAgICAgICAgdmFyIHJhZlRpY2sgPSAkJGFuaW1hdGVBc3luY1J1bigpO1xuICAgICAgICB2YXIgdGltZW91dFRpY2sgPSBmdW5jdGlvbiB0aW1lb3V0VGljayhmbikge1xuICAgICAgICAgICR0aW1lb3V0KGZuLCAwLCBmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZG9uZUNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLl90aWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgaWYgKCQkaXNEb2N1bWVudEhpZGRlbigpKSB7XG4gICAgICAgICAgICB0aW1lb3V0VGljayhmbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhZlRpY2soZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAwO1xuICAgICAgfVxuXG4gICAgICBBbmltYXRlUnVubmVyLnByb3RvdHlwZSA9IHtcbiAgICAgICAgc2V0SG9zdDogZnVuY3Rpb24gc2V0SG9zdChob3N0KSB7XG4gICAgICAgICAgdGhpcy5ob3N0ID0gaG9zdCB8fCB7fTtcbiAgICAgICAgfSxcblxuICAgICAgICBkb25lOiBmdW5jdGlvbiBkb25lKGZuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBET05FX0NPTVBMRVRFX1NUQVRFKSB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLnB1c2goZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwcm9ncmVzczogbm9vcCxcblxuICAgICAgICBnZXRQcm9taXNlOiBmdW5jdGlvbiBnZXRQcm9taXNlKCkge1xuICAgICAgICAgIGlmICghdGhpcy5wcm9taXNlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnByb21pc2UgPSAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgIHNlbGYuZG9uZShmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKCkudGhlbihyZXNvbHZlSGFuZGxlciwgcmVqZWN0SGFuZGxlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKGhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2NhdGNoJ10oaGFuZGxlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2ZpbmFsbHknOiBmdW5jdGlvbiBfZmluYWxseShoYW5kbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydmaW5hbGx5J10oaGFuZGxlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmhvc3QucGF1c2UpIHtcbiAgICAgICAgICAgIHRoaXMuaG9zdC5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZXN1bWU6IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5ob3N0LnJlc3VtZSkge1xuICAgICAgICAgICAgdGhpcy5ob3N0LnJlc3VtZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgICBpZiAodGhpcy5ob3N0LmVuZCkge1xuICAgICAgICAgICAgdGhpcy5ob3N0LmVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICAgIGlmICh0aGlzLmhvc3QuY2FuY2VsKSB7XG4gICAgICAgICAgICB0aGlzLmhvc3QuY2FuY2VsKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3Jlc29sdmUoZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZShyZXNwb25zZSkge1xuICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICBpZiAoc2VsZi5fc3RhdGUgPT09IElOSVRJQUxfU1RBVEUpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gRE9ORV9QRU5ESU5HX1NUQVRFO1xuICAgICAgICAgICAgc2VsZi5fdGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNlbGYuX3Jlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9yZXNvbHZlOiBmdW5jdGlvbiBfcmVzb2x2ZShyZXNwb25zZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICAgICAgZm9yRWFjaCh0aGlzLl9kb25lQ2FsbGJhY2tzLCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgZm4ocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IERPTkVfQ09NUExFVEVfU1RBVEU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQW5pbWF0ZVJ1bm5lcjtcbiAgICB9XTtcbiAgfTtcblxuICAvKiBleHBvcnRlZCAkQ29yZUFuaW1hdGVDc3NQcm92aWRlciAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5pbWF0ZUNzc1xuICAgKiBAa2luZCBvYmplY3RcbiAgICogQHRoaXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgaXMgdGhlIGNvcmUgdmVyc2lvbiBvZiBgJGFuaW1hdGVDc3NgLiBCeSBkZWZhdWx0LCBvbmx5IHdoZW4gdGhlIGBuZ0FuaW1hdGVgIGlzIGluY2x1ZGVkLFxuICAgKiB0aGVuIHRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2Ugd2lsbCBhY3R1YWxseSBwZXJmb3JtIGFuaW1hdGlvbnMuXG4gICAqXG4gICAqIENsaWNrIGhlcmUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZUNzcyB0byByZWFkIHRoZSBkb2N1bWVudGF0aW9uIGZvciAkYW5pbWF0ZUNzc30uXG4gICAqL1xuICB2YXIgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIgPSBmdW5jdGlvbiAkQ29yZUFuaW1hdGVDc3NQcm92aWRlcigpIHtcbiAgICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyRxJywgJyQkQW5pbWF0ZVJ1bm5lcicsIGZ1bmN0aW9uICgkJHJBRiwgJHEsICQkQW5pbWF0ZVJ1bm5lcikge1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAgIC8vIGFsbCBvZiB0aGUgYW5pbWF0aW9uIGZ1bmN0aW9ucyBzaG91bGQgY3JlYXRlXG4gICAgICAgIC8vIGEgY29weSBvZiB0aGUgb3B0aW9ucyBkYXRhLCBob3dldmVyLCBpZiBhXG4gICAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cbiAgICAgICAgLy8gd2Ugc2hvdWxkIHN0aWNrIHRvIHVzaW5nIHRoYXRcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICAgICAgICBvcHRpb25zID0gY29weShvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IGluIGFwcGx5aW5nIHRoZSBzdHlsZXMgc2luY2VcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gYW5pbWF0aW9uIHRoYXQgZ29lcyBvbiBhdCBhbGwgaW5cbiAgICAgICAgLy8gdGhpcyB2ZXJzaW9uIG9mICRhbmltYXRlQ3NzLlxuICAgICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy50byA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsb3NlZCxcbiAgICAgICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGFydDogcnVuLFxuICAgICAgICAgIGVuZDogcnVuXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gcnVuKCkge1xuICAgICAgICAgICQkckFGKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ29udGVudHMoKTtcbiAgICAgICAgICAgIGlmICghY2xvc2VkKSB7XG4gICAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Db250ZW50cygpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhvcHRpb25zLmFkZENsYXNzKTtcbiAgICAgICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgICBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV07XG4gIH07XG5cbiAgLyogZ2xvYmFsIHN0cmlwSGFzaDogdHJ1ZSAqL1xuXG4gIC8qKlxuICAgKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAgICpcbiAgICogQG5hbWUgJGJyb3dzZXJcbiAgICogQHJlcXVpcmVzICRsb2dcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6XG4gICAqXG4gICAqIC0gaGlkZSBhbGwgdGhlIGdsb2JhbCBzdGF0ZSBpbiB0aGUgYnJvd3NlciBjYXVzZWQgYnkgdGhlIHdpbmRvdyBvYmplY3RcbiAgICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzXG4gICAqXG4gICAqIEZvciB0ZXN0cyB3ZSBwcm92aWRlIHtAbGluayBuZ01vY2suJGJyb3dzZXIgbW9jayBpbXBsZW1lbnRhdGlvbn0gb2YgdGhlIGAkYnJvd3NlcmBcbiAgICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aFxuICAgKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gICAqL1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb2N1bWVudCBqUXVlcnkgd3JhcHBlZCBkb2N1bWVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9ICRsb2cgd2luZG93LmNvbnNvbGUgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICAgKi9cbiAgZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSxcbiAgICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuICAgICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LFxuICAgICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTtcblxuICAgIHNlbGYuaXNNb2NrID0gZmFsc2U7XG5cbiAgICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwO1xuICAgIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTtcblxuICAgIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXG4gICAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7XG4gICAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYFxuICAgICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07XG4gICAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgICAgIHdoaWxlIChvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuICAgICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyAnJyA6IHVybC5zdWJzdHIoaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogTm90ZTogdGhpcyBtZXRob2QgaXMgdXNlZCBvbmx5IGJ5IHNjZW5hcmlvIHJ1bm5lclxuICAgICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgICAqL1xuICAgIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gVVJMIEFQSVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB2YXIgY2FjaGVkU3RhdGUsXG4gICAgICAgIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICAgIGxhc3RCcm93c2VyVXJsID0gbG9jYXRpb24uaHJlZixcbiAgICAgICAgYmFzZUVsZW1lbnQgPSBkb2N1bWVudC5maW5kKCdiYXNlJyksXG4gICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IG51bGwsXG4gICAgICAgIGdldEN1cnJlbnRTdGF0ZSA9ICEkc25pZmZlci5oaXN0b3J5ID8gbm9vcCA6IGZ1bmN0aW9uIGdldEN1cnJlbnRTdGF0ZSgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBoaXN0b3J5LnN0YXRlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBNU0lFIGNhbiByZXBvcnRlZGx5IHRocm93IHdoZW4gdGhlcmUgaXMgbm8gc3RhdGUgKFVOQ09ORklSTUVEKS5cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY2FjaGVTdGF0ZSgpO1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBHRVRURVI6XG4gICAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuXG4gICAgICpcbiAgICAgKiBTRVRURVI6XG4gICAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS5cbiAgICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlXG4gICAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nXG4gICAgICpcbiAgICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQ/XG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBvYmplY3QgdG8gdXNlIHdpdGggcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZVxuICAgICAqL1xuICAgIHNlbGYudXJsID0gZnVuY3Rpb24gKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIC8vIEluIG1vZGVybiBicm93c2VycyBgaGlzdG9yeS5zdGF0ZWAgaXMgYG51bGxgIGJ5IGRlZmF1bHQ7IHRyZWF0aW5nIGl0IHNlcGFyYXRlbHlcbiAgICAgIC8vIGZyb20gYHVuZGVmaW5lZGAgd291bGQgY2F1c2UgYCRicm93c2VyLnVybCgnL2ZvbycpYCB0byBjaGFuZ2UgYGhpc3Rvcnkuc3RhdGVgXG4gICAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7XG4gICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gQW5kcm9pZCBCcm93c2VyIEJGQ2FjaGUgY2F1c2VzIGxvY2F0aW9uLCBoaXN0b3J5IHJlZmVyZW5jZSB0byBiZWNvbWUgc3RhbGUuXG4gICAgICBpZiAobG9jYXRpb24gIT09IHdpbmRvdy5sb2NhdGlvbikgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgICAgLy8gc2V0dGVyXG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgICAvLyBEb24ndCBjaGFuZ2UgYW55dGhpbmcgaWYgcHJldmlvdXMgYW5kIGN1cnJlbnQgVVJMcyBhbmQgc3RhdGVzIG1hdGNoLiBUaGlzIGFsc28gcHJldmVudHNcbiAgICAgICAgLy8gSUU8MTAgZnJvbSBnZXR0aW5nIGludG8gcmVkaXJlY3QgbG9vcCB3aGVuIGluIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIG1vZGUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gdXJsICYmICghJHNuaWZmZXIuaGlzdG9yeSB8fCBzYW1lU3RhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNhbWVCYXNlID0gbGFzdEJyb3dzZXJVcmwgJiYgc3RyaXBIYXNoKGxhc3RCcm93c2VyVXJsKSA9PT0gc3RyaXBIYXNoKHVybCk7XG4gICAgICAgIGxhc3RCcm93c2VyVXJsID0gdXJsO1xuICAgICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAgIC8vIERvbid0IHVzZSBoaXN0b3J5IEFQSSBpZiBvbmx5IHRoZSBoYXNoIGNoYW5nZWRcbiAgICAgICAgLy8gZHVlIHRvIGEgYnVnIGluIElFMTAvSUUxMSB3aGljaCBsZWFkc1xuICAgICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAgIC8vIGluIHNvbWUgY2FzZXMgKHNlZSAjOTE0MykuXG4gICAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5ICYmICghc2FtZUJhc2UgfHwgIXNhbWVTdGF0ZSkpIHtcbiAgICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgICAgY2FjaGVTdGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGdldEhhc2godXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxvY2F0aW9uLmhyZWYgIT09IHVybCkge1xuICAgICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICAvLyBnZXR0ZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgICAvLyAgIHRoZSBuZXcgbG9jYXRpb24uaHJlZiBpZiBhIHJlbG9hZCBoYXBwZW5lZCBvciBpZiB0aGVyZSBpcyBhIGJ1ZyBsaWtlIGluIGlPUyA5IChzZWVcbiAgICAgICAgLy8gICBodHRwczovL29wZW5yYWRhci5hcHBzcG90LmNvbS8yMjE4NjEwOSkuXG4gICAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICAgIHJldHVybiBwZW5kaW5nTG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZywgJ1xcJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkYnJvd3NlciNzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBtZXRob2QgaXMgYSBnZXR0ZXIuXG4gICAgICpcbiAgICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge29iamVjdH0gc3RhdGVcbiAgICAgKi9cbiAgICBzZWxmLnN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNhY2hlZFN0YXRlO1xuICAgIH07XG5cbiAgICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICAgIHVybENoYW5nZUluaXQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKCkge1xuICAgICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICAgIGZpcmVTdGF0ZU9yVXJsQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCAqb25seSogaW5zaWRlIHRoZSBjYWNoZVN0YXRlIGZ1bmN0aW9uLlxuICAgIHZhciBsYXN0Q2FjaGVkU3RhdGUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNhY2hlU3RhdGUoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgb25seSBwbGFjZSBpbiAkYnJvd3NlciB3aGVyZSBgaGlzdG9yeS5zdGF0ZWAgaXMgcmVhZC5cbiAgICAgIGNhY2hlZFN0YXRlID0gZ2V0Q3VycmVudFN0YXRlKCk7XG4gICAgICBjYWNoZWRTdGF0ZSA9IGlzVW5kZWZpbmVkKGNhY2hlZFN0YXRlKSA/IG51bGwgOiBjYWNoZWRTdGF0ZTtcblxuICAgICAgLy8gUHJldmVudCBjYWxsYmFja3MgZm8gZmlyZSB0d2ljZSBpZiBib3RoIGhhc2hjaGFuZ2UgJiBwb3BzdGF0ZSB3ZXJlIGZpcmVkLlxuICAgICAgaWYgKGVxdWFscyhjYWNoZWRTdGF0ZSwgbGFzdENhY2hlZFN0YXRlKSkge1xuICAgICAgICBjYWNoZWRTdGF0ZSA9IGxhc3RDYWNoZWRTdGF0ZTtcbiAgICAgIH1cblxuICAgICAgbGFzdENhY2hlZFN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlyZVN0YXRlT3JVcmxDaGFuZ2UoKSB7XG4gICAgICB2YXIgcHJldkxhc3RIaXN0b3J5U3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlO1xuICAgICAgY2FjaGVTdGF0ZSgpO1xuXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgcHJldkxhc3RIaXN0b3J5U3RhdGUgPT09IGNhY2hlZFN0YXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGFzdEJyb3dzZXJVcmwgPSBzZWxmLnVybCgpO1xuICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgICAgZm9yRWFjaCh1cmxDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkYnJvd3NlciNvblVybENoYW5nZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmVnaXN0ZXIgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCwgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEl0J3Mgb25seSBjYWxsZWQgd2hlbiB0aGUgdXJsIGlzIGNoYW5nZWQgZnJvbSBvdXRzaWRlIG9mIGFuZ3VsYXI6XG4gICAgICogLSB1c2VyIHR5cGVzIGRpZmZlcmVudCB1cmwgaW50byBhZGRyZXNzIGJhclxuICAgICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xuICAgICAqXG4gICAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAgICpcbiAgICAgKiBUaGUgbGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2l0aCBuZXcgdXJsIGFzIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gbW9uaXRvciB1cmwgY2hhbmdlcyBpbiBhbmd1bGFyIGFwcHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKHN0cmluZyl9IFJldHVybnMgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXIgZm4gLSBoYW5keSBpZiB0aGUgZm4gaXMgYW5vbnltb3VzLlxuICAgICAqL1xuICAgIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXG4gICAgICBpZiAoIXVybENoYW5nZUluaXQpIHtcbiAgICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIGRvbid0XG4gICAgICAgIC8vIGZpcmUgcG9wc3RhdGUgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmxcbiAgICAgICAgLy8gY2hhbmdlZCBieSBwdXNoL3JlcGxhY2VTdGF0ZVxuXG4gICAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcbiAgICAgICAgLy8gaGFzaGNoYW5nZSBldmVudFxuICAgICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFJlbW92ZSBwb3BzdGF0ZSBhbmQgaGFzaGNoYW5nZSBoYW5kbGVyIGZyb20gd2luZG93LlxuICAgICAqXG4gICAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5ICRyb290U2NvcGUuXG4gICAgICovXG4gICAgc2VsZi4kJGFwcGxpY2F0aW9uRGVzdHJveWVkID0gZnVuY3Rpb24gKCkge1xuICAgICAganFMaXRlKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlIHBvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci5cbiAgICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICAgKiBhcyBoYXNoY2hhbmdlL3BvcHN0YXRlIGV2ZW50cyBmaXJlIGluIGFzeW5jLlxuICAgICAqL1xuICAgIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVTdGF0ZU9yVXJsQ2hhbmdlO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBNaXNjIEFQSVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkYnJvd3NlciNiYXNlSHJlZlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBjdXJyZW50IDxiYXNlIGhyZWY+XG4gICAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgYmFzZSBocmVmXG4gICAgICovXG4gICAgc2VsZi5iYXNlSHJlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBocmVmID0gYmFzZUVsZW1lbnQuYXR0cignaHJlZicpO1xuICAgICAgcmV0dXJuIGhyZWYgPyBocmVmLnJlcGxhY2UoL14oaHR0cHM/Oik/XFwvXFwvW14vXSovLCAnJykgOiAnJztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gb2YgbWlsbGlzZWNvbmRzIHRvIGRlZmVyIHRoZSBmdW5jdGlvbiBleGVjdXRpb24uXG4gICAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC5cbiAgICAgKlxuICAgICAqIFVubGlrZSB3aGVuIGNhbGxpbmcgYHNldFRpbWVvdXRgIGRpcmVjdGx5LCBpbiB0ZXN0IHRoaXMgZnVuY3Rpb24gaXMgbW9ja2VkIGFuZCBpbnN0ZWFkIG9mIHVzaW5nXG4gICAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWRcbiAgICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLlxuICAgICAqXG4gICAgICovXG4gICAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uIChmbiwgZGVsYXkpIHtcbiAgICAgIHZhciB0aW1lb3V0SWQ7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrO1xuICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTtcbiAgICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pO1xuICAgICAgfSwgZGVsYXkgfHwgMCk7XG4gICAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7XG4gICAgICByZXR1cm4gdGltZW91dElkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGRlZmVySWQgVG9rZW4gcmV0dXJuZWQgYnkgdGhlIGAkYnJvd3Nlci5kZWZlcmAgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuXG4gICAgICovXG4gICAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbiAoZGVmZXJJZCkge1xuICAgICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkge1xuICAgICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdO1xuICAgICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7XG4gICAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLyoqIEB0aGlzICovXG4gIGZ1bmN0aW9uICRCcm93c2VyUHJvdmlkZXIoKSB7XG4gICAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JywgZnVuY3Rpb24gKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgQnJvd3Nlcigkd2luZG93LCAkZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKTtcbiAgICB9XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5XG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvXG4gICAqIHRoZW0uXG4gICAqXG4gICAqIGBgYGpzXG4gICAqXG4gICAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gICAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7XG4gICAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ25vU3VjaENhY2hlSWQnKSkubm90LnRvQmVEZWZpbmVkKCk7XG4gICAqXG4gICAqICBjYWNoZS5wdXQoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcbiAgICogIGNhY2hlLnB1dChcImFub3RoZXIga2V5XCIsIFwiYW5vdGhlciB2YWx1ZVwiKTtcbiAgICpcbiAgICogIC8vIFdlJ3ZlIHNwZWNpZmllZCBubyBvcHRpb25zIG9uIGNyZWF0aW9uXG4gICAqICBleHBlY3QoY2FjaGUuaW5mbygpKS50b0VxdWFsKHtpZDogJ2NhY2hlSWQnLCBzaXplOiAyfSk7XG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxuICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGNhY2hlIGJlaGF2aW9yLiBQcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDigJQgdHVybnMgdGhlIGNhY2hlIGludG8gTFJVIGNhY2hlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBOZXdseSBjcmVhdGVkIGNhY2hlIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc2V0IG9mIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gYHtvYmplY3R9YCBgaW5mbygpYCDigJQgUmV0dXJucyBpZCwgc2l6ZSwgYW5kIG9wdGlvbnMgb2YgY2FjaGUuXG4gICAqIC0gYHt7Kn19YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnNcbiAgICogICBpdC5cbiAgICogLSBge3sqfX1gIGBnZXQoe3N0cmluZ30ga2V5KWAg4oCUIFJldHVybnMgY2FjaGVkIHZhbHVlIGZvciBga2V5YCBvciB1bmRlZmluZWQgZm9yIGNhY2hlIG1pc3MuXG4gICAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDigJQgUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNhY2hlLlxuICAgKiAtIGB7dm9pZH1gIGByZW1vdmVBbGwoKWAg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuXG4gICAqIC0gYHt2b2lkfWAgYGRlc3Ryb3koKWAg4oCUIFJlbW92ZXMgcmVmZXJlbmNlcyB0byB0aGlzIGNhY2hlIGZyb20gJGNhY2hlRmFjdG9yeS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiY2FjaGVFeGFtcGxlQXBwXCIgbmFtZT1cImNhY2hlLWZhY3RvcnlcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlS2V5XCIgcGxhY2Vob2xkZXI9XCJLZXlcIj5cbiAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmV3Q2FjaGVWYWx1ZVwiIHBsYWNlaG9sZGVyPVwiVmFsdWVcIj5cbiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuICBcbiAgICAgICAgICAgPHAgbmctaWY9XCJrZXlzLmxlbmd0aFwiPkNhY2hlZCBWYWx1ZXM8L3A+XG4gICAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgICAgPC9kaXY+XG4gIFxuICAgICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBjYWNoZS5pbmZvKClcIj5cbiAgICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICAgIDxiIG5nLWJpbmQ9XCJ2YWx1ZVwiPjwvYj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgICAgY29udHJvbGxlcignQ2FjaGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRzY29wZSwgJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICAgICAgICRzY29wZS5rZXlzID0gW107XG4gICAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAgICRzY29wZS5wdXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCgkc2NvcGUuY2FjaGUuZ2V0KGtleSkpKSB7XG4gICAgICAgICAgICAgICAgICRzY29wZS5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICRzY29wZS5jYWNoZS5wdXQoa2V5LCBhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSA/IG51bGwgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBwIHtcbiAgICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgZnVuY3Rpb24gJENhY2hlRmFjdG9yeVByb3ZpZGVyKCkge1xuXG4gICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhY2hlcyA9IHt9O1xuXG4gICAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykge1xuICAgICAgICBpZiAoY2FjaGVJZCBpbiBjYWNoZXMpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgJ0NhY2hlSWQgXFwnezB9XFwnIGlzIGFscmVhZHkgdGFrZW4hJywgY2FjaGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2l6ZSA9IDAsXG4gICAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywgeyBpZDogY2FjaGVJZCB9KSxcbiAgICAgICAgICAgIGRhdGEgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICAgIGNhcGFjaXR5ID0gb3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5IHx8IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgICBscnVIYXNoID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGVcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEEgY2FjaGUgb2JqZWN0IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEsIHByaW1hcmlseSB1c2VkIGJ5XG4gICAgICAgICAqIHtAbGluayAkaHR0cCAkaHR0cH0gYW5kIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNjcmlwdCBzY3JpcHR9IGRpcmVjdGl2ZSB0byBjYWNoZVxuICAgICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgICAqICAgIC5mYWN0b3J5KCdzdXBlckNhY2hlJywgWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICAgKiAgICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCdzdXBlci1jYWNoZScpO1xuICAgICAgICAgKiAgICB9XSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgna2V5JywgJ3ZhbHVlJyk7XG4gICAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdhbm90aGVyIGtleScsICdhbm90aGVyIHZhbHVlJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICAgKiAgICB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmdldCgnYW5vdGhlciBrZXknKSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAgICogICAgfSk7XG4gICAgICAgICAqICB9KSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXSA9IHtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3B1dFxuICAgICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBJbnNlcnRzIGEgbmFtZWQgZW50cnkgaW50byB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCB0byBiZVxuICAgICAgICAgICAqIHJldHJpZXZlZCBsYXRlciwgYW5kIGluY3JlbWVudGluZyB0aGUgc2l6ZSBvZiB0aGUgY2FjaGUgaWYgdGhlIGtleSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICAgKiBwcmVzZW50IGluIHRoZSBjYWNoZS4gSWYgYmVoYXZpbmcgbGlrZSBhbiBMUlUgY2FjaGUsIGl0IHdpbGwgYWxzbyByZW1vdmUgc3RhbGVcbiAgICAgICAgICAgKiBlbnRyaWVzIGZyb20gdGhlIHNldC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEl0IHdpbGwgbm90IGluc2VydCB1bmRlZmluZWQgdmFsdWVzIGludG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHVuZGVyIHdoaWNoIHRoZSBjYWNoZWQgZGF0YSBpcyBzdG9yZWQuXG4gICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc3RvcmUgYWxvbmdzaWRlIHRoZSBrZXkuIElmIGl0IGlzIHVuZGVmaW5lZCwgdGhlIGtleVxuICAgICAgICAgICAqICAgIHdpbGwgbm90IGJlIHN0b3JlZC5cbiAgICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwdXQ6IGZ1bmN0aW9uIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0geyBrZXk6IGtleSB9KTtcblxuICAgICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdGFsZUVuZC5rZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2dldFxuICAgICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gYmUgcmV0cmlldmVkXG4gICAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZVxuICAgICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBSZW1vdmVzIGFuIGVudHJ5IGZyb20gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShrZXkpIHtcbiAgICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAobHJ1RW50cnkgPT09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7XG4gICAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgICAgbGluayhscnVFbnRyeS5uLCBscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICAgICAgICAgIHNpemUtLTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcmVtb3ZlQWxsXG4gICAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuICAgICAgICAgICAgZGF0YSA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgICBscnVIYXNoID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgICBmcmVzaEVuZCA9IHN0YWxlRW5kID0gbnVsbDtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZGVzdHJveVxuICAgICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICAgKiByZW1vdmluZyBpdCBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSBzZXQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgICAgbHJ1SGFzaCA9IG51bGw7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVzW2NhY2hlSWRdO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNpbmZvXG4gICAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHJldHVybnMge29iamVjdH0gYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICAgICAqICAgPHVsPlxuICAgICAgICAgICAqICAgICA8bGk+KippZCoqOiB0aGUgaWQgb2YgdGhlIGNhY2hlIGluc3RhbmNlPC9saT5cbiAgICAgICAgICAgKiAgICAgPGxpPioqc2l6ZSoqOiB0aGUgbnVtYmVyIG9mIGVudHJpZXMga2VwdCBpbiB0aGUgY2FjaGUgaW5zdGFuY2U8L2xpPlxuICAgICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgICAqICAgICAgIGNhY2hlLjwvbGk+XG4gICAgICAgICAgICogICA8L3VsPlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGluZm86IGZ1bmN0aW9uIGluZm8oKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywgeyBzaXplOiBzaXplIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHtcbiAgICAgICAgICBpZiAoZW50cnkgIT09IGZyZXNoRW5kKSB7XG4gICAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09PSBlbnRyeSkge1xuICAgICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmsoZW50cnkubiwgZW50cnkucCk7XG4gICAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5O1xuICAgICAgICAgICAgZnJlc2hFbmQubiA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGJpZGlyZWN0aW9uYWxseSBsaW5rcyB0d28gZW50cmllcyBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7XG4gICAgICAgICAgaWYgKG5leHRFbnRyeSAhPT0gcHJldkVudHJ5KSB7XG4gICAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXG4gICAgICAgKi9cbiAgICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24gKGNhY2hlLCBjYWNoZUlkKSB7XG4gICAgICAgICAgaW5mb1tjYWNoZUlkXSA9IGNhY2hlLmluZm8oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuXG4gICAgICAgKi9cbiAgICAgIGNhY2hlRmFjdG9yeS5nZXQgPSBmdW5jdGlvbiAoY2FjaGVJZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGNhY2hlRmFjdG9yeTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gICAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICAgKiBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2UgZGlyZWN0bHkuXG4gICAqXG4gICAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICAgKiAgICAgPHA+VGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgdGVtcGxhdGU8L3A+XG4gICAqICAgPC9zY3JpcHQ+XG4gICAqIGBgYFxuICAgKlxuICAgKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAgICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gICAqIGVsZW1lbnQgd2l0aCBuZy1hcHAgYXR0cmlidXRlKSwgb3RoZXJ3aXNlIHRoZSB0ZW1wbGF0ZSB3aWxsIGJlIGlnbm9yZWQuXG4gICAqXG4gICAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAgICpcbiAgICogYGBganNcbiAgICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICAgKiBteUFwcC5ydW4oZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICogICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlSWQuaHRtbCcsICdUaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZScpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIGNvbXBvbmVudDpcbiAgICogYGBganNcbiAgICogbXlBcHAuY29tcG9uZW50KCdteUNvbXBvbmVudCcsIHtcbiAgICogICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZUlkLmh0bWwnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogb3IgZ2V0IGl0IHZpYSB0aGUgYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlOlxuICAgKiBgYGBqc1xuICAgKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uICgkY2FjaGVGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7XG4gICAgfV07XG4gIH1cblxuICAvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gICAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAgICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICAgKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gICAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAgICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2UgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gICAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbiAgLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhXG4gICAqXG4gICAqIERPTS1yZWxhdGVkIHZhcmlhYmxlczpcbiAgICpcbiAgICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gICAqIC0gXCJlbGVtZW50XCIgLSBET00gRWxlbWVudCBvciBOb2RlXG4gICAqIC0gXCIkbm9kZVwiIG9yIFwiJGVsZW1lbnRcIiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudFxuICAgKlxuICAgKlxuICAgKiBDb21waWxlciByZWxhdGVkIHN0dWZmOlxuICAgKlxuICAgKiAtIFwibGlua0ZuXCIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZVxuICAgKiAtIFwibm9kZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGVcbiAgICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAgICogLSBcImNvbXBvc2l0ZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdClcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRjb21waWxlXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21waWxlcyBhbiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaFxuICAgKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAgICpcbiAgICogVGhlIGNvbXBpbGF0aW9uIGlzIGEgcHJvY2VzcyBvZiB3YWxraW5nIHRoZSBET00gdHJlZSBhbmQgbWF0Y2hpbmcgRE9NIGVsZW1lbnRzIHRvXG4gICAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAgICogRm9yIGEgZ2VudGxlIGludHJvZHVjdGlvbiB0byBkaXJlY3RpdmVzIHdpdGggZXhhbXBsZXMgb2YgY29tbW9uIHVzZSBjYXNlcyxcbiAgICogc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0uXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBDb21wcmVoZW5zaXZlIERpcmVjdGl2ZSBBUElcbiAgICpcbiAgICogVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IG9wdGlvbnMgZm9yIGEgZGlyZWN0aXZlLlxuICAgKlxuICAgKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAqIFlvdSBjYW4gZWl0aGVyIHJldHVybiBhIHtAbGluayAkY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0IChzZWUgYmVsb3cpfVxuICAgKiB0aGF0IGRlZmluZXMgdGhlIGRpcmVjdGl2ZSBwcm9wZXJ0aWVzLCBvciBqdXN0IHRoZSBgcG9zdExpbmtgIGZ1bmN0aW9uIChhbGwgb3RoZXIgcHJvcGVydGllcyB3aWxsIGhhdmVcbiAgICogdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAgICpcbiAgICogYGBganNcbiAgICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICAgKlxuICAgKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAgICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXByaW9yaXR5LSBwcmlvcml0eX06IDAsXG4gICAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGUtIHRlbXBsYXRlfTogJzxkaXY+PC9kaXY+JywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAgICogICAgICAgLy8gb3JcbiAgICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy10ZW1wbGF0ZXVybC0gdGVtcGxhdGVVcmx9OiAnZGlyZWN0aXZlLmh0bWwnLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXRyYW5zY2x1ZGUtIHRyYW5zY2x1ZGV9OiBmYWxzZSxcbiAgICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXN0cmljdC0gcmVzdHJpY3R9OiAnQScsXG4gICAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGVuYW1lc3BhY2UtIHRlbXBsYXRlTmFtZXNwYWNlfTogJ2h0bWwnLFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXNjb3BlLSBzY29wZX06IGZhbHNlLFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbnRyb2xsZXItIGNvbnRyb2xsZXJ9OiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbnRyb2xsZXJhcy0gY29udHJvbGxlckFzfTogJ3N0cmluZ0lkZW50aWZpZXInLFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGJpbmRUb0NvbnRyb2xsZXJ9OiBmYWxzZSxcbiAgICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXF1aXJlLSByZXF1aXJlfTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAgICogICAgICAge0BsaW5rICRjb21waWxlIy1tdWx0aWVsZW1lbnQtIG11bHRpRWxlbWVudH06IGZhbHNlLFxuICAgKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbXBpbGUtIGNvbXBpbGV9OiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAgICogICAgICAgICByZXR1cm4ge1xuICAgKiAgICAgICAgICAgIHtAbGluayAkY29tcGlsZSNwcmUtbGlua2luZy1mdW5jdGlvbiBwcmV9OiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICAgKiAgICAgICAgICAgIHtAbGluayAkY29tcGlsZSNwb3N0LWxpbmtpbmctZnVuY3Rpb24gcG9zdH06IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICAgIC8vIG9yXG4gICAqICAgICAgICAgLy8gcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gICAqICAgICAgIH0sXG4gICAqICAgICAgIC8vIG9yXG4gICAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtbGluay0gbGlua306IHtcbiAgICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwcmUtbGlua2luZy1mdW5jdGlvbiBwcmV9OiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICAgKiAgICAgICAvLyAge0BsaW5rICRjb21waWxlI3Bvc3QtbGlua2luZy1mdW5jdGlvbiBwb3N0fTogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAgICogICAgICAgLy8gfVxuICAgKiAgICAgICAvLyBvclxuICAgKiAgICAgICAvLyB7QGxpbmsgJGNvbXBpbGUjLWxpbmstIGxpbmt9OiBmdW5jdGlvbiBwb3N0TGluayggLi4uICkgeyAuLi4gfVxuICAgKiAgICAgfTtcbiAgICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gICAqXG4gICAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICAgKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gICAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gICAqICAgICB9O1xuICAgKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gICAqICAgICAvLyBvclxuICAgKiAgICAgLy8gcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAjIyMgTGlmZS1jeWNsZSBob29rc1xuICAgKiBEaXJlY3RpdmUgY29udHJvbGxlcnMgY2FuIHByb3ZpZGUgdGhlIGZvbGxvd2luZyBtZXRob2RzIHRoYXQgYXJlIGNhbGxlZCBieSBBbmd1bGFyIGF0IHBvaW50cyBpbiB0aGUgbGlmZS1jeWNsZSBvZiB0aGVcbiAgICogZGlyZWN0aXZlOlxuICAgKiAqIGAkb25Jbml0KClgIC0gQ2FsbGVkIG9uIGVhY2ggY29udHJvbGxlciBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzIG9uIGFuIGVsZW1lbnQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGFuZFxuICAgKiAgIGhhZCB0aGVpciBiaW5kaW5ncyBpbml0aWFsaXplZCAoYW5kIGJlZm9yZSB0aGUgcHJlICZhbXA7IHBvc3QgbGlua2luZyBmdW5jdGlvbnMgZm9yIHRoZSBkaXJlY3RpdmVzIG9uXG4gICAqICAgdGhpcyBlbGVtZW50KS4gVGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gcHV0IGluaXRpYWxpemF0aW9uIGNvZGUgZm9yIHlvdXIgY29udHJvbGxlci5cbiAgICogKiBgJG9uQ2hhbmdlcyhjaGFuZ2VzT2JqKWAgLSBDYWxsZWQgd2hlbmV2ZXIgb25lLXdheSAoYDxgKSBvciBpbnRlcnBvbGF0aW9uIChgQGApIGJpbmRpbmdzIGFyZSB1cGRhdGVkLiBUaGVcbiAgICogICBgY2hhbmdlc09iamAgaXMgYSBoYXNoIHdob3NlIGtleXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgYm91bmQgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZCwgYW5kIHRoZSB2YWx1ZXMgYXJlIGFuXG4gICAqICAgb2JqZWN0IG9mIHRoZSBmb3JtIGB7IGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSwgaXNGaXJzdENoYW5nZSgpIH1gLiBVc2UgdGhpcyBob29rIHRvIHRyaWdnZXIgdXBkYXRlcyB3aXRoaW4gYVxuICAgKiAgIGNvbXBvbmVudCBzdWNoIGFzIGNsb25pbmcgdGhlIGJvdW5kIHZhbHVlIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBtdXRhdGlvbiBvZiB0aGUgb3V0ZXIgdmFsdWUuIE5vdGUgdGhhdCB0aGlzIHdpbGxcbiAgICogICBhbHNvIGJlIGNhbGxlZCB3aGVuIHlvdXIgYmluZGluZ3MgYXJlIGluaXRpYWxpemVkLlxuICAgKiAqIGAkZG9DaGVjaygpYCAtIENhbGxlZCBvbiBlYWNoIHR1cm4gb2YgdGhlIGRpZ2VzdCBjeWNsZS4gUHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gZGV0ZWN0IGFuZCBhY3Qgb25cbiAgICogICBjaGFuZ2VzLiBBbnkgYWN0aW9ucyB0aGF0IHlvdSB3aXNoIHRvIHRha2UgaW4gcmVzcG9uc2UgdG8gdGhlIGNoYW5nZXMgdGhhdCB5b3UgZGV0ZWN0IG11c3QgYmVcbiAgICogICBpbnZva2VkIGZyb20gdGhpcyBob29rOyBpbXBsZW1lbnRpbmcgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHdoZW4gYCRvbkNoYW5nZXNgIGlzIGNhbGxlZC4gRm9yIGV4YW1wbGUsIHRoaXMgaG9va1xuICAgKiAgIGNvdWxkIGJlIHVzZWZ1bCBpZiB5b3Ugd2lzaCB0byBwZXJmb3JtIGEgZGVlcCBlcXVhbGl0eSBjaGVjaywgb3IgdG8gY2hlY2sgYSBEYXRlIG9iamVjdCwgY2hhbmdlcyB0byB3aGljaCB3b3VsZCBub3RcbiAgICogICBiZSBkZXRlY3RlZCBieSBBbmd1bGFyJ3MgY2hhbmdlIGRldGVjdG9yIGFuZCB0aHVzIG5vdCB0cmlnZ2VyIGAkb25DaGFuZ2VzYC4gVGhpcyBob29rIGlzIGludm9rZWQgd2l0aCBubyBhcmd1bWVudHM7XG4gICAqICAgaWYgZGV0ZWN0aW5nIGNoYW5nZXMsIHlvdSBtdXN0IHN0b3JlIHRoZSBwcmV2aW91cyB2YWx1ZShzKSBmb3IgY29tcGFyaXNvbiB0byB0aGUgY3VycmVudCB2YWx1ZXMuXG4gICAqICogYCRvbkRlc3Ryb3koKWAgLSBDYWxsZWQgb24gYSBjb250cm9sbGVyIHdoZW4gaXRzIGNvbnRhaW5pbmcgc2NvcGUgaXMgZGVzdHJveWVkLiBVc2UgdGhpcyBob29rIGZvciByZWxlYXNpbmdcbiAgICogICBleHRlcm5hbCByZXNvdXJjZXMsIHdhdGNoZXMgYW5kIGV2ZW50IGhhbmRsZXJzLiBOb3RlIHRoYXQgY29tcG9uZW50cyBoYXZlIHRoZWlyIGAkb25EZXN0cm95KClgIGhvb2tzIGNhbGxlZCBpblxuICAgKiAgIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBgJHNjb3BlLiRicm9hZGNhc3RgIGV2ZW50cyBhcmUgdHJpZ2dlcmVkLCB3aGljaCBpcyB0b3AgZG93bi4gVGhpcyBtZWFucyB0aGF0IHBhcmVudFxuICAgKiAgIGNvbXBvbmVudHMgd2lsbCBoYXZlIHRoZWlyIGAkb25EZXN0cm95KClgIGhvb2sgY2FsbGVkIGJlZm9yZSBjaGlsZCBjb21wb25lbnRzLlxuICAgKiAqIGAkcG9zdExpbmsoKWAgLSBDYWxsZWQgYWZ0ZXIgdGhpcyBjb250cm9sbGVyJ3MgZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuIGhhdmUgYmVlbiBsaW5rZWQuIFNpbWlsYXIgdG8gdGhlIHBvc3QtbGlua1xuICAgKiAgIGZ1bmN0aW9uIHRoaXMgaG9vayBjYW4gYmUgdXNlZCB0byBzZXQgdXAgRE9NIGV2ZW50IGhhbmRsZXJzIGFuZCBkbyBkaXJlY3QgRE9NIG1hbmlwdWxhdGlvbi5cbiAgICogICBOb3RlIHRoYXQgY2hpbGQgZWxlbWVudHMgdGhhdCBjb250YWluIGB0ZW1wbGF0ZVVybGAgZGlyZWN0aXZlcyB3aWxsIG5vdCBoYXZlIGJlZW4gY29tcGlsZWQgYW5kIGxpbmtlZCBzaW5jZVxuICAgKiAgIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93biBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlblxuICAgKiAgIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAgICpcbiAgICogIyMjIyBDb21wYXJpc29uIHdpdGggQW5ndWxhciAyIGxpZmUtY3ljbGUgaG9va3NcbiAgICogQW5ndWxhciAyIGFsc28gdXNlcyBsaWZlLWN5Y2xlIGhvb2tzIGZvciBpdHMgY29tcG9uZW50cy4gV2hpbGUgdGhlIEFuZ3VsYXIgMSBsaWZlLWN5Y2xlIGhvb2tzIGFyZSBzaW1pbGFyIHRoZXJlIGFyZVxuICAgKiBzb21lIGRpZmZlcmVuY2VzIHRoYXQgeW91IHNob3VsZCBiZSBhd2FyZSBvZiwgZXNwZWNpYWxseSB3aGVuIGl0IGNvbWVzIHRvIG1vdmluZyB5b3VyIGNvZGUgZnJvbSBBbmd1bGFyIDEgdG8gQW5ndWxhciAyOlxuICAgKlxuICAgKiAqIEFuZ3VsYXIgMSBob29rcyBhcmUgcHJlZml4ZWQgd2l0aCBgJGAsIHN1Y2ggYXMgYCRvbkluaXRgLiBBbmd1bGFyIDIgaG9va3MgYXJlIHByZWZpeGVkIHdpdGggYG5nYCwgc3VjaCBhcyBgbmdPbkluaXRgLlxuICAgKiAqIEFuZ3VsYXIgMSBob29rcyBjYW4gYmUgZGVmaW5lZCBvbiB0aGUgY29udHJvbGxlciBwcm90b3R5cGUgb3IgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgaW5zaWRlIGl0cyBjb25zdHJ1Y3Rvci5cbiAgICogICBJbiBBbmd1bGFyIDIgeW91IGNhbiBvbmx5IGRlZmluZSBob29rcyBvbiB0aGUgcHJvdG90eXBlIG9mIHRoZSBDb21wb25lbnQgY2xhc3MuXG4gICAqICogRHVlIHRvIHRoZSBkaWZmZXJlbmNlcyBpbiBjaGFuZ2UtZGV0ZWN0aW9uLCB5b3UgbWF5IGdldCBtYW55IG1vcmUgY2FsbHMgdG8gYCRkb0NoZWNrYCBpbiBBbmd1bGFyIDEgdGhhbiB5b3Ugd291bGQgdG9cbiAgICogICBgbmdEb0NoZWNrYCBpbiBBbmd1bGFyIDJcbiAgICogKiBDaGFuZ2VzIHRvIHRoZSBtb2RlbCBpbnNpZGUgYCRkb0NoZWNrYCB3aWxsIHRyaWdnZXIgbmV3IHR1cm5zIG9mIHRoZSBkaWdlc3QgbG9vcCwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgY2hhbmdlcyB0byBiZVxuICAgKiAgIHByb3BhZ2F0ZWQgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb24uXG4gICAqICAgQW5ndWxhciAyIGRvZXMgbm90IGFsbG93IHRoZSBgbmdEb0NoZWNrYCBob29rIHRvIHRyaWdnZXIgYSBjaGFuZ2Ugb3V0c2lkZSBvZiB0aGUgY29tcG9uZW50LiBJdCB3aWxsIGVpdGhlciB0aHJvdyBhblxuICAgKiAgIGVycm9yIG9yIGRvIG5vdGhpbmcgZGVwZW5kaW5nIHVwb24gdGhlIHN0YXRlIG9mIGBlbmFibGVQcm9kTW9kZSgpYC5cbiAgICpcbiAgICogIyMjIyBMaWZlLWN5Y2xlIGhvb2sgZXhhbXBsZXNcbiAgICpcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIGNoZWNrIGZvciBtdXRhdGlvbnMgdG8gYSBEYXRlIG9iamVjdCBldmVuIHRob3VnaCB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdFxuICAgKiBoYXMgbm90IGNoYW5nZWQuXG4gICAqXG4gICAqIDxleGFtcGxlIG5hbWU9XCJkb0NoZWNrRGF0ZUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICBhbmd1bGFyLm1vZHVsZSgnZG8tY2hlY2stbW9kdWxlJywgW10pXG4gICAqICAgICAgIC5jb21wb25lbnQoJ2FwcCcsIHtcbiAgICogICAgICAgICB0ZW1wbGF0ZTpcbiAgICogICAgICAgICAgICdNb250aDogPGlucHV0IG5nLW1vZGVsPVwiJGN0cmwubW9udGhcIiBuZy1jaGFuZ2U9XCIkY3RybC51cGRhdGVEYXRlKClcIj4nICtcbiAgICogICAgICAgICAgICdEYXRlOiB7eyAkY3RybC5kYXRlIH19JyArXG4gICAqICAgICAgICAgICAnPHRlc3QgZGF0ZT1cIiRjdHJsLmRhdGVcIj48L3Rlc3Q+JyxcbiAgICogICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAqICAgICAgICAgICB0aGlzLm1vbnRoID0gdGhpcy5kYXRlLmdldE1vbnRoKCk7XG4gICAqICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGUgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAgICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMubW9udGgpO1xuICAgKiAgICAgICAgICAgfTtcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH0pXG4gICAqICAgICAgIC5jb21wb25lbnQoJ3Rlc3QnLCB7XG4gICAqICAgICAgICAgYmluZGluZ3M6IHsgZGF0ZTogJzwnIH0sXG4gICAqICAgICAgICAgdGVtcGxhdGU6XG4gICAqICAgICAgICAgICAnPHByZT57eyAkY3RybC5sb2cgfCBqc29uIH19PC9wcmU+JyxcbiAgICogICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlO1xuICAgKiAgICAgICAgICAgdGhpcy5sb2cgPSBbXTtcbiAgICogICAgICAgICAgIHRoaXMuJGRvQ2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICAgKiAgICAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAqICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogZGF0ZSBtdXRhdGVkOiAnICsgdGhpcy5kYXRlKTtcbiAgICogICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgKiAgICAgICAgICAgICB9XG4gICAqICAgICAgICAgICB9O1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8YXBwPjwvYXBwPlxuICAgKiAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKlxuICAgKiBUaGlzIGV4YW1wbGUgc2hvdyBob3cgeW91IG1pZ2h0IHVzZSBgJGRvQ2hlY2tgIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiB5b3VyIGNvbXBvbmVudCdzIGlucHV0cyBldmVuIGlmIHRoZVxuICAgKiBhY3R1YWwgaWRlbnRpdHkgb2YgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGNoYW5nZS4gKEJlIGF3YXJlIHRoYXQgY2xvbmluZyBhbmQgZGVlcCBlcXVhbGl0eSBjaGVja3Mgb24gbGFyZ2VcbiAgICogYXJyYXlzIG9yIG9iamVjdHMgY2FuIGhhdmUgYSBuZWdhdGl2ZSBpbXBhY3Qgb24geW91ciBhcHBsaWNhdGlvbiBwZXJmb3JtYW5jZSlcbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cImRvQ2hlY2tBcnJheUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPGRpdiBuZy1pbml0PVwiaXRlbXMgPSBbXVwiPlxuICAgKiAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiaXRlbXMucHVzaChpdGVtcy5sZW5ndGgpXCI+QWRkIEl0ZW08L2J1dHRvbj5cbiAgICogICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIml0ZW1zID0gW11cIj5SZXNldCBJdGVtczwvYnV0dG9uPlxuICAgKiAgICAgICA8cHJlPnt7IGl0ZW1zIH19PC9wcmU+XG4gICAqICAgICAgIDx0ZXN0IGl0ZW1zPVwiaXRlbXNcIj48L3Rlc3Q+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgICAgIGFuZ3VsYXIubW9kdWxlKCdkby1jaGVjay1tb2R1bGUnLCBbXSlcbiAgICogICAgICAgIC5jb21wb25lbnQoJ3Rlc3QnLCB7XG4gICAqICAgICAgICAgIGJpbmRpbmdzOiB7IGl0ZW1zOiAnPCcgfSxcbiAgICogICAgICAgICAgdGVtcGxhdGU6XG4gICAqICAgICAgICAgICAgJzxwcmU+e3sgJGN0cmwubG9nIHwganNvbiB9fTwvcHJlPicsXG4gICAqICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgICAgIHRoaXMubG9nID0gW107XG4gICAqXG4gICAqICAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXNfcmVmICE9PSB0aGlzLml0ZW1zKSB7XG4gICAqICAgICAgICAgICAgICAgIHRoaXMubG9nLnB1c2goJ2RvQ2hlY2s6IGl0ZW1zIGNoYW5nZWQnKTtcbiAgICogICAgICAgICAgICAgICAgdGhpcy5pdGVtc19yZWYgPSB0aGlzLml0ZW1zO1xuICAgKiAgICAgICAgICAgICAgfVxuICAgKiAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh0aGlzLml0ZW1zX2Nsb25lLCB0aGlzLml0ZW1zKSkge1xuICAgKiAgICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBpdGVtcyBtdXRhdGVkJyk7XG4gICAqICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNfY2xvbmUgPSBhbmd1bGFyLmNvcHkodGhpcy5pdGVtcyk7XG4gICAqICAgICAgICAgICAgICB9XG4gICAqICAgICAgICAgICAgfTtcbiAgICogICAgICAgICAgfVxuICAgKiAgICAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqXG4gICAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcbiAgICpcbiAgICogVGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kY29tcGlsZVxuICAgKiBjb21waWxlcn0uIFRoZSBhdHRyaWJ1dGVzIGFyZTpcbiAgICpcbiAgICogIyMjIyBgbXVsdGlFbGVtZW50YFxuICAgKiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUgKGRlZmF1bHQgaXMgYGZhbHNlYCksIHRoZSBIVE1MIGNvbXBpbGVyIHdpbGwgY29sbGVjdCBET00gbm9kZXMgYmV0d2VlblxuICAgKiBub2RlcyB3aXRoIHRoZSBhdHRyaWJ1dGVzIGBkaXJlY3RpdmUtbmFtZS1zdGFydGAgYW5kIGBkaXJlY3RpdmUtbmFtZS1lbmRgLCBhbmQgZ3JvdXAgdGhlbVxuICAgKiB0b2dldGhlciBhcyB0aGUgZGlyZWN0aXZlIGVsZW1lbnRzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoaXMgZmVhdHVyZSBiZSB1c2VkIG9uIGRpcmVjdGl2ZXNcbiAgICogd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBiZWhhdmlvcmFsIChzdWNoIGFzIHtAbGluayBuZ0NsaWNrfSksIGFuZCB3aGljaFxuICAgKiBkbyBub3QgbWFuaXB1bGF0ZSBvciByZXBsYWNlIGNoaWxkIG5vZGVzIChzdWNoIGFzIHtAbGluayBuZ0luY2x1ZGV9KS5cbiAgICpcbiAgICogIyMjIyBgcHJpb3JpdHlgXG4gICAqIFdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGRpcmVjdGl2ZXMgZGVmaW5lZCBvbiBhIHNpbmdsZSBET00gZWxlbWVudCwgc29tZXRpbWVzIGl0XG4gICAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICAgKiB0byBzb3J0IHRoZSBkaXJlY3RpdmVzIGJlZm9yZSB0aGVpciBgY29tcGlsZWAgZnVuY3Rpb25zIGdldCBjYWxsZWQuIFByaW9yaXR5IGlzIGRlZmluZWQgYXMgYVxuICAgKiBudW1iZXIuIERpcmVjdGl2ZXMgd2l0aCBncmVhdGVyIG51bWVyaWNhbCBgcHJpb3JpdHlgIGFyZSBjb21waWxlZCBmaXJzdC4gUHJlLWxpbmsgZnVuY3Rpb25zXG4gICAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAgICogb2YgZGlyZWN0aXZlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGlzIHVuZGVmaW5lZC4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgYDBgLlxuICAgKlxuICAgKiAjIyMjIGB0ZXJtaW5hbGBcbiAgICogSWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgY3VycmVudCBgcHJpb3JpdHlgIHdpbGwgYmUgdGhlIGxhc3Qgc2V0IG9mIGRpcmVjdGl2ZXNcbiAgICogd2hpY2ggd2lsbCBleGVjdXRlIChhbnkgZGlyZWN0aXZlcyBhdCB0aGUgY3VycmVudCBwcmlvcml0eSB3aWxsIHN0aWxsIGV4ZWN1dGVcbiAgICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gICAqIGFuZCBvdGhlciBkaXJlY3RpdmVzIHVzZWQgaW4gdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIHdpbGwgYWxzbyBiZSBleGNsdWRlZCBmcm9tIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogIyMjIyBgc2NvcGVgXG4gICAqIFRoZSBzY29wZSBwcm9wZXJ0eSBjYW4gYmUgYGZhbHNlYCwgYHRydWVgLCBvciBhbiBvYmplY3Q6XG4gICAqXG4gICAqICogKipgZmFsc2VgIChkZWZhdWx0KToqKiBObyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUuIFRoZSBkaXJlY3RpdmUgd2lsbCB1c2UgaXRzXG4gICAqIHBhcmVudCdzIHNjb3BlLlxuICAgKlxuICAgKiAqICoqYHRydWVgOioqIEEgbmV3IGNoaWxkIHNjb3BlIHRoYXQgcHJvdG90eXBpY2FsbHkgaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50IHdpbGwgYmUgY3JlYXRlZCBmb3JcbiAgICogdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuIElmIG11bHRpcGxlIGRpcmVjdGl2ZXMgb24gdGhlIHNhbWUgZWxlbWVudCByZXF1ZXN0IGEgbmV3IHNjb3BlLFxuICAgKiBvbmx5IG9uZSBuZXcgc2NvcGUgaXMgY3JlYXRlZC5cbiAgICpcbiAgICogKiAqKmB7Li4ufWAgKGFuIG9iamVjdCBoYXNoKToqKiBBIG5ldyBcImlzb2xhdGVcIiBzY29wZSBpcyBjcmVhdGVkIGZvciB0aGUgZGlyZWN0aXZlJ3MgdGVtcGxhdGUuXG4gICAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgZGlmZmVycyBmcm9tIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5XG4gICAqIGluaGVyaXQgZnJvbSBpdHMgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3RcbiAgICogYWNjaWRlbnRhbGx5IHJlYWQgb3IgbW9kaWZ5IGRhdGEgaW4gdGhlIHBhcmVudCBzY29wZS4gTm90ZSB0aGF0IGFuIGlzb2xhdGUgc2NvcGVcbiAgICogZGlyZWN0aXZlIHdpdGhvdXQgYSBgdGVtcGxhdGVgIG9yIGB0ZW1wbGF0ZVVybGAgd2lsbCBub3QgYXBwbHkgdGhlIGlzb2xhdGUgc2NvcGVcbiAgICogdG8gaXRzIGNoaWxkcmVuIGVsZW1lbnRzLlxuICAgKlxuICAgKiBUaGUgJ2lzb2xhdGUnIHNjb3BlIG9iamVjdCBoYXNoIGRlZmluZXMgYSBzZXQgb2YgbG9jYWwgc2NvcGUgcHJvcGVydGllcyBkZXJpdmVkIGZyb20gYXR0cmlidXRlcyBvbiB0aGVcbiAgICogZGlyZWN0aXZlJ3MgZWxlbWVudC4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yIHRlbXBsYXRlcy4gVGhlIGtleXMgaW5cbiAgICogdGhlIG9iamVjdCBoYXNoIG1hcCB0byB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgb24gdGhlIGlzb2xhdGUgc2NvcGU7IHRoZSB2YWx1ZXMgZGVmaW5lIGhvdyB0aGUgcHJvcGVydHlcbiAgICogaXMgYm91bmQgdG8gdGhlIHBhcmVudCBzY29wZSwgdmlhIG1hdGNoaW5nIGF0dHJpYnV0ZXMgb24gdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQ6XG4gICAqXG4gICAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXNcbiAgICogICBhbHdheXMgYSBzdHJpbmcgc2luY2UgRE9NIGF0dHJpYnV0ZXMgYXJlIHN0cmluZ3MuIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZVxuICAgKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuIEdpdmVuIGA8bXktY29tcG9uZW50XG4gICAqICAgbXktYXR0cj1cImhlbGxvIHt7bmFtZX19XCI+YCBhbmQgdGhlIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBgc2NvcGU6IHsgbG9jYWxOYW1lOidAbXlBdHRyJyB9YCxcbiAgICogICB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgcHJvcGVydHkgYGxvY2FsTmFtZWAgd2lsbCByZWZsZWN0IHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgYGhlbGxvXG4gICAqICAge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSBkaXJlY3RpdmUnc1xuICAgKiAgIHNjb3BlLiBUaGUgYG5hbWVgIGlzIHJlYWQgZnJvbSB0aGUgcGFyZW50IHNjb3BlIChub3QgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlKS5cbiAgICpcbiAgICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBhIGJpZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuIGV4cHJlc3Npb25cbiAgICogICBwYXNzZWQgdmlhIHRoZSBhdHRyaWJ1dGUgYGF0dHJgLiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS5cbiAgICogICBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWxcbiAgICogICBuYW1lLiBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZToge1xuICAgKiAgIGxvY2FsTW9kZWw6ICc9bXlBdHRyJyB9YCwgdGhlIHByb3BlcnR5IGBsb2NhbE1vZGVsYCBvbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgd2lsbCByZWZsZWN0IHRoZVxuICAgKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQ2hhbmdlcyB0byBgcGFyZW50TW9kZWxgIHdpbGwgYmUgcmVmbGVjdGVkIGluXG4gICAqICAgYGxvY2FsTW9kZWxgIGFuZCB2aWNlIHZlcnNhLiBPcHRpb25hbCBhdHRyaWJ1dGVzIHNob3VsZCBiZSBtYXJrZWQgYXMgc3VjaCB3aXRoIGEgcXVlc3Rpb24gbWFyazpcbiAgICogICBgPT9gIG9yIGA9P2F0dHJgLiBJZiB0aGUgYmluZGluZyBleHByZXNzaW9uIGlzIG5vbi1hc3NpZ25hYmxlLCBvciBpZiB0aGUgYXR0cmlidXRlIGlzbid0XG4gICAqICAgb3B0aW9uYWwgYW5kIGRvZXNuJ3QgZXhpc3QsIGFuIGV4Y2VwdGlvbiAoe0BsaW5rIGVycm9yLyRjb21waWxlL25vbmFzc2lnbiBgJGNvbXBpbGU6bm9uYXNzaWduYH0pXG4gICAqICAgd2lsbCBiZSB0aHJvd24gdXBvbiBkaXNjb3ZlcmluZyBjaGFuZ2VzIHRvIHRoZSBsb2NhbCB2YWx1ZSwgc2luY2UgaXQgd2lsbCBiZSBpbXBvc3NpYmxlIHRvIHN5bmNcbiAgICogICB0aGVtIGJhY2sgdG8gdGhlIHBhcmVudCBzY29wZS4gQnkgZGVmYXVsdCwgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCBgJHdhdGNoYH1cbiAgICogICBtZXRob2QgaXMgdXNlZCBmb3IgdHJhY2tpbmcgY2hhbmdlcywgYW5kIHRoZSBlcXVhbGl0eSBjaGVjayBpcyBiYXNlZCBvbiBvYmplY3QgaWRlbnRpdHkuXG4gICAqICAgSG93ZXZlciwgaWYgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYW4gYXJyYXkgbGl0ZXJhbCBpcyBwYXNzZWQgYXMgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiwgdGhlXG4gICAqICAgZXF1YWxpdHkgY2hlY2sgaXMgZG9uZSBieSB2YWx1ZSAodXNpbmcgdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24pLiBJdCdzIGFsc28gcG9zc2libGVcbiAgICogICB0byB3YXRjaCB0aGUgZXZhbHVhdGVkIHZhbHVlIHNoYWxsb3dseSB3aXRoIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAgICogICBgJHdhdGNoQ29sbGVjdGlvbmB9OiB1c2UgYD0qYCBvciBgPSphdHRyYCAoYD0qP2Agb3IgYD0qP2F0dHJgIGlmIHRoZSBhdHRyaWJ1dGUgaXMgb3B0aW9uYWwpLlxuICAgKlxuICAgICogKiBgPGAgb3IgYDxhdHRyYCAtIHNldCB1cCBhIG9uZS13YXkgKG9uZS1kaXJlY3Rpb25hbCkgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuXG4gICAqICAgZXhwcmVzc2lvbiBwYXNzZWQgdmlhIHRoZSBhdHRyaWJ1dGUgYGF0dHJgLiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlXG4gICAqICAgcGFyZW50IHNjb3BlLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGVcbiAgICogICBsb2NhbCBuYW1lLiBZb3UgY2FuIGFsc28gbWFrZSB0aGUgYmluZGluZyBvcHRpb25hbCBieSBhZGRpbmcgYD9gOiBgPD9gIG9yIGA8P2F0dHJgLlxuICAgKlxuICAgKiAgIEZvciBleGFtcGxlLCBnaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvZlxuICAgKiAgIGBzY29wZTogeyBsb2NhbE1vZGVsOic8bXlBdHRyJyB9YCwgdGhlbiB0aGUgaXNvbGF0ZWQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCB0aGVcbiAgICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWRcbiAgICogICBpbiBgbG9jYWxNb2RlbGAsIGJ1dCBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIG5vdCByZWZsZWN0IGluIGBwYXJlbnRNb2RlbGAuIFRoZXJlIGFyZSBob3dldmVyXG4gICAqICAgdHdvIGNhdmVhdHM6XG4gICAqICAgICAxLiBvbmUtd2F5IGJpbmRpbmcgZG9lcyBub3QgY29weSB0aGUgdmFsdWUgZnJvbSB0aGUgcGFyZW50IHRvIHRoZSBpc29sYXRlIHNjb3BlLCBpdCBzaW1wbHlcbiAgICogICAgIHNldHMgdGhlIHNhbWUgdmFsdWUuIFRoYXQgbWVhbnMgaWYgeW91ciBib3VuZCB2YWx1ZSBpcyBhbiBvYmplY3QsIGNoYW5nZXMgdG8gaXRzIHByb3BlcnRpZXNcbiAgICogICAgIGluIHRoZSBpc29sYXRlZCBzY29wZSB3aWxsIGJlIHJlZmxlY3RlZCBpbiB0aGUgcGFyZW50IHNjb3BlIChiZWNhdXNlIGJvdGggcmVmZXJlbmNlIHRoZSBzYW1lIG9iamVjdCkuXG4gICAqICAgICAyLiBvbmUtd2F5IGJpbmRpbmcgd2F0Y2hlcyBjaGFuZ2VzIHRvIHRoZSAqKmlkZW50aXR5Kiogb2YgdGhlIHBhcmVudCB2YWx1ZS4gVGhhdCBtZWFucyB0aGVcbiAgICogICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCBgJHdhdGNoYH0gb24gdGhlIHBhcmVudCB2YWx1ZSBvbmx5IGZpcmVzIGlmIHRoZSByZWZlcmVuY2VcbiAgICogICAgIHRvIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZC4gSW4gbW9zdCBjYXNlcywgdGhpcyBzaG91bGQgbm90IGJlIG9mIGNvbmNlcm4sIGJ1dCBjYW4gYmUgaW1wb3J0YW50XG4gICAqICAgICB0byBrbm93IGlmIHlvdSBvbmUtd2F5IGJpbmQgdG8gYW4gb2JqZWN0LCBhbmQgdGhlbiByZXBsYWNlIHRoYXQgb2JqZWN0IGluIHRoZSBpc29sYXRlZCBzY29wZS5cbiAgICogICAgIElmIHlvdSBub3cgY2hhbmdlIGEgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBpbiB5b3VyIHBhcmVudCBzY29wZSwgdGhlIGNoYW5nZSB3aWxsIG5vdCBiZVxuICAgKiAgICAgcHJvcGFnYXRlZCB0byB0aGUgaXNvbGF0ZWQgc2NvcGUsIGJlY2F1c2UgdGhlIGlkZW50aXR5IG9mIHRoZSBvYmplY3Qgb24gdGhlIHBhcmVudCBzY29wZVxuICAgKiAgICAgaGFzIG5vdCBjaGFuZ2VkLiBJbnN0ZWFkIHlvdSBtdXN0IGFzc2lnbiBhIG5ldyBvYmplY3QuXG4gICAqXG4gICAqICAgT25lLXdheSBiaW5kaW5nIGlzIHVzZWZ1bCBpZiB5b3UgZG8gbm90IHBsYW4gdG8gcHJvcGFnYXRlIGNoYW5nZXMgdG8geW91ciBpc29sYXRlZCBzY29wZSBiaW5kaW5nc1xuICAgKiAgIGJhY2sgdG8gdGhlIHBhcmVudC4gSG93ZXZlciwgaXQgZG9lcyBub3QgbWFrZSB0aGlzIGNvbXBsZXRlbHkgaW1wb3NzaWJsZS5cbiAgICpcbiAgICogKiBgJmAgb3IgYCZhdHRyYCAtIHByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLiBJZlxuICAgKiAgIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICAgKiAgIEdpdmVuIGA8bXktY29tcG9uZW50IG15LWF0dHI9XCJjb3VudCA9IGNvdW50ICsgdmFsdWVcIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZToge1xuICAgKiAgIGxvY2FsRm46JyZteUF0dHInIH1gLCB0aGUgaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0byBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yXG4gICAqICAgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvIHBhc3MgZGF0YSBmcm9tIHRoZSBpc29sYXRlZCBzY29wZVxuICAgKiAgIHZpYSBhbiBleHByZXNzaW9uIHRvIHRoZSBwYXJlbnQgc2NvcGUuIFRoaXMgY2FuIGJlIGRvbmUgYnkgcGFzc2luZyBhIG1hcCBvZiBsb2NhbCB2YXJpYWJsZSBuYW1lc1xuICAgKiAgIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLiBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYFxuICAgKiAgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZSBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuXG4gICAqXG4gICAqIEluIGdlbmVyYWwgaXQncyBwb3NzaWJsZSB0byBhcHBseSBtb3JlIHRoYW4gb25lIGRpcmVjdGl2ZSB0byBvbmUgZWxlbWVudCwgYnV0IHRoZXJlIG1pZ2h0IGJlIGxpbWl0YXRpb25zXG4gICAqIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzY29wZSByZXF1aXJlZCBieSB0aGUgZGlyZWN0aXZlcy4gVGhlIGZvbGxvd2luZyBwb2ludHMgd2lsbCBoZWxwIGV4cGxhaW4gdGhlc2UgbGltaXRhdGlvbnMuXG4gICAqIEZvciBzaW1wbGljaXR5IG9ubHkgdHdvIGRpcmVjdGl2ZXMgYXJlIHRha2VuIGludG8gYWNjb3VudCwgYnV0IGl0IGlzIGFsc28gYXBwbGljYWJsZSBmb3Igc2V2ZXJhbCBkaXJlY3RpdmVzOlxuICAgKlxuICAgKiAqICoqbm8gc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiBUd28gZGlyZWN0aXZlcyB3aGljaCBkb24ndCByZXF1aXJlIHRoZWlyIG93biBzY29wZSB3aWxsIHVzZSB0aGVpciBwYXJlbnQncyBzY29wZVxuICAgKiAqICoqY2hpbGQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgQm90aCBkaXJlY3RpdmVzIHdpbGwgc2hhcmUgb25lIHNpbmdsZSBjaGlsZCBzY29wZVxuICAgKiAqICoqY2hpbGQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgQm90aCBkaXJlY3RpdmVzIHdpbGwgc2hhcmUgb25lIHNpbmdsZSBjaGlsZCBzY29wZVxuICAgKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgVGhlIGlzb2xhdGVkIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdCdzIG93biBjcmVhdGVkIGlzb2xhdGVkIHNjb3BlLiBUaGUgb3RoZXIgZGlyZWN0aXZlIHdpbGwgdXNlXG4gICAqIGl0cyBwYXJlbnQncyBzY29wZVxuICAgKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlcyBjYW5ub3RcbiAgICogYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICAgKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqaXNvbGF0ZWQgc2NvcGUqKiAgPT4gICoqV29uJ3Qgd29yayEqKiBPbmx5IG9uZSBzY29wZSBjYW4gYmUgcmVsYXRlZCB0byBvbmUgZWxlbWVudC4gVGhlcmVmb3JlIHRoZXNlIGRpcmVjdGl2ZXNcbiAgICogY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAgICpcbiAgICpcbiAgICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmBcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGJpbmQgc2NvcGUgcHJvcGVydGllcyBkaXJlY3RseSB0byB0aGUgY29udHJvbGxlci4gSXQgY2FuIGJlIGVpdGhlclxuICAgKiBgdHJ1ZWAgb3IgYW4gb2JqZWN0IGhhc2ggd2l0aCB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGBzY29wZWAgcHJvcGVydHkuXG4gICAqXG4gICAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGRpcmVjdGl2ZSAoc2VlIGFib3ZlKSwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAgICogYWxsb3cgYSBjb21wb25lbnQgdG8gaGF2ZSBpdHMgcHJvcGVydGllcyBib3VuZCB0byB0aGUgY29udHJvbGxlciwgcmF0aGVyIHRoYW4gdG8gc2NvcGUuXG4gICAqXG4gICAqIEFmdGVyIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCwgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIHdpbGwgYmUgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXJcbiAgICogcHJvcGVydGllcy4gWW91IGNhbiBhY2Nlc3MgdGhlc2UgYmluZGluZ3Mgb25jZSB0aGV5IGhhdmUgYmVlbiBpbml0aWFsaXplZCBieSBwcm92aWRpbmcgYSBjb250cm9sbGVyIG1ldGhvZCBjYWxsZWRcbiAgICogYCRvbkluaXRgLCB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZSBjb250cm9sbGVycyBvbiBhbiBlbGVtZW50IGhhdmUgYmVlbiBjb25zdHJ1Y3RlZCBhbmQgaGFkIHRoZWlyIGJpbmRpbmdzXG4gICAqIGluaXRpYWxpemVkLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKkRlcHJlY2F0aW9uIHdhcm5pbmc6KiogaWYgYCRjb21waWxlUHJvY3ZpZGVyLnByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCh0cnVlKWAgd2FzIGNhbGxlZCwgYmluZGluZ3MgZm9yIG5vbi1FUzYgY2xhc3NcbiAgICogY29udHJvbGxlcnMgYXJlIGJvdW5kIHRvIGB0aGlzYCBiZWZvcmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgaXMgY2FsbGVkIGJ1dCB0aGlzIHVzZSBpcyBub3cgZGVwcmVjYXRlZC4gUGxlYXNlXG4gICAqIHBsYWNlIGluaXRpYWxpemF0aW9uIGNvZGUgdGhhdCByZWxpZXMgdXBvbiBiaW5kaW5ncyBpbnNpZGUgYSBgJG9uSW5pdGAgbWV0aG9kIG9uIHRoZSBjb250cm9sbGVyLCBpbnN0ZWFkLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgYGJpbmRUb0NvbnRyb2xsZXJgIHRvIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICAgKiBUaGlzIHdpbGwgc2V0IHVwIHRoZSBzY29wZSBiaW5kaW5ncyB0byB0aGUgY29udHJvbGxlciBkaXJlY3RseS4gTm90ZSB0aGF0IGBzY29wZWAgY2FuIHN0aWxsIGJlIHVzZWRcbiAgICogdG8gZGVmaW5lIHdoaWNoIGtpbmQgb2Ygc2NvcGUgaXMgY3JlYXRlZC4gQnkgZGVmYXVsdCwgbm8gc2NvcGUgaXMgY3JlYXRlZC4gVXNlIGBzY29wZToge31gIHRvIGNyZWF0ZSBhbiBpc29sYXRlXG4gICAqIHNjb3BlICh1c2VmdWwgZm9yIGNvbXBvbmVudCBkaXJlY3RpdmVzKS5cbiAgICpcbiAgICogSWYgYm90aCBgYmluZFRvQ29udHJvbGxlcmAgYW5kIGBzY29wZWAgYXJlIGRlZmluZWQgYW5kIGhhdmUgb2JqZWN0IGhhc2hlcywgYGJpbmRUb0NvbnRyb2xsZXJgIG92ZXJyaWRlcyBgc2NvcGVgLlxuICAgKlxuICAgKlxuICAgKiAjIyMjIGBjb250cm9sbGVyYFxuICAgKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZVxuICAgKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICAgKiBgcmVxdWlyZWAgYXR0cmlidXRlKS4gVGhpcyBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyIGFuZCBhdWdtZW50XG4gICAqIGVhY2ggb3RoZXIncyBiZWhhdmlvci4gVGhlIGNvbnRyb2xsZXIgaXMgaW5qZWN0YWJsZSAoYW5kIHN1cHBvcnRzIGJyYWNrZXQgbm90YXRpb24pIHdpdGggdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gICAqXG4gICAqICogYCRzY29wZWAgLSBDdXJyZW50IHNjb3BlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICAgKiAqIGAkZWxlbWVudGAgLSBDdXJyZW50IGVsZW1lbnRcbiAgICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gICAqICogYCR0cmFuc2NsdWRlYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gICAqICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzbG90TmFtZSlgOlxuICAgKiAgICAqIGBzY29wZWA6IChvcHRpb25hbCkgb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICAgKiAgICAqIGBjbG9uZUxpbmtpbmdGbmA6IChvcHRpb25hbCkgYXJndW1lbnQgdG8gY3JlYXRlIGNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdHJhbnNjbHVkZWQgY29udGVudC5cbiAgICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGAgKG9wdGlvbmFsKTpcbiAgICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gICAqICAgICAgICAqIGRlZmF1bHQ6IGAkZWxlbWVudC5wYXJlbnQoKWAgcmVzcC4gYCRlbGVtZW50YCBmb3IgYHRyYW5zY2x1ZGU6J2VsZW1lbnQnYCByZXNwLiBgdHJhbnNjbHVkZTp0cnVlYC5cbiAgICogICAgICAgICogb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbCBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpXG4gICAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5nRm5gIGlzIHBhc3NlZCxcbiAgICogICAgICAgICAgYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBjcmVhdGVkIGFuZCBjbG9uZWQgaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpclxuICAgKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuXG4gICAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAgICogICAgKiBgc2xvdE5hbWVgOiAob3B0aW9uYWwpIHRoZSBuYW1lIG9mIHRoZSBzbG90IHRvIHRyYW5zY2x1ZGUuIElmIGZhbHN5IChlLmcuIGBudWxsYCwgYHVuZGVmaW5lZGAgb3IgYCcnYClcbiAgICogICAgICB0aGVuIHRoZSBkZWZhdWx0IHRyYW5zY2x1c2lvbiBpcyBwcm92aWRlZC5cbiAgICogICAgVGhlIGAkdHJhbnNjbHVkZWAgZnVuY3Rpb24gYWxzbyBoYXMgYSBtZXRob2Qgb24gaXQsIGAkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpYCwgd2hpY2ggcmV0dXJuc1xuICAgKiAgICBgdHJ1ZWAgaWYgdGhlIHNwZWNpZmllZCBzbG90IGNvbnRhaW5zIGNvbnRlbnQgKGkuZS4gb25lIG9yIG1vcmUgRE9NIG5vZGVzKS5cbiAgICpcbiAgICogIyMjIyBgcmVxdWlyZWBcbiAgICogUmVxdWlyZSBhbm90aGVyIGRpcmVjdGl2ZSBhbmQgaW5qZWN0IGl0cyBjb250cm9sbGVyIGFzIHRoZSBmb3VydGggYXJndW1lbnQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZVxuICAgKiBgcmVxdWlyZWAgcHJvcGVydHkgY2FuIGJlIGEgc3RyaW5nLCBhbiBhcnJheSBvciBhbiBvYmplY3Q6XG4gICAqICogYSAqKnN0cmluZyoqIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uXG4gICAqICogYW4gKiphcnJheSoqIGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGRpcmVjdGl2ZXMgdG8gcGFzcyB0byB0aGUgbGlua2luZyBmdW5jdGlvbi4gVGhlIGFyZ3VtZW50IHBhc3NlZCB0byB0aGVcbiAgICogbGlua2luZyBmdW5jdGlvbiB3aWxsIGJlIGFuIGFycmF5IG9mIGNvbnRyb2xsZXJzIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBuYW1lcyBpbiB0aGUgYHJlcXVpcmVgIHByb3BlcnR5XG4gICAqICogYW4gKipvYmplY3QqKiB3aG9zZSBwcm9wZXJ0eSB2YWx1ZXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZGlyZWN0aXZlcyB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUgYXJndW1lbnRcbiAgICogcGFzc2VkIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgYWxzbyBiZSBhbiBvYmplY3Qgd2l0aCBtYXRjaGluZyBrZXlzLCB3aG9zZSB2YWx1ZXMgd2lsbCBob2xkIHRoZSBjb3JyZXNwb25kaW5nXG4gICAqIGNvbnRyb2xsZXJzLlxuICAgKlxuICAgKiBJZiB0aGUgYHJlcXVpcmVgIHByb3BlcnR5IGlzIGFuIG9iamVjdCBhbmQgYGJpbmRUb0NvbnRyb2xsZXJgIGlzIHRydXRoeSwgdGhlbiB0aGUgcmVxdWlyZWQgY29udHJvbGxlcnMgYXJlXG4gICAqIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyIHVzaW5nIHRoZSBrZXlzIG9mIHRoZSBgcmVxdWlyZWAgcHJvcGVydHkuIFRoaXMgYmluZGluZyBvY2N1cnMgYWZ0ZXIgYWxsIHRoZSBjb250cm9sbGVyc1xuICAgKiBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYnV0IGJlZm9yZSBgJG9uSW5pdGAgaXMgY2FsbGVkLlxuICAgKiBJZiB0aGUgbmFtZSBvZiB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBpcyB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZSAodGhlIGtleSksIHRoZSBuYW1lIGNhbiBiZVxuICAgKiBvbWl0dGVkLiBGb3IgZXhhbXBsZSwgYHtwYXJlbnREaXI6ICdeXid9YCBpcyBlcXVpdmFsZW50IHRvIGB7cGFyZW50RGlyOiAnXl5wYXJlbnREaXInfWAuXG4gICAqIFNlZSB0aGUge0BsaW5rICRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50fSBoZWxwZXIgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRoaXMgY2FuIGJlIHVzZWQuXG4gICAqIElmIG5vIHN1Y2ggcmVxdWlyZWQgZGlyZWN0aXZlKHMpIGNhbiBiZSBmb3VuZCwgb3IgaWYgdGhlIGRpcmVjdGl2ZSBkb2VzIG5vdCBoYXZlIGEgY29udHJvbGxlciwgdGhlbiBhbiBlcnJvciBpc1xuICAgKiByYWlzZWQgKHVubGVzcyBubyBsaW5rIGZ1bmN0aW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIGFyZSBub3QgYmVpbmcgYm91bmQgdG8gdGhlIGRpcmVjdGl2ZVxuICAgKiBjb250cm9sbGVyLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAgICpcbiAgICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gICAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gICAqICogYF5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAgICogKiBgXl5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAgICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gICAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICAgKiAqIGA/Xl5gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cywgb3IgcGFzc1xuICAgKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAgICpcbiAgICpcbiAgICogIyMjIyBgY29udHJvbGxlckFzYFxuICAgKiBJZGVudGlmaWVyIG5hbWUgZm9yIGEgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyIGluIHRoZSBkaXJlY3RpdmUncyBzY29wZS5cbiAgICogVGhpcyBhbGxvd3MgdGhlIGNvbnRyb2xsZXIgdG8gYmUgcmVmZXJlbmNlZCBmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUuIFRoaXMgaXMgZXNwZWNpYWxseVxuICAgKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gICAqIHRvIHVzZSBpdCBpbiBhIGRpcmVjdGl2ZSB3aXRob3V0IGFuIGBpc29sYXRlYCAvIGBuZXdgIHNjb3BlLCBidXQgeW91IG5lZWQgdG8gYmUgYXdhcmUgdGhhdCB0aGVcbiAgICogYGNvbnRyb2xsZXJBc2AgcmVmZXJlbmNlIG1pZ2h0IG92ZXJ3cml0ZSBhIHByb3BlcnR5IHRoYXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIHBhcmVudCBzY29wZS5cbiAgICpcbiAgICpcbiAgICogIyMjIyBgcmVzdHJpY3RgXG4gICAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gICAqIGRlY2xhcmF0aW9uIHN0eWxlLiBJZiBvbWl0dGVkLCB0aGUgZGVmYXVsdHMgKGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzKSBhcmUgdXNlZC5cbiAgICpcbiAgICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gICAqICogYEFgIC0gQXR0cmlidXRlIChkZWZhdWx0KTogYDxkaXYgbXktZGlyZWN0aXZlPVwiZXhwXCI+PC9kaXY+YFxuICAgKiAqIGBDYCAtIENsYXNzOiBgPGRpdiBjbGFzcz1cIm15LWRpcmVjdGl2ZTogZXhwO1wiPjwvZGl2PmBcbiAgICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICAgKlxuICAgKlxuICAgKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQgdHlwZSB1c2VkIGJ5IHRoZSBtYXJrdXAgaW4gdGhlIHRlbXBsYXRlLlxuICAgKiBBbmd1bGFySlMgbmVlZHMgdGhpcyBpbmZvcm1hdGlvbiBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIGNsb25lZFxuICAgKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAgICpcbiAgICogKiBgaHRtbGAgLSBBbGwgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIEhUTUwuIFJvb3Qgbm9kZXMgbWF5IGFsc28gYmVcbiAgICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICAgKiAqIGBzdmdgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBTVkcgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPG1hdGg+YCkuXG4gICAqICogYG1hdGhgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBNYXRoTUwgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPHN2Zz5gKS5cbiAgICpcbiAgICogSWYgbm8gYHRlbXBsYXRlTmFtZXNwYWNlYCBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIG5hbWVzcGFjZSBpcyBjb25zaWRlcmVkIHRvIGJlIGBodG1sYC5cbiAgICpcbiAgICogIyMjIyBgdGVtcGxhdGVgXG4gICAqIEhUTUwgbWFya3VwIHRoYXQgbWF5OlxuICAgKiAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChkZWZhdWx0KS5cbiAgICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAgICogKiBXcmFwIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoaWYgYHRyYW5zY2x1ZGVgIGlzIHRydWUpLlxuICAgKlxuICAgKiBWYWx1ZSBtYXkgYmU6XG4gICAqXG4gICAqICogQSBzdHJpbmcuIEZvciBleGFtcGxlIGA8ZGl2IHJlZC1vbi1ob3Zlcj57e2RlbGV0ZV9zdHJ9fTwvZGl2PmAuXG4gICAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICAgKiAgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnMgYSBzdHJpbmcgdmFsdWUuXG4gICAqXG4gICAqXG4gICAqICMjIyMgYHRlbXBsYXRlVXJsYFxuICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8gYHRlbXBsYXRlYCBidXQgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBmcm9tIHRoZSBzcGVjaWZpZWQgVVJMLCBhc3luY2hyb25vdXNseS5cbiAgICpcbiAgICogQmVjYXVzZSB0ZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyB0aGUgY29tcGlsZXIgd2lsbCBzdXNwZW5kIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXMgb24gdGhhdCBlbGVtZW50XG4gICAqIGZvciBsYXRlciB3aGVuIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiByZXNvbHZlZC4gIEluIHRoZSBtZWFudGltZSBpdCB3aWxsIGNvbnRpbnVlIHRvIGNvbXBpbGUgYW5kIGxpbmtcbiAgICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gICAqXG4gICAqIFRoZSBjb21waWxlciBkb2VzIG5vdCBzdXNwZW5kIHRoZSBlbnRpcmUgY29tcGlsYXRpb24gdG8gd2FpdCBmb3IgdGVtcGxhdGVzIHRvIGJlIGxvYWRlZCBiZWNhdXNlIHRoaXNcbiAgICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gICAqIGNhc2Ugd2hlbiBvbmx5IG9uZSBkZWVwbHkgbmVzdGVkIGRpcmVjdGl2ZSBoYXMgYHRlbXBsYXRlVXJsYC5cbiAgICpcbiAgICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAgICpcbiAgICogWW91IGNhbiBzcGVjaWZ5IGB0ZW1wbGF0ZVVybGAgYXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBVUkwgb3IgYXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d29cbiAgICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gICAqIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdXJsLiAgSW4gZWl0aGVyIGNhc2UsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcGFzc2VkIHRocm91Z2gge0BsaW5rXG4gICAqICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfS5cbiAgICpcbiAgICpcbiAgICogIyMjIyBgcmVwbGFjZWAgKFsqREVQUkVDQVRFRCohXSwgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZSAtIGkuZS4gdjIuMClcbiAgICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICpcbiAgICogKiBgdHJ1ZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICAgKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAgICpcbiAgICogVGhlIHJlcGxhY2VtZW50IHByb2Nlc3MgbWlncmF0ZXMgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIC8gY2xhc3NlcyBmcm9tIHRoZSBvbGQgZWxlbWVudCB0byB0aGUgbmV3XG4gICAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAgICogRGlyZWN0aXZlcyBHdWlkZX0gZm9yIGFuIGV4YW1wbGUuXG4gICAqXG4gICAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICAgKiB0aGUgbWFpbiBvbmUgYmVpbmcgcmV1c2FibGUgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgdXNlZCB3aXRoaW4gU1ZHIGNvbnRleHRzXG4gICAqIChiZWNhdXNlIFNWRyBkb2Vzbid0IHdvcmsgd2l0aCBjdXN0b20gZWxlbWVudHMgaW4gdGhlIERPTSB0cmVlKS5cbiAgICpcbiAgICogIyMjIyBgdHJhbnNjbHVkZWBcbiAgICogRXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBhcHBlYXJzIGFuZCBtYWtlIGl0IGF2YWlsYWJsZSB0byB0aGUgZGlyZWN0aXZlLlxuICAgKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICAgKiB7QGxpbmsgJGNvbXBpbGUjdHJhbnNjbHVzaW9uIFRyYW5zY2x1c2lvbn0gc2VjdGlvbiBiZWxvdy5cbiAgICpcbiAgICpcbiAgICogIyMjIyBgY29tcGlsZWBcbiAgICpcbiAgICogYGBganNcbiAgICogICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsgLi4uIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGRlYWxzIHdpdGggdHJhbnNmb3JtaW5nIHRoZSB0ZW1wbGF0ZSBET00uIFNpbmNlIG1vc3QgZGlyZWN0aXZlcyBkbyBub3QgZG9cbiAgICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICpcbiAgICogICAqIGB0RWxlbWVudGAgLSB0ZW1wbGF0ZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBkZWNsYXJlZC4gSXQgaXNcbiAgICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuXG4gICAqXG4gICAqICAgKiBgdEF0dHJzYCAtIHRlbXBsYXRlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gICAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuXG4gICAqXG4gICAqICAgKiBgdHJhbnNjbHVkZWAgLSAgWypERVBSRUNBVEVEKiFdIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uOiBgZnVuY3Rpb24oc2NvcGUsIGNsb25lTGlua2luZ0ZuKWBcbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIFRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSBhbmQgdGhlIGxpbmsgaW5zdGFuY2UgbWF5IGJlIGRpZmZlcmVudCBvYmplY3RzIGlmIHRoZSB0ZW1wbGF0ZSBoYXNcbiAgICogYmVlbiBjbG9uZWQuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyAqKm5vdCoqIHNhZmUgdG8gZG8gYW55dGhpbmcgb3RoZXIgdGhhbiBET00gdHJhbnNmb3JtYXRpb25zIHRoYXRcbiAgICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAgICogc2hvdWxkIGJlIGRvbmUgaW4gYSBsaW5raW5nIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGluIGEgY29tcGlsZSBmdW5jdGlvbi5cbiAgICogPC9kaXY+XG4gIFxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogVGhlIGNvbXBpbGUgZnVuY3Rpb24gY2Fubm90IGhhbmRsZSBkaXJlY3RpdmVzIHRoYXQgcmVjdXJzaXZlbHkgdXNlIHRoZW1zZWx2ZXMgaW4gdGhlaXJcbiAgICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZFxuICAgKiBzdGFjayBvdmVyZmxvdyBlcnJvcnMuXG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gICAqIGEgZGlyZWN0aXZlJ3MgdGVtcGxhdGUgaW5zdGVhZCBvZiByZWx5aW5nIG9uIGF1dG9tYXRpYyB0ZW1wbGF0ZSBjb21waWxhdGlvbiB2aWEgYHRlbXBsYXRlYCBvclxuICAgKiBgdGVtcGxhdGVVcmxgIGRlY2xhcmF0aW9uIG9yIG1hbnVhbCBjb21waWxhdGlvbiBpbnNpZGUgdGhlIGNvbXBpbGUgZnVuY3Rpb24uXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gICAqICAgZS5nLiBkb2VzIG5vdCBrbm93IGFib3V0IHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHVzZSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZFxuICAgKiAgIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gICAqIDwvZGl2PlxuICBcbiAgICogQSBjb21waWxlIGZ1bmN0aW9uIGNhbiBoYXZlIGEgcmV0dXJuIHZhbHVlIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QuXG4gICAqXG4gICAqICogcmV0dXJuaW5nIGEgKHBvc3QtbGluaykgZnVuY3Rpb24gLSBpcyBlcXVpdmFsZW50IHRvIHJlZ2lzdGVyaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHZpYSB0aGVcbiAgICogICBgbGlua2AgcHJvcGVydHkgb2YgdGhlIGNvbmZpZyBvYmplY3Qgd2hlbiB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBlbXB0eS5cbiAgICpcbiAgICogKiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24ocykgcmVnaXN0ZXJlZCB2aWEgYHByZWAgYW5kIGBwb3N0YCBwcm9wZXJ0aWVzIC0gYWxsb3dzIHlvdSB0b1xuICAgKiAgIGNvbnRyb2wgd2hlbiBhIGxpbmtpbmcgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UuIFNlZSBpbmZvIGFib3V0XG4gICAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gICAqXG4gICAqXG4gICAqICMjIyMgYGxpbmtgXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBvbmx5IGlmIHRoZSBgY29tcGlsZWAgcHJvcGVydHkgaXMgbm90IGRlZmluZWQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgZnVuY3Rpb24gbGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZUZuKSB7IC4uLiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGUgbGluayBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgcmVnaXN0ZXJpbmcgRE9NIGxpc3RlbmVycyBhcyB3ZWxsIGFzIHVwZGF0aW5nIHRoZSBET00uIEl0IGlzXG4gICAqIGV4ZWN1dGVkIGFmdGVyIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBjbG9uZWQuIFRoaXMgaXMgd2hlcmUgbW9zdCBvZiB0aGUgZGlyZWN0aXZlIGxvZ2ljIHdpbGwgYmVcbiAgICogcHV0LlxuICAgKlxuICAgKiAgICogYHNjb3BlYCAtIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSAtIFRoZSBzY29wZSB0byBiZSB1c2VkIGJ5IHRoZVxuICAgKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gICAqXG4gICAqICAgKiBgaUVsZW1lbnRgIC0gaW5zdGFuY2UgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaXMgdG8gYmUgdXNlZC4gSXQgaXMgc2FmZSB0b1xuICAgKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gICAqICAgICBhbHJlYWR5IGJlZW4gbGlua2VkLlxuICAgKlxuICAgKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICAgKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGxpbmtpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiAgICogYGNvbnRyb2xsZXJgIC0gdGhlIGRpcmVjdGl2ZSdzIHJlcXVpcmVkIGNvbnRyb2xsZXIgaW5zdGFuY2UocykgLSBJbnN0YW5jZXMgYXJlIHNoYXJlZFxuICAgKiAgICAgYW1vbmcgYWxsIGRpcmVjdGl2ZXMsIHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvblxuICAgKiAgICAgY2hhbm5lbC4gVGhlIGV4YWN0IHZhbHVlIGRlcGVuZHMgb24gdGhlIGRpcmVjdGl2ZSdzIGByZXF1aXJlYCBwcm9wZXJ0eTpcbiAgICogICAgICAgKiBubyBjb250cm9sbGVyKHMpIHJlcXVpcmVkOiB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmVcbiAgICogICAgICAgKiBgc3RyaW5nYDogdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2VcbiAgICogICAgICAgKiBgYXJyYXlgOiBhcnJheSBvZiBjb250cm9sbGVyIGluc3RhbmNlc1xuICAgKlxuICAgKiAgICAgSWYgYSByZXF1aXJlZCBjb250cm9sbGVyIGNhbm5vdCBiZSBmb3VuZCwgYW5kIGl0IGlzIG9wdGlvbmFsLCB0aGUgaW5zdGFuY2UgaXMgYG51bGxgLFxuICAgKiAgICAgb3RoZXJ3aXNlIHRoZSB7QGxpbmsgZXJyb3I6JGNvbXBpbGU6Y3RyZXEgTWlzc2luZyBSZXF1aXJlZCBDb250cm9sbGVyfSBlcnJvciBpcyB0aHJvd24uXG4gICAqXG4gICAqICAgICBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIHJlcXVpcmUgdGhlIGRpcmVjdGl2ZSdzIG93biBjb250cm9sbGVyIC0gaXQgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZSBsaWtlXG4gICAqICAgICBhbnkgb3RoZXIgY29udHJvbGxlci5cbiAgICpcbiAgICogICAqIGB0cmFuc2NsdWRlRm5gIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAgICogICAgIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGAkdHJhbnNjbHVkZWAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycyxcbiAgICogICAgIHNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWNvbnRyb2xsZXItIHRoZSBjb250cm9sbGVyIHNlY3Rpb24gZm9yIGRldGFpbHN9LlxuICAgKiAgICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuXG4gICAqXG4gICAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAgICpcbiAgICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLiBOb3Qgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gc2luY2UgdGhlXG4gICAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAgICpcbiAgICogIyMjIyBQb3N0LWxpbmtpbmcgZnVuY3Rpb25cbiAgICpcbiAgICogRXhlY3V0ZWQgYWZ0ZXIgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICAgKiBhbmQgbGlua2VkIHNpbmNlIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93blxuICAgKiBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlbiBzdXNwZW5kZWQgdW50aWwgdGhhdCBvY2N1cnMuXG4gICAqXG4gICAqIEl0IGlzIHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIGluIHRoZSBwb3N0LWxpbmtpbmcgZnVuY3Rpb24gb24gZWxlbWVudHMgdGhhdCBhcmUgbm90IHdhaXRpbmdcbiAgICogZm9yIHRoZWlyIGFzeW5jIHRlbXBsYXRlcyB0byBiZSByZXNvbHZlZC5cbiAgICpcbiAgICpcbiAgICogIyMjIFRyYW5zY2x1c2lvblxuICAgKlxuICAgKiBUcmFuc2NsdXNpb24gaXMgdGhlIHByb2Nlc3Mgb2YgZXh0cmFjdGluZyBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnRzIGZyb20gb25lIHBhcnQgb2YgdGhlIERPTSBhbmRcbiAgICogY29weWluZyB0aGVtIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgRE9NLCB3aGlsZSBtYWludGFpbmluZyB0aGVpciBjb25uZWN0aW9uIHRvIHRoZSBvcmlnaW5hbCBBbmd1bGFySlNcbiAgICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gICAqXG4gICAqIFRyYW5zY2x1c2lvbiBpcyB1c2VkIChvZnRlbiB3aXRoIHtAbGluayBuZ1RyYW5zY2x1ZGV9KSB0byBpbnNlcnQgdGhlXG4gICAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICAgKiBUaGUgYmVuZWZpdCBvZiB0cmFuc2NsdXNpb24sIG92ZXIgc2ltcGx5IG1vdmluZyB0aGUgRE9NIGVsZW1lbnRzIG1hbnVhbGx5LCBpcyB0aGF0IHRoZSB0cmFuc2NsdWRlZFxuICAgKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgb24gdGhlIHNjb3BlIGZyb20gd2hpY2ggaXQgd2FzIHRha2VuLCBldmVuIGlmIHRoZSBkaXJlY3RpdmVcbiAgICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICAgKiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjY3JlYXRpbmctYS1kaXJlY3RpdmUtdGhhdC13cmFwcy1vdGhlci1lbGVtZW50cyBEaXJlY3RpdmVzIEd1aWRlfS5cbiAgICpcbiAgICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gICAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byBpdHMgb3JpZ2luYXRpbmcgc2NvcGUuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBXaGVuIHRlc3RpbmcgYW4gZWxlbWVudCB0cmFuc2NsdWRlIGRpcmVjdGl2ZSB5b3UgbXVzdCBub3QgcGxhY2UgdGhlIGRpcmVjdGl2ZSBhdCB0aGUgcm9vdCBvZiB0aGVcbiAgICogRE9NIGZyYWdtZW50IHRoYXQgaXMgYmVpbmcgY29tcGlsZWQuIFNlZSB7QGxpbmsgZ3VpZGUvdW5pdC10ZXN0aW5nI3Rlc3RpbmctdHJhbnNjbHVzaW9uLWRpcmVjdGl2ZXNcbiAgICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBUaGVyZSBhcmUgdGhyZWUga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAgICogZGlyZWN0aXZlJ3MgZWxlbWVudCwgdGhlIGVudGlyZSBlbGVtZW50IG9yIG11bHRpcGxlIHBhcnRzIG9mIHRoZSBlbGVtZW50IGNvbnRlbnRzOlxuICAgKlxuICAgKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAgICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGluY2x1ZGluZyBhbnkgZGlyZWN0aXZlcyBvbiB0aGlzXG4gICAqICAgZWxlbWVudCB0aGF0IGRlZmluZWQgYXQgYSBsb3dlciBwcmlvcml0eSB0aGFuIHRoaXMgZGlyZWN0aXZlLiBXaGVuIHVzZWQsIHRoZSBgdGVtcGxhdGVgXG4gICAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAgICogKiAqKmB7Li4ufWAgKGFuIG9iamVjdCBoYXNoKToqKiAtIG1hcCBlbGVtZW50cyBvZiB0aGUgY29udGVudCBvbnRvIHRyYW5zY2x1c2lvbiBcInNsb3RzXCIgaW4gdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiAqKk11bHQtc2xvdCB0cmFuc2NsdXNpb24qKiBpcyBkZWNsYXJlZCBieSBwcm92aWRpbmcgYW4gb2JqZWN0IGZvciB0aGUgYHRyYW5zY2x1ZGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBUaGlzIG9iamVjdCBpcyBhIG1hcCB3aGVyZSB0aGUga2V5cyBhcmUgdGhlIG5hbWUgb2YgdGhlIHNsb3QgdG8gZmlsbCBhbmQgdGhlIHZhbHVlIGlzIGFuIGVsZW1lbnQgc2VsZWN0b3JcbiAgICogdXNlZCB0byBtYXRjaCB0aGUgSFRNTCB0byB0aGUgc2xvdC4gVGhlIGVsZW1lbnQgc2VsZWN0b3Igc2hvdWxkIGJlIGluIG5vcm1hbGl6ZWQgZm9ybSAoZS5nLiBgbXlFbGVtZW50YClcbiAgICogYW5kIHdpbGwgbWF0Y2ggdGhlIHN0YW5kYXJkIGVsZW1lbnQgdmFyaWFudHMgKGUuZy4gYG15LWVsZW1lbnRgLCBgbXk6ZWxlbWVudGAsIGBkYXRhLW15LWVsZW1lbnRgLCBldGMpLlxuICAgKlxuICAgKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICAgKlxuICAgKiBJZiB0aGUgZWxlbWVudCBzZWxlY3RvciBpcyBwcmVmaXhlZCB3aXRoIGEgYD9gIHRoZW4gdGhhdCBzbG90IGlzIG9wdGlvbmFsLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgdGhlIHRyYW5zY2x1ZGUgb2JqZWN0IGB7IHNsb3RBOiAnP215Q3VzdG9tRWxlbWVudCcgfWAgbWFwcyBgPG15LWN1c3RvbS1lbGVtZW50PmAgZWxlbWVudHMgdG9cbiAgICogdGhlIGBzbG90QWAgc2xvdCwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkIHZpYSB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvbiBvciB2aWEgdGhlIHtAbGluayBuZ1RyYW5zY2x1ZGV9IGRpcmVjdGl2ZS5cbiAgICpcbiAgICogU2xvdHMgdGhhdCBhcmUgbm90IG1hcmtlZCBhcyBvcHRpb25hbCAoYD9gKSB3aWxsIHRyaWdnZXIgYSBjb21waWxlIHRpbWUgZXJyb3IgaWYgdGhlcmUgYXJlIG5vIG1hdGNoaW5nIGVsZW1lbnRzXG4gICAqIGluIHRoZSB0cmFuc2NsdWRlIGNvbnRlbnQuIElmIHlvdSB3aXNoIHRvIGtub3cgaWYgYW4gb3B0aW9uYWwgc2xvdCB3YXMgZmlsbGVkIHdpdGggY29udGVudCwgdGhlbiB5b3UgY2FuIGNhbGxcbiAgICogYCR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZChzbG90TmFtZSlgIG9uIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHBhc3NlZCB0byB0aGUgZGlyZWN0aXZlJ3MgbGluayBmdW5jdGlvbiBhbmRcbiAgICogaW5qZWN0YWJsZSBpbnRvIHRoZSBkaXJlY3RpdmUncyBjb250cm9sbGVyLlxuICAgKlxuICAgKlxuICAgKiAjIyMjIFRyYW5zY2x1c2lvbiBGdW5jdGlvbnNcbiAgICpcbiAgICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb25cbiAgICogZnVuY3Rpb24qKiB0byB0aGUgZGlyZWN0aXZlJ3MgYGxpbmtgIGZ1bmN0aW9uIGFuZCBgY29udHJvbGxlcmAuIFRoaXMgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIGlzIGEgc3BlY2lhbFxuICAgKiAqKmxpbmtpbmcgZnVuY3Rpb24qKiB0aGF0IHdpbGwgcmV0dXJuIHRoZSBjb21waWxlZCBjb250ZW50cyBsaW5rZWQgdG8gYSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiBJZiB5b3UgYXJlIGp1c3QgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdGhlbiB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGZ1bmN0aW9uLCBzaW5jZVxuICAgKiBuZ1RyYW5zY2x1ZGUgd2lsbCBkZWFsIHdpdGggaXQgZm9yIHVzLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgY29udHJvbCB0aGUgaW5zZXJ0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGluIHlvdXIgZGlyZWN0aXZlXG4gICAqIHRoZW4geW91IG11c3QgdXNlIHRoaXMgdHJhbnNjbHVkZSBmdW5jdGlvbi4gV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIGEganFMaXRlL0pRdWVyeVxuICAgKiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgY29tcGlsZWQgRE9NLCB3aGljaCBpcyBsaW5rZWQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICAgKlxuICAgKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIHlvdSBjYW4gcGFzcyBpbiBhICoqY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKiouIFRoaXMgZnVuY3Rpb24gYWNjZXB0c1xuICAgKiB0d28gcGFyYW1ldGVycywgYGZ1bmN0aW9uKGNsb25lLCBzY29wZSkgeyAuLi4gfWAsIHdoZXJlIHRoZSBgY2xvbmVgIGlzIGEgZnJlc2ggY29tcGlsZWQgY29weSBvZiB5b3VyIHRyYW5zY2x1ZGVkXG4gICAqIGNvbnRlbnQgYW5kIHRoZSBgc2NvcGVgIGlzIHRoZSBuZXdseSBjcmVhdGVkIHRyYW5zY2x1c2lvbiBzY29wZSwgd2hpY2ggdGhlIGNsb25lIHdpbGwgYmUgbGlua2VkIHRvLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiAqKkJlc3QgUHJhY3RpY2UqKjogQWx3YXlzIHByb3ZpZGUgYSBgY2xvbmVGbmAgKGNsb25lIGF0dGFjaCBmdW5jdGlvbikgd2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb25cbiAgICogc2luY2UgeW91IHRoZW4gZ2V0IGEgZnJlc2ggY2xvbmUgb2YgdGhlIG9yaWdpbmFsIERPTSBhbmQgYWxzbyBoYXZlIGFjY2VzcyB0byB0aGUgbmV3IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEl0IGlzIG5vcm1hbCBwcmFjdGljZSB0byBhdHRhY2ggeW91ciB0cmFuc2NsdWRlZCBjb250ZW50IChgY2xvbmVgKSB0byB0aGUgRE9NIGluc2lkZSB5b3VyICoqY2xvbmVcbiAgICogYXR0YWNoIGZ1bmN0aW9uKio6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIHZhciB0cmFuc2NsdWRlZENvbnRlbnQsIHRyYW5zY2x1c2lvblNjb3BlO1xuICAgKlxuICAgKiAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHtcbiAgICogICBlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gICAqICAgdHJhbnNjbHVzaW9uU2NvcGUgPSBzY29wZTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBMYXRlciwgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGZyb20geW91ciBET00gdGhlbiB5b3Ugc2hvdWxkIGFsc28gZGVzdHJveSB0aGVcbiAgICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAgICogdHJhbnNjbHVzaW9uU2NvcGUuJGRlc3Ryb3koKTtcbiAgICogYGBgXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAqICoqQmVzdCBQcmFjdGljZSoqOiBpZiB5b3UgaW50ZW5kIHRvIGFkZCBhbmQgcmVtb3ZlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgbWFudWFsbHkgaW4geW91ciBkaXJlY3RpdmVcbiAgICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gICAqIHRoZW4geW91IGFyZSBhbHNvIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIGAkZGVzdHJveWAgb24gdGhlIHRyYW5zY2x1c2lvbiBzY29wZS5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIFRoZSBidWlsdC1pbiBET00gbWFuaXB1bGF0aW9uIGRpcmVjdGl2ZXMsIHN1Y2ggYXMge0BsaW5rIG5nSWZ9LCB7QGxpbmsgbmdTd2l0Y2h9IGFuZCB7QGxpbmsgbmdSZXBlYXR9XG4gICAqIGF1dG9tYXRpY2FsbHkgZGVzdHJveSB0aGVpciB0cmFuc2NsdWRlZCBjbG9uZXMgYXMgbmVjZXNzYXJ5IHNvIHlvdSBkbyBub3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGlmXG4gICAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gICAqXG4gICAqXG4gICAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICAgKlxuICAgKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgRE9NIGZyYWdtZW50IHRoYXQgaXMgcHJlLWJvdW5kIHRvIGEgKip0cmFuc2NsdXNpb25cbiAgICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAgICogd2hlbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgZ2V0cyBkZXN0cm95ZWQpIGJ1dCBpdCBpbmhlcml0cyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdFxuICAgKiB3YXMgdGFrZW4uXG4gICAqXG4gICAqIEZvciBleGFtcGxlIGNvbnNpZGVyIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24gYW5kIGlzb2xhdGVkIHNjb3BlLiBUaGUgRE9NIGhpZXJhcmNoeSBtaWdodCBsb29rXG4gICAqIGxpa2UgdGhpczpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8ZGl2IG5nLWFwcD5cbiAgICogICA8ZGl2IGlzb2xhdGU+XG4gICAqICAgICA8ZGl2IHRyYW5zY2x1c2lvbj5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZGl2PlxuICAgKiA8L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSBgJHBhcmVudGAgc2NvcGUgaGllcmFyY2h5IHdpbGwgbG9vayBsaWtlIHRoaXM6XG4gICAqXG4gICAgIGBgYFxuICAgICAtICRyb290U2NvcGVcbiAgICAgICAtIGlzb2xhdGVcbiAgICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICAgIGBgYFxuICAgKlxuICAgKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAgICpcbiAgICAgYGBgXG4gICAgIC0gJHJvb3RTY29wZVxuICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICAgIC0gaXNvbGF0ZVxuICAgICBgYGBcbiAgICpcbiAgICpcbiAgICogIyMjIEF0dHJpYnV0ZXNcbiAgICpcbiAgICogVGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyBBdHRyaWJ1dGVzfSBvYmplY3QgLSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlXG4gICAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICAgKlxuICAgKiAqICpBY2Nlc3Npbmcgbm9ybWFsaXplZCBhdHRyaWJ1dGUgbmFtZXM6KiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6XG4gICAqICAgJ25nOmJpbmQnLCBgZGF0YS1uZy1iaW5kYCwgb3IgJ3gtbmctYmluZCcuIFRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzXG4gICAqICAgdG8gdGhlIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAgICogICBvYmplY3Qgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgYXR0cmlidXRlcyBvYmplY3QgYXMgaW50ZXIgZGlyZWN0aXZlXG4gICAqICAgY29tbXVuaWNhdGlvbi5cbiAgICpcbiAgICogKiAqU3VwcG9ydHMgaW50ZXJwb2xhdGlvbjoqIEludGVycG9sYXRpb24gYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgdG8gdGhlIGF0dHJpYnV0ZSBvYmplY3RcbiAgICogICBhbGxvd2luZyBvdGhlciBkaXJlY3RpdmVzIHRvIHJlYWQgdGhlIGludGVycG9sYXRlZCB2YWx1ZS5cbiAgICpcbiAgICogKiAqT2JzZXJ2aW5nIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzOiogVXNlIGAkb2JzZXJ2ZWAgdG8gb2JzZXJ2ZSB0aGUgdmFsdWUgY2hhbmdlcyBvZiBhdHRyaWJ1dGVzXG4gICAqICAgdGhhdCBjb250YWluIGludGVycG9sYXRpb24gKGUuZy4gYHNyYz1cInt7YmFyfX1cImApLiBOb3Qgb25seSBpcyB0aGlzIHZlcnkgZWZmaWNpZW50IGJ1dCBpdCdzIGFsc29cbiAgICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICAgKiAgIC8vIGdldCB0aGUgYXR0cmlidXRlIHZhbHVlXG4gICAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gICAqXG4gICAqICAgLy8gY2hhbmdlIHRoZSBhdHRyaWJ1dGVcbiAgICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICAgKlxuICAgKiAgIC8vIG9ic2VydmUgY2hhbmdlcyB0byBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlXG4gICAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTtcbiAgICogICB9KTtcbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogIyMgRXhhbXBsZVxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gICAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY29tcGlsZUV4YW1wbGVcIiBuYW1lPVwiY29tcGlsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NvbXBpbGVFeGFtcGxlJywgW10sIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHtcbiAgICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZVxuICAgICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgnY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kZXZhbChhdHRycy5jb21waWxlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET01cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG4gIFxuICAgICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBvbmx5IGNvbXBpbGUgLmNoaWxkTm9kZXMgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzXG4gICAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JztcbiAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHcmVldGVyQ29udHJvbGxlclwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImh0bWxcIj48L3RleHRhcmVhPiA8YnIvPlxuICAgICAgICA8ZGl2IGNvbXBpbGU9XCJodG1sXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciB0ZXh0YXJlYSA9ICQoJ3RleHRhcmVhJyk7XG4gICAgICAgICB2YXIgb3V0cHV0ID0gJCgnZGl2W2NvbXBpbGVdJyk7XG4gICAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnSGVsbG8gQW5ndWxhcicpO1xuICAgICAgICAgdGV4dGFyZWEuY2xlYXIoKTtcbiAgICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0JlKCdBbmd1bGFyIScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gIFxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAgICogICBlLmcuIHdpbGwgbm90IHVzZSB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSBwYXNzIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGFzIGFcbiAgICogICBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4UHJpb3JpdHkgb25seSBhcHBseSBkaXJlY3RpdmVzIGxvd2VyIHRoYW4gZ2l2ZW4gcHJpb3JpdHkgKE9ubHkgZWZmZWN0cyB0aGVcbiAgICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oc2NvcGUsIGNsb25lQXR0YWNoRm49LCBvcHRpb25zPSl9IGEgbGluayBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGJpbmQgdGVtcGxhdGVcbiAgICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6XG4gICAqXG4gICAqICAqIGBzY29wZWAgLSBBIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSB0byBiaW5kIHRvLlxuICAgKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGVcbiAgICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAgICogIGNsb25lZCBlbGVtZW50cyB0byB0aGUgRE9NIGRvY3VtZW50IGF0IHRoZSBhcHByb3ByaWF0ZSBwbGFjZS4gVGhlIGBjbG9uZUF0dGFjaEZuYCBpc1xuICAgKiAgY2FsbGVkIGFzOiA8YnIvPiBgY2xvbmVBdHRhY2hGbihjbG9uZWRFbGVtZW50LCBzY29wZSlgIHdoZXJlOlxuICAgKlxuICAgKiAgICAgICogYGNsb25lZEVsZW1lbnRgIC0gaXMgYSBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgYGVsZW1lbnRgIHBhc3NlZCBpbnRvIHRoZSBjb21waWxlci5cbiAgICogICAgICAqIGBzY29wZWAgLSBpcyB0aGUgY3VycmVudCBzY29wZSB3aXRoIHdoaWNoIHRoZSBsaW5raW5nIGZ1bmN0aW9uIGlzIHdvcmtpbmcgd2l0aC5cbiAgICpcbiAgICogICogYG9wdGlvbnNgIC0gQW4gb3B0aW9uYWwgb2JqZWN0IGhhc2ggd2l0aCBsaW5raW5nIG9wdGlvbnMuIElmIGBvcHRpb25zYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgZm9sbG93aW5nXG4gICAqICBrZXlzIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgbGlua2luZyBiZWhhdmlvcjpcbiAgICpcbiAgICogICAgICAqIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgLSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBtYWRlIGF2YWlsYWJsZSB0b1xuICAgKiAgICAgICAgZGlyZWN0aXZlczsgaWYgZ2l2ZW4sIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGxpbmsgZnVuY3Rpb25zIG9mXG4gICAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gICAqICAgICAgKiBgdHJhbnNjbHVkZUNvbnRyb2xsZXJzYCAtIGFuIG9iamVjdCBoYXNoIHdpdGgga2V5cyB0aGF0IG1hcCBjb250cm9sbGVyIG5hbWVzXG4gICAqICAgICAgICB0byBhIGhhc2ggd2l0aCB0aGUga2V5IGBpbnN0YW5jZWAsIHdoaWNoIG1hcHMgdG8gdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2U7XG4gICAqICAgICAgICBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVycyBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyBvbiB0aGUgY29tcGlsZU5vZGU6XG4gICAqICAgICAgICBgYGBcbiAgICogICAgICAgIHtcbiAgICogICAgICAgICAgcGFyZW50OiB7XG4gICAqICAgICAgICAgICAgaW5zdGFuY2U6IHBhcmVudENvbnRyb2xsZXJJbnN0YW5jZVxuICAgKiAgICAgICAgICB9XG4gICAqICAgICAgICB9XG4gICAqICAgICAgICBgYGBcbiAgICogICAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAtIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lQXR0YWNoRm5gIHdpbGwgYWRkXG4gICAqICAgICAgICB0aGUgY2xvbmVkIGVsZW1lbnRzOyBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sXG4gICAqICAgICAgICBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpLiBTZWUgYWxzbyB0aGUgZGlyZWN0aXZlLmNvbnRyb2xsZXIgcHJvcGVydHkuXG4gICAqXG4gICAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAgICogZWxlbWVudCBwYXNzZWQgaW4sIG9yIHRoZSBjbG9uZSBvZiB0aGUgZWxlbWVudCBpZiB0aGUgYGNsb25lQXR0YWNoRm5gIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gICAqIEFuZ3VsYXIgYXV0b21hdGljYWxseS5cbiAgICpcbiAgICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gICAqXG4gICAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKVxuICAgKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gICAqICAgYGBganNcbiAgICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7XG4gICAqICAgYGBgXG4gICAqXG4gICAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsXG4gICAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gICAqICAgdGhpcyBjYXNlLCB5b3UgY2FuIGFjY2VzcyB0aGUgY2xvbmUgdmlhIHRoZSBjbG9uZUF0dGFjaEZuOlxuICAgKiAgIGBgYGpzXG4gICAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gICAqICAgICAgICAgc2NvcGUgPSAuLi4uO1xuICAgKlxuICAgKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICAgKiAgICAgICAvL2F0dGFjaCB0aGUgY2xvbmUgdG8gRE9NIGRvY3VtZW50IGF0IHRoZSByaWdodCBwbGFjZVxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqICAgICAvL25vdyB3ZSBoYXZlIHJlZmVyZW5jZSB0byB0aGUgY2xvbmVkIERPTSB2aWEgYGNsb25lZEVsZW1lbnRgXG4gICAqICAgYGBgXG4gICAqXG4gICAqXG4gICAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXG4gICAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAgICpcbiAgICogQGtub3duSXNzdWVcbiAgICpcbiAgICogIyMjIERvdWJsZSBDb21waWxhdGlvblxuICAgKlxuICAgICBEb3VibGUgY29tcGlsYXRpb24gb2NjdXJzIHdoZW4gYW4gYWxyZWFkeSBjb21waWxlZCBwYXJ0IG9mIHRoZSBET00gZ2V0c1xuICAgICBjb21waWxlZCBhZ2Fpbi4gVGhpcyBpcyBhbiB1bmRlc2lyZWQgZWZmZWN0IGFuZCBjYW4gbGVhZCB0byBtaXNiZWhhdmluZyBkaXJlY3RpdmVzLCBwZXJmb3JtYW5jZSBpc3N1ZXMsXG4gICAgIGFuZCBtZW1vcnkgbGVha3MuIFJlZmVyIHRvIHRoZSBDb21waWxlciBHdWlkZSB7QGxpbmsgZ3VpZGUvY29tcGlsZXIjZG91YmxlLWNvbXBpbGF0aW9uLWFuZC1ob3ctdG8tYXZvaWQtaXRcbiAgICAgc2VjdGlvbiBvbiBkb3VibGUgY29tcGlsYXRpb259IGZvciBhbiBpbi1kZXB0aCBleHBsYW5hdGlvbiBhbmQgd2F5cyB0byBhdm9pZCBpdC5cbiAgICpcbiAgICovXG5cbiAgdmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4gIGZ1bmN0aW9uIFVOSU5JVElBTElaRURfVkFMVUUoKSB7fVxuICB2YXIgX1VOSU5JVElBTElaRURfVkFMVUUgPSBuZXcgVU5JTklUSUFMSVpFRF9WQUxVRSgpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvdmlkZXJcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICovXG4gICRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG4gIC8qKiBAdGhpcyAqL1xuICBmdW5jdGlvbiAkQ29tcGlsZVByb3ZpZGVyKCRwcm92aWRlLCAkJHNhbml0aXplVXJpUHJvdmlkZXIpIHtcbiAgICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxuICAgICAgICBTdWZmaXggPSAnRGlyZWN0aXZlJyxcbiAgICAgICAgQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQID0gL15cXHMqZGlyZWN0aXZlOlxccyooW1xcdy1dKylcXHMrKC4qKSQvLFxuICAgICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcdy1dKykoPzo6KFteO10rKSk/Oz8pLyxcbiAgICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlMgPSBtYWtlTWFwKCduZ1NyYyxuZ1NyY3NldCxzcmMsc3Jjc2V0JyksXG4gICAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxcXlxcXj8pPyhcXD8pPyhcXF5cXF4/KT8pPy87XG5cbiAgICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgICAvLyBUaGUgYXNzdW1wdGlvbiBpcyB0aGF0IGZ1dHVyZSBET00gZXZlbnQgYXR0cmlidXRlIG5hbWVzIHdpbGwgYmVnaW4gd2l0aFxuICAgIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLlxuICAgIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcbiAgICB2YXIgYmluZGluZ0NhY2hlID0gY3JlYXRlTWFwKCk7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb2xhdGVCaW5kaW5ncyhzY29wZSwgZGlyZWN0aXZlTmFtZSwgaXNDb250cm9sbGVyKSB7XG4gICAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAJjxdfD0oXFwqPykpKFxcPz8pXFxzKihbXFx3JF0qKVxccyokLztcblxuICAgICAgdmFyIGJpbmRpbmdzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uIChkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgaWYgKGRlZmluaXRpb24gaW4gYmluZGluZ0NhY2hlKSB7XG4gICAgICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IGJpbmRpbmdDYWNoZVtkZWZpbml0aW9uXTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaXNjcCcsICdJbnZhbGlkIHszfSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJy4nICsgJyBEZWZpbml0aW9uOiB7Li4uIHsxfTogXFwnezJ9XFwnIC4uLn0nLCBkaXJlY3RpdmVOYW1lLCBzY29wZU5hbWUsIGRlZmluaXRpb24sIGlzQ29udHJvbGxlciA/ICdjb250cm9sbGVyIGJpbmRpbmdzIGRlZmluaXRpb24nIDogJ2lzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHtcbiAgICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgICBjb2xsZWN0aW9uOiBtYXRjaFsyXSA9PT0gJyonLFxuICAgICAgICAgIG9wdGlvbmFsOiBtYXRjaFszXSA9PT0gJz8nLFxuICAgICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgYmluZGluZ0NhY2hlW2RlZmluaXRpb25dID0gYmluZGluZ3Nbc2NvcGVOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiaW5kaW5ncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgICAgdmFyIGJpbmRpbmdzID0ge1xuICAgICAgICBpc29sYXRlU2NvcGU6IG51bGwsXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG51bGxcbiAgICAgIH07XG4gICAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgICBpZiAoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgPT09IHRydWUpIHtcbiAgICAgICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLCBkaXJlY3RpdmVOYW1lLCB0cnVlKTtcbiAgICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuc2NvcGUsIGRpcmVjdGl2ZU5hbWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyKSkge1xuICAgICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIsIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgJiYgIWRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbnRyb2xsZXJcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vY3RybCcsICdDYW5ub3QgYmluZCB0byBjb250cm9sbGVyIHdpdGhvdXQgZGlyZWN0aXZlIFxcJ3swfVxcJ3MgY29udHJvbGxlci4nLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5kaW5ncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSkge1xuICAgICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgICAgaWYgKCFsZXR0ZXIgfHwgbGV0dGVyICE9PSBsb3dlcmNhc2UobGV0dGVyKSkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignYmFkZGlyJywgJ0RpcmVjdGl2ZS9Db21wb25lbnQgbmFtZSBcXCd7MH1cXCcgaXMgaW52YWxpZC4gVGhlIGZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbG93ZXJjYXNlIGxldHRlcicsIG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT09IG5hbWUudHJpbSgpKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgbmFtZSBzaG91bGQgbm90IGNvbnRhaW4gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlcycsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERpcmVjdGl2ZVJlcXVpcmUoZGlyZWN0aXZlKSB7XG4gICAgICB2YXIgcmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lO1xuXG4gICAgICBpZiAoIWlzQXJyYXkocmVxdWlyZSkgJiYgaXNPYmplY3QocmVxdWlyZSkpIHtcbiAgICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBpZiAoIW5hbWUpIHJlcXVpcmVba2V5XSA9IG1hdGNoWzBdICsga2V5O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcXVpcmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlUmVzdHJpY3QocmVzdHJpY3QsIG5hbWUpIHtcbiAgICAgIGlmIChyZXN0cmljdCAmJiAhKGlzU3RyaW5nKHJlc3RyaWN0KSAmJiAvW0VBQ01dLy50ZXN0KHJlc3RyaWN0KSkpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZHJlc3RyaWN0JywgJ1Jlc3RyaWN0IHByb3BlcnR5IFxcJ3swfVxcJyBvZiBkaXJlY3RpdmUgXFwnezF9XFwnIGlzIGludmFsaWQnLCByZXN0cmljdCwgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN0cmljdCB8fCAnRUEnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZWdpc3RlciBhIG5ldyBkaXJlY3RpdmUgd2l0aCB0aGUgY29tcGlsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgICAqICAgIHdpbGwgbWF0Y2ggYXMgPGNvZGU+bmctYmluZDwvY29kZT4pLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlIGtleXMgYXJlIHRoZVxuICAgICAqICAgIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlIHRoZVxuICAgICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfSBhbmQgdGhlIHtAbGluayAkY29tcGlsZSBjb21waWxlIEFQSX0gZm9yIG1vcmUgaW5mby5cbiAgICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7XG4gICAgICBhc3NlcnRBcmcobmFtZSwgJ25hbWUnKTtcbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTtcbiAgICAgIGlmIChpc1N0cmluZyhuYW1lKSkge1xuICAgICAgICBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlRmFjdG9yeScpO1xuICAgICAgICBpZiAoIWhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XG4gICAgICAgICAgJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgU3VmZml4LCBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uICgkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbiAoZGlyZWN0aXZlRmFjdG9yeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuY29tcGlsZSA9IHZhbHVlRm4oZGlyZWN0aXZlLmxpbmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZ2V0RGlyZWN0aXZlUmVzdHJpY3QoZGlyZWN0aXZlLnJlc3RyaWN0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRtb2R1bGVOYW1lID0gZGlyZWN0aXZlRmFjdG9yeS4kJG1vZHVsZU5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICAgICAgICB9XSk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50XG4gICAgICogQG1vZHVsZSBuZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWxDYXNlIChpLmUuIGBteUNvbXBgIHdoaWNoIHdpbGwgbWF0Y2ggYDxteS1jb21wPmApLFxuICAgICAqICAgIG9yIGFuIG9iamVjdCBtYXAgb2YgY29tcG9uZW50cyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29tcG9uZW50IGRlZmluaXRpb24gb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3QgKGEgc2ltcGxpZmllZFxuICAgICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSksXG4gICAgICogICAgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgKGFsbCBvcHRpb25hbCk6XG4gICAgICpcbiAgICAgKiAgICAtIGBjb250cm9sbGVyYCDigJMgYHsoc3RyaW5nfGZ1bmN0aW9uKCk9fWAg4oCTIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmVcbiAgICAgKiAgICAgIGFzc29jaWF0ZWQgd2l0aCBuZXdseSBjcmVhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEge0BsaW5rIG5nLiRjb21waWxlIy1jb250cm9sbGVyLVxuICAgICAqICAgICAgcmVnaXN0ZXJlZCBjb250cm9sbGVyfSBpZiBwYXNzZWQgYXMgYSBzdHJpbmcuIEFuIGVtcHR5IGBub29wYCBmdW5jdGlvbiBieSBkZWZhdWx0LlxuICAgICAqICAgIC0gYGNvbnRyb2xsZXJBc2Ag4oCTIGB7c3RyaW5nPX1gIOKAkyBpZGVudGlmaWVyIG5hbWUgZm9yIHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbGxlciBpbiB0aGUgY29tcG9uZW50J3Mgc2NvcGUuXG4gICAgICogICAgICBJZiBwcmVzZW50LCB0aGUgY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCB0byBzY29wZSB1bmRlciB0aGUgYGNvbnRyb2xsZXJBc2AgbmFtZS5cbiAgICAgKiAgICAgIElmIG5vdCBwcmVzZW50LCB0aGlzIHdpbGwgZGVmYXVsdCB0byBiZSBgJGN0cmxgLlxuICAgICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogICAgICByZXR1cm5zIGFuIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgd2hpY2ggc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGNvbnRlbnRzIG9mIHRoaXMgY29tcG9uZW50LlxuICAgICAqICAgICAgRW1wdHkgc3RyaW5nIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiAgICAgIElmIGB0ZW1wbGF0ZWAgaXMgYSBmdW5jdGlvbiwgdGhlbiBpdCBpcyB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdGVkfSB3aXRoXG4gICAgICogICAgICB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAgICAgKlxuICAgICAqICAgICAgLSBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gICAgICogICAgICAtIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgKlxuICAgICAqICAgIC0gYHRlbXBsYXRlVXJsYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIHBhdGggb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcGF0aCB0byBhbiBodG1sXG4gICAgICogICAgICB0ZW1wbGF0ZSB0aGF0IHNob3VsZCBiZSB1c2VkICBhcyB0aGUgY29udGVudHMgb2YgdGhpcyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiAgICAgIElmIGB0ZW1wbGF0ZVVybGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBpdCBpcyB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdGVkfSB3aXRoXG4gICAgICogICAgICB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAgICAgKlxuICAgICAqICAgICAgLSBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gICAgICogICAgICAtIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgKlxuICAgICAqICAgIC0gYGJpbmRpbmdzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGRlZmluZXMgYmluZGluZ3MgYmV0d2VlbiBET00gYXR0cmlidXRlcyBhbmQgY29tcG9uZW50IHByb3BlcnRpZXMuXG4gICAgICogICAgICBDb21wb25lbnQgcHJvcGVydGllcyBhcmUgYWx3YXlzIGJvdW5kIHRvIHRoZSBjb21wb25lbnQgY29udHJvbGxlciBhbmQgbm90IHRvIHRoZSBzY29wZS5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGBiaW5kVG9Db250cm9sbGVyYH0uXG4gICAgICogICAgLSBgdHJhbnNjbHVkZWAg4oCTIGB7Ym9vbGVhbj19YCDigJMgd2hldGhlciB7QGxpbmsgJGNvbXBpbGUjdHJhbnNjbHVzaW9uIGNvbnRlbnQgdHJhbnNjbHVzaW9ufSBpcyBlbmFibGVkLlxuICAgICAqICAgICAgRGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKiAgICAtIGByZXF1aXJlYCAtIGB7T2JqZWN0PHN0cmluZywgc3RyaW5nPj19YCAtIHJlcXVpcmVzIHRoZSBjb250cm9sbGVycyBvZiBvdGhlciBkaXJlY3RpdmVzIGFuZCBiaW5kcyB0aGVtIHRvXG4gICAgICogICAgICB0aGlzIGNvbXBvbmVudCdzIGNvbnRyb2xsZXIuIFRoZSBvYmplY3Qga2V5cyBzcGVjaWZ5IHRoZSBwcm9wZXJ0eSBuYW1lcyB1bmRlciB3aGljaCB0aGUgcmVxdWlyZWRcbiAgICAgKiAgICAgIGNvbnRyb2xsZXJzIChvYmplY3QgdmFsdWVzKSB3aWxsIGJlIGJvdW5kLiBTZWUge0BsaW5rIG5nLiRjb21waWxlIy1yZXF1aXJlLSBgcmVxdWlyZWB9LlxuICAgICAqICAgIC0gYCQuLi5gIOKAkyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYXR0YWNoIHRvIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2xsZXJcbiAgICAgKiAgICAgIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiAoVGhpcyBpcyB1c2VkIGJ5IHRoZSBjb21wb25lbnQgcm91dGVyIHRvIGFubm90YXRlKVxuICAgICAqXG4gICAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IHRoZSBjb21waWxlIHByb3ZpZGVyIGl0c2VsZiwgZm9yIGNoYWluaW5nIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJlZ2lzdGVyIGEgKipjb21wb25lbnQgZGVmaW5pdGlvbioqIHdpdGggdGhlIGNvbXBpbGVyLiBUaGlzIGlzIGEgc2hvcnRoYW5kIGZvciByZWdpc3RlcmluZyBhIHNwZWNpYWxcbiAgICAgKiB0eXBlIG9mIGRpcmVjdGl2ZSwgd2hpY2ggcmVwcmVzZW50cyBhIHNlbGYtY29udGFpbmVkIFVJIGNvbXBvbmVudCBpbiB5b3VyIGFwcGxpY2F0aW9uLiBTdWNoIGNvbXBvbmVudHNcbiAgICAgKiBhcmUgYWx3YXlzIGlzb2xhdGVkIChpLmUuIGBzY29wZToge31gKSBhbmQgYXJlIGFsd2F5cyByZXN0cmljdGVkIHRvIGVsZW1lbnRzIChpLmUuIGByZXN0cmljdDogJ0UnYCkuXG4gICAgICpcbiAgICAgKiBDb21wb25lbnQgZGVmaW5pdGlvbnMgYXJlIHZlcnkgc2ltcGxlIGFuZCBkbyBub3QgcmVxdWlyZSBhcyBtdWNoIGNvbmZpZ3VyYXRpb24gYXMgZGVmaW5pbmcgZ2VuZXJhbFxuICAgICAqIGRpcmVjdGl2ZXMuIENvbXBvbmVudCBkZWZpbml0aW9ucyB1c3VhbGx5IGNvbnNpc3Qgb25seSBvZiBhIHRlbXBsYXRlIGFuZCBhIGNvbnRyb2xsZXIgYmFja2luZyBpdC5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRlZmluaXRpb24gZWFzaWVyLCBjb21wb25lbnRzIGVuZm9yY2UgYmVzdCBwcmFjdGljZXMgbGlrZSB1c2Ugb2YgYGNvbnRyb2xsZXJBc2AsXG4gICAgICogYGJpbmRUb0NvbnRyb2xsZXJgLiBUaGV5IGFsd2F5cyBoYXZlICoqaXNvbGF0ZSBzY29wZSoqIGFuZCBhcmUgcmVzdHJpY3RlZCB0byBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEhlcmUgYXJlIGEgZmV3IGV4YW1wbGVzIG9mIGhvdyB5b3Ugd291bGQgdXN1YWxseSBkZWZpbmUgY29tcG9uZW50czpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgbXlNb2QgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICAgICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAgICogICAgIHRlbXBsYXRlOiAnPGRpdj5NeSBuYW1lIGlzIHt7JGN0cmwubmFtZX19PC9kaXY+JyxcbiAgICAgKiAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICogICAgICAgdGhpcy5uYW1lID0gJ3NoYWhhcic7XG4gICAgICogICAgIH1cbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICBteU1vZC5jb21wb25lbnQoJ215Q29tcCcsIHtcbiAgICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgICAqICAgICBiaW5kaW5nczoge25hbWU6ICdAJ31cbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICBteU1vZC5jb21wb25lbnQoJ215Q29tcCcsIHtcbiAgICAgKiAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9teS1jb21wLmh0bWwnLFxuICAgICAqICAgICBjb250cm9sbGVyOiAnTXlDdHJsJyxcbiAgICAgKiAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICogICAgIGJpbmRpbmdzOiB7bmFtZTogJ0AnfVxuICAgICAqICAgfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBGb3IgbW9yZSBleGFtcGxlcywgYW5kIGFuIGluLWRlcHRoIGd1aWRlLCBzZWUgdGhlIHtAbGluayBndWlkZS9jb21wb25lbnQgY29tcG9uZW50IGd1aWRlfS5cbiAgICAgKlxuICAgICAqIDxiciAvPlxuICAgICAqIFNlZSBhbHNvIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgKi9cbiAgICB0aGlzLmNvbXBvbmVudCA9IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKGJpbmQodGhpcywgcmVnaXN0ZXJDb21wb25lbnQpKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udHJvbGxlciA9IG9wdGlvbnMuY29udHJvbGxlciB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgZnVuY3Rpb24gZmFjdG9yeSgkaW5qZWN0b3IpIHtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUluamVjdGFibGUoZm4pIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikgfHwgaXNBcnJheShmbikpIHtcbiAgICAgICAgICAgIHJldHVybiAoLyoqIEB0aGlzICovZnVuY3Rpb24gKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGluamVjdG9yLmludm9rZShmbiwgdGhpcywgeyAkZWxlbWVudDogdEVsZW1lbnQsICRhdHRyczogdEF0dHJzIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXBsYXRlID0gIW9wdGlvbnMudGVtcGxhdGUgJiYgIW9wdGlvbnMudGVtcGxhdGVVcmwgPyAnJyA6IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgICAgIHZhciBkZG8gPSB7XG4gICAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICAgICAgICBjb250cm9sbGVyQXM6IGlkZW50aWZpZXJGb3JDb250cm9sbGVyKG9wdGlvbnMuY29udHJvbGxlcikgfHwgb3B0aW9ucy5jb250cm9sbGVyQXMgfHwgJyRjdHJsJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogbWFrZUluamVjdGFibGUodGVtcGxhdGUpLFxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBtYWtlSW5qZWN0YWJsZShvcHRpb25zLnRlbXBsYXRlVXJsKSxcbiAgICAgICAgICB0cmFuc2NsdWRlOiBvcHRpb25zLnRyYW5zY2x1ZGUsXG4gICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG9wdGlvbnMuYmluZGluZ3MgfHwge30sXG4gICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICByZXF1aXJlOiBvcHRpb25zLnJlcXVpcmVcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDb3B5IGFubm90YXRpb25zIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIERET1xuICAgICAgICBmb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcpIGRkb1trZXldID0gdmFsO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGRvO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKHBldGUpIHJlbW92ZSB0aGUgZm9sbG93aW5nIGBmb3JFYWNoYCBiZWZvcmUgd2UgcmVsZWFzZSAxLjYuMFxuICAgICAgLy8gVGhlIGNvbXBvbmVudC1yb3V0ZXJAMC4yLjAgbG9va3MgZm9yIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvclxuICAgICAgLy8gTm90aGluZyBpbiBBbmd1bGFyIGxvb2tzIGZvciBhbm5vdGF0aW9ucyBvbiB0aGUgZmFjdG9yeSBmdW5jdGlvbiBidXQgd2UgY2FuJ3QgcmVtb3ZlXG4gICAgICAvLyBpdCBmcm9tIDEuNS54IHlldC5cblxuICAgICAgLy8gQ29weSBhbnkgYW5ub3RhdGlvbiBwcm9wZXJ0aWVzIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIGZhY3RvcnkgYW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb25zXG4gICAgICAvLyBUaGVzZSBjb3VsZCBiZSB1c2VkIGJ5IGxpYnJhcmllcyBzdWNoIGFzIHRoZSBuZXcgY29tcG9uZW50IHJvdXRlclxuICAgICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbiAodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJykge1xuICAgICAgICAgIGZhY3Rvcnlba2V5XSA9IHZhbDtcbiAgICAgICAgICAvLyBEb24ndCB0cnkgdG8gY29weSBvdmVyIGFubm90YXRpb25zIHRvIG5hbWVkIGNvbnRyb2xsZXJcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVyKSkgY29udHJvbGxlcltrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZmFjdG9yeS4kaW5qZWN0ID0gWyckaW5qZWN0b3InXTtcblxuICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlKG5hbWUsIGZhY3RvcnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAgICogdXJscyBkdXJpbmcgYVtocmVmXSBzYW5pdGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50aW5nIFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgICAqXG4gICAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAgICovXG4gICAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2ltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgICAqXG4gICAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICAgKlxuICAgICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAgICovXG4gICAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAgJGNvbXBpbGVQcm92aWRlciNkZWJ1Z0luZm9FbmFibGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZSBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZVxuICAgICAqIGN1cnJlbnQgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZVxuICAgICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAgICpcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBlbmFibGUvZGlzYWJsZSB2YXJpb3VzIGRlYnVnIHJ1bnRpbWUgaW5mb3JtYXRpb24gaW4gdGhlIGNvbXBpbGVyIHN1Y2ggYXMgYWRkaW5nXG4gICAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgICAqIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGFkZCB0aGUgZm9sbG93aW5nIHRvIERPTSBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBib3VuZCB0byB0aGUgc2NvcGVcbiAgICAgKiAqIGBuZy1iaW5kaW5nYCBDU1MgY2xhc3NcbiAgICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAgICpcbiAgICAgKiBZb3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGlzIGluIHByb2R1Y3Rpb24gZm9yIGEgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgYm9vc3QuIFNlZVxuICAgICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAgICovXG4gICAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuZGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGVuYWJsZWQpKSB7XG4gICAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgICRjb21waWxlUHJvdmlkZXIjcHJlQXNzaWduQmluZGluZ3NFbmFibGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAgICogY3VycmVudCBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgc3RhdGVcbiAgICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgICAqXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlL2Rpc2FibGUgd2hldGhlciBkaXJlY3RpdmUgY29udHJvbGxlcnMgYXJlIGFzc2lnbmVkIGJpbmRpbmdzIGJlZm9yZVxuICAgICAqIGNhbGxpbmcgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3Rvci5cbiAgICAgKiBJZiBlbmFibGVkICh0cnVlKSwgdGhlIGNvbXBpbGVyIGFzc2lnbnMgdGhlIHZhbHVlIG9mIGVhY2ggb2YgdGhlIGJpbmRpbmdzIHRvIHRoZVxuICAgICAqIHByb3BlcnRpZXMgb2YgdGhlIGNvbnRyb2xsZXIgb2JqZWN0IGJlZm9yZSB0aGUgY29uc3RydWN0b3Igb2YgdGhpcyBvYmplY3QgaXMgY2FsbGVkLlxuICAgICAqXG4gICAgICogSWYgZGlzYWJsZWQgKGZhbHNlKSwgdGhlIGNvbXBpbGVyIGNhbGxzIHRoZSBjb25zdHJ1Y3RvciBmaXJzdCBiZWZvcmUgYXNzaWduaW5nIGJpbmRpbmdzLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIHNpbmNlVmVyc2lvbj1cIjEuNi4wXCJcbiAgICAgKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgYW5kIHRoZSBvcHRpb24gdG8gYXNzaWduIHRoZSBiaW5kaW5ncyBiZWZvcmUgY2FsbGluZyB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yXG4gICAgICogd2lsbCBiZSByZW1vdmVkIGluIHYxLjcuMC5cbiAgICAgKi9cbiAgICB2YXIgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5wcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgICBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAgJGNvbXBpbGVQcm92aWRlciNzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgdXBkYXRlIHRoZSBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICAgKiBjdXJyZW50IHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCBzdGF0ZVxuICAgICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAgICpcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBlbmFibGUvZGlzYWJsZSBzdHJpY3QgY29tcG9uZW50IGJpbmRpbmdzIGNoZWNrLiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBlbmZvcmNlIHRoYXRcbiAgICAgKiBmb3IgYWxsIGJpbmRpbmdzIG9mIGEgY29tcG9uZW50IHRoYXQgYXJlIG5vdCBzZXQgYXMgb3B0aW9uYWwgd2l0aCBgP2AsIGFuIGF0dHJpYnV0ZSBuZWVkcyB0byBiZSBwcm92aWRlZFxuICAgICAqIG9uIHRoZSBjb21wb25lbnQncyBIVE1MIHRhZy5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgICAqL1xuICAgIHZhciBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGVuYWJsZWQpKSB7XG4gICAgICAgIHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZDtcbiAgICB9O1xuXG4gICAgdmFyIFRUTCA9IDEwO1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI29uQ2hhbmdlc1R0bFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGAkb25DaGFuZ2VzYCBob29rcyBjYW4gdHJpZ2dlciBuZXcgY2hhbmdlcyBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICAgICAqIGFzc3VtaW5nIHRoYXQgdGhlIG1vZGVsIGlzIHVuc3RhYmxlLlxuICAgICAqXG4gICAgICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICAgICAqXG4gICAgICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IGRlcGVuZGVuY2llcyBiZXR3ZWVuIGAkb25DaGFuZ2VzYCBob29rcyBhbmQgYmluZGluZ3Mgd2lsbCByZXN1bHRcbiAgICAgKiBpbiBzZXZlcmFsIGl0ZXJhdGlvbnMgb2YgY2FsbHMgdG8gdGhlc2UgaG9va3MuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwXG4gICAgICogaXRlcmF0aW9ucyB0byBzdGFiaWxpemUgdGhlbiB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHdoYXQgaXMgY2F1c2luZyB0aGUgbW9kZWwgdG8gY29udGludW91c2x5IGNoYW5nZSBkdXJpbmdcbiAgICAgKiB0aGUgYCRvbkNoYW5nZXNgIGhvb2sgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogSW5jcmVhc2luZyB0aGUgVFRMIGNvdWxkIGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLCBzbyB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQgd2l0aG91dCBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGAkb25DaGFuZ2VzYCBob29rIGl0ZXJhdGlvbnMuXG4gICAgICogQHJldHVybnMge251bWJlcnxvYmplY3R9IHRoZSBjdXJyZW50IGxpbWl0IChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICAgKi9cbiAgICB0aGlzLm9uQ2hhbmdlc1R0bCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgVFRMID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFRUTDtcbiAgICB9O1xuXG4gICAgdmFyIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHRydWU7XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY29tbWVudERpcmVjdGl2ZXNFbmFibGVkXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAgICogd2hldGhlciBvciBub3QgZGlyZWN0aXZlcyBvbiBjb21tZW50cyBzaG91bGQgYmUgY29tcGlsZWQuXG4gICAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgICAqXG4gICAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIHdpdGggZmFsc2UgZGlzYWJsZXMgdGhlIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXNcbiAgICAgKiBvbiBjb21tZW50cyBmb3IgdGhlIHdob2xlIGFwcGxpY2F0aW9uLlxuICAgICAqIFRoaXMgcmVzdWx0cyBpbiBhIGNvbXBpbGF0aW9uIHBlcmZvcm1hbmNlIGdhaW4sXG4gICAgICogYXMgdGhlIGNvbXBpbGVyIGRvZXNuJ3QgaGF2ZSB0byBjaGVjayBjb21tZW50cyB3aGVuIGxvb2tpbmcgZm9yIGRpcmVjdGl2ZXMuXG4gICAgICogVGhpcyBzaG91bGQgaG93ZXZlciBvbmx5IGJlIHVzZWQgaWYgeW91IGFyZSBzdXJlIHRoYXQgbm8gY29tbWVudCBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAgICogdGhlIGFwcGxpY2F0aW9uIChpbmNsdWRpbmcgYW55IDNyZCBwYXJ0eSBkaXJlY3RpdmVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gY29tbWVudHNcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IHRoZSBjdXJyZW50IHZhbHVlIChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICAgKi9cbiAgICB0aGlzLmNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgICB9O1xuXG4gICAgdmFyIGNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWcgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2Nzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEl0IGluZGljYXRlcyB0byB0aGUgY29tcGlsZXJcbiAgICAgKiB3aGV0aGVyIG9yIG5vdCBkaXJlY3RpdmVzIG9uIGVsZW1lbnQgY2xhc3NlcyBzaG91bGQgYmUgY29tcGlsZWQuXG4gICAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgICAqXG4gICAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIHdpdGggZmFsc2UgZGlzYWJsZXMgdGhlIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXNcbiAgICAgKiBvbiBlbGVtZW50IGNsYXNzZXMgZm9yIHRoZSB3aG9sZSBhcHBsaWNhdGlvbi5cbiAgICAgKiBUaGlzIHJlc3VsdHMgaW4gYSBjb21waWxhdGlvbiBwZXJmb3JtYW5jZSBnYWluLFxuICAgICAqIGFzIHRoZSBjb21waWxlciBkb2Vzbid0IGhhdmUgdG8gY2hlY2sgZWxlbWVudCBjbGFzc2VzIHdoZW4gbG9va2luZyBmb3IgZGlyZWN0aXZlcy5cbiAgICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjbGFzcyBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAgICogdGhlIGFwcGxpY2F0aW9uIChpbmNsdWRpbmcgYW55IDNyZCBwYXJ0eSBkaXJlY3RpdmVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58b2JqZWN0fSB0aGUgY3VycmVudCB2YWx1ZSAob3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlciBmb3IgY2hhaW5pbmcpXG4gICAgICovXG4gICAgdGhpcy5jc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWc7XG4gICAgfTtcblxuICAgIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRpbnRlcnBvbGF0ZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckdGVtcGxhdGVSZXF1ZXN0JywgJyRwYXJzZScsICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsIGZ1bmN0aW9uICgkaW5qZWN0b3IsICRpbnRlcnBvbGF0ZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICR0ZW1wbGF0ZVJlcXVlc3QsICRwYXJzZSwgJGNvbnRyb2xsZXIsICRyb290U2NvcGUsICRzY2UsICRhbmltYXRlLCAkJHNhbml0aXplVXJpKSB7XG5cbiAgICAgIHZhciBTSU1QTEVfQVRUUl9OQU1FID0gL15cXHcvO1xuICAgICAgdmFyIHNwZWNpYWxBdHRySG9sZGVyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICB2YXIgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICAgICAgdmFyIGNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWQgPSBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuXG4gICAgICB2YXIgb25DaGFuZ2VzVHRsID0gVFRMO1xuICAgICAgLy8gVGhlIG9uQ2hhbmdlcyBob29rcyBzaG91bGQgYWxsIGJlIHJ1biB0b2dldGhlciBpbiBhIHNpbmdsZSBkaWdlc3RcbiAgICAgIC8vIFdoZW4gY2hhbmdlcyBvY2N1ciwgdGhlIGNhbGwgdG8gdHJpZ2dlciB0aGVpciBob29rcyB3aWxsIGJlIGFkZGVkIHRvIHRoaXMgcXVldWVcbiAgICAgIHZhciBvbkNoYW5nZXNRdWV1ZTtcblxuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gYSAkJHBvc3REaWdlc3QgdG8gdHJpZ2dlciBhbGwgdGhlIG9uQ2hhbmdlcyBob29rcyBpbiBhIHNpbmdsZSBkaWdlc3RcbiAgICAgIGZ1bmN0aW9uIGZsdXNoT25DaGFuZ2VzUXVldWUoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCEgLS1vbkNoYW5nZXNUdGwpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgaGl0IHRoZSBUVEwgbGltaXQgc28gcmVzZXQgZXZlcnl0aGluZ1xuICAgICAgICAgICAgb25DaGFuZ2VzUXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaW5mY2huZycsICd7MH0gJG9uQ2hhbmdlcygpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJywgVFRMKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gV2UgbXVzdCBydW4gdGhpcyBob29rIGluIGFuIGFwcGx5IHNpbmNlIHRoZSAkJHBvc3REaWdlc3QgcnVucyBvdXRzaWRlIGFwcGx5XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gb25DaGFuZ2VzUXVldWUubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlW2ldKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHF1ZXVlIHRvIHRyaWdnZXIgYSBuZXcgc2NoZWR1bGUgbmV4dCB0aW1lIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRocm93IGVycm9ycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBvbkNoYW5nZXNUdGwrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXNUb0NvcHkpO1xuICAgICAgICAgIHZhciBpLCBsLCBrZXk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJGF0dHIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJCRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgQXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRub3JtYWxpemVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENvbnZlcnRzIGFuIGF0dHJpYnV0ZSBuYW1lIChlLmcuIGRhc2gvY29sb24vdW5kZXJzY29yZS1kZWxpbWl0ZWQgc3RyaW5nLCBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYHgtYCBvclxuICAgICAgICAgKiBgZGF0YS1gKSB0byBpdHMgbm9ybWFsaXplZCwgY2FtZWxDYXNlIGZvcm0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIGNoZWNrIG91dCB0aGUgZ3VpZGUgb24ge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNtYXRjaGluZy1kaXJlY3RpdmVzIE1hdGNoaW5nIERpcmVjdGl2ZXN9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gICAgICAgICAqL1xuICAgICAgICAkbm9ybWFsaXplOiBkaXJlY3RpdmVOb3JtYWxpemUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBBZGRzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgdG8gdGhlIGVsZW1lbnQuIElmIGFuaW1hdGlvbnNcbiAgICAgICAgICogYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyBhZGRpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICAkYWRkQ2xhc3M6IGZ1bmN0aW9uICRhZGRDbGFzcyhjbGFzc1ZhbCkge1xuICAgICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkcmVtb3ZlQ2xhc3NcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJlbW92ZXMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciBmcm9tIHRoZSBlbGVtZW50LiBJZlxuICAgICAgICAgKiBhbmltYXRpb25zIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgcmVtb3ZhbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgJHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAkcmVtb3ZlQ2xhc3MoY2xhc3NWYWwpIHtcbiAgICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlXG4gICAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgICR1cGRhdGVDbGFzczogZnVuY3Rpb24gJHVwZGF0ZUNsYXNzKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7XG4gICAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSB0b2tlbkRpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvUmVtb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlc1xuICAgICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLlxuICAgICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LlxuICAgICAgICAgKi9cbiAgICAgICAgJHNldDogZnVuY3Rpb24gJHNldChrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7XG4gICAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmIFwiY2xhc3NcIlxuICAgICAgICAgIC8vaXMgc2V0IHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgY2F1c2UgJHVwZGF0ZUNsYXNzIHRvXG4gICAgICAgICAgLy9iZWNvbWUgdW5zdGFibGUuXG5cbiAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuJCRlbGVtZW50WzBdLFxuICAgICAgICAgICAgICBib29sZWFuS2V5ID0gZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIGtleSksXG4gICAgICAgICAgICAgIGFsaWFzZWRLZXkgPSBnZXRBbGlhc2VkQXR0ck5hbWUoa2V5KSxcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIgPSBrZXksXG4gICAgICAgICAgICAgIG5vZGVOYW1lO1xuXG4gICAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VkS2V5KSB7XG4gICAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGFsaWFzZWRLZXk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgICAvLyB0cmFuc2xhdGUgbm9ybWFsaXplZCBrZXkgdG8gYWN0dWFsIGtleVxuICAgICAgICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldO1xuICAgICAgICAgICAgaWYgKCFhdHRyTmFtZSkge1xuICAgICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZSA9IHNuYWtlX2Nhc2Uoa2V5LCAnLScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTtcblxuICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ2EnICYmIChrZXkgPT09ICdocmVmJyB8fCBrZXkgPT09ICd4bGlua0hyZWYnKSB8fCBub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykge1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgYVtocmVmXSBhbmQgaW1nW3NyY10gdmFsdWVzXG4gICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyY3NldCcgJiYgaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgaW1nW3NyY3NldF0gdmFsdWVzXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHRoZXJlIGFyZSBzcGFjZXMgYmVjYXVzZSBpdCdzIG5vdCB0aGUgc2FtZSBwYXR0ZXJuXG4gICAgICAgICAgICB2YXIgdHJpbW1lZFNyY3NldCA9IHRyaW0odmFsdWUpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICAgIHZhciBzcmNQYXR0ZXJuID0gLyhcXHMrXFxkK3hcXHMqLHxcXHMrXFxkK3dcXHMqLHxcXHMrLHwsXFxzKykvO1xuICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXFxzLy50ZXN0KHRyaW1tZWRTcmNzZXQpID8gc3JjUGF0dGVybiA6IC8oLCkvO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgICB2YXIgcmF3VXJpcyA9IHRyaW1tZWRTcmNzZXQuc3BsaXQocGF0dGVybik7XG5cbiAgICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlc1xuICAgICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYnJVcmlzV2l0aDJwYXJ0czsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkgKiAyO1xuICAgICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0ocmF3VXJpc1tpbm5lcklkeF0pLCB0cnVlKTtcbiAgICAgICAgICAgICAgLy8gYWRkIHRoZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICAgIHJlc3VsdCArPSAnICcgKyB0cmltKHJhd1VyaXNbaW5uZXJJZHggKyAxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNwbGl0IHRoZSBsYXN0IGl0ZW0gaW50byB1cmkgYW5kIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHZhciBsYXN0VHVwbGUgPSB0cmltKHJhd1VyaXNbaSAqIDJdKS5zcGxpdCgvXFxzLyk7XG5cbiAgICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShsYXN0VHVwbGVbMF0pLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gYW5kIGFkZCB0aGUgbGFzdCBkZXNjcmlwdG9yIGlmIGFueVxuICAgICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9ICcgJyArIHRyaW0obGFzdFR1cGxlWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKFNJTVBMRV9BVFRSX05BTUUudGVzdChhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0U3BlY2lhbEF0dHIodGhpcy4kJGVsZW1lbnRbMF0sIGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IHRoaXMuJCRvYnNlcnZlcnM7XG4gICAgICAgICAgaWYgKCQkb2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkb2JzZXJ2ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogT2JzZXJ2ZXMgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nXG4gICAgICAgICAqIGNvbXBpbGF0aW9uLiBUaGUgb2JzZXJ2ZXIgaXMgdGhlbiBpbnZva2VkIHdoZW5ldmVyIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVcbiAgICAgICAgICogY2hhbmdlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAgICogICAgICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24jaG93LXRleHQtYW5kLWF0dHJpYnV0ZS1iaW5kaW5ncy13b3JrIEludGVycG9sYXRpb25cbiAgICAgICAgICogICAgICAgIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIG9ic2VydmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uICRvYnNlcnZlKGtleSwgZm4pIHtcbiAgICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLFxuICAgICAgICAgICAgICAkJG9ic2VydmVycyA9IGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSxcbiAgICAgICAgICAgICAgbGlzdGVuZXJzID0gJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKTtcblxuICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlciAmJiBhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFpc1VuZGVmaW5lZChhdHRyc1trZXldKSkge1xuICAgICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICAgIGZuKGF0dHJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVycywgZm4pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHNldFNwZWNpYWxBdHRyKGVsZW1lbnQsIGF0dHJOYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBBdHRyaWJ1dGVzIG5hbWVzIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggbGV0dGVycyAoc3VjaCBhcyBgKGNsaWNrKWApIGNhbm5vdCBiZSBzZXQgdXNpbmcgYHNldEF0dHJpYnV0ZWBcbiAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBqdW1wIHRocm91Z2ggc29tZSBob29wcyB0byBnZXQgc3VjaCBhbiBhdHRyaWJ1dGVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzMzE4XG4gICAgICAgIHNwZWNpYWxBdHRySG9sZGVyLmlubmVySFRNTCA9ICc8c3BhbiAnICsgYXR0ck5hbWUgKyAnPic7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3BlY2lhbEF0dHJIb2xkZXIuZmlyc3RDaGlsZC5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1swXTtcbiAgICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZSBmcm9tIGl0cyBjb250YWluZXIgZWxlbWVudCBiZWZvcmUgd2UgY2FuIGFkZCBpdCB0byB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICAgICAgICBhdHRyaWJ1dGVzLnJlbW92ZU5hbWVkSXRlbShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgIGF0dHJpYnV0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBlbGVtZW50LmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtKGF0dHJpYnV0ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAgIC8vIFNWRyBlbGVtZW50LCB3aGVyZSBjbGFzcyBuYW1lIGlzIHJlYWQtb25seS5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgICAgZGVub3JtYWxpemVUZW1wbGF0ZSA9IHN0YXJ0U3ltYm9sID09PSAne3snICYmIGVuZFN5bWJvbCA9PT0gJ319JyA/IGlkZW50aXR5IDogZnVuY3Rpb24gZGVub3JtYWxpemVUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7L2csIHN0YXJ0U3ltYm9sKS5yZXBsYWNlKC99fS9nLCBlbmRTeW1ib2wpO1xuICAgICAgfSxcbiAgICAgICAgICBOR19BVFRSX0JJTkRJTkcgPSAvXm5nQXR0cltBLVpdLztcbiAgICAgIHZhciBNVUxUSV9FTEVNRU5UX0RJUl9SRSA9IC9eKC4rKVN0YXJ0JC87XG5cbiAgICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdJbmZvKCRlbGVtZW50LCBiaW5kaW5nKSB7XG4gICAgICAgIHZhciBiaW5kaW5ncyA9ICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJykgfHwgW107XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHtcbiAgICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnLCBiaW5kaW5ncyk7XG4gICAgICB9IDogbm9vcDtcblxuICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdDbGFzcygkZWxlbWVudCkge1xuICAgICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsICduZy1iaW5kaW5nJyk7XG4gICAgICB9IDogbm9vcDtcblxuICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7XG4gICAgICAgIHZhciBkYXRhTmFtZSA9IGlzb2xhdGVkID8gbm9UZW1wbGF0ZSA/ICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScgOiAnJGlzb2xhdGVTY29wZScgOiAnJHNjb3BlJztcbiAgICAgICAgJGVsZW1lbnQuZGF0YShkYXRhTmFtZSwgc2NvcGUpO1xuICAgICAgfSA6IG5vb3A7XG5cbiAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQpIHtcbiAgICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCBpc29sYXRlZCA/ICduZy1pc29sYXRlLXNjb3BlJyA6ICduZy1zY29wZScpO1xuICAgICAgfSA6IG5vb3A7XG5cbiAgICAgIGNvbXBpbGUuJCRjcmVhdGVDb21tZW50ID0gZnVuY3Rpb24gKGRpcmVjdGl2ZU5hbWUsIGNvbW1lbnQpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSAnJztcbiAgICAgICAgaWYgKGRlYnVnSW5mb0VuYWJsZWQpIHtcbiAgICAgICAgICBjb250ZW50ID0gJyAnICsgKGRpcmVjdGl2ZU5hbWUgfHwgJycpICsgJzogJztcbiAgICAgICAgICBpZiAoY29tbWVudCkgY29udGVudCArPSBjb21tZW50ICsgJyAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBjb21waWxlO1xuXG4gICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICAgIGlmICghKCRjb21waWxlTm9kZXMgaW5zdGFuY2VvZiBqcUxpdGUpKSB7XG4gICAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgICAgLy8gbW9kaWZ5IGl0LlxuICAgICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sICRjb21waWxlTm9kZXMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBwdWJsaWNMaW5rRm4oc2NvcGUsIGNsb25lQ29ubmVjdEZuLCBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKCEkY29tcGlsZU5vZGVzKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbXVsdGlsaW5rJywgJ1RoaXMgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIGxpbmtlZC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcblxuICAgICAgICAgIGlmIChwcmV2aW91c0NvbXBpbGVDb250ZXh0ICYmIHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmVlZHNOZXdTY29wZSkge1xuICAgICAgICAgICAgLy8gQSBwYXJlbnQgZGlyZWN0aXZlIGRpZCBhIHJlcGxhY2UgYW5kIGEgZGlyZWN0aXZlIG9uIHRoaXMgZWxlbWVudCBhc2tlZFxuICAgICAgICAgICAgLy8gZm9yIHRyYW5zY2x1c2lvbiwgd2hpY2ggY2F1c2VkIHVzIHRvIGxvc2UgYSBsYXllciBvZiBlbGVtZW50IG9uIHdoaWNoXG4gICAgICAgICAgICAvLyB3ZSBjb3VsZCBob2xkIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLCBzbyB3ZSB3aWxsIGNyZWF0ZSBpdCBtYW51YWxseVxuICAgICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudC4kbmV3KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgdmFyIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gb3B0aW9ucy5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gb3B0aW9ucy50cmFuc2NsdWRlQ29udHJvbGxlcnMsXG4gICAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBvcHRpb25zLmZ1dHVyZVBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgICAvLyBXaGVuIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgaXMgcGFzc2VkLCBpdCBpcyBhXG4gICAgICAgICAgLy8gYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvbiAoaXQgd2FzIHByZXZpb3VzbHkgcGFzc2VkXG4gICAgICAgICAgLy8gYXMgYHRyYW5zY2x1ZGVgIHRvIGRpcmVjdGl2ZS5saW5rKSBzbyB3ZSBtdXN0IHVud3JhcCBpdCB0byBnZXRcbiAgICAgICAgICAvLyBpdHMgYGJvdW5kVHJhbnNjbHVkZUZuYFxuICAgICAgICAgIGlmIChwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhmdXR1cmVQYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyICRsaW5rTm9kZTtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlICE9PSAnaHRtbCcpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgYSBkaXJlY3RpdmUgd2l0aCByZXBsYWNlOnRydWUgYW5kIHRlbXBsYXRlVXJsIHRoZSAkY29tcGlsZU5vZGVzXG4gICAgICAgICAgICAvLyAob3IgYSBjaGlsZCBlbGVtZW50IGluc2lkZSBvZiB0aGVtKVxuICAgICAgICAgICAgLy8gbWlnaHQgY2hhbmdlLCBzbyB3ZSBuZWVkIHRvIHJlY3JlYXRlIHRoZSBuYW1lc3BhY2UgYWRhcHRlZCBjb21waWxlTm9kZXNcbiAgICAgICAgICAgIC8vIGZvciBjYWxsIHRvIHRoZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFscmVhZHkgY2xvbmUgdGhlIG5vZGVzLi4uXG4gICAgICAgICAgICAkbGlua05vZGUgPSBqcUxpdGUod3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnRcbiAgICAgICAgICAgIC8vIGFuZCBzb21ldGltZXMgY2hhbmdlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBET00uXG4gICAgICAgICAgICAkbGlua05vZGUgPSBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyQnICsgY29udHJvbGxlck5hbWUgKyAnQ29udHJvbGxlcicsIHRyYW5zY2x1ZGVDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGxpbmtOb2RlLCBzY29wZSk7XG5cbiAgICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpO1xuICAgICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIGlmICghY2xvbmVDb25uZWN0Rm4pIHtcbiAgICAgICAgICAgICRjb21waWxlTm9kZXMgPSBjb21wb3NpdGVMaW5rRm4gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJGxpbmtOb2RlO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGRldGVjdCBNYXRoTUwgYXMgd2VsbC4uLlxuICAgICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgcmV0dXJuICdodG1sJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbm9kZU5hbWVfKG5vZGUpICE9PSAnZm9yZWlnbm9iamVjdCcgJiYgdG9TdHJpbmcuY2FsbChub2RlKS5tYXRjaCgvU1ZHLykgPyAnc3ZnJyA6ICdodG1sJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xuICAgICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxuICAgICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nXG4gICAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZVxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlblxuICAgICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xuICAgICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgICAgdmFyIGxpbmtGbnMgPSBbXSxcblxuICAgICAgICAvLyBgbm9kZUxpc3RgIGNhbiBiZSBlaXRoZXIgYW4gZWxlbWVudCdzIGAuY2hpbGROb2Rlc2AgKGxpdmUgTm9kZUxpc3QpXG4gICAgICAgIC8vIG9yIGEganFMaXRlL2pRdWVyeSBjb2xsZWN0aW9uIG9yIGFuIGFycmF5XG4gICAgICAgIG5vdExpdmVMaXN0ID0gaXNBcnJheShub2RlTGlzdCkgfHwgbm9kZUxpc3QgaW5zdGFuY2VvZiBqcUxpdGUsXG4gICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICBub2RlTGlua0ZuLFxuICAgICAgICAgICAgY2hpbGROb2RlcyxcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuLFxuICAgICAgICAgICAgbGlua0ZuRm91bmQsXG4gICAgICAgICAgICBub2RlTGlua0ZuRm91bmQ7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcbiAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciAjMTE3ODEgYW5kICMxNDkyNFxuICAgICAgICAgIGlmIChtc2llID09PSAxMSkge1xuICAgICAgICAgICAgbWVyZ2VDb25zZWN1dGl2ZVRleHROb2Rlcyhub2RlTGlzdCwgaSwgbm90TGl2ZUxpc3QpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIGBub2RlTGlzdFtpXWAgaGVyZWFmdGVyLFxuICAgICAgICAgIC8vIHNpbmNlIHRoZSBub2RlcyBjYW4gYmUgcmVwbGFjZWQgdW5kZXJuZWF0aCB1cy5cbiAgICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PT0gMCA/IG1heFByaW9yaXR5IDogdW5kZWZpbmVkLCBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGRpcmVjdGl2ZXMubGVuZ3RoID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG51bGwsIFtdLCBbXSwgcHJldmlvdXNDb21waWxlQ29udGV4dCkgOiBudWxsO1xuXG4gICAgICAgICAgaWYgKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoYXR0cnMuJCRlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZExpbmtGbiA9IG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fCAhKGNoaWxkTm9kZXMgPSBub2RlTGlzdFtpXS5jaGlsZE5vZGVzKSB8fCAhY2hpbGROb2Rlcy5sZW5ndGggPyBudWxsIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsIG5vZGVMaW5rRm4gPyAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpICYmIG5vZGVMaW5rRm4udHJhbnNjbHVkZSA6IHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbikge1xuICAgICAgICAgICAgbGlua0Zucy5wdXNoKGksIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuKTtcbiAgICAgICAgICAgIGxpbmtGbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIG5vZGVMaW5rRm5Gb3VuZCA9IG5vZGVMaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwXG4gICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXG4gICAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcG9zaXRlTGlua0ZuKHNjb3BlLCBub2RlTGlzdCwgJHJvb3RFbGVtZW50LCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIGlkeCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgICB2YXIgc3RhYmxlTm9kZUxpc3Q7XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbkZvdW5kKSB7XG4gICAgICAgICAgICAvLyBjb3B5IG5vZGVMaXN0IHNvIHRoYXQgaWYgYSBub2RlTGlua0ZuIHJlbW92ZXMgb3IgYWRkcyBhbiBlbGVtZW50IGF0IHRoaXMgRE9NIGxldmVsIG91clxuICAgICAgICAgICAgLy8gb2Zmc2V0cyBkb24ndCBnZXQgc2NyZXdlZCB1cFxuICAgICAgICAgICAgdmFyIG5vZGVMaXN0TGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBuZXcgQXJyYXkobm9kZUxpc3RMZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBzcGFyc2UgYXJyYXkgYnkgb25seSBjb3B5aW5nIHRoZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgbGlua0ZuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlua0Zucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgICBpZHggPSBsaW5rRm5zW2ldO1xuICAgICAgICAgICAgICBzdGFibGVOb2RlTGlzdFtpZHhdID0gbm9kZUxpc3RbaWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBub2RlTGlzdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgICBub2RlID0gc3RhYmxlTm9kZUxpc3RbbGlua0Zuc1tpKytdXTtcbiAgICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTtcblxuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4pIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oanFMaXRlKG5vZGUpLCBjaGlsZFNjb3BlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCAkcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZExpbmtGbikge1xuICAgICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWVyZ2VDb25zZWN1dGl2ZVRleHROb2Rlcyhub2RlTGlzdCwgaWR4LCBub3RMaXZlTGlzdCkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuXG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudCA/IG5vZGUubmV4dFNpYmxpbmcgOiBub2RlTGlzdFtpZHggKyAxXTtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcgfHwgc2libGluZy5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX1RFWFQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGUubm9kZVZhbHVlID0gbm9kZS5ub2RlVmFsdWUgKyBzaWJsaW5nLm5vZGVWYWx1ZTtcblxuICAgICAgICAgIGlmIChzaWJsaW5nLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHNpYmxpbmcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vdExpdmVMaXN0ICYmIHNpYmxpbmcgPT09IG5vZGVMaXN0W2lkeCArIDFdKSB7XG4gICAgICAgICAgICBub2RlTGlzdC5zcGxpY2UoaWR4ICsgMSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgZnVuY3Rpb24gYm91bmRUcmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2NsdWRlZFNjb3BlKSB7XG4gICAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlID0gc2NvcGUuJG5ldyhmYWxzZSwgY29udGFpbmluZ1Njb3BlKTtcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRyYW5zY2x1ZGVGbih0cmFuc2NsdWRlZFNjb3BlLCBjbG9uZUZuLCB7XG4gICAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVyczogY29udHJvbGxlcnMsXG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50OiBmdXR1cmVQYXJlbnRFbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBuZWVkICB0byBhdHRhY2ggdGhlIHRyYW5zY2x1c2lvbiBzbG90cyBvbnRvIHRoZSBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAgIC8vIHNvIHRoYXQgdGhleSBhcmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgICB2YXIgYm91bmRTbG90cyA9IGJvdW5kVHJhbnNjbHVkZUZuLiQkc2xvdHMgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgZm9yICh2YXIgc2xvdE5hbWUgaW4gdHJhbnNjbHVkZUZuLiQkc2xvdHMpIHtcbiAgICAgICAgICBpZiAodHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgICBib3VuZFNsb3RzW3Nsb3ROYW1lXSA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4uJCRzbG90c1tzbG90TmFtZV0sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib3VuZFNsb3RzW3Nsb3ROYW1lXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzXG4gICAgICAgKiBzb3J0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guXG4gICAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxuICAgICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLlxuICAgICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcbiAgICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsXG4gICAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICAgIG5vZGVOYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lO1xuXG4gICAgICAgIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICAgICAgICBjYXNlIE5PREVfVFlQRV9FTEVNRU5UOlxuICAgICAgICAgICAgLyogRWxlbWVudCAqL1xuXG4gICAgICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyhub2RlKTtcblxuICAgICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lKSwgJ0UnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICB2YXIgYXR0clN0YXJ0TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgYXR0ckVuZE5hbWUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdO1xuICAgICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG5cbiAgICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcbiAgICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTtcbiAgICAgICAgICAgICAgaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKTtcbiAgICAgICAgICAgICAgaWYgKGlzTmdBdHRyKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJykuc3Vic3RyKDgpLnJlcGxhY2UoL18oLikvZywgZnVuY3Rpb24gKG1hdGNoLCBsZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgICBpZiAobXVsdGlFbGVtZW50TWF0Y2ggJiYgZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobXVsdGlFbGVtZW50TWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgYXR0clN0YXJ0TmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lO1xuICAgICAgICAgICAgICBpZiAoaXNOZ0F0dHIgfHwgIWF0dHJzLmhhc093blByb3BlcnR5KG5OYW1lKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cnVlOyAvLyBwcmVzZW5jZSBtZWFucyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbk5hbWUsIGlzTmdBdHRyKTtcbiAgICAgICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIGF0dHJTdGFydE5hbWUsIGF0dHJFbmROYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIG5vZGUuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgIC8vIEhpZGRlbiBpbnB1dCBlbGVtZW50cyBjYW4gaGF2ZSBzdHJhbmdlIGJlaGF2aW91ciB3aGVuIG5hdmlnYXRpbmcgYmFjayB0byB0aGUgcGFnZVxuICAgICAgICAgICAgICAvLyBUaGlzIHRlbGxzIHRoZSBicm93c2VyIG5vdCB0byB0cnkgdG8gY2FjaGUgYW5kIHJlaW5zdGF0ZSBwcmV2aW91cyB2YWx1ZXNcbiAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICdvZmYnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgICAgaWYgKCFjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkKSBicmVhaztcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoY2xhc3NOYW1lKSAmJiBjbGFzc05hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IENMQVNTX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdDJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc3Vic3RyKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBOT0RFX1RZUEVfVEVYVDpcbiAgICAgICAgICAgIC8qIFRleHQgTm9kZSAqL1xuICAgICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgTk9ERV9UWVBFX0NPTU1FTlQ6XG4gICAgICAgICAgICAvKiBDb21tZW50ICovXG4gICAgICAgICAgICBpZiAoIWNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCkgYnJlYWs7XG4gICAgICAgICAgICBjb2xsZWN0Q29tbWVudERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb2xsZWN0Q29tbWVudERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgICAgLy8gZnVuY3Rpb24gY3JlYXRlZCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlLCB0cnkvY2F0Y2ggZGlzYWJsZXNcbiAgICAgICAgLy8gdGhlIG9wdGltaXphdGlvbiBvZiB0aGUgd2hvbGUgZnVuY3Rpb24gIzE0ODQ4XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTtcbiAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gdHVybnMgb3V0IHRoYXQgdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzIElFOSB0aHJvd3MgZXJyb3JzIHdoZW4gb25lIGF0dGVtcHRzIHRvIHJlYWRcbiAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpdCBhbmQgY29udGludWUuIChDYW4ndCBzZWVtIHRvIHJlcHJvZHVjZSBpbiB0ZXN0IGNhc2UuKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2l2ZW4gYSBub2RlIHdpdGggYSBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kc1xuICAgICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgICAqIEBwYXJhbSBub2RlXG4gICAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsICdVbnRlcm1pbmF0ZWQgYXR0cmlidXRlLCBmb3VuZCBcXCd7MH1cXCcgYnV0IG5vIG1hdGNoaW5nIFxcJ3sxfVxcJyBmb3VuZC4nLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrO1xuICAgICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpxTGl0ZShub2Rlcyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogV3JhcHBlciBmb3IgbGlua2luZyBmdW5jdGlvbiB3aGljaCBjb252ZXJ0cyBub3JtYWwgbGlua2luZyBmdW5jdGlvbiBpbnRvIGEgZ3JvdXBlZFxuICAgICAgICogbGlua2luZyBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgICAqIEBwYXJhbSBhdHRyRW5kXG4gICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBncm91cGVkRWxlbWVudHNMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIGVsZW1lbnQgPSBncm91cFNjYW4oZWxlbWVudFswXSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBmdW5jdGlvbiBnZW5lcmF0b3IgdGhhdCBpcyB1c2VkIHRvIHN1cHBvcnQgYm90aCBlYWdlciBhbmQgbGF6eSBjb21waWxhdGlvblxuICAgICAgICogbGlua2luZyBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSBlYWdlclxuICAgICAgICogQHBhcmFtICRjb21waWxlTm9kZXNcbiAgICAgICAqIEBwYXJhbSB0cmFuc2NsdWRlRm5cbiAgICAgICAqIEBwYXJhbSBtYXhQcmlvcml0eVxuICAgICAgICogQHBhcmFtIGlnbm9yZURpcmVjdGl2ZVxuICAgICAgICogQHBhcmFtIHByZXZpb3VzQ29tcGlsZUNvbnRleHRcbiAgICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY29tcGlsYXRpb25HZW5lcmF0b3IoZWFnZXIsICRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgICB2YXIgY29tcGlsZWQ7XG5cbiAgICAgICAgaWYgKGVhZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKC8qKiBAdGhpcyAqL2Z1bmN0aW9uIGxhenlDb21waWxhdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgICAgICAgICAgY29tcGlsZWQgPSBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG5cbiAgICAgICAgICAgICAgLy8gTnVsbCBvdXQgYWxsIG9mIHRoZXNlIHJlZmVyZW5jZXMgaW4gb3JkZXIgdG8gbWFrZSB0aGVtIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHBvdGVudGlhbGx5IGxvbmcgbGl2ZWQgY2xvc3VyZVxuICAgICAgICAgICAgICAkY29tcGlsZU5vZGVzID0gdHJhbnNjbHVkZUZuID0gcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcGlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkLCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoaXMgbWV0aG9kXG4gICAgICAgKiBpcyByZXNwb25zaWJsZSBmb3IgaW5saW5pbmcgZGlyZWN0aXZlIHRlbXBsYXRlcyBhcyB3ZWxsIGFzIHRlcm1pbmF0aW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICogb2YgdGhlIGRpcmVjdGl2ZXMgaWYgdGhlIHRlcm1pbmFsIGRpcmVjdGl2ZSBoYXMgYmVlbiByZWFjaGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGRpcmVjdGl2ZXMgQXJyYXkgb2YgY29sbGVjdGVkIGRpcmVjdGl2ZXMgdG8gZXhlY3V0ZSB0aGVpciBjb21waWxlIGZ1bmN0aW9uLlxuICAgICAgICogICAgICAgIHRoaXMgbmVlZHMgdG8gYmUgcHJlLXNvcnRlZCBieSBwcmlvcml0eSBvcmRlci5cbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gY29tcGlsZU5vZGUgVGhlIHJhdyBET00gbm9kZSB0byBhcHBseSB0aGUgY29tcGlsZSBmdW5jdGlvbnMgdG9cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUF0dHJzIFRoZSBzaGFyZWQgYXR0cmlidXRlIGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ld1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICAgKiBAcGFyYW0ge0pRTGl0ZX0ganFDb2xsZWN0aW9uIElmIHdlIGFyZSB3b3JraW5nIG9uIHRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUgdGhlbiB0aGlzXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBpdC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIEFuIG9wdGlvbmFsIGRpcmVjdGl2ZSB0aGF0IHdpbGwgYmUgaWdub3JlZCB3aGVuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxpbmcgdGhlIHRyYW5zY2x1c2lvbi5cbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcHJlTGlua0Zuc1xuICAgICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwb3N0TGlua0Zuc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgQ29udGV4dCB1c2VkIGZvciBwcmV2aW91cyBjb21waWxhdGlvbiBvZiB0aGUgY3VycmVudFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBsaW5rRm5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gcHJldmlvdXNDb21waWxlQ29udGV4dCB8fCB7fTtcblxuICAgICAgICB2YXIgdGVybWluYWxQcmlvcml0eSA9IC1OdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LmNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5ub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSxcbiAgICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsXG4gICAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLFxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IgPSBmYWxzZSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlO1xuXG4gICAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgICAgdmFyIGF0dHJFbmQgPSBkaXJlY3RpdmUuJCRlbmQ7XG5cbiAgICAgICAgICAvLyBjb2xsZWN0IG11bHRpYmxvY2sgc2VjdGlvbnNcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUgPSBncm91cFNjYW4oY29tcGlsZU5vZGUsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmICh0ZXJtaW5hbFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSB7XG4gICAgICAgICAgICBicmVhazsgLy8gcHJldmVudCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgZGlyZWN0aXZlc1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnNjb3BlO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlKSB7XG5cbiAgICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgICAvLyBkaXJlY3RpdmUgd2hlbiB0aGUgdGVtcGxhdGUgYXJyaXZlc1xuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgZGlyZWN0aXZlIGlzIHRyeWluZyB0byBhZGQgYW4gaXNvbGF0ZWQgc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBzY29wZSBvZiBhbnkga2luZCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBpc29sYXRlZCBzY29wZSBhbHJlYWR5XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gbmV3U2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTtcblxuICAgICAgICAgIC8vIElmIHdlIGVuY291bnRlciBhIGNvbmRpdGlvbiB0aGF0IGNhbiByZXN1bHQgaW4gdHJhbnNjbHVzaW9uIG9uIHRoZSBkaXJlY3RpdmUsXG4gICAgICAgICAgLy8gdGhlbiBzY2FuIGFoZWFkIGluIHRoZSByZW1haW5pbmcgZGlyZWN0aXZlcyBmb3Igb3RoZXJzIHRoYXQgbWF5IGNhdXNlIGEgbXVsdGlwbGVcbiAgICAgICAgICAvLyB0cmFuc2NsdXNpb24gZXJyb3IgdG8gYmUgdGhyb3duIGR1cmluZyB0aGUgY29tcGlsYXRpb24gcHJvY2Vzcy4gIElmIGEgbWF0Y2hpbmcgZGlyZWN0aXZlXG4gICAgICAgICAgLy8gaXMgZm91bmQsIHRoZW4gd2Uga25vdyB0aGF0IHdoZW4gd2UgZW5jb3VudGVyIGEgdHJhbnNjbHVkZWQgZGlyZWN0aXZlLCB3ZSBuZWVkIHRvIGVhZ2VybHlcbiAgICAgICAgICAvLyBjb21waWxlIHRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gZG9pbmcgaXQgbGF6aWx5IGluIG9yZGVyIHRvIHRocm93XG4gICAgICAgICAgLy8gZXhjZXB0aW9ucyBhdCB0aGUgY29ycmVjdCB0aW1lXG4gICAgICAgICAgaWYgKCFkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gJiYgKGRpcmVjdGl2ZS5yZXBsYWNlICYmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgZGlyZWN0aXZlLnRlbXBsYXRlKSB8fCBkaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhZGlyZWN0aXZlLiQkdGxiKSkge1xuICAgICAgICAgICAgdmFyIGNhbmRpZGF0ZURpcmVjdGl2ZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgc2Nhbm5pbmdJbmRleCA9IGkgKyAxOyBjYW5kaWRhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmVzW3NjYW5uaW5nSW5kZXgrK107KSB7XG4gICAgICAgICAgICAgIGlmIChjYW5kaWRhdGVEaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhY2FuZGlkYXRlRGlyZWN0aXZlLiQkdGxiIHx8IGNhbmRpZGF0ZURpcmVjdGl2ZS5yZXBsYWNlICYmIChjYW5kaWRhdGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgY2FuZGlkYXRlRGlyZWN0aXZlLnRlbXBsYXRlKSkge1xuICAgICAgICAgICAgICAgIG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwgY3JlYXRlTWFwKCk7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnXFwnJyArIGRpcmVjdGl2ZU5hbWUgKyAnXFwnIGNvbnRyb2xsZXInLCBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUudHJhbnNjbHVkZTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSkge1xuICAgICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBuZ0lmIGFuZCBuZ1JlcGVhdCBzbyB0aGF0IHdlIGRvbid0IGNvbXBsYWluIGFib3V0IGR1cGxpY2F0ZSB0cmFuc2NsdXNpb24uXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRpcmVjdGl2ZXMgdGhhdCBrbm93IGhvdyB0byBzYWZlbHkgaGFuZGxlIGVsZW1lbnQgdHJhbnNjbHVzaW9uLFxuICAgICAgICAgICAgLy8gd2hlcmUgdGhlIHRyYW5zY2x1ZGVkIG5vZGVzIGFyZSBhZGRlZCBvciByZXBsYWNlZCBhZnRlciBsaW5raW5nLlxuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCR0bGIpIHtcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RyYW5zY2x1c2lvbicsIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7XG4gICAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KGRpcmVjdGl2ZU5hbWUsIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0pKTtcbiAgICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPCA1MFxuICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNDA0MVxuXG4gICAgICAgICAgICAgIC8vIEluIHRoZSB2ZXJzaW9ucyBvZiBWOCBwcmlvciB0byBDaHJvbWUgNTAsIHRoZSBkb2N1bWVudCBmcmFnbWVudCB0aGF0IGlzIGNyZWF0ZWRcbiAgICAgICAgICAgICAgLy8gaW4gdGhlIGByZXBsYWNlV2l0aGAgZnVuY3Rpb24gaXMgaW1wcm9wZXJseSBnYXJiYWdlIGNvbGxlY3RlZCBkZXNwaXRlIHN0aWxsXG4gICAgICAgICAgICAgIC8vIGJlaW5nIHJlZmVyZW5jZWQgYnkgdGhlIGBwYXJlbnROb2RlYCBwcm9wZXJ0eSBvZiBhbGwgb2YgdGhlIGNoaWxkIG5vZGVzLiAgQnkgYWRkaW5nXG4gICAgICAgICAgICAgIC8vIGEgcmVmZXJlbmNlIHRvIHRoZSBmcmFnbWVudCB2aWEgYSBkaWZmZXJlbnQgcHJvcGVydHksIHdlIGNhbiBhdm9pZCB0aGF0IGluY29ycmVjdFxuICAgICAgICAgICAgICAvLyBiZWhhdmlvci5cbiAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgbGluZSBhZnRlciBDaHJvbWUgNTAgaGFzIGJlZW4gcmVsZWFzZWRcbiAgICAgICAgICAgICAgJHRlbXBsYXRlWzBdLiQkcGFyZW50Tm9kZSA9ICR0ZW1wbGF0ZVswXS5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcGFzcyBpbjpcbiAgICAgICAgICAgICAgICAvLyAtIGNvbnRyb2xsZXJEaXJlY3RpdmVzIC0gb3RoZXJ3aXNlIHdlJ2xsIGNyZWF0ZSBkdXBsaWNhdGVzIGNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAvLyAgIGVsZW1lbnQgdHJhbnNjbHVzaW9uIGRvZXNuJ3QgbWFrZSBzZW5zZS5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UuXG4gICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgdmFyIHNsb3RzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgICAgICAgaWYgKCFpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoanFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0cmFuc2NsdXNpb24gc2xvdHMsXG4gICAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGVtIHVwLCBjb21waWxlIHRoZW0gYW5kIHN0b3JlIHRoZWlyIHRyYW5zY2x1c2lvbiBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciBzbG90TWFwID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGxlZFNsb3RzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZWxlbWVudCBzZWxlY3RvcnNcbiAgICAgICAgICAgICAgICBmb3JFYWNoKGRpcmVjdGl2ZVZhbHVlLCBmdW5jdGlvbiAoZWxlbWVudFNlbGVjdG9yLCBzbG90TmFtZSkge1xuICAgICAgICAgICAgICAgICAgLy8gSWYgYW4gZWxlbWVudCBzZWxlY3RvciBzdGFydHMgd2l0aCBhID8gdGhlbiBpdCBpcyBvcHRpb25hbFxuICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsID0gZWxlbWVudFNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gJz8nO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudFNlbGVjdG9yID0gb3B0aW9uYWwgPyBlbGVtZW50U2VsZWN0b3Iuc3Vic3RyaW5nKDEpIDogZWxlbWVudFNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgICBzbG90TWFwW2VsZW1lbnRTZWxlY3Rvcl0gPSBzbG90TmFtZTtcblxuICAgICAgICAgICAgICAgICAgLy8gV2UgZXhwbGljaXRseSBhc3NpZ24gYG51bGxgIHNpbmNlIHRoaXMgaW1wbGllcyB0aGF0IGEgc2xvdCB3YXMgZGVmaW5lZCBidXQgbm90IGZpbGxlZC5cbiAgICAgICAgICAgICAgICAgIC8vIExhdGVyIHdoZW4gY2FsbGluZyBib3VuZFRyYW5zY2x1c2lvbiBmdW5jdGlvbnMgd2l0aCBhIHNsb3QgbmFtZSB3ZSBvbmx5IGVycm9yIGlmIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gc2xvdCBpcyBgdW5kZWZpbmVkYFxuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgLy8gZmlsbGVkU2xvdHMgY29udGFpbnMgYHRydWVgIGZvciBhbGwgc2xvdHMgdGhhdCBhcmUgZWl0aGVyIG9wdGlvbmFsIG9yIGhhdmUgYmVlblxuICAgICAgICAgICAgICAgICAgLy8gZmlsbGVkLiBUaGlzIGlzIHVzZWQgdG8gY2hlY2sgdGhhdCB3ZSBoYXZlIG5vdCBtaXNzZWQgYW55IHJlcXVpcmVkIHNsb3RzXG4gICAgICAgICAgICAgICAgICBmaWxsZWRTbG90c1tzbG90TmFtZV0gPSBvcHRpb25hbDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbWF0Y2hpbmcgZWxlbWVudHMgaW50byB0aGVpciBzbG90XG4gICAgICAgICAgICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGUuY29udGVudHMoKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzbG90TmFtZSA9IHNsb3RNYXBbZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSldO1xuICAgICAgICAgICAgICAgICAgaWYgKHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxlZFNsb3RzW3Nsb3ROYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3ROYW1lXSA9IHNsb3RzW3Nsb3ROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkdGVtcGxhdGUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciByZXF1aXJlZCBzbG90cyB0aGF0IHdlcmUgbm90IGZpbGxlZFxuICAgICAgICAgICAgICAgIGZvckVhY2goZmlsbGVkU2xvdHMsIGZ1bmN0aW9uIChmaWxsZWQsIHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigncmVxc2xvdCcsICdSZXF1aXJlZCB0cmFuc2NsdXNpb24gc2xvdCBgezB9YCB3YXMgbm90IGZpbGxlZC4nLCBzbG90TmFtZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiBzbG90cykge1xuICAgICAgICAgICAgICAgICAgaWYgKHNsb3RzW3Nsb3ROYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGRlZmluZSBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpZiB0aGUgc2xvdCB3YXMgZmlsbGVkXG4gICAgICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3ROYW1lXSA9IGNvbXBpbGF0aW9uR2VuZXJhdG9yKG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IsIHNsb3RzW3Nsb3ROYW1lXSwgdHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTsgLy8gY2xlYXIgY29udGVudHNcbiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCAkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHsgbmVlZHNOZXdTY29wZTogZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlIHx8IGRpcmVjdGl2ZS4kJG5ld1Njb3BlIH0pO1xuICAgICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbi4kJHNsb3RzID0gc2xvdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGlzRnVuY3Rpb24oZGlyZWN0aXZlLnRlbXBsYXRlKSA/IGRpcmVjdGl2ZS50ZW1wbGF0ZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMpIDogZGlyZWN0aXZlLnRlbXBsYXRlO1xuXG4gICAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLCAnVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSBcXCd7MH1cXCcgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9JywgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHsgJGF0dHI6IHt9IH07XG5cbiAgICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOlxuICAgICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IGFscmVhZHkgYXBwbGllZCAocHJvY2Vzc2VkKSBhbmQgdGhvc2UgdGhhdCB3ZXJlbid0ICh1bnByb2Nlc3NlZClcbiAgICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eVxuICAgICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCBuZXdUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpO1xuXG4gICAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgZGlyZWN0aXZlIGNhdXNlZCB0aGUgY3VycmVudCBlbGVtZW50IHRvIGJlIHJlcGxhY2VkIGJ1dCB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBhbHNvIG5lZWRzIHRvIGhhdmUgYSBuZXcgc2NvcGUsIHNvIHdlIG5lZWQgdG8gdGVsbCB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlc1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhleSB3b3VsZCBuZWVkIHRvIGdldCB0aGVpciBzY29wZSBmcm9tIGZ1cnRoZXIgdXAsIGlmIHRoZXkgcmVxdWlyZSB0cmFuc2NsdXNpb25cbiAgICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlU2NvcGUodGVtcGxhdGVEaXJlY3RpdmVzLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIG5ld1Njb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5jb25jYXQodGVtcGxhdGVEaXJlY3RpdmVzKS5jb25jYXQodW5wcm9jZXNzZWREaXJlY3RpdmVzKTtcbiAgICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZnVuYy1hc3NpZ25cbiAgICAgICAgICAgIG5vZGVMaW5rRm4gPSBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcy5zcGxpY2UoaSwgZGlyZWN0aXZlcy5sZW5ndGggLSBpKSwgJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzOiBjb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmU6IG5ld1Njb3BlRGlyZWN0aXZlICE9PSBkaXJlY3RpdmUgJiYgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZTogbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZTogdGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGl2ZS5jb21waWxlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBkaXJlY3RpdmUuJCRvcmlnaW5hbERpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcbiAgICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGJpbmQoY29udGV4dCwgbGlua0ZuKSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rRm4pIHtcbiAgICAgICAgICAgICAgICBhZGRMaW5rRm5zKGJpbmQoY29udGV4dCwgbGlua0ZuLnByZSksIGJpbmQoY29udGV4dCwgbGlua0ZuLnBvc3QpLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHtcbiAgICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IE1hdGgubWF4KHRlcm1pbmFsUHJpb3JpdHksIGRpcmVjdGl2ZS5wcmlvcml0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50ID0gaGFzVHJhbnNjbHVkZURpcmVjdGl2ZTtcbiAgICAgICAgbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgPSBoYXNUZW1wbGF0ZTtcbiAgICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlO1xuXG4gICAgICAgIC8vIG1pZ2h0IGJlIG5vcm1hbCBvciBkZWxheWVkIG5vZGVMaW5rRm4gZGVwZW5kaW5nIG9uIGlmIHRlbXBsYXRlVXJsIGlzIHByZXNlbnRcbiAgICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhZGRMaW5rRm5zKHByZSwgcG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJTdGFydCkgcHJlID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocHJlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgcHJlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgICAgcHJlID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHByZSwgeyBpc29sYXRlU2NvcGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVMaW5rRm5zLnB1c2gocHJlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBvc3QpIHtcbiAgICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHBvc3QgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgICBwb3N0LmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkge1xuICAgICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHsgaXNvbGF0ZVNjb3BlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICB2YXIgaSwgaWksIGxpbmtGbiwgaXNvbGF0ZVNjb3BlLCBjb250cm9sbGVyU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCwgYXR0cnMsIHNjb3BlQmluZGluZ0luZm87XG5cbiAgICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7XG4gICAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7XG4gICAgICAgICAgICAkZWxlbWVudCA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZWxlbWVudCA9IGpxTGl0ZShsaW5rTm9kZSk7XG4gICAgICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCRlbGVtZW50LCB0ZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250cm9sbGVyU2NvcGUgPSBzY29wZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpc29sYXRlU2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmV3U2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAvLyB0cmFjayBgYm91bmRUcmFuc2NsdWRlRm5gIHNvIGl0IGNhbiBiZSB1bndyYXBwZWQgaWYgYHRyYW5zY2x1ZGVGbmBcbiAgICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgICB0cmFuc2NsdWRlRm4gPSBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZTtcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgLy8gZXhwb3NlIHRoZSBzbG90cyBvbiB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgICAgICAgdHJhbnNjbHVkZUZuLmlzU2xvdEZpbGxlZCA9IGZ1bmN0aW9uIChzbG90TmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4gISFib3VuZFRyYW5zY2x1ZGVGbi4kJHNsb3RzW3Nsb3ROYW1lXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgZm9yIG5ldyBpc29sYXRlIHNjb3BlIGRpcmVjdGl2ZS5cbiAgICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3MgPSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUuJCRpc29sYXRlQmluZGluZ3M7XG4gICAgICAgICAgICBzY29wZUJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLCBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3MsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSk7XG4gICAgICAgICAgICBpZiAoc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKSB7XG4gICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kb24oJyRkZXN0cm95Jywgc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbml0aWFsaXplIGJpbmRUb0NvbnRyb2xsZXIgYmluZGluZ3NcbiAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXJEaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgICAgdmFyIGJpbmRpbmdzID0gY29udHJvbGxlckRpcmVjdGl2ZS4kJGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXI7XG5cbiAgICAgICAgICAgIGlmIChwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9IGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9IHt9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXJSZXN1bHQgPSBjb250cm9sbGVyKCk7XG4gICAgICAgICAgICAgIGlmIChjb250cm9sbGVyUmVzdWx0ICE9PSBjb250cm9sbGVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgaGFzIGEgcmV0dXJuIHZhbHVlLCBvdmVyd3JpdGUgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgLy8gZnJvbSBzZXR1cENvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXJSZXN1bHQ7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBjb250cm9sbGVyRGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJSZXN1bHQpO1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyLmJpbmRpbmdJbmZvLnJlbW92ZVdhdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8ucmVtb3ZlV2F0Y2hlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBjb250cm9sbGVyRGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXIuaW5zdGFuY2UpO1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBCaW5kIHRoZSByZXF1aXJlZCBjb250cm9sbGVycyB0byB0aGUgY29udHJvbGxlciwgaWYgYHJlcXVpcmVgIGlzIGFuIG9iamVjdCBhbmQgYGJpbmRUb0NvbnRyb2xsZXJgIGlzIHRydXRoeVxuICAgICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uIChjb250cm9sbGVyRGlyZWN0aXZlLCBuYW1lKSB7XG4gICAgICAgICAgICB2YXIgcmVxdWlyZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyRGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgJiYgIWlzQXJyYXkocmVxdWlyZSkgJiYgaXNPYmplY3QocmVxdWlyZSkpIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXS5pbnN0YW5jZSwgZ2V0Q29udHJvbGxlcnMobmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gSGFuZGxlIHRoZSBpbml0IGFuZCBkZXN0cm95IGxpZmVjeWNsZSBob29rcyBvbiBhbGwgY29udHJvbGxlcnMgdGhhdCBoYXZlIHRoZW1cbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkNoYW5nZXMpKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkNoYW5nZXMoY29udHJvbGxlci5iaW5kaW5nSW5mby5pbml0aWFsQ2hhbmdlcyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkluaXQpKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkluaXQoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2spKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJTY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZS4kZG9DaGVjaygpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRkb0NoZWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJG9uRGVzdHJveSkpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlclNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiBjYWxsT25EZXN0cm95SG9vaygpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJG9uRGVzdHJveSgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFBSRUxJTktJTkdcbiAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZUxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLCB0cmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAgIC8vIFdlIG9ubHkgcGFzcyB0aGUgaXNvbGF0ZSBzY29wZSwgaWYgdGhlIGlzb2xhdGUgZGlyZWN0aXZlIGhhcyBhIHRlbXBsYXRlLFxuICAgICAgICAgIC8vIG90aGVyd2lzZSB0aGUgY2hpbGQgZWxlbWVudHMgZG8gbm90IGJlbG9uZyB0byB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUuXG4gICAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgJiYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZSB8fCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgPT09IG51bGwpKSB7XG4gICAgICAgICAgICBzY29wZVRvQ2hpbGQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZExpbmtGbikge1xuICAgICAgICAgICAgY2hpbGRMaW5rRm4oc2NvcGVUb0NoaWxkLCBsaW5rTm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBQT1NUTElOS0lOR1xuICAgICAgICAgIGZvciAoaSA9IHBvc3RMaW5rRm5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLCB0cmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRyaWdnZXIgJHBvc3RMaW5rIGxpZmVjeWNsZSBob29rc1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudENvbnRyb2xsZXJzLCBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXJJbnN0YW5jZSA9IGNvbnRyb2xsZXIuaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKSkge1xuICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgICAgLy8gTm90ZTogYWxsIGFyZ3VtZW50cyBhcmUgb3B0aW9uYWwhXG4gICAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNsb3ROYW1lKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuICAgICAgICAgICAgLy8gTm8gc2NvcGUgcGFzc2VkIGluOlxuICAgICAgICAgICAgaWYgKCFpc1Njb3BlKHNjb3BlKSkge1xuICAgICAgICAgICAgICBzbG90TmFtZSA9IGZ1dHVyZVBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBjbG9uZUF0dGFjaEZuO1xuICAgICAgICAgICAgICBjbG9uZUF0dGFjaEZuID0gc2NvcGU7XG4gICAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgLy8gc2xvdFRyYW5zY2x1ZGVGbiBjYW4gYmUgb25lIG9mIHRocmVlIHRoaW5nczpcbiAgICAgICAgICAgICAgLy8gICogYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIC0gYSBmaWxsZWQgc2xvdFxuICAgICAgICAgICAgICAvLyAgKiBgbnVsbGAgLSBhbiBvcHRpb25hbCBzbG90IHRoYXQgd2FzIG5vdCBmaWxsZWRcbiAgICAgICAgICAgICAgLy8gICogYHVuZGVmaW5lZGAgLSBhIHNsb3QgdGhhdCB3YXMgbm90IGRlY2xhcmVkIChpLmUuIGludmFsaWQpXG4gICAgICAgICAgICAgIHZhciBzbG90VHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm4uJCRzbG90c1tzbG90TmFtZV07XG4gICAgICAgICAgICAgIGlmIChzbG90VHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3RUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1VuZGVmaW5lZChzbG90VHJhbnNjbHVkZUZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub3Nsb3QnLCAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIHdpdGggc2xvdCBuYW1lIFwiezB9XCIuICcgKyAnRWxlbWVudDogezF9Jywgc2xvdE5hbWUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2xvbmVBdHRhY2hGbiwgdHJhbnNjbHVkZUNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzY29wZVRvQ2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSB7XG4gICAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSByZXF1aXJlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgICAgdmFyIG5hbWUgPSByZXF1aXJlLnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIHZhciBpbmhlcml0VHlwZSA9IG1hdGNoWzFdIHx8IG1hdGNoWzNdO1xuICAgICAgICAgIHZhciBvcHRpb25hbCA9IG1hdGNoWzJdID09PSAnPyc7XG5cbiAgICAgICAgICAvL0lmIG9ubHkgcGFyZW50cyB0aGVuIHN0YXJ0IGF0IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgIGlmIChpbmhlcml0VHlwZSA9PT0gJ15eJykge1xuICAgICAgICAgICAgJGVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgICAgICAvL3RoZSBlbGVtZW50IGlzIHRyYW5zY2x1ZGVkIChhbmQgaGFzIG5vIGRhdGEpIGFuZCB0byBhdm9pZCAuZGF0YSBpZiBwb3NzaWJsZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGVsZW1lbnRDb250cm9sbGVycyAmJiBlbGVtZW50Q29udHJvbGxlcnNbbmFtZV07XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlLmluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTmFtZSA9ICckJyArIG5hbWUgKyAnQ29udHJvbGxlcic7XG4gICAgICAgICAgICB2YWx1ZSA9IGluaGVyaXRUeXBlID8gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YShkYXRhTmFtZSkgOiAkZWxlbWVudC5kYXRhKGRhdGFOYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXZhbHVlICYmICFvcHRpb25hbCkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJywgJ0NvbnRyb2xsZXIgXFwnezB9XFwnLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgXFwnezF9XFwnLCBjYW5cXCd0IGJlIGZvdW5kIScsIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHJlcXVpcmUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXF1aXJlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlW2ldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZVtpXSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHJlcXVpcmUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uIChjb250cm9sbGVyLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFsdWVbcHJvcGVydHldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgY29udHJvbGxlciwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBDb250cm9sbGVycygkZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgY29udHJvbGxlckRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgc2NvcGUsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgZWxlbWVudENvbnRyb2xsZXJzID0gY3JlYXRlTWFwKCk7XG4gICAgICAgIGZvciAodmFyIGNvbnRyb2xsZXJLZXkgaW4gY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gY29udHJvbGxlckRpcmVjdGl2ZXNbY29udHJvbGxlcktleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IHtcbiAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAkZWxlbWVudDogJGVsZW1lbnQsXG4gICAgICAgICAgICAkYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGblxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGlmIChjb250cm9sbGVyID09PSAnQCcpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBhdHRyc1tkaXJlY3RpdmUubmFtZV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXJJbnN0YW5jZSA9ICRjb250cm9sbGVyKGNvbnRyb2xsZXIsIGxvY2FscywgdHJ1ZSwgZGlyZWN0aXZlLmNvbnRyb2xsZXJBcyk7XG5cbiAgICAgICAgICAvLyBGb3IgZGlyZWN0aXZlcyB3aXRoIGVsZW1lbnQgdHJhbnNjbHVzaW9uIHRoZSBlbGVtZW50IGlzIGEgY29tbWVudC5cbiAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgLmRhdGEgd2lsbCBub3QgYXR0YWNoIGFueSBkYXRhLlxuICAgICAgICAgIC8vIEluc3RlYWQsIHdlIHNhdmUgdGhlIGNvbnRyb2xsZXJzIGZvciB0aGUgZWxlbWVudCBpbiBhIGxvY2FsIGhhc2ggYW5kIGF0dGFjaCB0byAuZGF0YVxuICAgICAgICAgIC8vIGxhdGVyLCBvbmNlIHdlIGhhdmUgdGhlIGFjdHVhbCBlbGVtZW50LlxuICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBkaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlckluc3RhbmNlLmluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXBlbmRpbmcgdXBvbiB0aGUgY29udGV4dCBpbiB3aGljaCBhIGRpcmVjdGl2ZSBmaW5kcyBpdHNlbGYgaXQgbWlnaHQgbmVlZCB0byBoYXZlIGEgbmV3IGlzb2xhdGVkXG4gICAgICAvLyBvciBjaGlsZCBzY29wZSBjcmVhdGVkLiBGb3IgaW5zdGFuY2U6XG4gICAgICAvLyAqIGlmIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gcHVsbGVkIGludG8gYSB0ZW1wbGF0ZSBiZWNhdXNlIGFub3RoZXIgZGlyZWN0aXZlIHdpdGggYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIC8vIGFza2VkIGZvciBlbGVtZW50IHRyYW5zY2x1c2lvblxuICAgICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGl0c2VsZiBhc2tzIGZvciB0cmFuc2NsdXNpb24gYnV0IGl0IGlzIGF0IHRoZSByb290IG9mIGEgdGVtcGxhdGUgYW5kIHRoZSBvcmlnaW5hbFxuICAgICAgLy8gZWxlbWVudCB3YXMgcmVwbGFjZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMjkzNlxuICAgICAgZnVuY3Rpb24gbWFya0RpcmVjdGl2ZVNjb3BlKGRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgZGlyZWN0aXZlc1tqXSA9IGluaGVyaXQoZGlyZWN0aXZlc1tqXSwgeyAkJGlzb2xhdGVTY29wZTogaXNvbGF0ZVNjb3BlLCAkJG5ld1Njb3BlOiBuZXdTY29wZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICAgKiBjYWxsIHRoaXMgdGhlIGJvdW5kRGlyZWN0aXZlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIFRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmb3VuZCBpbiBzcGVjaWZpYyBmb3JtYXQuXG4gICAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczpcbiAgICAgICAqXG4gICAgICAgKiAgICogYEVgOiBlbGVtZW50IG5hbWVcbiAgICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZVxuICAgICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgICAqICAgKiBgTWA6IGNvbW1lbnRcbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgYWRkZWQuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGFkZERpcmVjdGl2ZSh0RGlyZWN0aXZlcywgbmFtZSwgbG9jYXRpb24sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHN0YXJ0QXR0ck5hbWUsIGVuZEF0dHJOYW1lKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICAgIGlmICgoaXNVbmRlZmluZWQobWF4UHJpb3JpdHkpIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJiBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFydEF0dHJOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHsgJCRzdGFydDogc3RhcnRBdHRyTmFtZSwgJCRlbmQ6IGVuZEF0dHJOYW1lIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkYmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9IHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGJpbmRpbmdzLmlzb2xhdGVTY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICBtYXRjaCA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIHJldHVybnMgdHJ1ZSBpZiBpdCBpcyBhIG11bHRpLWVsZW1lbnQgZGlyZWN0aXZlLFxuICAgICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICAgKiB0b2dldGhlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBmb3IgKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLCBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlLm11bHRpRWxlbWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICAgKiBvbiB0aGUgdGVtcGxhdGUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgYXR0cmlidXRlcyBpbiB0aGUgRE9NLlxuICAgICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkc3QgZGVzdGluYXRpb24gYXR0cmlidXRlcyAob3JpZ2luYWwgRE9NKVxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyhkc3QsIHNyYykge1xuICAgICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcbiAgICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHI7XG5cbiAgICAgICAgLy8gcmVhcHBseSB0aGUgb2xkIGF0dHJpYnV0ZXMgdG8gdGhlIG5ldyBlbGVtZW50XG4gICAgICAgIGZvckVhY2goZHN0LCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBzcmNba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHN0LiRzZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgc3JjQXR0cltrZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNvcHkgdGhlIG5ldyBhdHRyaWJ1dGVzIG9uIHRoZSBvbGQgYXR0cnMgb2JqZWN0XG4gICAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGFscmVhZHkgc2V0IHRoaXMgYXR0cmlidXRlIGluIHRoZSBsb29wIGFib3ZlLlxuICAgICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC5cbiAgICAgICAgICAvLyBZb3Ugd2lsbCBnZXQgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IERPTSBFeGNlcHRpb24gNVwiIGVycm9yIGlmIHlvdVxuICAgICAgICAgIC8vIGhhdmUgYW4gYXR0cmlidXRlIGxpa2UgXCJoYXMtb3duLXByb3BlcnR5XCIgb3IgXCJkYXRhLWhhcy1vd24tcHJvcGVydHlcIiwgZXRjLlxuICAgICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBkc3Rba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAnY2xhc3MnICYmIGtleSAhPT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMsICRjb21waWxlTm9kZSwgdEF0dHJzLCAkcm9vdEVsZW1lbnQsIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgICB2YXIgbGlua1F1ZXVlID0gW10sXG4gICAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbixcbiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbixcbiAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF0sXG4gICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUgPSBkaXJlY3RpdmVzLnNoaWZ0KCksXG4gICAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGluaGVyaXQob3JpZ0FzeW5jRGlyZWN0aXZlLCB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IG51bGwsIHRyYW5zY2x1ZGU6IG51bGwsIHJlcGxhY2U6IG51bGwsICQkb3JpZ2luYWxEaXJlY3RpdmU6IG9yaWdBc3luY0RpcmVjdGl2ZVxuICAgICAgICB9KSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsID0gaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKSA6IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCxcbiAgICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlO1xuXG4gICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpO1xuXG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3QodGVtcGxhdGVVcmwpLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICBjb250ZW50ID0gZGVub3JtYWxpemVUZW1wbGF0ZShjb250ZW50KTtcblxuICAgICAgICAgIGlmIChvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUodGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oY29udGVudCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JywgJ1RlbXBsYXRlIGZvciBkaXJlY3RpdmUgXFwnezB9XFwnIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfScsIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyAkYXR0cjoge30gfTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnQXN5bmNEaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBkaXJlY3RpdmUgdGhhdCBjYXVzZWQgdGhlIHRlbXBsYXRlIHRvIGJlIGxvYWRlZCBhc3luYyByZXF1aXJlZFxuICAgICAgICAgICAgICAvLyBhbiBpc29sYXRlIHNjb3BlXG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVTY29wZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcblxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbiAobm9kZSwgaSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IGNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudFtpXSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4gPSBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlWzBdLmNoaWxkTm9kZXMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIHdoaWxlIChsaW5rUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2NvcGUgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua1Jvb3RFbGVtZW50ID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYm91bmRUcmFuc2NsdWRlRm4gPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9ICRjb21waWxlTm9kZVswXTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGJlZm9yZVRlbXBsYXRlTGlua05vZGUgIT09IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIG9sZENsYXNzZXMgPSBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlLmNsYXNzTmFtZTtcblxuICAgICAgICAgICAgICBpZiAoIShwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlICYmIG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSkge1xuICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpO1xuXG4gICAgICAgICAgICAgIC8vIENvcHkgaW4gQ1NTIGNsYXNzZXMgZnJvbSBvcmlnaW5hbCBub2RlXG4gICAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobGlua05vZGUpLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoaXNFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxheWVkTm9kZUxpbmtGbihpZ25vcmVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGxpbmtRdWV1ZSkge1xuICAgICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBieVByaW9yaXR5KGEsIGIpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgICAgaWYgKGRpZmYgIT09IDApIHJldHVybiBkaWZmO1xuICAgICAgICBpZiAoYS5uYW1lICE9PSBiLm5hbWUpIHJldHVybiBhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IDE7XG4gICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXNzZXJ0Tm9EdXBsaWNhdGUod2hhdCwgcHJldmlvdXNEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgZWxlbWVudCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/ICcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2aW91c0RpcmVjdGl2ZSkge1xuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsIHByZXZpb3VzRGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKHByZXZpb3VzRGlyZWN0aXZlLiQkbW9kdWxlTmFtZSksIGRpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChkaXJlY3RpdmUuJCRtb2R1bGVOYW1lKSwgd2hhdCwgc3RhcnRpbmdUYWcoZWxlbWVudCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRleHQsIHRydWUpO1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlTm9kZVBhcmVudCA9IHRlbXBsYXRlTm9kZS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICAgIGhhc0NvbXBpbGVQYXJlbnQgPSAhIXRlbXBsYXRlTm9kZVBhcmVudC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgcGFyZW50IGFuZCB0aHVzIG5lZWQgdG8gYWRkIHRoZSBjbGFzcyBkdXJpbmcgbGlua2luZyBmbi5cbiAgICAgICAgICAgICAgaWYgKGhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModGVtcGxhdGVOb2RlUGFyZW50KTtcblxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNDb21waWxlUGFyZW50KSBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgbm9kZVswXS5ub2RlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3cmFwVGVtcGxhdGUodHlwZSwgdGVtcGxhdGUpIHtcbiAgICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICAgICAgY2FzZSAnbWF0aCc6XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+JyArIHRlbXBsYXRlICsgJzwvJyArIHR5cGUgKyAnPic7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXM7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHtcbiAgICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyY2RvYycpIHtcbiAgICAgICAgICByZXR1cm4gJHNjZS5IVE1MO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAgIC8vIEFsbCB0YWdzIHdpdGggc3JjIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIFJFU09VUkNFX1VSTCB2YWx1ZSwgZXhjZXB0IGZvclxuICAgICAgICAvLyBpbWcgYW5kIHZhcmlvdXMgaHRtbDUgbWVkaWEgdGFncy5cbiAgICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyYycgfHwgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnbmdTcmMnKSB7XG4gICAgICAgICAgaWYgKFsnaW1nJywgJ3ZpZGVvJywgJ2F1ZGlvJywgJ3NvdXJjZScsICd0cmFjayddLmluZGV4T2YodGFnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAkc2NlLlJFU09VUkNFX1VSTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbWFjdGlvblt4bGluazpocmVmXSBjYW4gc291cmNlIFNWRy4gIEl0J3Mgbm90IGxpbWl0ZWQgdG8gPG1hY3Rpb24+LlxuICAgICAgICB9IGVsc2UgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3hsaW5rSHJlZicgfHwgdGFnID09PSAnZm9ybScgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnYWN0aW9uJyB8fFxuICAgICAgICAvLyBsaW5rcyBjYW4gYmUgc3R5bGVzaGVldHMgb3IgaW1wb3J0cywgd2hpY2ggY2FuIHJ1biBzY3JpcHQgaW4gdGhlIGN1cnJlbnQgb3JpZ2luXG4gICAgICAgIHRhZyA9PT0gJ2xpbmsnICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSwgaXNOZ0F0dHIpIHtcbiAgICAgICAgdmFyIHRydXN0ZWRDb250ZXh0ID0gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgbmFtZSk7XG4gICAgICAgIHZhciBtdXN0SGF2ZUV4cHJlc3Npb24gPSAhaXNOZ0F0dHI7XG4gICAgICAgIHZhciBhbGxPck5vdGhpbmcgPSBBTExfT1JfTk9USElOR19BVFRSU1tuYW1lXSB8fCBpc05nQXR0cjtcblxuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKTtcblxuICAgICAgICAvLyBubyBpbnRlcnBvbGF0aW9uIGZvdW5kIC0+IGlnbm9yZVxuICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgICBpZiAobmFtZSA9PT0gJ211bHRpcGxlJyAmJiBub2RlTmFtZV8obm9kZSkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3NlbG11bHRpJywgJ0JpbmRpbmcgdG8gdGhlIFxcJ211bHRpcGxlXFwnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0nLCBzdGFydGluZ1RhZyhub2RlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJywgJ0ludGVycG9sYXRpb25zIGZvciBIVE1MIERPTSBldmVudCBhdHRyaWJ1dGVzIGFyZSBkaXNhbGxvd2VkLiAgUGxlYXNlIHVzZSB0aGUgJyArICduZy0gdmVyc2lvbnMgKHN1Y2ggYXMgbmctY2xpY2sgaW5zdGVhZCBvZiBvbmNsaWNrKSBpbnN0ZWFkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aXZlcy5wdXNoKHtcbiAgICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGhhcyBjaGFuZ2VkIHNpbmNlIGxhc3QgJGludGVycG9sYXRlKCllZFxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGF0dHJbbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBpbnRlcnBvbGF0ZSBhZ2FpbiBzaW5jZSB0aGUgYXR0cmlidXRlIHZhbHVlIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgIC8vIChlLmcuIGJ5IGFub3RoZXIgZGlyZWN0aXZlJ3MgY29tcGlsZSBmdW5jdGlvbilcbiAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB1bnNldC9lbXB0eSB2YWx1ZXMgbWFrZSBpbnRlcnBvbGF0ZUZuIGZhbHN5XG4gICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZUZuID0gbmV3VmFsdWUgJiYgJGludGVycG9sYXRlKG5ld1ZhbHVlLCB0cnVlLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKTtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgYXR0cmlidXRlIHdhcyB1cGRhdGVkIHNvIHRoYXQgdGhlcmUgaXMgbm8gaW50ZXJwb2xhdGlvbiBnb2luZyBvbiB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgYW55IG9ic2VydmVyc1xuICAgICAgICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBhdHRyIG9iamVjdCBzbyB0aGF0IGl0J3MgcmVhZHkgaW4gY2FzZSB3ZSBuZWVkIHRoZSB2YWx1ZSBmb3IgaXNvbGF0ZVxuICAgICAgICAgICAgICAgIC8vIHNjb3BlIGluaXRpYWxpemF0aW9uLCBvdGhlcndpc2UgdGhlIHZhbHVlIHdvdWxkIG5vdCBiZSBhdmFpbGFibGUgZnJvbSBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0aXZlJ3MgbGlua2luZyBmbiBkdXJpbmcgbGlua2luZyBwaGFzZVxuICAgICAgICAgICAgICAgIGF0dHJbbmFtZV0gPSBpbnRlcnBvbGF0ZUZuKHNjb3BlKTtcblxuICAgICAgICAgICAgICAgICgkJG9ic2VydmVyc1tuYW1lXSB8fCAoJCRvYnNlcnZlcnNbbmFtZV0gPSBbXSkpLiQkaW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIChhdHRyLiQkb2JzZXJ2ZXJzICYmIGF0dHIuJCRvYnNlcnZlcnNbbmFtZV0uJCRzY29wZSB8fCBzY29wZSkuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAvL3NvIHRoYXQgY2xhc3MgY2hhbmdlcyBjYW4gdGFwIGludG8gdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgLy9ob29rcyBwcm92aWRlZCBieSB0aGUgJGFuaW1hdGUgc2VydmljZS4gQmUgc3VyZSB0b1xuICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgLy9ib3RoIHRoZSBuZXcgYW5kIHRoZSBvbGQgdmFsdWVzIGFyZSB0aGUgc2FtZSkgc2luY2VcbiAgICAgICAgICAgICAgICAgIC8vdGhlIENTUyBjbGFzc2VzIGFyZSB0aGUgbm9uLWludGVycG9sYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyLiR1cGRhdGVDbGFzcyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgICAqIGhhdmUgbm8gcGFyZW50cywgcHJvdmlkZWQgdGhhdCB0aGUgY29udGFpbmluZyBqcUxpdGUgY29sbGVjdGlvbiBpcyBwcm92aWRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSByb290IG9mIHRoZSB0cmVlLlxuICAgICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICAgIHZhciBmaXJzdEVsZW1lbnRUb1JlbW92ZSA9IGVsZW1lbnRzVG9SZW1vdmVbMF0sXG4gICAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLFxuICAgICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBpaTtcblxuICAgICAgICBpZiAoJHJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlO1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLCBqaiA9ICRyb290RWxlbWVudC5sZW5ndGg7IGogPCBqajsgaisrLCBqMisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHtcbiAgICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxO1xuXG4gICAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgICAgLy8gLmNvbnRleHQgaXMgYSBkZXByZWNhdGVkIGpRdWVyeSBhcGksIHNvIHdlIHNob3VsZCBzZXQgaXQgb25seSB3aGVuIGpRdWVyeSBzZXQgaXRcbiAgICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvXG4gICAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnQuY29udGV4dCA9IG5ld05vZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGFsbCB0aGUgYGVsZW1lbnRzVG9SZW1vdmVgIHRvIGEgZnJhZ21lbnQuIFRoaXMgd2lsbC4uLlxuICAgICAgICAvLyAtIHJlbW92ZSB0aGVtIGZyb20gdGhlIERPTVxuICAgICAgICAvLyAtIGFsbG93IHRoZW0gdG8gc3RpbGwgYmUgdHJhdmVyc2VkIHdpdGggLm5leHRTaWJsaW5nXG4gICAgICAgIC8vIC0gYWxsb3cgYSBzaW5nbGUgZnJhZ21lbnQucVNBIHRvIGZldGNoIGFsbCBlbGVtZW50cyBiZWluZyByZW1vdmVkXG4gICAgICAgIHZhciBmcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudHNUb1JlbW92ZVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgICAgLy8gQ29weSBvdmVyIHVzZXIgZGF0YSAodGhhdCBpbmNsdWRlcyBBbmd1bGFyJ3MgJHNjb3BlIGV0Yy4pLiBEb24ndCBjb3B5IHByaXZhdGVcbiAgICAgICAgICAvLyBkYXRhIGhlcmUgYmVjYXVzZSB0aGVyZSdzIG5vIHB1YmxpYyBpbnRlcmZhY2UgaW4galF1ZXJ5IHRvIGRvIHRoYXQgYW5kIGNvcHlpbmcgb3ZlclxuICAgICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgICAganFMaXRlLmRhdGEobmV3Tm9kZSwganFMaXRlLmRhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKTtcblxuICAgICAgICAgIC8vIFJlbW92ZSAkZGVzdHJveSBldmVudCBsaXN0ZW5lcnMgZnJvbSBgZmlyc3RFbGVtZW50VG9SZW1vdmVgXG4gICAgICAgICAganFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5vZmYoJyRkZXN0cm95Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhbnVwIGFueSBkYXRhL2xpc3RlbmVycyBvbiB0aGUgZWxlbWVudHMgYW5kIGNoaWxkcmVuLlxuICAgICAgICAvLyBUaGlzIGluY2x1ZGVzIGludm9raW5nIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbnkgZWxlbWVudHMgd2l0aCBsaXN0ZW5lcnMuXG4gICAgICAgIGpxTGl0ZS5jbGVhbkRhdGEoZnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIHRvIG9ubHkgY29udGFpbiB0aGUgYG5ld05vZGVgXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgZGVsZXRlIGVsZW1lbnRzVG9SZW1vdmVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICAgIGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvbmVBbmRBbm5vdGF0ZUZuKGZuLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUxpbmtGbihsaW5rRm4sIHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN0cmljdEJpbmRpbmdzQ2hlY2soYXR0ck5hbWUsIGRpcmVjdGl2ZU5hbWUpIHtcbiAgICAgICAgaWYgKHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtaXNzaW5nYXR0cicsICdBdHRyaWJ1dGUgXFwnezB9XFwnIG9mIFxcJ3sxfVxcJyBpcyBub24tb3B0aW9uYWwgYW5kIG11c3QgYmUgc2V0IScsIGF0dHJOYW1lLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdXAgJHdhdGNoZXMgZm9yIGlzb2xhdGUgc2NvcGUgYW5kIGNvbnRyb2xsZXIgYmluZGluZ3MuXG4gICAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uID0gW107XG4gICAgICAgIHZhciBpbml0aWFsQ2hhbmdlcyA9IHt9O1xuICAgICAgICB2YXIgY2hhbmdlcztcblxuICAgICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbiBpbml0aWFsaXplQmluZGluZyhkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBkZWZpbml0aW9uLmF0dHJOYW1lLFxuICAgICAgICAgICAgICBvcHRpb25hbCA9IGRlZmluaXRpb24ub3B0aW9uYWwsXG4gICAgICAgICAgICAgIG1vZGUgPSBkZWZpbml0aW9uLm1vZGUsXG4gICAgICAgICAgICAgIC8vIEAsID0sIDwsIG9yICZcbiAgICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgICAgICAgIHBhcmVudEdldCxcbiAgICAgICAgICAgICAgcGFyZW50U2V0LFxuICAgICAgICAgICAgICBjb21wYXJlLFxuICAgICAgICAgICAgICByZW1vdmVXYXRjaDtcblxuICAgICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICAgICAgaWYgKCFvcHRpb25hbCAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0QmluZGluZ3NDaGVjayhhdHRyTmFtZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBhdHRyc1thdHRyTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgcmVjb3JkQ2hhbmdlcyhzY29wZU5hbWUsIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHZhbHVlIGlzIHRoZXJlIGZvciB1c2UgaW4gdGhlIGxpbmsgZm5cbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gJGludGVycG9sYXRlKGxhc3RWYWx1ZSkoc2NvcGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbihsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZXMgaXMgb25lIG9mIHRoZSBCT09MRUFOX0FUVFIgdGhlbiBBbmd1bGFyIHdpbGwgaGF2ZSBjb252ZXJ0ZWRcbiAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgdG8gYm9vbGVhbiByYXRoZXIgdGhhbiBhIHN0cmluZywgc28gd2Ugc3BlY2lhbCBjYXNlIHRoaXMgc2l0dWF0aW9uXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbml0aWFsQ2hhbmdlc1tzY29wZU5hbWVdID0gbmV3IFNpbXBsZUNoYW5nZShfVU5JTklUSUFMSVpFRF9WQUxVRSwgZGVzdGluYXRpb25bc2NvcGVOYW1lXSk7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgc3RyaWN0QmluZGluZ3NDaGVjayhhdHRyTmFtZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwgJiYgIWF0dHJzW2F0dHJOYW1lXSkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIGNvbXBhcmUgPSBlcXVhbHM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGFyZSA9IHNpbXBsZUNvbXBhcmU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vbmFzc2lnbicsICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpbiBhdHRyaWJ1dGUgXFwnezF9XFwnIHVzZWQgd2l0aCBkaXJlY3RpdmUgXFwnezJ9XFwnIGlzIG5vbi1hc3NpZ25hYmxlIScsIGF0dHJzW2F0dHJOYW1lXSwgYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghY29tcGFyZShwYXJlbnRWYWx1ZSwgZGVzdGluYXRpb25bc2NvcGVOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5XG4gICAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc29cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7XG4gICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaCgkcGFyc2UoYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKSwgbnVsbCwgcGFyZW50R2V0LmxpdGVyYWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgc3RyaWN0QmluZGluZ3NDaGVjayhhdHRyTmFtZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwgJiYgIWF0dHJzW2F0dHJOYW1lXSkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICAgIHZhciBkZWVwV2F0Y2ggPSBwYXJlbnRHZXQubGl0ZXJhbDtcblxuICAgICAgICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcblxuICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaChwYXJlbnRHZXQsIGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBpbml0aWFsVmFsdWUgfHwgZGVlcFdhdGNoICYmIGVxdWFscyhvbGRWYWx1ZSwgaW5pdGlhbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjb3JkQ2hhbmdlcyhzY29wZU5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICB9LCBkZWVwV2F0Y2gpO1xuXG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgICBpZiAoIW9wdGlvbmFsICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RCaW5kaW5nc0NoZWNrKGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIE9iamVjdC5wcm90b3R5cGUgbWV0aG9kIHRvIHNjb3BlXG4gICAgICAgICAgICAgIHBhcmVudEdldCA9IGF0dHJzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSA/ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pIDogbm9vcDtcblxuICAgICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gbm9vcCB0byBkZXN0aW5hdGlvbiBpZiBleHByZXNzaW9uIGlzIG5vdCB2YWxpZFxuICAgICAgICAgICAgICBpZiAocGFyZW50R2V0ID09PSBub29wICYmIG9wdGlvbmFsKSBicmVhaztcblxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gZnVuY3Rpb24gKGxvY2Fscykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRHZXQoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjb3JkQ2hhbmdlcyhrZXksIGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRlc3RpbmF0aW9uLiRvbkNoYW5nZXMpICYmICFzaW1wbGVDb21wYXJlKGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90IGFscmVhZHkgc2NoZWR1bGVkIHRoZSB0b3AgbGV2ZWwgb25DaGFuZ2VzUXVldWUgaGFuZGxlciB0aGVuIGRvIHNvIG5vd1xuICAgICAgICAgICAgaWYgKCFvbkNoYW5nZXNRdWV1ZSkge1xuICAgICAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZmx1c2hPbkNoYW5nZXNRdWV1ZSk7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IHF1ZXVlZCBhIHRyaWdnZXIgb2Ygb25DaGFuZ2VzIGZvciB0aGlzIGNvbnRyb2xsZXIgdGhlbiBkbyBzbyBub3dcbiAgICAgICAgICAgIGlmICghY2hhbmdlcykge1xuICAgICAgICAgICAgICBjaGFuZ2VzID0ge307XG4gICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlLnB1c2godHJpZ2dlck9uQ2hhbmdlc0hvb2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGhhcyBiZWVuIGEgY2hhbmdlIG9uIHRoaXMgcHJvcGVydHkgYWxyZWFkeSB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgICAgICBpZiAoY2hhbmdlc1trZXldKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjaGFuZ2VzW2tleV0ucHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoaXMgY2hhbmdlXG4gICAgICAgICAgICBjaGFuZ2VzW2tleV0gPSBuZXcgU2ltcGxlQ2hhbmdlKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlck9uQ2hhbmdlc0hvb2soKSB7XG4gICAgICAgICAgZGVzdGluYXRpb24uJG9uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICAgICAgICAvLyBOb3cgY2xlYXIgdGhlIGNoYW5nZXMgc28gdGhhdCB3ZSBzY2hlZHVsZSBvbkNoYW5nZXMgd2hlbiBtb3JlIGNoYW5nZXMgYXJyaXZlXG4gICAgICAgICAgY2hhbmdlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5pdGlhbENoYW5nZXM6IGluaXRpYWxDaGFuZ2VzLFxuICAgICAgICAgIHJlbW92ZVdhdGNoZXM6IHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGggJiYgZnVuY3Rpb24gcmVtb3ZlV2F0Y2hlcygpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbltpXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNpbXBsZUNoYW5nZShwcmV2aW91cywgY3VycmVudCkge1xuICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzO1xuICAgIHRoaXMuY3VycmVudFZhbHVlID0gY3VycmVudDtcbiAgfVxuICBTaW1wbGVDaGFuZ2UucHJvdG90eXBlLmlzRmlyc3RDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXNWYWx1ZSA9PT0gX1VOSU5JVElBTElaRURfVkFMVUU7XG4gIH07XG5cbiAgdmFyIFBSRUZJWF9SRUdFWFAgPSAvXigoPzp4fGRhdGEpWzpcXC1fXSkvaTtcbiAgdmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gL1s6XFwtX10rKC4pL2c7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS5cbiAgICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAgICovXG4gIGZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJykucmVwbGFjZShTUEVDSUFMX0NIQVJTX1JFR0VYUCwgZm5DYW1lbENhc2VSZXBsYWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgdHlwZVxuICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQSBzaGFyZWQgb2JqZWN0IGJldHdlZW4gZGlyZWN0aXZlIGNvbXBpbGUgLyBsaW5raW5nIGZ1bmN0aW9ucyB3aGljaCBjb250YWlucyBub3JtYWxpemVkIERPTVxuICAgKiBlbGVtZW50IGF0dHJpYnV0ZXMuIFRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXNcbiAgICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzXG4gICAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXQgRE9NIGVsZW1lbnQgYXR0cmlidXRlIHZhbHVlLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb3JtYWxpemVkIGVsZW1lbnQgYXR0cmlidXRlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIG1vZGlmeS4gVGhlIG5hbWUgaXNcbiAgICogICAgICAgICAgcmV2ZXJzZS10cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9XG4gICAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uIFRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50ZXJwb2xhdGVkIHN0cmluZy5cbiAgICovXG5cbiAgLyoqXG4gICAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvblxuICAgKi9cblxuICBmdW5jdGlvbiBub2Rlc2V0TGlua2luZ0ZuKFxuICAvKiBhbmd1bGFyLlNjb3BlICovc2NvcGUsXG4gIC8qIE5vZGVMaXN0ICovbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi9yb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovYm91bmRUcmFuc2NsdWRlRm4pIHt9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKFxuICAvKiBub2Rlc2V0TGlua2luZ0ZuICovbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqL3Njb3BlLFxuICAvKiBOb2RlICovbm9kZSxcbiAgLyogRWxlbWVudCAqL3Jvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi9ib3VuZFRyYW5zY2x1ZGVGbikge31cblxuICBmdW5jdGlvbiB0b2tlbkRpZmZlcmVuY2Uoc3RyMSwgc3RyMikge1xuICAgIHZhciB2YWx1ZXMgPSAnJyxcbiAgICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgICAgdG9rZW5zMiA9IHN0cjIuc3BsaXQoL1xccysvKTtcblxuICAgIG91dGVyOiBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHRva2VuID09PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICAgIH1cbiAgICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGpxTm9kZXMpIHtcbiAgICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpO1xuICAgIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7XG5cbiAgICBpZiAoaSA8PSAxKSB7XG4gICAgICByZXR1cm4ganFOb2RlcztcbiAgICB9XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgbm9kZSA9IGpxTm9kZXNbaV07XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQgfHwgbm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSAnJykge1xuICAgICAgICBzcGxpY2UuY2FsbChqcU5vZGVzLCBpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGpxTm9kZXM7XG4gIH1cblxuICB2YXIgJGNvbnRyb2xsZXJNaW5FcnIgPSBtaW5FcnIoJyRjb250cm9sbGVyJyk7XG5cbiAgdmFyIENOVFJMX1JFRyA9IC9eKFxcUyspKFxccythc1xccysoW1xcdyRdKykpPyQvO1xuICBmdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihjb250cm9sbGVyLCBpZGVudCkge1xuICAgIGlmIChpZGVudCAmJiBpc1N0cmluZyhpZGVudCkpIHJldHVybiBpZGVudDtcbiAgICBpZiAoaXNTdHJpbmcoY29udHJvbGxlcikpIHtcbiAgICAgIHZhciBtYXRjaCA9IENOVFJMX1JFRy5leGVjKGNvbnRyb2xsZXIpO1xuICAgICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbM107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gICAqIGNvbnRyb2xsZXJzLlxuICAgKlxuICAgKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gICAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyIHJlZ2lzdGVyfSBtZXRob2QuXG4gICAqL1xuICBmdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICAgIHZhciBjb250cm9sbGVycyA9IHt9LFxuICAgICAgICBnbG9iYWxzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNoYXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDb250cm9sbGVyIG5hbWUgdG8gY2hlY2suXG4gICAgICovXG4gICAgdGhpcy5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlIGtleXMgYXJlXG4gICAgICogICAgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLlxuICAgICAqL1xuICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZXh0ZW5kKGNvbnRyb2xsZXJzLCBuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgICAqIEBkZXNjcmlwdGlvbiBJZiBjYWxsZWQsIGFsbG93cyBgJGNvbnRyb2xsZXJgIHRvIGZpbmQgY29udHJvbGxlciBjb25zdHJ1Y3RvcnMgb24gYHdpbmRvd2BcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogc2luY2VWZXJzaW9uPVwidjEuMy4wXCJcbiAgICAgKiByZW1vdmVWZXJzaW9uPVwidjEuNy4wXCJcbiAgICAgKiBUaGlzIG1ldGhvZCBvZiBmaW5kaW5nIGNvbnRyb2xsZXJzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXG4gICAgICovXG4gICAgdGhpcy5hbGxvd0dsb2JhbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBnbG9iYWxzID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uICgkaW5qZWN0b3IsICR3aW5kb3cpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgICogQG5hbWUgJGNvbnRyb2xsZXJcbiAgICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gY29uc3RydWN0b3IgSWYgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiB0aGVuIGl0J3MgY29uc2lkZXJlZCB0byBiZSB0aGVcbiAgICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgICAqXG4gICAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3JcbiAgICAgICAqICAgICogaWYgJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMsIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsXG4gICAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKVxuICAgICAgICpcbiAgICAgICAqICAgIFRoZSBzdHJpbmcgY2FuIHVzZSB0aGUgYGNvbnRyb2xsZXIgYXMgcHJvcGVydHlgIHN5bnRheCwgd2hlcmUgdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgaXMgcHVibGlzaGVkXG4gICAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgICAqICAgIHRvIHdvcmsgY29ycmVjdGx5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cbiAgICAgICAqXG4gICAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiAkY29udHJvbGxlcihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgICAvLyBQUklWQVRFIEFQSTpcbiAgICAgICAgLy8gICBwYXJhbSBgbGF0ZXJgIC0tLSBpbmRpY2F0ZXMgdGhhdCB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGlzIGludm9rZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWRcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBpcyBpbnZva2VkLlxuICAgICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuXG4gICAgICAgIHZhciBpbnN0YW5jZSwgbWF0Y2gsIGNvbnN0cnVjdG9yLCBpZGVudGlmaWVyO1xuICAgICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7XG4gICAgICAgICAgaWRlbnRpZmllciA9IGlkZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKGV4cHJlc3Npb24pKSB7XG4gICAgICAgICAgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKENOVFJMX1JFRyk7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxmbXQnLCAnQmFkbHkgZm9ybWVkIGNvbnRyb2xsZXIgc3RyaW5nIFxcJ3swfVxcJy4gJyArICdNdXN0IG1hdGNoIGBfX25hbWVfXyBhcyBfX2lkX19gIG9yIGBfX25hbWVfX2AuJywgZXhwcmVzc2lvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0cnVjdG9yID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKSA/IGNvbnRyb2xsZXJzW2NvbnN0cnVjdG9yXSA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHwgKGdsb2JhbHMgPyBnZXR0ZXIoJHdpbmRvdywgY29uc3RydWN0b3IsIHRydWUpIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxyZWcnLCAnVGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgbmFtZSBcXCd7MH1cXCcgaXMgbm90IHJlZ2lzdGVyZWQuJywgY29uc3RydWN0b3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXRlcikge1xuICAgICAgICAgIC8vIEluc3RhbnRpYXRlIGNvbnRyb2xsZXIgbGF0ZXI6XG4gICAgICAgICAgLy8gVGhpcyBtYWNoaW5lcnkgaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCBiZWZvcmUgY2FsbGluZyB0aGVcbiAgICAgICAgICAvLyBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXRzZWxmLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIGlzXG4gICAgICAgICAgLy8gaW52b2tlZC4gUHJpbWFyaWx5LCB0aGlzIGlzIHVzZWQgZm9yIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgaW4gJGNvbXBpbGUuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGlzIGZlYXR1cmUgaXMgbm90IGludGVuZGVkIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLCBhbmQgaXMgdGh1cyBub3QgZG9jdW1lbnRlZFxuICAgICAgICAgIC8vIHB1YmxpY2x5LlxuICAgICAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgICAgICB2YXIgY29udHJvbGxlclByb3RvdHlwZSA9IChpc0FycmF5KGV4cHJlc3Npb24pID8gZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdIDogZXhwcmVzc2lvbikucHJvdG90eXBlO1xuICAgICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb250cm9sbGVyUHJvdG90eXBlIHx8IG51bGwpO1xuXG4gICAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRjb250cm9sbGVySW5pdCgpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGV4cHJlc3Npb24sIGluc3RhbmNlLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IGluc3RhbmNlICYmIChpc09iamVjdChyZXN1bHQpIHx8IGlzRnVuY3Rpb24ocmVzdWx0KSkpIHtcbiAgICAgICAgICAgICAgaW5zdGFuY2UgPSByZXN1bHQ7XG4gICAgICAgICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcmVzdWx0IGNoYW5nZWQsIHJlLWFzc2lnbiBjb250cm9sbGVyQXMgdmFsdWUgdG8gc2NvcGUuXG4gICAgICAgICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5zdGFuY2UgPSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoZXhwcmVzc2lvbiwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG5cbiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICAgICAgaWYgKCEobG9jYWxzICYmIGlzT2JqZWN0KGxvY2Fscy4kc2NvcGUpKSkge1xuICAgICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLCAnQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyIFxcJ3swfVxcJyBhcyBcXCd7MX1cXCchIE5vICRzY29wZSBvYmplY3QgcHJvdmlkZWQgdmlhIGBsb2NhbHNgLicsIG5hbWUsIGlkZW50aWZpZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRkb2N1bWVudFxuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKiBAdGhpc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQSB7QGxpbmsgYW5ndWxhci5lbGVtZW50IGpRdWVyeSBvciBqcUxpdGV9IHdyYXBwZXIgZm9yIHRoZSBicm93c2VyJ3MgYHdpbmRvdy5kb2N1bWVudGAgb2JqZWN0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJkb2N1bWVudEV4YW1wbGVcIiBuYW1lPVwiZG9jdW1lbnRcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPHA+JGRvY3VtZW50IHRpdGxlOiA8YiBuZy1iaW5kPVwidGl0bGVcIj48L2I+PC9wPlxuICAgICAgICAgICA8cD53aW5kb3cuZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ3aW5kb3dUaXRsZVwiPjwvYj48L3A+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRkb2N1bWVudCkge1xuICAgICAgICAgICAgICRzY29wZS50aXRsZSA9ICRkb2N1bWVudFswXS50aXRsZTtcbiAgICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKSB7XG4gICAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24gKHdpbmRvdykge1xuICAgICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0aGlzXG4gICAqIExpc3RlbnMgZm9yIGRvY3VtZW50IHZpc2liaWxpdHkgY2hhbmdlIGFuZCBtYWtlcyB0aGUgY3VycmVudCBzdGF0dXMgYWNjZXNzaWJsZS5cbiAgICovXG4gIGZ1bmN0aW9uICQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJGRvY3VtZW50LCAkcm9vdFNjb3BlKSB7XG4gICAgICB2YXIgZG9jID0gJGRvY3VtZW50WzBdO1xuICAgICAgdmFyIGhpZGRlbiA9IGRvYyAmJiBkb2MuaGlkZGVuO1xuXG4gICAgICAkZG9jdW1lbnQub24oJ3Zpc2liaWxpdHljaGFuZ2UnLCBjaGFuZ2VMaXN0ZW5lcik7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGRvY3VtZW50Lm9mZigndmlzaWJpbGl0eWNoYW5nZScsIGNoYW5nZUxpc3RlbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VMaXN0ZW5lcigpIHtcbiAgICAgICAgaGlkZGVuID0gZG9jLmhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGhpZGRlbjtcbiAgICAgIH07XG4gICAgfV07XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAgICogQHJlcXVpcmVzIG5nLiRsb2dcbiAgICogQHRoaXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFueSB1bmNhdWdodCBleGNlcHRpb24gaW4gYW5ndWxhciBleHByZXNzaW9ucyBpcyBkZWxlZ2F0ZWQgdG8gdGhpcyBzZXJ2aWNlLlxuICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgZGVsZWdhdGVzIHRvIGAkbG9nLmVycm9yYCB3aGljaCBsb2dzIGl0IGludG9cbiAgICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAgICpcbiAgICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnlcbiAgICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gICAqXG4gICAqICMjIEV4YW1wbGU6XG4gICAqXG4gICAqIFRoZSBleGFtcGxlIGJlbG93IHdpbGwgb3ZlcndyaXRlIHRoZSBkZWZhdWx0IGAkZXhjZXB0aW9uSGFuZGxlcmAgaW4gb3JkZXIgdG8gKGEpIGxvZyB1bmNhdWdodFxuICAgKiBlcnJvcnMgdG8gdGhlIGJhY2tlbmQgZm9yIGxhdGVyIGluc3BlY3Rpb24gYnkgdGhlIGRldmVsb3BlcnMgYW5kIChiKSB0byB1c2UgYCRsb2cud2FybigpYCBpbnN0ZWFkXG4gICAqIG9mIGAkbG9nLmVycm9yKClgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIGFuZ3VsYXIuXG4gICAqICAgICBtb2R1bGUoJ2V4Y2VwdGlvbk92ZXJ3cml0ZScsIFtdKS5cbiAgICogICAgIGZhY3RvcnkoJyRleGNlcHRpb25IYW5kbGVyJywgWyckbG9nJywgJ2xvZ0Vycm9yc1RvQmFja2VuZCcsIGZ1bmN0aW9uKCRsb2csIGxvZ0Vycm9yc1RvQmFja2VuZCkge1xuICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gbXlFeGNlcHRpb25IYW5kbGVyKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICogICAgICAgICBsb2dFcnJvcnNUb0JhY2tlbmQoZXhjZXB0aW9uLCBjYXVzZSk7XG4gICAqICAgICAgICAgJGxvZy53YXJuKGV4Y2VwdGlvbiwgY2F1c2UpO1xuICAgKiAgICAgICB9O1xuICAgKiAgICAgfV0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogPGhyIC8+XG4gICAqIE5vdGUsIHRoYXQgY29kZSBleGVjdXRlZCBpbiBldmVudC1saXN0ZW5lcnMgKGV2ZW4gdGhvc2UgcmVnaXN0ZXJlZCB1c2luZyBqcUxpdGUncyBgb25gL2BiaW5kYFxuICAgKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gICAqICh1bmxlc3MgZXhlY3V0ZWQgZHVyaW5nIGEgZGlnZXN0KS5cbiAgICpcbiAgICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICAgKiBgdHJ5IHsgLi4uIH0gY2F0Y2goZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfWBcbiAgICpcbiAgICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGNhdXNlIE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoXG4gICAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLlxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHtcbiAgICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbiAoJGxvZykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfV07XG4gIH1cblxuICB2YXIgJCRGb3JjZVJlZmxvd1Byb3ZpZGVyID0gLyoqIEB0aGlzICovZnVuY3Rpb24gJCRGb3JjZVJlZmxvd1Byb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJGRvY3VtZW50JywgZnVuY3Rpb24gKCRkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIC8vdGhlIGxpbmUgYmVsb3cgd2lsbCBmb3JjZSB0aGUgYnJvd3NlciB0byBwZXJmb3JtIGEgcmVwYWludCBzb1xuICAgICAgICAvL3RoYXQgYWxsIHRoZSBhbmltYXRlZCBlbGVtZW50cyB3aXRoaW4gdGhlIGFuaW1hdGlvbiBmcmFtZSB3aWxsXG4gICAgICAgIC8vYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzIHJlcXVpcmVkIHRvXG4gICAgICAgIC8vZW5zdXJlIHRoYXQgdGhlIHByZXBhcmF0aW9uIGFuaW1hdGlvbiBpcyBwcm9wZXJseSBmbHVzaGVkIHNvIHRoYXRcbiAgICAgICAgLy90aGUgYWN0aXZlIHN0YXRlIHBpY2tzIHVwIGZyb20gdGhlcmUuIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLlxuICAgICAgICAvL0RPIE5PVCBPUFRJTUlaRSBUSElTIExJTkUuIFRIRSBNSU5JRklFUiBXSUxMIFJFTU9WRSBJVCBPVEhFUldJU0UgV0hJQ0hcbiAgICAgICAgLy9XSUxMIFJFU1VMVCBJTiBBTiBVTlBSRURJQ1RBQkxFIEJVRyBUSEFUIElTIFZFUlkgSEFSRCBUTyBUUkFDSyBET1dOIEFORFxuICAgICAgICAvL1dJTEwgVEFLRSBZRUFSUyBBV0FZIEZST00gWU9VUiBMSUZFLlxuICAgICAgICBpZiAoZG9tTm9kZSkge1xuICAgICAgICAgIGlmICghZG9tTm9kZS5ub2RlVHlwZSAmJiBkb21Ob2RlIGluc3RhbmNlb2YganFMaXRlKSB7XG4gICAgICAgICAgICBkb21Ob2RlID0gZG9tTm9kZVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9tTm9kZSA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb21Ob2RlLm9mZnNldFdpZHRoICsgMTtcbiAgICAgIH07XG4gICAgfV07XG4gIH07XG5cbiAgdmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG4gIHZhciBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiA9IHsgJ0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnIH07XG4gIHZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xuICB2YXIgSlNPTl9FTkRTID0ge1xuICAgICdbJzogL10kLyxcbiAgICAneyc6IC99JC9cbiAgfTtcbiAgdmFyIEpTT05fUFJPVEVDVElPTl9QUkVGSVggPSAvXlxcKV1cXH0nLD9cXG4vO1xuICB2YXIgJGh0dHBNaW5FcnIgPSBtaW5FcnIoJyRodHRwJyk7XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplVmFsdWUodikge1xuICAgIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgcmV0dXJuIGlzRGF0ZSh2KSA/IHYudG9JU09TdHJpbmcoKSA6IHRvSnNvbih2KTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICAvKiogQHRoaXMgKi9cbiAgZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcigpIHtcbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVyXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGNvbnZlcnRzIG9iamVjdHMgdG8gc3RyaW5nc1xuICAgICAqIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgICAqXG4gICAgICogKiBgeydmb28nOiAnYmFyJ31gIHJlc3VsdHMgaW4gYGZvbz1iYXJgXG4gICAgICogKiBgeydmb28nOiBEYXRlLm5vdygpfWAgcmVzdWx0cyBpbiBgZm9vPTIwMTUtMDQtMDFUMDklM0E1MCUzQTQ5LjI2MlpgIChgdG9JU09TdHJpbmcoKWAgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYSBEYXRlIG9iamVjdClcbiAgICAgKiAqIGB7J2Zvbyc6IFsnYmFyJywgJ2JheiddfWAgcmVzdWx0cyBpbiBgZm9vPWJhciZmb289YmF6YCAocmVwZWF0ZWQga2V5IGZvciBlYWNoIGFycmF5IGVsZW1lbnQpXG4gICAgICogKiBgeydmb28nOiB7J2Jhcic6J2Jheid9fWAgcmVzdWx0cyBpbiBgZm9vPSU3QiUyMmJhciUyMiUzQSUyMmJheiUyMiU3RGAgKHN0cmluZ2lmaWVkIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdClcbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBzZXJpYWxpemVyIHdpbGwgc29ydCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzIGFscGhhYmV0aWNhbGx5LlxuICAgICAqICovXG5cbiAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpIHx8IGlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG4gICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2KSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAdGhpcyAqL1xuICBmdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyKCkge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQWx0ZXJuYXRpdmUge0BsaW5rICRodHRwIGAkaHR0cGB9IHBhcmFtcyBzZXJpYWxpemVyIHRoYXQgZm9sbG93c1xuICAgICAqIGpRdWVyeSdzIFtgcGFyYW0oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qcXVlcnkucGFyYW0vKSBtZXRob2QgbG9naWMuXG4gICAgICogVGhlIHNlcmlhbGl6ZXIgd2lsbCBhbHNvIHNvcnQgdGhlIHBhcmFtcyBhbHBoYWJldGljYWxseS5cbiAgICAgKlxuICAgICAqIFRvIHVzZSBpdCBmb3Igc2VyaWFsaXppbmcgYCRodHRwYCByZXF1ZXN0IHBhcmFtZXRlcnMsIHNldCBpdCBhcyB0aGUgYHBhcmFtU2VyaWFsaXplcmAgcHJvcGVydHk6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogbXlVcmwsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgcGFyYW1zOiBteVBhcmFtcyxcbiAgICAgKiAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlJ1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgaXQgYXMgdGhlIGRlZmF1bHQgYHBhcmFtU2VyaWFsaXplcmAgaW4gdGhlXG4gICAgICoge0BsaW5rICRodHRwUHJvdmlkZXIjZGVmYXVsdHMgYCRodHRwUHJvdmlkZXJgfS5cbiAgICAgKlxuICAgICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBpbmplY3QgdGhlIHNlcmlhbGl6ZXIgYW5kIHVzZSBpdCBleHBsaWNpdGx5LCBmb3IgZXhhbXBsZSB0byBzZXJpYWxpemVcbiAgICAgKiBmb3JtIGRhdGEgZm9yIHN1Ym1pc3Npb246XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC5jb250cm9sbGVyKGZ1bmN0aW9uKCRodHRwLCAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSkge1xuICAgICAqICAgLy8uLi5cbiAgICAgKlxuICAgICAqICAgJGh0dHAoe1xuICAgICAqICAgICB1cmw6IG15VXJsLFxuICAgICAqICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgICAgZGF0YTogJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UobXlEYXRhKSxcbiAgICAgKiAgICAgaGVhZGVyczoge1xuICAgICAqICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAqICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKlxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogKi9cbiAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24galF1ZXJ5TGlrZVBhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgIHNlcmlhbGl6ZShwYXJhbXMsICcnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcblxuICAgICAgICBmdW5jdGlvbiBzZXJpYWxpemUodG9TZXJpYWxpemUsIHByZWZpeCwgdG9wTGV2ZWwpIHtcbiAgICAgICAgICBpZiAodG9TZXJpYWxpemUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodG9TZXJpYWxpemUpKSByZXR1cm47XG4gICAgICAgICAgaWYgKGlzQXJyYXkodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgICBmb3JFYWNoKHRvU2VyaWFsaXplLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICsgJ1snICsgKGlzT2JqZWN0KHZhbHVlKSA/IGluZGV4IDogJycpICsgJ10nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodG9TZXJpYWxpemUpICYmICFpc0RhdGUodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgICBmb3JFYWNoU29ydGVkKHRvU2VyaWFsaXplLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIHByZWZpeCArICh0b3BMZXZlbCA/ICcnIDogJ1snKSArIGtleSArICh0b3BMZXZlbCA/ICcnIDogJ10nKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShwcmVmaXgpICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodG9TZXJpYWxpemUpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKGRhdGEsIGhlYWRlcnMpIHtcbiAgICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgIC8vIFN0cmlwIGpzb24gdnVsbmVyYWJpbGl0eSBwcm90ZWN0aW9uIHByZWZpeCBhbmQgdHJpbSB3aGl0ZXNwYWNlXG4gICAgICB2YXIgdGVtcERhdGEgPSBkYXRhLnJlcGxhY2UoSlNPTl9QUk9URUNUSU9OX1BSRUZJWCwgJycpLnRyaW0oKTtcblxuICAgICAgaWYgKHRlbXBEYXRhKSB7XG4gICAgICAgIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICB2YXIgaGFzSnNvbkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMDtcblxuICAgICAgICBpZiAoaGFzSnNvbkNvbnRlbnRUeXBlIHx8IGlzSnNvbkxpa2UodGVtcERhdGEpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEgPSBmcm9tSnNvbih0ZW1wRGF0YSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCFoYXNKc29uQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkZGF0YScsICdEYXRhIG11c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4gUmVjZWl2ZWQ6IFwiezB9XCIuICcgKyAnUGFyc2UgZXJyb3I6IFwiezF9XCInLCBkYXRhLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSnNvbkxpa2Uoc3RyKSB7XG4gICAgdmFyIGpzb25TdGFydCA9IHN0ci5tYXRjaChKU09OX1NUQVJUKTtcbiAgICByZXR1cm4ganNvblN0YXJ0ICYmIEpTT05fRU5EU1tqc29uU3RhcnRbMF1dLnRlc3Qoc3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICAgIHZhciBwYXJzZWQgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgaTtcblxuICAgIGZ1bmN0aW9uIGZpbGxJblBhcnNlZChrZXksIHZhbCkge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyhoZWFkZXJzKSkge1xuICAgICAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKSwgdHJpbShsaW5lLnN1YnN0cihpICsgMSkpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaGVhZGVycykpIHtcbiAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlclZhbCwgaGVhZGVyS2V5KSB7XG4gICAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UoaGVhZGVyS2V5KSwgdHJpbShoZWFkZXJWYWwpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHBhcnNlZCBoZWFkZXJzLlxuICAgKlxuICAgKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC5cbiAgICogQHNlZSBwYXJzZUhlYWRlcnNcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by5cbiAgICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZz0pfSBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHdoaWNoIGlmIGNhbGxlZCB3aXRoOlxuICAgKlxuICAgKiAgIC0gaWYgY2FsbGVkIHdpdGggYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxuICAgKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuXG4gICAqL1xuICBmdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVyc09iajtcblxuICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKCFoZWFkZXJzT2JqKSBoZWFkZXJzT2JqID0gcGFyc2VIZWFkZXJzKGhlYWRlcnMpO1xuXG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlYWRlcnNPYmo7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFpbiBhbGwgZ2l2ZW4gZnVuY3Rpb25zXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1pbmdcbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZz0pfSBoZWFkZXJzIEhUVFAgaGVhZGVycyBnZXR0ZXIgZm4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gICAqIEBwYXJhbSB7KEZ1bmN0aW9ufEFycmF5LjxGdW5jdGlvbj4pfSBmbnMgRnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLlxuICAgKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS5cbiAgICovXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgc3RhdHVzLCBmbnMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmbnMpKSB7XG4gICAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gICAgfVxuXG4gICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uIChmbikge1xuICAgICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3VjY2VzcyhzdGF0dXMpIHtcbiAgICByZXR1cm4gMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHByb3ZpZGVyXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXJcbiAgICogQHRoaXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFVzZSBgJGh0dHBQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gICAqICovXG4gIGZ1bmN0aW9uICRIdHRwUHJvdmlkZXIoKSB7XG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJGh0dHBQcm92aWRlciNkZWZhdWx0c1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogLSAqKmBkZWZhdWx0cy5jYWNoZWAqKiAtIHtib29sZWFufE9iamVjdH0gLSBBIGJvb2xlYW4gdmFsdWUgb3Igb2JqZWN0IGNyZWF0ZWQgd2l0aFxuICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0gdG8gZW5hYmxlIG9yIGRpc2FibGUgY2FjaGluZyBvZiBIVFRQIHJlc3BvbnNlc1xuICAgICAqIGJ5IGRlZmF1bHQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIC0gKipgZGVmYXVsdHMuaGVhZGVyc2AqKiAtIHtPYmplY3R9IC0gRGVmYXVsdCBoZWFkZXJzIGZvciBhbGwgJGh0dHAgcmVxdWVzdHMuXG4gICAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgICAqIHNldHRpbmcgZGVmYXVsdCBoZWFkZXJzLlxuICAgICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCoqXG4gICAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wdXRgKipcbiAgICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBhdGNoYCoqXG4gICAgICpcbiAgICAgKiAtICoqYGRlZmF1bHRzLmpzb25wQ2FsbGJhY2tQYXJhbWAqKiAtIGB7c3RyaW5nfWAgLSB0aGUgbmFtZSBvZiB0aGUgcXVlcnkgcGFyYW1ldGVyIHRoYXQgcGFzc2VzIHRoZSBuYW1lIG9mIHRoZVxuICAgICAqIGNhbGxiYWNrIGluIGEgSlNPTlAgcmVxdWVzdC4gVGhlIHZhbHVlIG9mIHRoaXMgcGFyYW1ldGVyIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgZXhwcmVzc2lvbiBnZW5lcmF0ZWQgYnkgdGhlXG4gICAgICoge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS4gRGVmYXVsdHMgdG8gYCdjYWxsYmFjaydgLlxuICAgICAqXG4gICAgICogLSAqKmBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXJgKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvblxuICAgICAqICB1c2VkIHRvIHRoZSBwcmVwYXJlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgICAqICBJZiBzcGVjaWZpZWQgYXMgc3RyaW5nLCBpdCBpcyBpbnRlcnByZXRlZCBhcyBhIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAgICogIERlZmF1bHRzIHRvIHtAbGluayBuZy4kaHR0cFBhcmFtU2VyaWFsaXplciAkaHR0cFBhcmFtU2VyaWFsaXplcn0uXG4gICAgICpcbiAgICAgKiAtICoqYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgKiogLVxuICAgICAqIGB7QXJyYXk8ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfWAgLVxuICAgICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyAob3IgYSBzaW5nbGUgZnVuY3Rpb24pIHdoaWNoIGFyZSBhcHBsaWVkIHRvIHRoZSByZXF1ZXN0IGRhdGEuXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpcyBhbiBhcnJheSB3aXRoIG9uZSByZXF1ZXN0IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uOlxuICAgICAqXG4gICAgICogICAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXRcbiAgICAgKiAgICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIC0gKipgZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKiogLVxuICAgICAqIGB7QXJyYXk8ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKT58ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKX1gIC1cbiAgICAgKiBBbiBhcnJheSBvZiBmdW5jdGlvbnMgKG9yIGEgc2luZ2xlIGZ1bmN0aW9uKSB3aGljaCBhcmUgYXBwbGllZCB0byB0aGUgcmVzcG9uc2UgZGF0YS4gQnkgZGVmYXVsdCxcbiAgICAgKiB0aGlzIGlzIGFuIGFycmF5IHdoaWNoIGFwcGxpZXMgb25lIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRoYXQgZG9lcyB0d28gdGhpbmdzOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0XG4gICAgICogICAgKHNlZSB7QGxpbmsgbmcuJGh0dHAjc2VjdXJpdHktY29uc2lkZXJhdGlvbnMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgaW4gdGhlICRodHRwIGRvY3N9KS5cbiAgICAgKiAgLSBJZiB0aGUgYENvbnRlbnQtVHlwZWAgaXMgYGFwcGxpY2F0aW9uL2pzb25gIG9yIHRoZSByZXNwb25zZSBsb29rcyBsaWtlIEpTT04sXG4gICAgICogICAgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqIC0gKipgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuXG4gICAgICpcbiAgICAgKiAtICoqYGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlXG4gICAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC5cbiAgICAgKlxuICAgICAqKi9cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgLy8gdHJhbnNmb3JtIGluY29taW5nIHJlc3BvbnNlIGRhdGFcbiAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBbZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybV0sXG5cbiAgICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGFcbiAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpICYmICFpc0Zvcm1EYXRhKGQpID8gdG9Kc29uKGQpIDogZDtcbiAgICAgIH1dLFxuXG4gICAgICAvLyBkZWZhdWx0IGhlYWRlcnNcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Q6IHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgICAgcHV0OiBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICAgIHBhdGNoOiBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTilcbiAgICAgIH0sXG5cbiAgICAgIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gICAgICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgICAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVyJyxcblxuICAgICAganNvbnBDYWxsYmFja1BhcmFtOiAnY2FsbGJhY2snXG4gICAgfTtcblxuICAgIHZhciB1c2VBcHBseUFzeW5jID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlQXBwbHlBc3luY1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQ29uZmlndXJlICRodHRwIHNlcnZpY2UgdG8gY29tYmluZSBwcm9jZXNzaW5nIG9mIG11bHRpcGxlIGh0dHAgcmVzcG9uc2VzIHJlY2VpdmVkIGF0IGFyb3VuZFxuICAgICAqIHRoZSBzYW1lIHRpbWUgdmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jICRyb290U2NvcGUuJGFwcGx5QXN5bmN9LiBUaGlzIGNhbiByZXN1bHQgaW5cbiAgICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzXG4gICAgICogY29uY3VycmVudGx5IChjb21tb24gZHVyaW5nIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCkuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiB0cnVlLCB3aGVuIHJlcXVlc3RzIGFyZSBsb2FkZWQsIHRoZXkgd2lsbCBzY2hlZHVsZSBhIGRlZmVycmVkXG4gICAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICAgKiAgICB0byBsb2FkIGFuZCBzaGFyZSB0aGUgc2FtZSBkaWdlc3QgY3ljbGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICAgKiAgICBvdGhlcndpc2UsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICAgKiovXG4gICAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB1c2VBcHBseUFzeW5jID0gISF2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlQXBwbHlBc3luYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJGh0dHBQcm92aWRlciNpbnRlcmNlcHRvcnNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEFycmF5IGNvbnRhaW5pbmcgc2VydmljZSBmYWN0b3JpZXMgZm9yIGFsbCBzeW5jaHJvbm91cyBvciBhc3luY2hyb25vdXMge0BsaW5rIG5nLiRodHRwICRodHRwfVxuICAgICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogVGhlc2Ugc2VydmljZSBmYWN0b3JpZXMgYXJlIG9yZGVyZWQgYnkgcmVxdWVzdCwgaS5lLiB0aGV5IGFyZSBhcHBsaWVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuICAgICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjaW50ZXJjZXB0b3JzIEludGVyY2VwdG9ycyBkZXRhaWxlZCBpbmZvfVxuICAgICAqKi9cbiAgICB2YXIgaW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLmludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckaHR0cEJhY2tlbmQnLCAnJCRjb29raWVSZWFkZXInLCAnJGNhY2hlRmFjdG9yeScsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbmplY3RvcicsICckc2NlJywgZnVuY3Rpb24gKCRicm93c2VyLCAkaHR0cEJhY2tlbmQsICQkY29va2llUmVhZGVyLCAkY2FjaGVGYWN0b3J5LCAkcm9vdFNjb3BlLCAkcSwgJGluamVjdG9yLCAkc2NlKSB7XG5cbiAgICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgICAvKipcbiAgICAgICAqIE1ha2Ugc3VyZSB0aGF0IGRlZmF1bHQgcGFyYW0gc2VyaWFsaXplciBpcyBleHBvc2VkIGFzIGEgZnVuY3Rpb25cbiAgICAgICAqL1xuICAgICAgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA/ICRpbmplY3Rvci5nZXQoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA6IGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLlxuICAgICAgICogVGhlIHJldmVyc2FsIGlzIG5lZWRlZCBzbyB0aGF0IHdlIGNhbiBidWlsZCB1cCB0aGUgaW50ZXJjZXB0aW9uIGNoYWluIGFyb3VuZCB0aGVcbiAgICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAgICovXG4gICAgICB2YXIgcmV2ZXJzZWRJbnRlcmNlcHRvcnMgPSBbXTtcblxuICAgICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24gKGludGVyY2VwdG9yRmFjdG9yeSkge1xuICAgICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSkgPyAkaW5qZWN0b3IuZ2V0KGludGVyY2VwdG9yRmFjdG9yeSkgOiAkaW5qZWN0b3IuaW52b2tlKGludGVyY2VwdG9yRmFjdG9yeSkpO1xuICAgICAgfSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSAkaHR0cFxuICAgICAgICogQHJlcXVpcmVzIG5nLiRodHRwQmFja2VuZFxuICAgICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAgICAgKiBAcmVxdWlyZXMgJHFcbiAgICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICAgKiBIVFRQIHNlcnZlcnMgdmlhIHRoZSBicm93c2VyJ3MgW1hNTEh0dHBSZXF1ZXN0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdClcbiAgICAgICAqIG9iamVjdCBvciB2aWEgW0pTT05QXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QKS5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZVxuICAgICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgJGh0dHBCYWNrZW5kIG1vY2t9LlxuICAgICAgICpcbiAgICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlXG4gICAgICAgKiAkcmVzb3VyY2V9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieVxuICAgICAgICogdGhlICRxIHNlcnZpY2UuIFdoaWxlIGZvciBzaW1wbGUgdXNhZ2UgcGF0dGVybnMgdGhpcyBkb2Vzbid0IG1hdHRlciBtdWNoLCBmb3IgYWR2YW5jZWQgdXNhZ2VcbiAgICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd1cmF0aW9uIG9iamVjdH0g4oCUXG4gICAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfS5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogICAvLyBTaW1wbGUgR0VUIHJlcXVlc3QgZXhhbXBsZTpcbiAgICAgICAqICAgJGh0dHAoe1xuICAgICAgICogICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgKiAgICAgdXJsOiAnL3NvbWVVcmwnXG4gICAgICAgKiAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgKiAgICAgICAvLyB3aGVuIHRoZSByZXNwb25zZSBpcyBhdmFpbGFibGVcbiAgICAgICAqICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgKiAgICAgICAvLyBjYWxsZWQgYXN5bmNocm9ub3VzbHkgaWYgYW4gZXJyb3Igb2NjdXJzXG4gICAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgICAqICAgICB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtXG4gICAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAgICogICAtICoqc3RhdHVzKiog4oCTIGB7bnVtYmVyfWAg4oCTIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAgICogICAtICoqaGVhZGVycyoqIOKAkyBge2Z1bmN0aW9uKFtoZWFkZXJOYW1lXSl9YCDigJMgSGVhZGVyIGdldHRlciBmdW5jdGlvbi5cbiAgICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgICAqICAgLSAqKnN0YXR1c1RleHQqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBzdGF0dXMgdGV4dCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICAgKiAgIC0gKip4aHJTdGF0dXMqKiDigJMgYHtzdHJpbmd9YCDigJMgU3RhdHVzIG9mIHRoZSBYTUxIdHRwUmVxdWVzdCAoYGNvbXBsZXRlYCwgYGVycm9yYCwgYHRpbWVvdXRgIG9yIGBhYm9ydGApLlxuICAgICAgICpcbiAgICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kIHdpbGwgcmVzdWx0IGluXG4gICAgICAgKiB0aGUgc3VjY2VzcyBjYWxsYmFjayBiZWluZyBjYWxsZWQuIEFueSByZXNwb25zZSBzdGF0dXMgY29kZSBvdXRzaWRlIG9mIHRoYXQgcmFuZ2UgaXNcbiAgICAgICAqIGNvbnNpZGVyZWQgYW4gZXJyb3Igc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLlxuICAgICAgICogQWxzbywgc3RhdHVzIGNvZGVzIGxlc3MgdGhhbiAtMSBhcmUgbm9ybWFsaXplZCB0byB6ZXJvLiAtMSB1c3VhbGx5IG1lYW5zIHRoZSByZXF1ZXN0IHdhc1xuICAgICAgICogYWJvcnRlZCwgZS5nLiB1c2luZyBhIGBjb25maWcudGltZW91dGAuXG4gICAgICAgKiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmdcbiAgICAgICAqIHRoYXQgdGhlIG91dGNvbWUgKHN1Y2Nlc3Mgb3IgZXJyb3IpIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSB0aGUgZmluYWwgcmVzcG9uc2Ugc3RhdHVzIGNvZGUuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMjIFNob3J0Y3V0IG1ldGhvZHNcbiAgICAgICAqXG4gICAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAgICogcmVxdWVzdCBkYXRhIG11c3QgYmUgcGFzc2VkIGluIGZvciBQT1NUL1BVVCByZXF1ZXN0cy4gQW4gb3B0aW9uYWwgY29uZmlnIGNhbiBiZSBwYXNzZWQgYXMgdGhlXG4gICAgICAgKiBsYXN0IGFyZ3VtZW50LlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgICAqXG4gICAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNnZXQgJGh0dHAuZ2V0fVxuICAgICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcG9zdCAkaHR0cC5wb3N0fVxuICAgICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcHV0ICRodHRwLnB1dH1cbiAgICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNqc29ucCAkaHR0cC5qc29ucH1cbiAgICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3BhdGNoICRodHRwLnBhdGNofVxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHBcbiAgICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQjZmx1c2ggJGh0dHBCYWNrZW5kLmZsdXNoKCl9IHRvIGZsdXNoIGVhY2ggcGVuZGluZ1xuICAgICAgICogcmVxdWVzdCB1c2luZyB0cmFpbmVkIHJlc3BvbnNlcy5cbiAgICAgICAqXG4gICAgICAgKiBgYGBcbiAgICAgICAqICRodHRwQmFja2VuZC5leHBlY3RHRVQoLi4uKTtcbiAgICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAgICogJGh0dHBCYWNrZW5kLmZsdXNoKCk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiAjIyBTZXR0aW5nIEhUVFAgSGVhZGVyc1xuICAgICAgICpcbiAgICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAgICogY2FuIGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYnkgYWNjZXNzaW5nIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzYCBjb25maWd1cmF0aW9uXG4gICAgICAgKiBvYmplY3QsIHdoaWNoIGN1cnJlbnRseSBjb250YWlucyB0aGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbjpcbiAgICAgICAqXG4gICAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCAoaGVhZGVycyB0aGF0IGFyZSBjb21tb24gZm9yIGFsbCByZXF1ZXN0cyk6XG4gICAgICAgKiAgIC0gPGNvZGU+QWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCBcXComIzY1Mjc5Oy8mIzY1Mjc5O1xcKjwvY29kZT5cbiAgICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYFxuICAgICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKVxuICAgICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICAgKlxuICAgICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb25cbiAgICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAgICogd2l0aCB0aGUgbG93ZXJjYXNlZCBIVFRQIG1ldGhvZCBuYW1lIGFzIHRoZSBrZXksIGUuZy5cbiAgICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfWAuXG4gICAgICAgKlxuICAgICAgICogVGhlIGRlZmF1bHRzIGNhbiBhbHNvIGJlIHNldCBhdCBydW50aW1lIHZpYSB0aGUgYCRodHRwLmRlZmF1bHRzYCBvYmplY3QgaW4gdGhlIHNhbWVcbiAgICAgICAqIGZhc2hpb24uIEZvciBleGFtcGxlOlxuICAgICAgICpcbiAgICAgICAqIGBgYFxuICAgICAgICogbW9kdWxlLnJ1bihmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dyc7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEluIGFkZGl0aW9uLCB5b3UgY2FuIHN1cHBseSBhIGBoZWFkZXJzYCBwcm9wZXJ0eSBpbiB0aGUgY29uZmlnIG9iamVjdCBwYXNzZWQgd2hlblxuICAgICAgICogY2FsbGluZyBgJGh0dHAoY29uZmlnKWAsIHdoaWNoIG92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgd2l0aG91dCBjaGFuZ2luZyB0aGVtIGdsb2JhbGx5LlxuICAgICAgICpcbiAgICAgICAqIFRvIGV4cGxpY2l0bHkgcmVtb3ZlIGEgaGVhZGVyIGF1dG9tYXRpY2FsbHkgYWRkZWQgdmlhICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycyBvbiBhIHBlciByZXF1ZXN0IGJhc2lzLFxuICAgICAgICogVXNlIHRoZSBgaGVhZGVyc2AgcHJvcGVydHksIHNldHRpbmcgdGhlIGRlc2lyZWQgaGVhZGVyIHRvIGB1bmRlZmluZWRgLiBGb3IgZXhhbXBsZTpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogdmFyIHJlcSA9IHtcbiAgICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAqICB1cmw6ICdodHRwOi8vZXhhbXBsZS5jb20nLFxuICAgICAgICogIGhlYWRlcnM6IHtcbiAgICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgICAqICB9LFxuICAgICAgICogIGRhdGE6IHsgdGVzdDogJ3Rlc3QnIH1cbiAgICAgICAqIH1cbiAgICAgICAqXG4gICAgICAgKiAkaHR0cChyZXEpLnRoZW4oZnVuY3Rpb24oKXsuLi59LCBmdW5jdGlvbigpey4uLn0pO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogIyMgVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXNcbiAgICAgICAqXG4gICAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uczogYHRyYW5zZm9ybVJlcXVlc3RgXG4gICAgICAgKiBhbmQgYHRyYW5zZm9ybVJlc3BvbnNlYC4gVGhlc2UgcHJvcGVydGllcyBjYW4gYmUgYSBzaW5nbGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICAgKiB3aGljaCBhbGxvd3MgeW91IHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uXG4gICAgICAgKlxuICAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICAqICoqTm90ZToqKiBBbmd1bGFyIGRvZXMgbm90IG1ha2UgYSBjb3B5IG9mIHRoZSBgZGF0YWAgcGFyYW1ldGVyIGJlZm9yZSBpdCBpcyBwYXNzZWQgaW50byB0aGUgYHRyYW5zZm9ybVJlcXVlc3RgIHBpcGVsaW5lLlxuICAgICAgICogVGhhdCBtZWFucyBjaGFuZ2VzIHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGBkYXRhYCBhcmUgbm90IGxvY2FsIHRvIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gKHNpbmNlIEphdmFzY3JpcHQgcGFzc2VzIG9iamVjdHMgYnkgcmVmZXJlbmNlKS5cbiAgICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGNhbGxpbmcgYCRodHRwLmdldCh1cmwsICRzY29wZS5teU9iamVjdClgLCBtb2RpZmljYXRpb25zIHRvIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzIGluIGEgdHJhbnNmb3JtUmVxdWVzdFxuICAgICAgICogZnVuY3Rpb24gd2lsbCBiZSByZWZsZWN0ZWQgb24gdGhlIHNjb3BlIGFuZCBpbiBhbnkgdGVtcGxhdGVzIHdoZXJlIHRoZSBvYmplY3QgaXMgZGF0YS1ib3VuZC5cbiAgICAgICAqIFRvIHByZXZlbnQgdGhpcywgdHJhbnNmb3JtIGZ1bmN0aW9ucyBzaG91bGQgaGF2ZSBubyBzaWRlLWVmZmVjdHMuXG4gICAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgcHJvcGVydGllcywgaXQgaXMgcmVjb21tZW5kZWQgdG8gbWFrZSBhIGNvcHkgb2YgdGhlIGRhdGEsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0IHRvIHJldHVybi5cbiAgICAgICAqIDwvZGl2PlxuICAgICAgICpcbiAgICAgICAqICMjIyBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc1xuICAgICAgICpcbiAgICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAgICogYGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzLiBJZiBhIHJlcXVlc3QgZG9lcyBub3QgcHJvdmlkZSBpdHMgb3duIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgICogdGhlbiB0aGVzZSB3aWxsIGJlIGFwcGxpZWQuXG4gICAgICAgKlxuICAgICAgICogWW91IGNhbiBhdWdtZW50IG9yIHJlcGxhY2UgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIGJ5IG1vZGlmeWluZyB0aGVzZSBwcm9wZXJ0aWVzIGJ5IGFkZGluZyB0byBvclxuICAgICAgICogcmVwbGFjaW5nIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICAgKlxuICAgICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApIGlzXG4gICAgICAgKiBhbiBhcnJheSB3aXRoIG9uZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgICAqXG4gICAgICAgKiAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXRcbiAgICAgICAqICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgICAqXG4gICAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCkgaXNcbiAgICAgICAqIGFuIGFycmF5IHdpdGggb25lIGZ1bmN0aW9uIHRoYXQgZG9lcyB0aGUgZm9sbG93aW5nOlxuICAgICAgICpcbiAgICAgICAqICAtIElmIFhTUkYgcHJlZml4IGlzIGRldGVjdGVkLCBzdHJpcCBpdCAoc2VlIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zIHNlY3Rpb24gYmVsb3cpLlxuICAgICAgICogIC0gSWYgdGhlIGBDb250ZW50LVR5cGVgIGlzIGBhcHBsaWNhdGlvbi9qc29uYCBvciB0aGUgcmVzcG9uc2UgbG9va3MgbGlrZSBKU09OLFxuICAgICAgKiAgICAgIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMjIyBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9ucyBQZXIgUmVxdWVzdFxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSByZXF1ZXN0L3Jlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyBvbmx5IGZvciBhIHNpbmdsZSByZXF1ZXN0IHRoZW4gcHJvdmlkZVxuICAgICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZFxuICAgICAgICogaW50byBgJGh0dHBgLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgcHJvdmlkZSB0aGVzZSBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWcgb2JqZWN0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlXG4gICAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAgICogbG9jYWwgdHJhbnNmb3JtYXRpb24gYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgaGF2ZSBiZWVuIHJ1bi5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogZnVuY3Rpb24gYXBwZW5kVHJhbnNmb3JtKGRlZmF1bHRzLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAqXG4gICAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICAgKiAgIGRlZmF1bHRzID0gYW5ndWxhci5pc0FycmF5KGRlZmF1bHRzKSA/IGRlZmF1bHRzIDogW2RlZmF1bHRzXTtcbiAgICAgICAqXG4gICAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAgICogICByZXR1cm4gZGVmYXVsdHMuY29uY2F0KHRyYW5zZm9ybSk7XG4gICAgICAgKiB9XG4gICAgICAgKlxuICAgICAgICogJGh0dHAoe1xuICAgICAgICogICB1cmw6ICcuLi4nLFxuICAgICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICogICB0cmFuc2Zvcm1SZXNwb25zZTogYXBwZW5kVHJhbnNmb3JtKCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICogICAgIHJldHVybiBkb1RyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgKiAgIH0pXG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIyBDYWNoaW5nXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRodHRwIGAkaHR0cGB9IHJlc3BvbnNlcyBhcmUgbm90IGNhY2hlZCBieSBkZWZhdWx0LiBUbyBlbmFibGUgY2FjaGluZywgeW91IG11c3RcbiAgICAgICAqIHNldCB0aGUgY29uZmlnLmNhY2hlIHZhbHVlIG9yIHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3QgKGNyZWF0ZWRcbiAgICAgICAqIHdpdGgge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSkuIElmIGRlZmluZWQsIHRoZSB2YWx1ZSBvZiBjb25maWcuY2FjaGUgdGFrZXNcbiAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciB0aGUgZGVmYXVsdCBjYWNoZSB2YWx1ZS5cbiAgICAgICAqXG4gICAgICAgKiBJbiBvcmRlciB0bzpcbiAgICAgICAqICAgKiBjYWNoZSBhbGwgcmVzcG9uc2VzIC0gc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3RcbiAgICAgICAqICAgKiBjYWNoZSBhIHNwZWNpZmljIHJlc3BvbnNlIC0gc2V0IGNvbmZpZy5jYWNoZSB2YWx1ZSB0byBUUlVFIG9yIHRvIGEgY2FjaGUgb2JqZWN0XG4gICAgICAgKlxuICAgICAgICogSWYgY2FjaGluZyBpcyBlbmFibGVkLCBidXQgbmVpdGhlciB0aGUgZGVmYXVsdCBjYWNoZSBub3IgY29uZmlnLmNhY2hlIGFyZSBzZXQgdG8gYSBjYWNoZSBvYmplY3QsXG4gICAgICAgKiB0aGVuIHRoZSBkZWZhdWx0IGAkY2FjaGVGYWN0b3J5KFwiJGh0dHBcIilgIG9iamVjdCBpcyB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIGNhbiBiZSBzZXQgYnkgdXBkYXRpbmcgdGhlXG4gICAgICAgKiB7QGxpbmsgbmcuJGh0dHAjZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkgb3IgdGhlXG4gICAgICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5jYWNoZWB9IHByb3BlcnR5LlxuICAgICAgICpcbiAgICAgICAqIFdoZW4gY2FjaGluZyBpcyBlbmFibGVkLCB7QGxpbmsgbmcuJGh0dHAgYCRodHRwYH0gc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmdcbiAgICAgICAqIHRoZSByZWxldmFudCBjYWNoZSBvYmplY3QuIFRoZSBuZXh0IHRpbWUgdGhlIHNhbWUgcmVxdWVzdCBpcyBtYWRlLCB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICAgICAqIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQgc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgICAqXG4gICAgICAgKiBUYWtlIG5vdGUgdGhhdDpcbiAgICAgICAqXG4gICAgICAgKiAgICogT25seSBHRVQgYW5kIEpTT05QIHJlcXVlc3RzIGFyZSBjYWNoZWQuXG4gICAgICAgKiAgICogVGhlIGNhY2hlIGtleSBpcyB0aGUgcmVxdWVzdCBVUkwgaW5jbHVkaW5nIHNlYXJjaCBwYXJhbWV0ZXJzOyBoZWFkZXJzIGFyZSBub3QgY29uc2lkZXJlZC5cbiAgICAgICAqICAgKiBDYWNoZWQgcmVzcG9uc2VzIGFyZSByZXR1cm5lZCBhc3luY2hyb25vdXNseSwgaW4gdGhlIHNhbWUgd2F5IGFzIHJlc3BvbnNlcyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgKiAgICogSWYgbXVsdGlwbGUgaWRlbnRpY2FsIHJlcXVlc3RzIGFyZSBtYWRlIHVzaW5nIHRoZSBzYW1lIGNhY2hlLCB3aGljaCBpcyBub3QgeWV0IHBvcHVsYXRlZCxcbiAgICAgICAqICAgICBvbmUgcmVxdWVzdCB3aWxsIGJlIG1hZGUgdG8gdGhlIHNlcnZlciBhbmQgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgcmV0dXJuIHRoZSBzYW1lIHJlc3BvbnNlLlxuICAgICAgICogICAqIEEgY2FjaGUtY29udHJvbCBoZWFkZXIgb24gdGhlIHJlc3BvbnNlIGRvZXMgbm90IGFmZmVjdCBpZiBvciBob3cgcmVzcG9uc2VzIGFyZSBjYWNoZWQuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMjIEludGVyY2VwdG9yc1xuICAgICAgICpcbiAgICAgICAqIEJlZm9yZSB5b3Ugc3RhcnQgY3JlYXRpbmcgaW50ZXJjZXB0b3JzLCBiZSBzdXJlIHRvIHVuZGVyc3RhbmQgdGhlXG4gICAgICAgKiB7QGxpbmsgbmcuJHEgJHEgYW5kIGRlZmVycmVkL3Byb21pc2UgQVBJc30uXG4gICAgICAgKlxuICAgICAgICogRm9yIHB1cnBvc2VzIG9mIGdsb2JhbCBlcnJvciBoYW5kbGluZywgYXV0aGVudGljYXRpb24sIG9yIGFueSBraW5kIG9mIHN5bmNocm9ub3VzIG9yXG4gICAgICAgKiBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMsIGl0IGlzIGRlc2lyYWJsZSB0byBiZVxuICAgICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAgICogcmVzcG9uc2VzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgb3ZlciB0byB0aGUgYXBwbGljYXRpb24gY29kZSB0aGF0XG4gICAgICAgKiBpbml0aWF0ZWQgdGhlc2UgcmVxdWVzdHMuIFRoZSBpbnRlcmNlcHRvcnMgbGV2ZXJhZ2UgdGhlIHtAbGluayBuZy4kcVxuICAgICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBpbnRlcmNlcHRvcnMgYXJlIHNlcnZpY2UgZmFjdG9yaWVzIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRodHRwUHJvdmlkZXJgIGJ5XG4gICAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAgICogaW5qZWN0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgKGlmIHNwZWNpZmllZCkgYW5kIHJldHVybnMgdGhlIGludGVyY2VwdG9yLlxuICAgICAgICpcbiAgICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAgICpcbiAgICAgICAqICAgKiBgcmVxdWVzdGA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggYSBodHRwIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd9IG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAgICogICAgIG9iamVjdCBkaXJlY3RseSwgb3IgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGBjb25maWdgIG9yIGEgbmV3IGBjb25maWdgIG9iamVjdC5cbiAgICAgICAqICAgKiBgcmVxdWVzdEVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICAqICAgKiBgcmVzcG9uc2VgOiBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZCB3aXRoIGh0dHAgYHJlc3BvbnNlYCBvYmplY3QuIFRoZSBmdW5jdGlvbiBpcyBmcmVlIHRvXG4gICAgICAgKiAgICAgbW9kaWZ5IHRoZSBgcmVzcG9uc2VgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgcmVzcG9uc2VgXG4gICAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgICAqICAgKiBgcmVzcG9uc2VFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvclxuICAgICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgICAqICAgJHByb3ZpZGUuZmFjdG9yeSgnbXlIdHRwSW50ZXJjZXB0b3InLCBmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7XG4gICAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAgICogICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAqICAgICAgIH0sXG4gICAgICAgKlxuICAgICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICAgKiAgICAgICdyZXF1ZXN0RXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcbiAgICAgICAqICAgICAgICAgfVxuICAgICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICAgKiAgICAgICB9LFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAgICogICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgKiAgICAgICB9LFxuICAgICAgICpcbiAgICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xuICAgICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAgICogICAgICAgICB9XG4gICAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgICAqICAgICAgIH1cbiAgICAgICAqICAgICB9O1xuICAgICAgICogICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7XG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICAgLy8gYWx0ZXJuYXRpdmVseSwgcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeVxuICAgICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgICAqICAgICByZXR1cm4ge1xuICAgICAgICogICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAgICogICAgICAgfSxcbiAgICAgICAqXG4gICAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAgICogICAgICAgfVxuICAgICAgICogICAgIH07XG4gICAgICAgKiAgIH0pO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgICAqXG4gICAgICAgKiBXaGVuIGRlc2lnbmluZyB3ZWIgYXBwbGljYXRpb25zLCBjb25zaWRlciBzZWN1cml0eSB0aHJlYXRzIGZyb206XG4gICAgICAgKlxuICAgICAgICogLSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpXG4gICAgICAgKiAtIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KVxuICAgICAgICpcbiAgICAgICAqIEJvdGggc2VydmVyIGFuZCB0aGUgY2xpZW50IG11c3QgY29vcGVyYXRlIGluIG9yZGVyIHRvIGVsaW1pbmF0ZSB0aGVzZSB0aHJlYXRzLiBBbmd1bGFyIGNvbWVzXG4gICAgICAgKiBwcmUtY29uZmlndXJlZCB3aXRoIHN0cmF0ZWdpZXMgdGhhdCBhZGRyZXNzIHRoZXNlIGlzc3VlcywgYnV0IGZvciB0aGlzIHRvIHdvcmsgYmFja2VuZCBzZXJ2ZXJcbiAgICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAgICpcbiAgICAgICAqICMjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvblxuICAgICAgICpcbiAgICAgICAqIEEgW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAgICogYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG9cbiAgICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICAgKiBjb3VudGVyIHRoaXMgeW91ciBzZXJ2ZXIgY2FuIHByZWZpeCBhbGwgSlNPTiByZXF1ZXN0cyB3aXRoIGZvbGxvd2luZyBzdHJpbmcgYFwiKV19JyxcXG5cImAuXG4gICAgICAgKiBBbmd1bGFyIHdpbGwgYXV0b21hdGljYWxseSBzdHJpcCB0aGUgcHJlZml4IGJlZm9yZSBwcm9jZXNzaW5nIGl0IGFzIEpTT04uXG4gICAgICAgKlxuICAgICAgICogRm9yIGV4YW1wbGUgaWYgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gcmV0dXJuOlxuICAgICAgICogYGBganNcbiAgICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAgICogYGBganNcbiAgICAgICAqICldfScsXG4gICAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAgICpcbiAgICAgICAqIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KSBpcyBhbiBhdHRhY2sgdGVjaG5pcXVlIGJ5XG4gICAgICAgKiB3aGljaCB0aGUgYXR0YWNrZXIgY2FuIHRyaWNrIGFuIGF1dGhlbnRpY2F0ZWQgdXNlciBpbnRvIHVua25vd2luZ2x5IGV4ZWN1dGluZyBhY3Rpb25zIG9uIHlvdXJcbiAgICAgICAqIHdlYnNpdGUuIEFuZ3VsYXIgcHJvdmlkZXMgYSBtZWNoYW5pc20gdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGVcbiAgICAgICAqICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llIChieSBkZWZhdWx0LCBgWFNSRi1UT0tFTmApIGFuZCBzZXRzIGl0IGFzIGFuIEhUVFBcbiAgICAgICAqIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5IEphdmFTY3JpcHQgdGhhdCBydW5zIG9uIHlvdXIgZG9tYWluIGNvdWxkIHJlYWQgdGhlXG4gICAgICAgKiBjb29raWUsIHlvdXIgc2VydmVyIGNhbiBiZSBhc3N1cmVkIHRoYXQgdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLlxuICAgICAgICogVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cy5cbiAgICAgICAqXG4gICAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAgICogY29va2llIGNhbGxlZCBgWFNSRi1UT0tFTmAgb24gdGhlIGZpcnN0IEhUVFAgR0VUIHJlcXVlc3QuIE9uIHN1YnNlcXVlbnQgWEhSIHJlcXVlc3RzIHRoZVxuICAgICAgICogc2VydmVyIGNhbiB2ZXJpZnkgdGhhdCB0aGUgY29va2llIG1hdGNoZXMgYFgtWFNSRi1UT0tFTmAgSFRUUCBoZWFkZXIsIGFuZCB0aGVyZWZvcmUgYmUgc3VyZVxuICAgICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICAgKiB1bmlxdWUgZm9yIGVhY2ggdXNlciBhbmQgbXVzdCBiZSB2ZXJpZmlhYmxlIGJ5IHRoZSBzZXJ2ZXIgKHRvIHByZXZlbnQgdGhlIEphdmFTY3JpcHQgZnJvbVxuICAgICAgICogbWFraW5nIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzXG4gICAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgICAqIGZvciBhZGRlZCBzZWN1cml0eS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgICAqIHByb3BlcnRpZXMgb2YgZWl0aGVyICRodHRwUHJvdmlkZXIuZGVmYXVsdHMgYXQgY29uZmlnLXRpbWUsICRodHRwLmRlZmF1bHRzIGF0IHJ1bi10aW1lLFxuICAgICAgICogb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICAgKlxuICAgICAgICogSW4gb3JkZXIgdG8gcHJldmVudCBjb2xsaXNpb25zIGluIGVudmlyb25tZW50cyB3aGVyZSBtdWx0aXBsZSBBbmd1bGFyIGFwcHMgc2hhcmUgdGhlXG4gICAgICAgKiBzYW1lIGRvbWFpbiBvciBzdWJkb21haW4sIHdlIHJlY29tbWVuZCB0aGF0IGVhY2ggYXBwbGljYXRpb24gdXNlcyB1bmlxdWUgY29va2llIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlXG4gICAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKVxuICAgICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ3xUcnVzdGVkT2JqZWN0fWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICAgKiAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgc2VyaWFsaXplZFxuICAgICAgICogICAgICB3aXRoIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBhbmQgYXBwZW5kZWQgYXMgR0VUIHBhcmFtZXRlcnMuXG4gICAgICAgKiAgICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgRGF0YSB0byBiZSBzZW50IGFzIHRoZSByZXF1ZXN0IG1lc3NhZ2UgZGF0YS5cbiAgICAgICAqICAgIC0gKipoZWFkZXJzKiog4oCTIGB7T2JqZWN0fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gc3RyaW5ncyByZXByZXNlbnRpbmdcbiAgICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAgICogICAgICBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC4gRnVuY3Rpb25zIGFjY2VwdCBhIGNvbmZpZyBvYmplY3QgYXMgYW4gYXJndW1lbnQuXG4gICAgICAgKiAgICAtICoqZXZlbnRIYW5kbGVycyoqIC0gYHtPYmplY3R9YCAtIEV2ZW50IGxpc3RlbmVycyB0byBiZSBib3VuZCB0byB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LlxuICAgICAgICogICAgICBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3QgdXBsb2FkIG9iamVjdCwgdXNlIGB1cGxvYWRFdmVudEhhbmRsZXJzYC5cbiAgICAgICAqICAgICAgVGhlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBgJGFwcGx5YCBibG9jay5cbiAgICAgICAqICAgIC0gKip1cGxvYWRFdmVudEhhbmRsZXJzKiogLSBge09iamVjdH1gIC0gRXZlbnQgbGlzdGVuZXJzIHRvIGJlIGJvdW5kIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCB1cGxvYWRcbiAgICAgICAqICAgICAgb2JqZWN0LiBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LCB1c2UgYGV2ZW50SGFuZGxlcnNgLlxuICAgICAgICogICAgICBUaGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgY29udGV4dCBvZiBhIGAkYXBwbHlgIGJsb2NrLlxuICAgICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi5cbiAgICAgICAqICAgIC0gKip4c3JmQ29va2llTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgICAgICogICAgLSAqKnRyYW5zZm9ybVJlcXVlc3QqKiDigJNcbiAgICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTXG4gICAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAk1xuICAgICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fWAg4oCTXG4gICAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAgICogICAgICByZXNwb25zZSBib2R5LCBoZWFkZXJzIGFuZCBzdGF0dXMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAgICogICAgLSAqKnBhcmFtU2VyaWFsaXplcioqIC0gYHtzdHJpbmd8ZnVuY3Rpb24oT2JqZWN0PHN0cmluZyxzdHJpbmc+KTpzdHJpbmd9YCAtIEEgZnVuY3Rpb24gdXNlZCB0b1xuICAgICAgICogICAgICBwcmVwYXJlIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICAgICAqICAgICAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZVxuICAgICAgICogICAgICB7QGxpbmsgJGluamVjdG9yICRpbmplY3Rvcn0sIHdoaWNoIG1lYW5zIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIHNlcmlhbGl6ZXJcbiAgICAgICAqICAgICAgYnkgcmVnaXN0ZXJpbmcgaXQgYXMgYSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2V9LlxuICAgICAgICogICAgICBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGlzIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9O1xuICAgICAgICogICAgICBhbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlfVxuICAgICAgICogICAgLSAqKmNhY2hlKiog4oCTIGB7Ym9vbGVhbnxPYmplY3R9YCDigJMgQSBib29sZWFuIHZhbHVlIG9yIG9iamVjdCBjcmVhdGVkIHdpdGhcbiAgICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSB0byBlbmFibGUgb3IgZGlzYWJsZSBjYWNoaW5nIG9mIHRoZSBIVFRQIHJlc3BvbnNlLlxuICAgICAgICogICAgICBTZWUge0BsaW5rICRodHRwI2NhY2hpbmcgJGh0dHAgQ2FjaGluZ30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cbiAgICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC5cbiAgICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlXG4gICAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JTI1JlcXVlc3RzX3dpdGhfY3JlZGVudGlhbHMpXG4gICAgICAgKiAgICAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICogICAgLSAqKnJlc3BvbnNlVHlwZSoqIC0gYHtzdHJpbmd9YCAtIHNlZVxuICAgICAgICogICAgICBbWE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3QjeG1saHR0cHJlcXVlc3QtcmVzcG9uc2V0eXBlKS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgYFByb21pc2V9YCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSByZXNwb25zZSBvYmplY3RcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscy5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xuICAgICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbW9kdWxlPVwiaHR0cEV4YW1wbGVcIiBuYW1lPVwiaHR0cC1zZXJ2aWNlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDb250cm9sbGVyXCI+XG4gICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCIgYXJpYS1sYWJlbD1cIlJlcXVlc3QgbWV0aG9kXCI+XG4gICAgICAgIDxvcHRpb24+R0VUPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cbiAgICAgIDwvc2VsZWN0PlxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1cmxcIiBzaXplPVwiODBcIiBhcmlhLWxhYmVsPVwiVVJMXCIgLz5cbiAgICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgICAgPGJ1dHRvbiBpZD1cInNhbXBsZWdldGJ0blwiIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKVwiPlNhbXBsZSBHRVQ8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gaWQ9XCJzYW1wbGVqc29ucGJ0blwiXG4gICAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9uYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICAgIFNhbXBsZSBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2RvZXNudGV4aXN0JylcIj5cbiAgICAgICAgICBJbnZhbGlkIEpTT05QXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgICA8cHJlPmh0dHAgcmVzcG9uc2UgZGF0YToge3tkYXRhfX08L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2h0dHBFeGFtcGxlJywgW10pXG4gICAgICAuY29uZmlnKFsnJHNjZURlbGVnYXRlUHJvdmlkZXInLCBmdW5jdGlvbigkc2NlRGVsZWdhdGVQcm92aWRlcikge1xuICAgICAgICAvLyBXZSBtdXN0IHdoaXRlbGlzdCB0aGUgSlNPTlAgZW5kcG9pbnQgdGhhdCB3ZSBhcmUgdXNpbmcgdG8gc2hvdyB0aGF0IHdlIHRydXN0IGl0XG4gICAgICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAgICAgICAgICAnc2VsZicsXG4gICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy8qKidcbiAgICAgICAgXSk7XG4gICAgICB9XSlcbiAgICAgIC5jb250cm9sbGVyKCdGZXRjaENvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICRzY29wZS51cmwgPSAnaHR0cC1oZWxsby5odG1sJztcbiAgICAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29kZSA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUucmVzcG9uc2UgPSBudWxsO1xuICAgICAgICAgICAgICRodHRwKHttZXRob2Q6ICRzY29wZS5tZXRob2QsIHVybDogJHNjb3BlLnVybCwgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuXG4gICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwgJ1JlcXVlc3QgZmFpbGVkJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcbiAgICAgICAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgICAkc2NvcGUudXJsID0gdXJsO1xuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cbiAgICAgIEhlbGxvLCAkaHR0cCFcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBzdGF0dXMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3N0YXR1cycpKTtcbiAgICAgIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpO1xuICAgICAgdmFyIGZldGNoQnRuID0gZWxlbWVudChieS5pZCgnZmV0Y2hidG4nKSk7XG4gICAgICB2YXIgc2FtcGxlR2V0QnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlZ2V0YnRuJykpO1xuICAgICAgdmFyIGludmFsaWRKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ludmFsaWRqc29ucGJ0bicpKTtcbiAgICAgIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbiAgICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gICAgICB9KTtcbiAgICAgIC8vIENvbW1lbnRlZCBvdXQgZHVlIHRvIGZsYWtlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxODVcbiAgICAgIC8vIGl0KCdzaG91bGQgbWFrZSBhIEpTT05QIHJlcXVlc3QgdG8gYW5ndWxhcmpzLm9yZycsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gICB2YXIgc2FtcGxlSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVqc29ucGJ0bicpKTtcbiAgICAgIC8vICAgc2FtcGxlSnNvbnBCdG4uY2xpY2soKTtcbiAgICAgIC8vICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICAgIC8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgICAgLy8gICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XG4gICAgICAvLyB9KTtcbiAgICAgIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpO1xuICAgICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7XG4gICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gJGh0dHAocmVxdWVzdENvbmZpZykge1xuXG4gICAgICAgIGlmICghaXNPYmplY3QocmVxdWVzdENvbmZpZykpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJyRodHRwJykoJ2JhZHJlcScsICdIdHRwIHJlcXVlc3QgY29uZmlndXJhdGlvbiBtdXN0IGJlIGFuIG9iamVjdC4gIFJlY2VpdmVkOiB7MH0nLCByZXF1ZXN0Q29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNTdHJpbmcoJHNjZS52YWx1ZU9mKHJlcXVlc3RDb25maWcudXJsKSkpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJyRodHRwJykoJ2JhZHJlcScsICdIdHRwIHJlcXVlc3QgY29uZmlndXJhdGlvbiB1cmwgbXVzdCBiZSBhIHN0cmluZyBvciBhICRzY2UgdHJ1c3RlZCBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZy51cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0LFxuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICBwYXJhbVNlcmlhbGl6ZXI6IGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcixcbiAgICAgICAgICBqc29ucENhbGxiYWNrUGFyYW06IGRlZmF1bHRzLmpzb25wQ2FsbGJhY2tQYXJhbVxuICAgICAgICB9LCByZXF1ZXN0Q29uZmlnKTtcblxuICAgICAgICBjb25maWcuaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXF1ZXN0Q29uZmlnKTtcbiAgICAgICAgY29uZmlnLm1ldGhvZCA9IHVwcGVyY2FzZShjb25maWcubWV0aG9kKTtcbiAgICAgICAgY29uZmlnLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpID8gJGluamVjdG9yLmdldChjb25maWcucGFyYW1TZXJpYWxpemVyKSA6IGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAgICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO1xuXG4gICAgICAgIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JzID0gW107XG4gICAgICAgIHZhciByZXNwb25zZUludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgICB2YXIgcHJvbWlzZSA9ICRxLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgICAvLyBhcHBseSBpbnRlcmNlcHRvcnNcbiAgICAgICAgZm9yRWFjaChyZXZlcnNlZEludGVyY2VwdG9ycywgZnVuY3Rpb24gKGludGVyY2VwdG9yKSB7XG4gICAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3JzLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlIHx8IGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHJvbWlzZSA9IGNoYWluSW50ZXJjZXB0b3JzKHByb21pc2UsIHJlcXVlc3RJbnRlcmNlcHRvcnMpO1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHNlcnZlclJlcXVlc3QpO1xuICAgICAgICBwcm9taXNlID0gY2hhaW5JbnRlcmNlcHRvcnMocHJvbWlzZSwgcmVzcG9uc2VJbnRlcmNlcHRvcnMpO1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS5maW5hbGx5KGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgICBmdW5jdGlvbiBjaGFpbkludGVyY2VwdG9ycyhwcm9taXNlLCBpbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnRlcmNlcHRvcnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgICB2YXIgdGhlbkZuID0gaW50ZXJjZXB0b3JzW2krK107XG4gICAgICAgICAgICB2YXIgcmVqZWN0Rm4gPSBpbnRlcmNlcHRvcnNbaSsrXTtcblxuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnRlcmNlcHRvcnMubGVuZ3RoID0gMDtcblxuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVIZWFkZXJGbnMoaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgdmFyIGhlYWRlckNvbnRlbnQsXG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnMgPSB7fTtcblxuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlckZuLCBoZWFkZXIpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgICBoZWFkZXJDb250ZW50ID0gaGVhZGVyRm4oY29uZmlnKTtcbiAgICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtZXJnZUhlYWRlcnMoY29uZmlnKSB7XG4gICAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgICByZXFIZWFkZXJzID0gZXh0ZW5kKHt9LCBjb25maWcuaGVhZGVycyksXG4gICAgICAgICAgICAgIGRlZkhlYWRlck5hbWUsXG4gICAgICAgICAgICAgIGxvd2VyY2FzZURlZkhlYWRlck5hbWUsXG4gICAgICAgICAgICAgIHJlcUhlYWRlck5hbWU7XG5cbiAgICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAgIC8vIHVzaW5nIGZvci1pbiBpbnN0ZWFkIG9mIGZvckVhY2ggdG8gYXZvaWQgdW5uZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICAgIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uOiBmb3IgKGRlZkhlYWRlck5hbWUgaW4gZGVmSGVhZGVycykge1xuICAgICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTtcblxuICAgICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShyZXFIZWFkZXJOYW1lKSA9PT0gbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcUhlYWRlcnNbZGVmSGVhZGVyTmFtZV0gPSBkZWZIZWFkZXJzW2RlZkhlYWRlck5hbWVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGV4ZWN1dGUgaWYgaGVhZGVyIHZhbHVlIGlzIGEgZnVuY3Rpb24gZm9yIG1lcmdlZCBoZWFkZXJzXG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGVIZWFkZXJGbnMocmVxSGVhZGVycywgc2hhbGxvd0NvcHkoY29uZmlnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXJ2ZXJSZXF1ZXN0KGNvbmZpZykge1xuICAgICAgICAgIHZhciBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCB1bmRlZmluZWQsIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTtcblxuICAgICAgICAgIC8vIHN0cmlwIGNvbnRlbnQtdHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXFEYXRhKSkge1xuICAgICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiAodmFsdWUsIGhlYWRlcikge1xuICAgICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNlbmQgcmVxdWVzdFxuICAgICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGVcbiAgICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpO1xuICAgICAgICAgIHJlc3AuZGF0YSA9IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybiBpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSA/IHJlc3AgOiAkcS5yZWplY3QocmVzcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGh0dHAjZ2V0XG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkaHR0cCNkZWxldGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBERUxFVEVgIHJlcXVlc3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkaHR0cCNqc29ucFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgc2luY2UgSlNPTlAgcmVxdWVzdHMgYXJlIHNlbnNpdGl2ZSBiZWNhdXNlIHRoZSByZXNwb25zZSBpcyBnaXZlbiBmdWxsIGFjY2VzcyB0byB0aGUgYnJvd3NlcixcbiAgICAgICAqIHRoZSB1cmwgbXVzdCBiZSBkZWNsYXJlZCwgdmlhIHtAbGluayAkc2NlfSBhcyBhIHRydXN0ZWQgcmVzb3VyY2UgVVJMLlxuICAgICAgICogWW91IGNhbiB0cnVzdCBhIFVSTCBieSBhZGRpbmcgaXQgdG8gdGhlIHdoaXRlbGlzdCB2aWFcbiAgICAgICAqIHtAbGluayAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCAgYCRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0YH0gb3JcbiAgICAgICAqIGJ5IGV4cGxpY2l0bHkgdHJ1c3RpbmcgdGhlIFVSTCB2aWEge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYH0uXG4gICAgICAgKlxuICAgICAgICogSlNPTlAgcmVxdWVzdHMgbXVzdCBzcGVjaWZ5IGEgY2FsbGJhY2sgdG8gYmUgdXNlZCBpbiB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbGxiYWNrXG4gICAgICAgKiBpcyBwYXNzZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgaW4gdGhlIHJlcXVlc3QuIFlvdSBtdXN0IHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhpcyBwYXJhbWV0ZXIgYnlcbiAgICAgICAqIHNldHRpbmcgdGhlIGBqc29ucENhbGxiYWNrUGFyYW1gIHByb3BlcnR5IG9uIHRoZSByZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICAgKlxuICAgICAgICogYGBgXG4gICAgICAgKiAkaHR0cC5qc29ucCgnc29tZS90cnVzdGVkL3VybCcsIHtqc29ucENhbGxiYWNrUGFyYW06ICdjYWxsYmFjayd9KVxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBkZWZhdWx0IGNhbGxiYWNrIHBhcmFtZXRlciBuYW1lIGluIGAkaHR0cC5kZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1gLlxuICAgICAgICogSW5pdGlhbGx5IHRoaXMgaXMgc2V0IHRvIGAnY2FsbGJhY2snYC5cbiAgICAgICAqXG4gICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICAgKiBZb3UgY2FuIG5vIGxvbmdlciB1c2UgdGhlIGBKU09OX0NBTExCQUNLYCBzdHJpbmcgYXMgYSBwbGFjZWhvbGRlciBmb3Igc3BlY2lmeWluZyB3aGVyZSB0aGUgY2FsbGJhY2tcbiAgICAgICAqIHBhcmFtZXRlciB2YWx1ZSBzaG91bGQgZ28uXG4gICAgICAgKiA8L2Rpdj5cbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd291bGQgbGlrZSB0byBjdXN0b21pc2Ugd2hlcmUgYW5kIGhvdyB0aGUgY2FsbGJhY2tzIGFyZSBzdG9yZWQgdGhlbiB0cnkgb3ZlcnJpZGluZ1xuICAgICAgICogb3IgZGVjb3JhdGluZyB0aGUge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAgICovXG4gICAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRodHRwI3Bvc3RcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkaHR0cCNwdXRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRodHRwI3BhdGNoXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICAqL1xuICAgICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkaHR0cCNkZWZhdWx0c1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUnVudGltZSBlcXVpdmFsZW50IG9mIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0c2AgcHJvcGVydHkuIEFsbG93cyBjb25maWd1cmF0aW9uIG9mXG4gICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy5cbiAgICAgICAqXG4gICAgICAgKiBTZWUgXCJTZXR0aW5nIEhUVFAgSGVhZGVyc1wiIGFuZCBcIlRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXCIgc2VjdGlvbnMgYWJvdmUuXG4gICAgICAgKi9cbiAgICAgICRodHRwLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbiAgICAgIHJldHVybiAkaHR0cDtcblxuICAgICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzKG5hbWVzKSB7XG4gICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24gKHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YShuYW1lKSB7XG4gICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE1ha2VzIHRoZSByZXF1ZXN0LlxuICAgICAgICpcbiAgICAgICAqICEhISBBQ0NFU1NFUyBDTE9TVVJFIFZBUlM6XG4gICAgICAgKiAkaHR0cEJhY2tlbmQsIGRlZmF1bHRzLCAkbG9nLCAkcm9vdFNjb3BlLCBkZWZhdWx0Q2FjaGUsICRodHRwLnBlbmRpbmdSZXF1ZXN0c1xuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICAgIGNhY2hlZFJlc3AsXG4gICAgICAgICAgICByZXFIZWFkZXJzID0gY29uZmlnLmhlYWRlcnMsXG4gICAgICAgICAgICBpc0pzb25wID0gbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpID09PSAnanNvbnAnLFxuICAgICAgICAgICAgdXJsID0gY29uZmlnLnVybDtcblxuICAgICAgICBpZiAoaXNKc29ucCkge1xuICAgICAgICAgIC8vIEpTT05QIGlzIGEgcHJldHR5IHNlbnNpdGl2ZSBvcGVyYXRpb24gd2hlcmUgd2UncmUgYWxsb3dpbmcgYSBzY3JpcHQgdG8gaGF2ZSBmdWxsIGFjY2VzcyB0b1xuICAgICAgICAgIC8vIG91ciBET00gYW5kIEpTIHNwYWNlLiAgU28gd2UgcmVxdWlyZSB0aGF0IHRoZSBVUkwgc2F0aXNmaWVzIFNDRS5SRVNPVVJDRV9VUkwuXG4gICAgICAgICAgdXJsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodXJsKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcodXJsKSkge1xuICAgICAgICAgIC8vIElmIGl0IGlzIG5vdCBhIHN0cmluZyB0aGVuIHRoZSBVUkwgbXVzdCBiZSBhICRzY2UgdHJ1c3RlZCBvYmplY3RcbiAgICAgICAgICB1cmwgPSAkc2NlLnZhbHVlT2YodXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGJ1aWxkVXJsKHVybCwgY29uZmlnLnBhcmFtU2VyaWFsaXplcihjb25maWcucGFyYW1zKSk7XG5cbiAgICAgICAgaWYgKGlzSnNvbnApIHtcbiAgICAgICAgICAvLyBDaGVjayB0aGUgdXJsIGFuZCBhZGQgdGhlIEpTT05QIGNhbGxiYWNrIHBsYWNlaG9sZGVyXG4gICAgICAgICAgdXJsID0gc2FuaXRpemVKc29ucENhbGxiYWNrUGFyYW0odXJsLCBjb25maWcuanNvbnBDYWxsYmFja1BhcmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5wdXNoKGNvbmZpZyk7XG4gICAgICAgIHByb21pc2UudGhlbihyZW1vdmVQZW5kaW5nUmVxLCByZW1vdmVQZW5kaW5nUmVxKTtcblxuICAgICAgICBpZiAoKGNvbmZpZy5jYWNoZSB8fCBkZWZhdWx0cy5jYWNoZSkgJiYgY29uZmlnLmNhY2hlICE9PSBmYWxzZSAmJiAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHtcbiAgICAgICAgICBjYWNoZSA9IGlzT2JqZWN0KGNvbmZpZy5jYWNoZSkgPyBjb25maWcuY2FjaGUgOiBpc09iamVjdCggLyoqIEB0eXBlIHs/fSAqL2RlZmF1bHRzLmNhY2hlKSA/IC8qKiBAdHlwZSB7P30gKi9kZWZhdWx0cy5jYWNoZSA6IGRlZmF1bHRDYWNoZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGNhY2hlZFJlc3AgPSBjYWNoZS5nZXQodXJsKTtcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICAvLyBjYWNoZWQgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnQsIGJ1dCB0aGVyZSBpcyBubyByZXNwb25zZSB5ZXRcbiAgICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIHNlcnZpbmcgZnJvbSBjYWNoZVxuICAgICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdLCBjYWNoZWRSZXNwWzRdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBjYWNoZS5wdXQodXJsLCBwcm9taXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kXG4gICAgICAgIC8vIHNlbmQgdGhlIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmRcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKSA/ICQkY29va2llUmVhZGVyKClbY29uZmlnLnhzcmZDb29raWVOYW1lIHx8IGRlZmF1bHRzLnhzcmZDb29raWVOYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgICByZXFIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUsIGNyZWF0ZUFwcGx5SGFuZGxlcnMoY29uZmlnLmV2ZW50SGFuZGxlcnMpLCBjcmVhdGVBcHBseUhhbmRsZXJzKGNvbmZpZy51cGxvYWRFdmVudEhhbmRsZXJzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVBcHBseUhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVycykge1xuICAgICAgICAgICAgdmFyIGFwcGx5SGFuZGxlcnMgPSB7fTtcbiAgICAgICAgICAgIGZvckVhY2goZXZlbnRIYW5kbGVycywgZnVuY3Rpb24gKGV2ZW50SGFuZGxlciwga2V5KSB7XG4gICAgICAgICAgICAgIGFwcGx5SGFuZGxlcnNba2V5XSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseUFzeW5jKGNhbGxFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsRXZlbnRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGNhbGxFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxFdmVudEhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5SGFuZGxlcnM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgICAqICAtIGNhY2hlcyB0aGUgcmVzcG9uc2UgaWYgZGVzaXJlZFxuICAgICAgICAgKiAgLSByZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2VcbiAgICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQsIHhoclN0YXR1cykge1xuICAgICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgaWYgKGlzU3VjY2VzcyhzdGF0dXMpKSB7XG4gICAgICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIFtzdGF0dXMsIHJlc3BvbnNlLCBwYXJzZUhlYWRlcnMoaGVhZGVyc1N0cmluZyksIHN0YXR1c1RleHQsIHhoclN0YXR1c10pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUh0dHBQcm9taXNlKCkge1xuICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXNlQXBwbHlBc3luYykge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlSHR0cFByb21pc2UoKTtcbiAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBzdGF0dXNUZXh0LCB4aHJTdGF0dXMpIHtcbiAgICAgICAgICAvL3N0YXR1czogSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZSwgMCwgLTEgKGFib3J0ZWQgYnkgdGltZW91dCAvIHByb21pc2UpXG4gICAgICAgICAgc3RhdHVzID0gc3RhdHVzID49IC0xID8gc3RhdHVzIDogMDtcblxuICAgICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHtcbiAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxuICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLFxuICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgeGhyU3RhdHVzOiB4aHJTdGF0dXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQuZGF0YSwgcmVzdWx0LnN0YXR1cywgc2hhbGxvd0NvcHkocmVzdWx0LmhlYWRlcnMoKSksIHJlc3VsdC5zdGF0dXNUZXh0LCByZXN1bHQueGhyU3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7XG4gICAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgICAgaWYgKGlkeCAhPT0gLTEpICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzYW5pdGl6ZUpzb25wQ2FsbGJhY2tQYXJhbSh1cmwsIGtleSkge1xuICAgICAgICBpZiAoL1smP11bXj1dKz1KU09OX0NBTExCQUNLLy50ZXN0KHVybCkpIHtcbiAgICAgICAgICAvLyBUaHJvdyBpZiB0aGUgdXJsIGFscmVhZHkgY29udGFpbnMgYSByZWZlcmVuY2UgdG8gSlNPTl9DQUxMQkFDS1xuICAgICAgICAgIHRocm93ICRodHRwTWluRXJyKCdiYWRqc29ucCcsICdJbGxlZ2FsIHVzZSBvZiBKU09OX0NBTExCQUNLIGluIHVybCwgXCJ7MH1cIicsIHVybCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FsbGJhY2tQYXJhbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnWyY/XScgKyBrZXkgKyAnPScpO1xuICAgICAgICBpZiAoY2FsbGJhY2tQYXJhbVJlZ2V4LnRlc3QodXJsKSkge1xuICAgICAgICAgIC8vIFRocm93IGlmIHRoZSBjYWxsYmFjayBwYXJhbSB3YXMgYWxyZWFkeSBwcm92aWRlZFxuICAgICAgICAgIHRocm93ICRodHRwTWluRXJyKCdiYWRqc29ucCcsICdJbGxlZ2FsIHVzZSBvZiBjYWxsYmFjayBwYXJhbSwgXCJ7MH1cIiwgaW4gdXJsLCBcInsxfVwiJywga2V5LCB1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGluIHRoZSBKU09OX0NBTExCQUNLIGNhbGxiYWNrIHBhcmFtIHZhbHVlXG4gICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsga2V5ICsgJz1KU09OX0NBTExCQUNLJztcblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICR4aHJGYWN0b3J5XG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBGYWN0b3J5IGZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gICAqXG4gICAqIFJlcGxhY2Ugb3IgZGVjb3JhdGUgdGhpcyBzZXJ2aWNlIHRvIGNyZWF0ZSB5b3VyIG93biBjdXN0b20gWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAgICpcbiAgICogYGBgXG4gICAqIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKVxuICAgKiAuZmFjdG9yeSgnJHhockZhY3RvcnknLCBmdW5jdGlvbigpIHtcbiAgICogICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKSB7XG4gICAqICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCh7bW96U3lzdGVtOiB0cnVlfSk7XG4gICAqICAgfTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIEhUVFAgbWV0aG9kIG9mIHRoZSByZXF1ZXN0IChHRVQsIFBPU1QsIFBVVCwgLi4pXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIG9mIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgZnVuY3Rpb24gJHhockZhY3RvcnlQcm92aWRlcigpIHtcbiAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKCkge1xuICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwQmFja2VuZFxuICAgKiBAcmVxdWlyZXMgJGpzb25wQ2FsbGJhY2tzXG4gICAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAgICogQHJlcXVpcmVzICR4aHJGYWN0b3J5XG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXG4gICAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxuICAgKlxuICAgKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XG4gICAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXG4gICAqXG4gICAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcbiAgICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cbiAgICovXG4gIGZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGpzb25wQ2FsbGJhY2tzJywgJyRkb2N1bWVudCcsICckeGhyRmFjdG9yeScsIGZ1bmN0aW9uICgkYnJvd3NlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsICR4aHJGYWN0b3J5LCAkYnJvd3Nlci5kZWZlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pO1xuICAgIH1dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkge1xuICAgIC8vIFRPRE8odm9qdGEpOiBmaXggdGhlIHNpZ25hdHVyZVxuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCB1cmwsIHBvc3QsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMsIHJlc3BvbnNlVHlwZSwgZXZlbnRIYW5kbGVycywgdXBsb2FkRXZlbnRIYW5kbGVycykge1xuICAgICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT09ICdqc29ucCcpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrUGF0aCA9IGNhbGxiYWNrcy5jcmVhdGVDYWxsYmFjayh1cmwpO1xuICAgICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGZ1bmN0aW9uIChzdGF0dXMsIHRleHQpIHtcbiAgICAgICAgICAvLyBqc29ucFJlcSBvbmx5IGV2ZXIgc2V0cyBzdGF0dXMgdG8gMjAwIChPSyksIDQwNCAoRVJST1IpIG9yIC0xIChXQUlUSU5HKVxuICAgICAgICAgIHZhciByZXNwb25zZSA9IHN0YXR1cyA9PT0gMjAwICYmIGNhbGxiYWNrcy5nZXRSZXNwb25zZShjYWxsYmFja1BhdGgpO1xuICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgJycsIHRleHQsICdjb21wbGV0ZScpO1xuICAgICAgICAgIGNhbGxiYWNrcy5yZW1vdmVDYWxsYmFjayhjYWxsYmFja1BhdGgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgdmFyIHhociA9IGNyZWF0ZVhocihtZXRob2QsIHVybCk7XG5cbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7XG4gICAgICAgICAgdmFyIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dCB8fCAnJztcblxuICAgICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOSlcbiAgICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAvLyBub3JtYWxpemUgSUU5IGJ1ZyAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MClcbiAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAgIC8vIE9jY3VycyB3aGVuIGFjY2Vzc2luZyBmaWxlIHJlc291cmNlcyBvciBvbiBBbmRyb2lkIDQuMSBzdG9jayBicm93c2VyXG4gICAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlID8gMjAwIDogdXJsUmVzb2x2ZSh1cmwpLnByb3RvY29sID09PSAnZmlsZScgPyA0MDQgOiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLCBzdGF0dXNUZXh0LCAnY29tcGxldGUnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVxdWVzdEVycm9yID0gZnVuY3Rpb24gcmVxdWVzdEVycm9yKCkge1xuICAgICAgICAgIC8vIFRoZSByZXNwb25zZSBpcyBhbHdheXMgZW1wdHlcbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCAtMSwgbnVsbCwgbnVsbCwgJycsICdlcnJvcicpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXF1ZXN0QWJvcnRlZCA9IGZ1bmN0aW9uIHJlcXVlc3RBYm9ydGVkKCkge1xuICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAnYWJvcnQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBmdW5jdGlvbiByZXF1ZXN0VGltZW91dCgpIHtcbiAgICAgICAgICAvLyBUaGUgcmVzcG9uc2UgaXMgYWx3YXlzIGVtcHR5XG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdC1lcnJvci1zdGVwcyBhbmQgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbmV0d29yay1lcnJvclxuICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAndGltZW91dCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHhoci5vbmVycm9yID0gcmVxdWVzdEVycm9yO1xuICAgICAgICB4aHIub25hYm9ydCA9IHJlcXVlc3RBYm9ydGVkO1xuICAgICAgICB4aHIub250aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG5cbiAgICAgICAgZm9yRWFjaChldmVudEhhbmRsZXJzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3JFYWNoKHVwbG9hZEV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAod2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzM2NDguIFZlcnNpb25zIG9mIFNhZmFyaSBwcmlvciB0byA3IGFyZVxuICAgICAgICAgICAgLy8ga25vd24gdG8gdGhyb3cgd2hlbiBzZXR0aW5nIHRoZSB2YWx1ZSBcImpzb25cIiBhcyB0aGUgcmVzcG9uc2UgdHlwZS4gT3RoZXIgb2xkZXJcbiAgICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGhlIGpzb24gcmVzcG9uc2UgdHlwZSBjYW4gYmUgaWdub3JlZCBpZiBub3Qgc3VwcG9ydGVkLCBiZWNhdXNlIEpTT04gcGF5bG9hZHMgYXJlXG4gICAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB4aHIuc2VuZChpc1VuZGVmaW5lZChwb3N0KSA/IG51bGwgOiBwb3N0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlTGlrZSh0aW1lb3V0KSkge1xuICAgICAgICB0aW1lb3V0LnRoZW4odGltZW91dFJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgICAgaWYgKGpzb25wRG9uZSkge1xuICAgICAgICAgIGpzb25wRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4aHIpIHtcbiAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQsIHhoclN0YXR1cykge1xuICAgICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHRpbWVvdXRJZCkpIHtcbiAgICAgICAgICAkYnJvd3NlckRlZmVyLmNhbmNlbCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgICAgY2FsbGJhY2soc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGRvbmUpIHtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgY2FsbGJhY2tQYXRoKTtcbiAgICAgIC8vIHdlIGNhbid0IHVzZSBqUXVlcnkvanFMaXRlIGhlcmUgYmVjYXVzZSBqUXVlcnkgZG9lcyBjcmF6eSBzdHVmZiB3aXRoIHNjcmlwdCBlbGVtZW50cywgZS5nLjpcbiAgICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW1cbiAgICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnRcbiAgICAgIHZhciBzY3JpcHQgPSByYXdEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSxcbiAgICAgICAgICBfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG4gICAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhldmVudCkge1xuICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIF9jYWxsYmFjayk7XG4gICAgICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIF9jYWxsYmFjayk7XG4gICAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgdmFyIHN0YXR1cyA9IC0xO1xuICAgICAgICB2YXIgdGV4dCA9ICd1bmtub3duJztcblxuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnICYmICFjYWxsYmFja3Mud2FzQ2FsbGVkKGNhbGxiYWNrUGF0aCkpIHtcbiAgICAgICAgICAgIGV2ZW50ID0geyB0eXBlOiAnZXJyb3InIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHQgPSBldmVudC50eXBlO1xuICAgICAgICAgIHN0YXR1cyA9IGV2ZW50LnR5cGUgPT09ICdlcnJvcicgPyA0MDQgOiAyMDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGRvbmUoc3RhdHVzLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfY2FsbGJhY2spO1xuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgX2NhbGxiYWNrKTtcbiAgICAgIHJhd0RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHJldHVybiBfY2FsbGJhY2s7XG4gICAgfVxuICB9XG5cbiAgdmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IGFuZ3VsYXIuJGludGVycG9sYXRlTWluRXJyID0gbWluRXJyKCckaW50ZXJwb2xhdGUnKTtcbiAgJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLCAnRXJyb3Igd2hpbGUgaW50ZXJwb2xhdGluZzogezB9XFxuU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZGlzYWxsb3dzICcgKyAnaW50ZXJwb2xhdGlvbnMgdGhhdCBjb25jYXRlbmF0ZSBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGVuIGEgdHJ1c3RlZCB2YWx1ZSBpcyAnICsgJ3JlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UnLCB0ZXh0KTtcbiAgfTtcblxuICAkaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyID0gZnVuY3Rpb24gKHRleHQsIGVycikge1xuICAgIHJldHVybiAkaW50ZXJwb2xhdGVNaW5FcnIoJ2ludGVycicsICdDYW5cXCd0IGludGVycG9sYXRlOiB7MH1cXG57MX0nLCB0ZXh0LCBlcnIudG9TdHJpbmcoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICAgKiBAdGhpc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAqIFRoaXMgZmVhdHVyZSBpcyBzb21ldGltZXMgdXNlZCB0byBtaXggZGlmZmVyZW50IG1hcmt1cCBsYW5ndWFnZXMsIGUuZy4gdG8gd3JhcCBhbiBBbmd1bGFyXG4gICAqIHRlbXBsYXRlIHdpdGhpbiBhIFB5dGhvbiBKaW5qYSB0ZW1wbGF0ZSAob3IgYW55IG90aGVyIHRlbXBsYXRlIGxhbmd1YWdlKS4gTWl4aW5nIHRlbXBsYXRpbmdcbiAgICogbGFuZ3VhZ2VzIGlzICoqdmVyeSBkYW5nZXJvdXMqKi4gVGhlIGVtYmVkZGluZyB0ZW1wbGF0ZSBsYW5ndWFnZSB3aWxsIG5vdCBzYWZlbHkgZXNjYXBlIEFuZ3VsYXJcbiAgICogZXhwcmVzc2lvbnMsIHNvIGFueSB1c2VyLWNvbnRyb2xsZWQgdmFsdWVzIGluIHRoZSB0ZW1wbGF0ZSB3aWxsIGNhdXNlIENyb3NzIFNpdGUgU2NyaXB0aW5nIChYU1MpXG4gICAqIHNlY3VyaXR5IGJ1Z3MhXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBuYW1lPVwiY3VzdG9tLWludGVycG9sYXRpb24tbWFya3VwXCIgbW9kdWxlPVwiY3VzdG9tSW50ZXJwb2xhdGlvbkFwcFwiPlxuICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8c2NyaXB0PlxuICAgIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7XG4gIFxuICAgIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7XG4gICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTtcbiAgICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTtcbiAgICB9KTtcbiAgXG4gIFxuICAgIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5sYWJlbCA9IFwiVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy5cIjtcbiAgICB9KTtcbiAgPC9zY3JpcHQ+XG4gIDxkaXYgbmctY29udHJvbGxlcj1cIkRlbW9Db250cm9sbGVyIGFzIGRlbW9cIj5cbiAgICAgIC8vZGVtby5sYWJlbC8vXG4gIDwvZGl2PlxuICA8L2ZpbGU+XG4gIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICBpdCgnc2hvdWxkIGludGVycG9sYXRlIGJpbmRpbmcgd2l0aCBjdXN0b20gc3ltYm9scycsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZGVtby5sYWJlbCcpKS5nZXRUZXh0KCkpLnRvQmUoJ1RoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuJyk7XG4gICAgfSk7XG4gIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICAgKi9cbiAgZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7XG4gICAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JztcbiAgICB2YXIgZW5kU3ltYm9sID0gJ319JztcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAgICovXG4gICAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICAgKi9cbiAgICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVuZFN5bWJvbCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRzY2UnLCBmdW5jdGlvbiAoJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkge1xuICAgICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLFxuICAgICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsXG4gICAgICAgICAgZXNjYXBlZFN0YXJ0UmVnZXhwID0gbmV3IFJlZ0V4cChzdGFydFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyksXG4gICAgICAgICAgZXNjYXBlZEVuZFJlZ2V4cCA9IG5ldyBSZWdFeHAoZW5kU3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKTtcblxuICAgICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7XG4gICAgICAgIHJldHVybiAnXFxcXFxcXFxcXFxcJyArIGNoO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1bmVzY2FwZVRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKGVzY2FwZWRTdGFydFJlZ2V4cCwgc3RhcnRTeW1ib2wpLnJlcGxhY2UoZXNjYXBlZEVuZFJlZ2V4cCwgZW5kU3ltYm9sKTtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgY29uc3RhbnRXYXRjaERlbGVnYXRlIGluIHBhcnNlLmpzXG4gICAgICBmdW5jdGlvbiBjb25zdGFudFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgY29uc3RhbnRJbnRlcnApIHtcbiAgICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gY29uc3RhbnRJbnRlcnBvbGF0ZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgIHJldHVybiBjb25zdGFudEludGVycChzY29wZSk7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7XG4gICAgICAgIHJldHVybiB1bndhdGNoO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQHJlcXVpcmVzICRwYXJzZVxuICAgICAgICogQHJlcXVpcmVzICRzY2VcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlXG4gICAgICAgKiB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIgJGludGVycG9sYXRlUHJvdmlkZXJ9IGZvciBjb25maWd1cmluZyB0aGVcbiAgICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCdIZWxsbyB7e25hbWUgfCB1cHBlcmNhc2V9fSEnKTtcbiAgICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICAgKiBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIHVubGVzcyBhbGwgZW1iZWRkZWQgZXhwcmVzc2lvbnNcbiAgICAgICAqIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICAgKlxuICAgICAgICogICAvLyBkZWZhdWx0IFwiZm9yZ2l2aW5nXCIgbW9kZVxuICAgICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvICEnKTtcbiAgICAgICAqXG4gICAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAgICogICBleHAgPSAkaW50ZXJwb2xhdGUoJ3t7Z3JlZXRpbmd9fSB7e25hbWV9fSEnLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyBBbmd1bGFyIScpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogYGFsbE9yTm90aGluZ2AgaXMgdXNlZnVsIGZvciBpbnRlcnBvbGF0aW5nIFVSTHMuIGBuZ1NyY2AgYW5kIGBuZ1NyY3NldGAgdXNlIHRoaXMgYmVoYXZpb3IuXG4gICAgICAgKlxuICAgICAgICogIyMjIyBFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgICAqICRpbnRlcnBvbGF0ZSBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3IgZXNjYXBpbmcgaW50ZXJwb2xhdGlvbiBtYXJrZXJzLiBTdGFydCBhbmQgZW5kIG1hcmtlcnNcbiAgICAgICAqIGNhbiBiZSBlc2NhcGVkIGJ5IHByZWNlZGluZyBlYWNoIG9mIHRoZWlyIGNoYXJhY3RlcnMgd2l0aCBhIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaCkuXG4gICAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAgICogb3IgYmluZGluZy5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgICAqIGRlZ3JlZSwgd2hpbGUgYWxzbyBlbmFibGluZyBjb2RlIGV4YW1wbGVzIHRvIHdvcmsgd2l0aG91dCByZWx5aW5nIG9uIHRoZVxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ05vbkJpbmRhYmxlIG5nTm9uQmluZGFibGV9IGRpcmVjdGl2ZS5cbiAgICAgICAqXG4gICAgICAgKiAqKkZvciBzZWN1cml0eSBwdXJwb3NlcywgaXQgaXMgc3Ryb25nbHkgZW5jb3VyYWdlZCB0aGF0IHdlYiBzZXJ2ZXJzIGVzY2FwZSB1c2VyLXN1cHBsaWVkIGRhdGEsXG4gICAgICAgKiByZXBsYWNpbmcgYW5nbGUgYnJhY2tldHMgKCZsdDssICZndDspIHdpdGggJmFtcDtsdDsgYW5kICZhbXA7Z3Q7IHJlc3BlY3RpdmVseSwgYW5kIHJlcGxhY2luZyBhbGxcbiAgICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAgICpcbiAgICAgICAqIEVzY2FwZWQgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGFyZSBvbmx5IHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgaW4gcmVuZGVyZWRcbiAgICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgICAqIGJ5IHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0sIG9yIG90aGVyd2lzZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgYG11c3RIYXZlRXhwcmVzc2lvbmAgcGFyYW1ldGVyXG4gICAgICAgKiBzZXQgdG8gYHRydWVgLCB0aGUgaW50ZXJwb2xhdGVkIHRleHQgbXVzdCBjb250YWluIGFuIHVuZXNjYXBlZCBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24uIEFzIHN1Y2gsXG4gICAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgICAqIHdoZW4gb3RoZXJ3aXNlIHVudHJ1c3RlZCBkYXRhIGlzIHVzZWQgYnkgYSBkaXJlY3RpdmUuXG4gICAgICAgKlxuICAgICAgICogPGV4YW1wbGUgbmFtZT1cImludGVycG9sYXRpb25cIj5cbiAgICAgICAqICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICogICAgPGRpdiBuZy1pbml0PVwidXNlcm5hbWU9J0EgdXNlcidcIj5cbiAgICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAgICogICAgICAgIDwvcD5cbiAgICAgICAqICAgICAgPHA+PHN0cm9uZz57e3VzZXJuYW1lfX08L3N0cm9uZz4gYXR0ZW1wdHMgdG8gaW5qZWN0IGNvZGUgd2hpY2ggd2lsbCBkZWZhY2UgdGhlXG4gICAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICAgKiAgICAgICAgZXNjYXBlZCB0aGUgaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaClcbiAgICAgICAqICAgICAgICBjaGFyYWN0ZXJzLjwvcD5cbiAgICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICAgKiAgICAgICAgZnJvbSB0aGUgZGF0YWJhc2UgYnkgYW4gYWRtaW5pc3RyYXRvci48L3A+XG4gICAgICAgKiAgICA8L2Rpdj5cbiAgICAgICAqICA8L2ZpbGU+XG4gICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAgKlxuICAgICAgICogQGtub3duSXNzdWVcbiAgICAgICAqIEl0IGlzIGN1cnJlbnRseSBub3QgcG9zc2libGUgZm9yIGFuIGludGVycG9sYXRlZCBleHByZXNzaW9uIHRvIGNvbnRhaW4gdGhlIGludGVycG9sYXRpb24gZW5kXG4gICAgICAgKiBzeW1ib2wuIEZvciBleGFtcGxlLCBge3sgJ319JyB9fWAgd2lsbCBiZSBpbmNvcnJlY3RseSBpbnRlcnByZXRlZCBhcyBge3sgJyB9fWAgKyBgJyB9fWAsIGkuZS5cbiAgICAgICAqIGFuIGludGVycG9sYXRlZCBleHByZXNzaW9uIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUtcXVvdGUgKGAnYCkgYW5kIHRoZSBgJyB9fWAgc3RyaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBrbm93bklzc3VlXG4gICAgICAgKiBBbGwgZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyBtdXN0IHVzZSB0aGUgc3RhbmRhcmQgYHt7YCBgfX1gIGludGVycG9sYXRpb24gc3ltYm9sc1xuICAgICAgICogaW4gdGhlaXIgdGVtcGxhdGVzLiBJZiB5b3UgY2hhbmdlIHRoZSBhcHBsaWNhdGlvbiBpbnRlcnBvbGF0aW9uIHN5bWJvbHMgdGhlIHtAbGluayAkY29tcGlsZX1cbiAgICAgICAqIHNlcnZpY2Ugd2lsbCBhdHRlbXB0IHRvIGRlbm9ybWFsaXplIHRoZSBzdGFuZGFyZCBzeW1ib2xzIHRvIHRoZSBjdXN0b20gc3ltYm9scy5cbiAgICAgICAqIFRoZSBkZW5vcm1hbGl6YXRpb24gcHJvY2VzcyBpcyBub3QgY2xldmVyIGVub3VnaCB0byBrbm93IG5vdCB0byByZXBsYWNlIGluc3RhbmNlcyBvZiB0aGUgc3RhbmRhcmRcbiAgICAgICAqIHN5bWJvbHMgd2hlcmUgdGhleSB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgdHJlYXRlZCBhcyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuIEZvciBleGFtcGxlIGluIHRoZSBmb2xsb3dpbmdcbiAgICAgICAqIGNvZGUgc25pcHBldCB0aGUgY2xvc2luZyBicmFjZXMgb2YgdGhlIGxpdGVyYWwgb2JqZWN0IHdpbGwgZ2V0IGluY29ycmVjdGx5IGRlbm9ybWFsaXplZDpcbiAgICAgICAqXG4gICAgICAgKiBgYGBcbiAgICAgICAqIDxkaXYgZGF0YS1jb250ZXh0PSd7XCJjb250ZXh0XCI6e1wiaWRcIjozLFwidHlwZVwiOlwicGFnZVwifX1cIj5cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIFRoZSB3b3JrYXJvdW5kIGlzIHRvIGVuc3VyZSB0aGF0IHN1Y2ggaW5zdGFuY2VzIGFyZSBzZXBhcmF0ZWQgYnkgd2hpdGVzcGFjZTpcbiAgICAgICAqIGBgYFxuICAgICAgICogPGRpdiBkYXRhLWNvbnRleHQ9J3tcImNvbnRleHRcIjp7XCJpZFwiOjMsXCJ0eXBlXCI6XCJwYWdlXCJ9IH1cIj5cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTQ2MTAjaXNzdWVjb21tZW50LTIxOTQwMTA5OSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmVcbiAgICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBub1xuICAgICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJ1c3RlZENvbnRleHQgd2hlbiBwcm92aWRlZCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhc3NlcyB0aGUgaW50ZXJwb2xhdGVkXG4gICAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsXG4gICAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0XG4gICAgICAgKiAgICBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBmb3IgZGV0YWlscy5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0KX0gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gICAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6XG4gICAgICAgKlxuICAgICAgICogLSBgY29udGV4dGA6IGV2YWx1YXRpb24gY29udGV4dCBmb3IgYWxsIGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBxdWljayBleGl0IGFuZCBzaW1wbGlmaWVkIHJlc3VsdCBmdW5jdGlvbiBmb3IgdGV4dCB3aXRoIG5vIGludGVycG9sYXRpb25cbiAgICAgICAgaWYgKCF0ZXh0Lmxlbmd0aCB8fCB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wpID09PSAtMSkge1xuICAgICAgICAgIHZhciBjb25zdGFudEludGVycDtcbiAgICAgICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgdmFyIHVuZXNjYXBlZFRleHQgPSB1bmVzY2FwZVRleHQodGV4dCk7XG4gICAgICAgICAgICBjb25zdGFudEludGVycCA9IHZhbHVlRm4odW5lc2NhcGVkVGV4dCk7XG4gICAgICAgICAgICBjb25zdGFudEludGVycC5leHAgPSB0ZXh0O1xuICAgICAgICAgICAgY29uc3RhbnRJbnRlcnAuZXhwcmVzc2lvbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0YW50SW50ZXJwLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnN0YW50SW50ZXJwO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxsT3JOb3RoaW5nID0gISFhbGxPck5vdGhpbmc7XG4gICAgICAgIHZhciBzdGFydEluZGV4LFxuICAgICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgICBleHByZXNzaW9ucyA9IFtdLFxuICAgICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICAgIHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICAgIGV4cCxcbiAgICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucyA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IHRleHRMZW5ndGgpIHtcbiAgICAgICAgICBpZiAoKHN0YXJ0SW5kZXggPSB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wsIGluZGV4KSkgIT09IC0xICYmIChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cCA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCwgZW5kSW5kZXgpO1xuICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHApO1xuICAgICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgICBpbmRleCA9IGVuZEluZGV4ICsgZW5kU3ltYm9sTGVuZ3RoO1xuICAgICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucy5wdXNoKGNvbmNhdC5sZW5ndGgpO1xuICAgICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW4gaW50ZXJwb2xhdGlvbiwgc28gd2UgaGF2ZSB0byBhZGQgdGhlIHJlbWFpbmRlciB0byB0aGUgc2VwYXJhdG9ycyBhcnJheVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAgIC8vIGNvbmNhdGVuYXRlZCB2YWx1ZXMgYXJlIHVuc2FmZSB0byB1c2UgYW5kIGNvdWxkIGVhc2lseSBsZWFkIHRvIFhTUy4gIEJ5IHJlcXVpcmluZyB0aGF0IGFcbiAgICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWVcbiAgICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgICAgLy8gbWFrZSBpdCBvYnZpb3VzIHRoYXQgeW91IGJvdW5kIHRoZSB2YWx1ZSB0byBzb21lIHVzZXIgY29udHJvbGxlZCB2YWx1ZS4gIFRoaXMgaGVscHMgcmVkdWNlXG4gICAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuXG4gICAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gfHwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbiBjb21wdXRlKHZhbHVlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgICAgY29uY2F0W2V4cHJlc3Npb25Qb3NpdGlvbnNbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/ICRzY2UuZ2V0VHJ1c3RlZCh0cnVzdGVkQ29udGV4dCwgdmFsdWUpIDogJHNjZS52YWx1ZU9mKHZhbHVlKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiBpbnRlcnBvbGF0aW9uRm4oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShpaSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHBhcnNlRm5zW2ldKGNvbnRleHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcigkaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyKHRleHQsIGVycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIC8vIGFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIGFyZSB1bmRvY3VtZW50ZWQgZm9yIG5vd1xuICAgICAgICAgICAgZXhwOiB0ZXh0LCAvL2p1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCByZWd1bGFyIHdhdGNoZXJzIGNyZWF0ZWQgdmlhICR3YXRjaFxuICAgICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICAgJCR3YXRjaERlbGVnYXRlOiBmdW5jdGlvbiAkJHdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2hHcm91cChwYXJzZUZucywgLyoqIEB0aGlzICovZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VyclZhbHVlID0gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGN1cnJWYWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFsbE9yTm90aGluZyAmJiAhaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAgICAgKlxuICAgICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxuICAgICAgICovXG4gICAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGludGVycG9sYXRlI2VuZFN5bWJvbFxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICAgICAqXG4gICAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuXG4gICAgICAgKi9cbiAgICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJGludGVycG9sYXRlO1xuICAgIH1dO1xuICB9XG5cbiAgLyoqIEB0aGlzICovXG4gIGZ1bmN0aW9uICRJbnRlcnZhbFByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsICckYnJvd3NlcicsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkd2luZG93LCAkcSwgJCRxLCAkYnJvd3Nlcikge1xuICAgICAgdmFyIGludGVydmFscyA9IHt9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgICogbm90aWZpZWQgdXBvbiBlYWNoIHRpY2sgb2YgdGhlIGludGVydmFsLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBgY291bnRgIGl0ZXJhdGlvbnMsIG9yXG4gICAgICAgKiBydW4gaW5kZWZpbml0ZWx5IGlmIGBjb3VudGAgaXMgbm90IGRlZmluZWQuIFRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgdGhlXG4gICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgICogVG8gY2FuY2VsIGFuIGludGVydmFsLCBjYWxsIGAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICAqXG4gICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgICogbW92ZSBmb3J3YXJkIGJ5IGBtaWxsaXNgIG1pbGxpc2Vjb25kcyBhbmQgdHJpZ2dlciBhbnkgZnVuY3Rpb25zIHNjaGVkdWxlZCB0byBydW4gaW4gdGhhdFxuICAgICAgICogdGltZS5cbiAgICAgICAqXG4gICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZFxuICAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAgKiBkaXJlY3RpdmUncyBlbGVtZW50IGFyZSBkZXN0cm95ZWQuXG4gICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGVcbiAgICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgICogPC9kaXY+XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LiBJZiBubyBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAgICogICBhcmUgcGFzc2VkIChzZWUgYmVsb3cpLCB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgaXRlcmF0aW9uIGNvdW50LlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IE51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiBlYWNoIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgICogICBpbmRlZmluaXRlbHkuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHdoaWNoIHdpbGwgYmUgbm90aWZpZWQgb24gZWFjaCBpdGVyYXRpb24uIEl0IHdpbGwgcmVzb2x2ZSBvbmNlIGFsbCBpdGVyYXRpb25zIG9mIHRoZSBpbnRlcnZhbCBjb21wbGV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogPGV4YW1wbGUgbW9kdWxlPVwiaW50ZXJ2YWxFeGFtcGxlXCIgbmFtZT1cImludGVydmFsLXNlcnZpY2VcIj5cbiAgICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgKiAgIDxzY3JpcHQ+XG4gICAgICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ2ludGVydmFsRXhhbXBsZScsIFtdKVxuICAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICAqICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICAqICAgICAgICAgICAkc2NvcGUuZm9ybWF0ID0gJ00vZC95eSBoOm1tOnNzIGEnO1xuICAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgICpcbiAgICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICAqICAgICAgICAgICAkc2NvcGUuZmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgICAgICAgICAgIC8vIERvbid0IHN0YXJ0IGEgbmV3IGZpZ2h0IGlmIHdlIGFyZSBhbHJlYWR5IGZpZ2h0aW5nXG4gICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgICpcbiAgICAgICAqICAgICAgICAgICAgIHN0b3AgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAkc2NvcGUuYmxvb2RfMSAtIDM7XG4gICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAkc2NvcGUuYmxvb2RfMiAtIDQ7XG4gICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpO1xuICAgICAgICogICAgICAgICAgICAgICB9XG4gICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICogICAgICAgICAgIH07XG4gICAgICAgKlxuICAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSkge1xuICAgICAgICogICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHN0b3ApO1xuICAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgICogICAgICAgICAgICAgfVxuICAgICAgICogICAgICAgICAgIH07XG4gICAgICAgKlxuICAgICAgICogICAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDtcbiAgICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgICogICAgICAgICAgIH07XG4gICAgICAgKlxuICAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaW50ZXJ2YWwgaXMgZGVzdHJveWVkIHRvb1xuICAgICAgICogICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpO1xuICAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgICogICAgICAgICB9XSlcbiAgICAgICAqICAgICAgIC8vIFJlZ2lzdGVyIHRoZSAnbXlDdXJyZW50VGltZScgZGlyZWN0aXZlIGZhY3RvcnkgbWV0aG9kLlxuICAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICAqICAgICAgIC5kaXJlY3RpdmUoJ215Q3VycmVudFRpbWUnLCBbJyRpbnRlcnZhbCcsICdkYXRlRmlsdGVyJyxcbiAgICAgICAqICAgICAgICAgZnVuY3Rpb24oJGludGVydmFsLCBkYXRlRmlsdGVyKSB7XG4gICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICAqICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgKiAgICAgICAgICAgICB2YXIgZm9ybWF0LCAgLy8gZGF0ZSBmb3JtYXRcbiAgICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICAqXG4gICAgICAgKiAgICAgICAgICAgICAvLyB1c2VkIHRvIHVwZGF0ZSB0aGUgVUlcbiAgICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAgKiAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dChkYXRlRmlsdGVyKG5ldyBEYXRlKCksIGZvcm1hdCkpO1xuICAgICAgICogICAgICAgICAgICAgfVxuICAgICAgICpcbiAgICAgICAqICAgICAgICAgICAgIC8vIHdhdGNoIHRoZSBleHByZXNzaW9uLCBhbmQgdXBkYXRlIHRoZSBVSSBvbiBjaGFuZ2UuXG4gICAgICAgKiAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMubXlDdXJyZW50VGltZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAgKiAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgICpcbiAgICAgICAqICAgICAgICAgICAgIHN0b3BUaW1lID0gJGludGVydmFsKHVwZGF0ZVRpbWUsIDEwMDApO1xuICAgICAgICpcbiAgICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAgKiAgICAgICAgICAgICAvLyB0byBwcmV2ZW50IHVwZGF0aW5nIHRpbWUgYWZ0ZXIgdGhlIERPTSBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgICAgICogICAgICAgICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICAqICAgICAgICAgICB9XG4gICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICAqICAgPC9zY3JpcHQ+XG4gICAgICAgKlxuICAgICAgICogICA8ZGl2PlxuICAgICAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgKiAgICAgICA8bGFiZWw+RGF0ZSBmb3JtYXQ6IDxpbnB1dCBuZy1tb2RlbD1cImZvcm1hdFwiPjwvbGFiZWw+IDxoci8+XG4gICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICAqICAgICAgIDxoci8+XG4gICAgICAgKiAgICAgICBCbG9vZCAxIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8xfX08L2ZvbnQ+XG4gICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwiZmlnaHQoKVwiPkZpZ2h0PC9idXR0b24+XG4gICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwic3RvcEZpZ2h0KClcIj5TdG9wRmlnaHQ8L2J1dHRvbj5cbiAgICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAgKiAgICAgPC9kaXY+XG4gICAgICAgKiAgIDwvZGl2PlxuICAgICAgICpcbiAgICAgICAqIDwvZmlsZT5cbiAgICAgICAqIDwvZXhhbXBsZT5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaW50ZXJ2YWwoZm4sIGRlbGF5LCBjb3VudCwgaW52b2tlQXBwbHkpIHtcbiAgICAgICAgdmFyIGhhc1BhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0LFxuICAgICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgICBzZXRJbnRlcnZhbCA9ICR3aW5kb3cuc2V0SW50ZXJ2YWwsXG4gICAgICAgICAgICBjbGVhckludGVydmFsID0gJHdpbmRvdy5jbGVhckludGVydmFsLFxuICAgICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICAgIHNraXBBcHBseSA9IGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5LFxuICAgICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksXG4gICAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgICAgcHJvbWlzZS4kJGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICAgIGlmIChza2lwQXBwbHkpIHtcbiAgICAgICAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmZXJyZWQubm90aWZ5KGl0ZXJhdGlvbisrKTtcblxuICAgICAgICAgIGlmIChjb3VudCA+IDAgJiYgaXRlcmF0aW9uID49IGNvdW50KSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9LCBkZWxheSk7XG5cbiAgICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXSA9IGRlZmVycmVkO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICAgIGlmICghaGFzUGFyYW1zKSB7XG4gICAgICAgICAgICBmbihpdGVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkaW50ZXJ2YWwjY2FuY2VsXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayB3YXMgc3VjY2Vzc2Z1bGx5IGNhbmNlbGVkLlxuICAgICAgICovXG4gICAgICBpbnRlcnZhbC5jYW5jZWwgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkaW50ZXJ2YWxJZCBpbiBpbnRlcnZhbHMpIHtcbiAgICAgICAgICAvLyBJbnRlcnZhbCBjYW5jZWxzIHNob3VsZCBub3QgcmVwb3J0IGFzIHVuaGFuZGxlZCBwcm9taXNlLlxuICAgICAgICAgIG1hcmtRRXhjZXB0aW9uSGFuZGxlZChpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnByb21pc2UpO1xuICAgICAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICAgICR3aW5kb3cuY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGludGVydmFsO1xuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRqc29ucENhbGxiYWNrc1xuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBzZXJ2aWNlIGhhbmRsZXMgdGhlIGxpZmVjeWNsZSBvZiBjYWxsYmFja3MgdG8gaGFuZGxlIEpTT05QIHJlcXVlc3RzLlxuICAgKiBPdmVycmlkZSB0aGlzIHNlcnZpY2UgaWYgeW91IHdpc2ggdG8gY3VzdG9taXNlIHdoZXJlIHRoZSBjYWxsYmFja3MgYXJlIHN0b3JlZCBhbmRcbiAgICogaG93IHRoZXkgdmFyeSBjb21wYXJlZCB0byB0aGUgcmVxdWVzdGVkIHVybC5cbiAgICovXG4gIHZhciAkanNvbnBDYWxsYmFja3NQcm92aWRlciA9IC8qKiBAdGhpcyAqL2Z1bmN0aW9uICRqc29ucENhbGxiYWNrc1Byb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSBhbmd1bGFyLmNhbGxiYWNrcztcbiAgICAgIHZhciBjYWxsYmFja01hcCA9IHt9O1xuXG4gICAgICBmdW5jdGlvbiBfY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2tJZCkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhkYXRhKSB7XG4gICAgICAgICAgY2FsbGJhY2suZGF0YSA9IGRhdGE7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbGJhY2suaWQgPSBjYWxsYmFja0lkO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2s7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNjcmVhdGVDYWxsYmFja1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIHRoZSB1cmwgb2YgdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGNhbGxiYWNrIHBhdGggdG8gc2VuZCB0byB0aGUgc2VydmVyIGFzIHBhcnQgb2YgdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIGNyZWF0ZSBhIGNhbGxiYWNrIGFuZCBnZXQgaG9sZCBvZiB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAgICogdG8gcGFzcyB0byB0aGUgc2VydmVyLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCBpdHMgcGF5bG9hZCBpbiB0aGUgSlNPTlAgcmVzcG9uc2UuXG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDYWxsYmFjazogZnVuY3Rpb24gY3JlYXRlQ2FsbGJhY2sodXJsKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLiQkY291bnRlcisrKS50b1N0cmluZygzNik7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrUGF0aCA9ICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZDtcbiAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBfY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2tJZCk7XG4gICAgICAgICAgY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXSA9IGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGNhbGxiYWNrO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFja1BhdGg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyN3YXNDYWxsZWRcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgY2FsbGJhY2sgaGFzIGJlZW4gY2FsbGVkLCBhcyBhIHJlc3VsdCBvZiB0aGUgSlNPTlAgcmVzcG9uc2VcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIGZpbmQgb3V0IHdoZXRoZXIgdGhlIEpTT05QIHJlc3BvbnNlIGFjdHVhbGx5IGNhbGxlZCB0aGVcbiAgICAgICAgICogY2FsbGJhY2sgdGhhdCB3YXMgcGFzc2VkIGluIHRoZSByZXF1ZXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgd2FzQ2FsbGVkOiBmdW5jdGlvbiB3YXNDYWxsZWQoY2FsbGJhY2tQYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF0uY2FsbGVkO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjZ2V0UmVzcG9uc2VcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgcmVzcG9uc2UgdmlhIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byBnZXQgaG9sZCBvZiB0aGUgZGF0YSB0aGF0IHdhcyBwcm92aWRlZCB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAgICogaW4gdGhlIEpTT05QIHJlc3BvbnNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UmVzcG9uc2U6IGZ1bmN0aW9uIGdldFJlc3BvbnNlKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdLmRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNyZW1vdmVDYWxsYmFja1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tQYXRoIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdhcyBzZW50IGluIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byByZW1vdmUgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBKU09OUCByZXF1ZXN0IGhhc1xuICAgICAgICAgKiBjb21wbGV0ZWQgb3IgdGltZWQtb3V0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQ2FsbGJhY2s6IGZ1bmN0aW9uIHJlbW92ZUNhbGxiYWNrKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF07XG4gICAgICAgICAgZGVsZXRlIGNhbGxiYWNrc1tjYWxsYmFjay5pZF07XG4gICAgICAgICAgZGVsZXRlIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGxvY2FsZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGVcbiAgICogb25seSBwdWJsaWMgYXBpIGlzOlxuICAgKlxuICAgKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKVxuICAgKi9cblxuICB2YXIgUEFUSF9NQVRDSCA9IC9eKFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICAgIERFRkFVTFRfUE9SVFMgPSB7ICdodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxIH07XG4gIHZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgICAgaSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHNlZ21lbnRzW2ldID0gZW5jb2RlVXJpU2VnbWVudChzZWdtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQWJzb2x1dGVVcmwoYWJzb2x1dGVVcmwsIGxvY2F0aW9uT2JqKSB7XG4gICAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gICAgbG9jYXRpb25PYmouJCRwcm90b2NvbCA9IHBhcnNlZFVybC5wcm90b2NvbDtcbiAgICBsb2NhdGlvbk9iai4kJGhvc3QgPSBwYXJzZWRVcmwuaG9zdG5hbWU7XG4gICAgbG9jYXRpb25PYmouJCRwb3J0ID0gdG9JbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsO1xuICB9XG5cbiAgdmFyIERPVUJMRV9TTEFTSF9SRUdFWCA9IC9eXFxzKltcXFxcL117Mix9LztcbiAgZnVuY3Rpb24gcGFyc2VBcHBVcmwodXJsLCBsb2NhdGlvbk9iaikge1xuXG4gICAgaWYgKERPVUJMRV9TTEFTSF9SRUdFWC50ZXN0KHVybCkpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignYmFkcGF0aCcsICdJbnZhbGlkIHVybCBcInswfVwiLicsIHVybCk7XG4gICAgfVxuXG4gICAgdmFyIHByZWZpeGVkID0gdXJsLmNoYXJBdCgwKSAhPT0gJy8nO1xuICAgIGlmIChwcmVmaXhlZCkge1xuICAgICAgdXJsID0gJy8nICsgdXJsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSB1cmxSZXNvbHZlKHVybCk7XG4gICAgbG9jYXRpb25PYmouJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeGVkICYmIG1hdGNoLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpO1xuICAgIGxvY2F0aW9uT2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpO1xuICAgIGxvY2F0aW9uT2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKTtcblxuICAgIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcbiAgICBpZiAobG9jYXRpb25PYmouJCRwYXRoICYmIGxvY2F0aW9uT2JqLiQkcGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb25PYmouJCRwYXRoID0gJy8nICsgbG9jYXRpb25PYmouJCRwYXRoO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgICByZXR1cm4gc3RyLnNsaWNlKDAsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSBgdXJsYCBhZnRlciBgYmFzZWAgb3IgYHVuZGVmaW5lZGAgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aFxuICAgKiAgICAgICAgICAgICAgICAgICB0aGUgZXhwZWN0ZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaXBCYXNlVXJsKGJhc2UsIHVybCkge1xuICAgIGlmIChzdGFydHNXaXRoKHVybCwgYmFzZSkpIHtcbiAgICAgIHJldHVybiB1cmwuc3Vic3RyKGJhc2UubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmltRW1wdHlIYXNoKHVybCkge1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgvKCMuKyl8IyQvLCAnJDEnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmlwRmlsZSh1cmwpIHtcbiAgICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gIH1cblxuICAvKiByZXR1cm4gdGhlIHNlcnZlciBvbmx5IChzY2hlbWU6Ly9ob3N0OnBvcnQpICovXG4gIGZ1bmN0aW9uIHNlcnZlckJhc2UodXJsKSB7XG4gICAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhdGlvbkh0bWw1VXJsIHJlcHJlc2VudHMgYSBVUkxcbiAgICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQcmVmaXggVVJMIHBhdGggcHJlZml4XG4gICAqL1xuICBmdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGJhc2VQcmVmaXgpIHtcbiAgICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICAgIGJhc2VQcmVmaXggPSBiYXNlUHJlZml4IHx8ICcnO1xuICAgIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBnaXZlbiBIVE1MNSAocmVndWxhcikgVVJMIHN0cmluZyBpbnRvIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhUTUw1IFVSTFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgdmFyIHBhdGhVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICAgIGlmICghaXNTdHJpbmcocGF0aFVybCkpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpcHRocHJmeCcsICdJbnZhbGlkIHVybCBcInswfVwiLCBtaXNzaW5nIHBhdGggcHJlZml4IFwiezF9XCIuJywgdXJsLCBhcHBCYXNlTm9GaWxlKTtcbiAgICAgIH1cblxuICAgICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICAgIGlmICghdGhpcy4kJHBhdGgpIHtcbiAgICAgICAgdGhpcy4kJHBhdGggPSAnLyc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJCRjb21wb3NlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZU5vRmlsZSArIHRoaXMuJCR1cmwuc3Vic3RyKDEpOyAvLyBmaXJzdCBjaGFyIGlzIGFsd2F5cyAnLydcblxuICAgICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uICh1cmwsIHJlbEhyZWYpIHtcbiAgICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XG4gICAgICB2YXIgcmV3cml0dGVuVXJsO1xuXG4gICAgICBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlLCB1cmwpKSkge1xuICAgICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xuICAgICAgICBpZiAoYmFzZVByZWZpeCAmJiBpc0RlZmluZWQoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGJhc2VQcmVmaXgsIGFwcFVybCkpKSB7XG4gICAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIChzdHJpcEJhc2VVcmwoJy8nLCBhcHBVcmwpIHx8IGFwcFVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZSArIHByZXZBcHBVcmw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xuICAgICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgVVJMXG4gICAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBkZXZlbG9wZXIgZG9lc24ndCBvcHQgaW50byBodG1sNSBtb2RlLlxuICAgKiBJdCBhbHNvIHNlcnZlcyBhcyB0aGUgYmFzZSBjbGFzcyBmb3IgaHRtbDUgbW9kZSBmYWxsYmFjayBvbiBsZWdhY3kgYnJvd3NlcnMuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gICAqL1xuICBmdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGhhc2hQcmVmaXgpIHtcblxuICAgIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyBVUkwgaW50byBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyBVUkxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgIHZhciB3aXRob3V0QmFzZVVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlLCB1cmwpIHx8IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpO1xuICAgICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSAmJiB3aXRob3V0QmFzZVVybC5jaGFyQXQoMCkgPT09ICcjJykge1xuXG4gICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBVUkwgc3RhcnRzIHdpdGggYSBoYXNoIHNvIHdlIGhhdmVcbiAgICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gc3RyaXBCYXNlVXJsKGhhc2hQcmVmaXgsIHdpdGhvdXRCYXNlVXJsKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwcmVmaXggc28gd2UganVzdCBoYXZlIGEgaGFzaCBmcmFnbWVudFxuICAgICAgICAgIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwYXRoIG5vciBoYXNoIGZyYWdtZW50OlxuICAgICAgICAvLyBJZiB3ZSBhcmUgaW4gSFRNTDUgbW9kZSB3ZSB1c2Ugd2hhdCBpcyBsZWZ0IGFzIHRoZSBwYXRoO1xuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgICBpZiAodGhpcy4kJGh0bWw1KSB7XG4gICAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aXRob3V0SGFzaFVybCA9ICcnO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkpIHtcbiAgICAgICAgICAgIGFwcEJhc2UgPSB1cmw7XG4gICAgICAgICAgICAvKiogQHR5cGUgez99ICovdGhpcy5yZXBsYWNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzKTtcblxuICAgICAgdGhpcy4kJHBhdGggPSByZW1vdmVXaW5kb3dzRHJpdmVOYW1lKHRoaXMuJCRwYXRoLCB3aXRob3V0SGFzaFVybCwgYXBwQmFzZSk7XG5cbiAgICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAgIC8qXG4gICAgICAgKiBJbiBXaW5kb3dzLCBvbiBhbiBhbmNob3Igbm9kZSBvbiBkb2N1bWVudHMgbG9hZGVkIGZyb21cbiAgICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGFcbiAgICAgICAqIHBhdGhuYW1lIHdpdGhvdXQgYSBkcml2ZSBpcyBzZXQ6XG4gICAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlXG4gICAgICAgKlxuICAgICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAgIC8qXG4gICAgICAgIE1hdGNoZXMgcGF0aHMgZm9yIGZpbGUgcHJvdG9jb2wgb24gd2luZG93cyxcbiAgICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAgICovXG4gICAgICAgIHZhciB3aW5kb3dzRmlsZVBhdGhFeHAgPSAvXlxcL1tBLVpdOihcXC8uKikvO1xuXG4gICAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLlxuICAgICAgICBpZiAoc3RhcnRzV2l0aCh1cmwsIGJhc2UpKSB7XG4gICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYmFzZSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGlucHV0IFVSTCBpbnRlbnRpb25hbGx5IGNvbnRhaW5zIGEgZmlyc3QgcGF0aCBzZWdtZW50IHRoYXQgZW5kcyB3aXRoIGEgY29sb24uXG4gICAgICAgIGlmICh3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyh1cmwpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPSB3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyhwYXRoKTtcbiAgICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgaGFzaGJhbmcgVVJMIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7XG5cbiAgICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG4gICAgfTtcblxuICAgIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbiAodXJsLCByZWxIcmVmKSB7XG4gICAgICBpZiAoc3RyaXBIYXNoKGFwcEJhc2UpID09PSBzdHJpcEhhc2godXJsKSkge1xuICAgICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgVVJMXG4gICAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlclxuICAgKiBkb2VzIG5vdCBzdXBwb3J0IGl0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICAgKi9cbiAgZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuICAgIHRoaXMuJCRodG1sNSA9IHRydWU7XG4gICAgTG9jYXRpb25IYXNoYmFuZ1VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uICh1cmwsIHJlbEhyZWYpIHtcbiAgICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJld3JpdHRlblVybDtcbiAgICAgIHZhciBhcHBVcmw7XG5cbiAgICAgIGlmIChhcHBCYXNlID09PSBzdHJpcEhhc2godXJsKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSB1cmw7XG4gICAgICB9IGVsc2UgaWYgKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpKSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgYXBwVXJsO1xuICAgICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gICAgfTtcblxuICAgIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgICAvLyBpbmNsdWRlIGhhc2hQcmVmaXggaW4gJCRhYnNVcmwgd2hlbiAkJHVybCBpcyBlbXB0eSBzbyBJRTkgZG9lcyBub3QgcmVsb2FkIHBhZ2UgYmVjYXVzZSBvZiByZW1vdmFsIG9mICcjJ1xuICAgICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybDtcblxuICAgICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uUHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogRW5zdXJlIGFic29sdXRlIFVSTCBpcyBpbml0aWFsaXplZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICQkYWJzVXJsOiAnJyxcblxuICAgIC8qKlxuICAgICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgJCRodG1sNTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAgICpcbiAgICAgKiBSZXR1cm4gZnVsbCBVUkwgcmVwcmVzZW50YXRpb24gd2l0aCBhbGwgc2VnbWVudHMgZW5jb2RlZCBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluXG4gICAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAgICogdmFyIGFic1VybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCBVUkxcbiAgICAgKi9cbiAgICBhYnNVcmw6IGxvY2F0aW9uR2V0dGVyKCckJGFic1VybCcpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRsb2NhdGlvbiN1cmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICAgKlxuICAgICAqIFJldHVybiBVUkwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICAgKiB2YXIgdXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyBVUkwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdXJsXG4gICAgICovXG4gICAgdXJsOiBmdW5jdGlvbiB1cmwoX3VybCkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKF91cmwpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdXJsO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWMoX3VybCk7XG4gICAgICBpZiAobWF0Y2hbMV0gfHwgX3VybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSB8fCBfdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgICAqXG4gICAgICogUmV0dXJuIHByb3RvY29sIG9mIGN1cnJlbnQgVVJMLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgICAqIHZhciBwcm90b2NvbCA9ICRsb2NhdGlvbi5wcm90b2NvbCgpO1xuICAgICAqIC8vID0+IFwiaHR0cFwiXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByb3RvY29sIG9mIGN1cnJlbnQgVVJMXG4gICAgICovXG4gICAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGxvY2F0aW9uI2hvc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgICAqXG4gICAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCBVUkwuXG4gICAgICpcbiAgICAgKiBOb3RlOiBjb21wYXJlZCB0byB0aGUgbm9uLWFuZ3VsYXIgdmVyc2lvbiBgbG9jYXRpb24uaG9zdGAgd2hpY2ggcmV0dXJucyBgaG9zdG5hbWU6cG9ydGAsIHRoaXMgcmV0dXJucyB0aGUgYGhvc3RuYW1lYCBwb3J0aW9uIG9ubHkuXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAgICogdmFyIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuICAgICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgICAqXG4gICAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly91c2VyOnBhc3N3b3JkQGV4YW1wbGUuY29tOjgwODAvIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgICAqIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuICAgICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgICAqIGhvc3QgPSBsb2NhdGlvbi5ob3N0O1xuICAgICAqIC8vID0+IFwiZXhhbXBsZS5jb206ODA4MFwiXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhvc3Qgb2YgY3VycmVudCBVUkwuXG4gICAgICovXG4gICAgaG9zdDogbG9jYXRpb25HZXR0ZXIoJyQkaG9zdCcpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRsb2NhdGlvbiNwb3J0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICAgKlxuICAgICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgVVJMLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgICAqIHZhciBwb3J0ID0gJGxvY2F0aW9uLnBvcnQoKTtcbiAgICAgKiAvLyA9PiA4MFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAgICovXG4gICAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRsb2NhdGlvbiNwYXRoXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAgICpcbiAgICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IFVSTCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgICAqXG4gICAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoXG4gICAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICAgKiB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgICAqIEByZXR1cm4geyhzdHJpbmd8b2JqZWN0KX0gcGF0aCBpZiBjYWxsZWQgd2l0aCBubyBwYXJhbWV0ZXJzLCBvciBgJGxvY2F0aW9uYCBpZiBjYWxsZWQgd2l0aCBhIHBhcmFtZXRlclxuICAgICAqL1xuICAgIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG4gICAgfSksXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGxvY2F0aW9uI3NlYXJjaFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgICAqXG4gICAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgVVJMIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgICAqIHZhciBzZWFyY2hPYmplY3QgPSAkbG9jYXRpb24uc2VhcmNoKCk7XG4gICAgICogLy8gPT4ge2ZvbzogJ2JhcicsIGJhejogJ3hveG8nfVxuICAgICAqXG4gICAgICogLy8gc2V0IGZvbyB0byAneWlwZWUnXG4gICAgICogJGxvY2F0aW9uLnNlYXJjaCgnZm9vJywgJ3lpcGVlJyk7XG4gICAgICogLy8gJGxvY2F0aW9uLnNlYXJjaCgpID0+IHtmb286ICd5aXBlZScsIGJhejogJ3hveG8nfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICAgKiBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICAgKiBvZiBgJGxvY2F0aW9uYCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuICAgICAqXG4gICAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICAgKiBhcyBkdXBsaWNhdGUgc2VhcmNoIHBhcmFtZXRlcnMgaW4gdGhlIFVSTC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgICAqIHdpbGwgb3ZlcnJpZGUgb25seSBhIHNpbmdsZSBzZWFyY2ggcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICAgKiBgJGxvY2F0aW9uYCBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAgICpcbiAgICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYHRydWVgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBhZGRlZCB3aXRoIG5vXG4gICAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSBwYXJzZWQgYHNlYXJjaGAgb2JqZWN0LiBJZiBjYWxsZWQgd2l0aFxuICAgICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAgICovXG4gICAgc2VhcmNoOiBmdW5jdGlvbiBzZWFyY2goX3NlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChpc1N0cmluZyhfc2VhcmNoKSB8fCBpc051bWJlcihfc2VhcmNoKSkge1xuICAgICAgICAgICAgX3NlYXJjaCA9IF9zZWFyY2gudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKF9zZWFyY2gpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoX3NlYXJjaCkpIHtcbiAgICAgICAgICAgIF9zZWFyY2ggPSBjb3B5KF9zZWFyY2gsIHt9KTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvYmplY3QgdW5kZWZpbmVkIG9yIG51bGwgcHJvcGVydGllc1xuICAgICAgICAgICAgZm9yRWFjaChfc2VhcmNoLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIF9zZWFyY2hba2V5XTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gX3NlYXJjaDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpc3JjaGFyZycsICdUaGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGAkbG9jYXRpb24jc2VhcmNoKClgIGNhbGwgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJhbVZhbHVlKSB8fCBwYXJhbVZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtfc2VhcmNoXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kJHNlYXJjaFtfc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9jYXRpb24jaGFzaFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgICAqXG4gICAgICogUmV0dXJucyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICogQ2hhbmdlcyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRoIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGAkbG9jYXRpb25gLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94byNoYXNoVmFsdWVcbiAgICAgKiB2YXIgaGFzaCA9ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAgICogLy8gPT4gXCJoYXNoVmFsdWVcIlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoXG4gICAgICovXG4gICAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICByZXR1cm4gaGFzaCAhPT0gbnVsbCA/IGhhc2gudG9TdHJpbmcoKSA6ICcnO1xuICAgIH0pLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRsb2NhdGlvbiNyZXBsYWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJZiBjYWxsZWQsIGFsbCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBkdXJpbmcgdGhlIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgcmVwbGFjZSB0aGUgY3VycmVudCBoaXN0b3J5XG4gICAgICogcmVjb3JkLCBpbnN0ZWFkIG9mIGFkZGluZyBhIG5ldyBvbmUuXG4gICAgICovXG4gICAgcmVwbGFjZTogZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICBmb3JFYWNoKFtMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCwgTG9jYXRpb25IYXNoYmFuZ1VybCwgTG9jYXRpb25IdG1sNVVybF0sIGZ1bmN0aW9uIChMb2NhdGlvbikge1xuICAgIExvY2F0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRsb2NhdGlvbiNzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgICAqXG4gICAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBDaGFuZ2UgdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGggb25lIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBtZXRob2QgaXMgc3VwcG9ydGVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nXG4gICAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydFxuICAgICAqIG9sZGVyIGJyb3dzZXJzIChsaWtlIElFOSBvciBBbmRyb2lkIDwgNC4wKSwgZG9uJ3QgdXNlIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IHN0YXRlXG4gICAgICovXG4gICAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKExvY2F0aW9uICE9PSBMb2NhdGlvbkh0bWw1VXJsIHx8ICF0aGlzLiQkaHRtbDUpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub3N0YXRlJywgJ0hpc3RvcnkgQVBJIHN0YXRlIHN1cHBvcnQgaXMgYXZhaWxhYmxlIG9ubHkgJyArICdpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmcgSFRNTDUgSGlzdG9yeSBBUEknKTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2VyIG1pZ2h0IG1vZGlmeSBgc3RhdGVPYmplY3RgIGFmdGVyIGludm9raW5nIGAkbG9jYXRpb24uc3RhdGUoc3RhdGVPYmplY3QpYFxuICAgICAgLy8gYnV0IHdlJ3JlIGNoYW5naW5nIHRoZSAkJHN0YXRlIHJlZmVyZW5jZSB0byAkYnJvd3Nlci5zdGF0ZSgpIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgICAgLy8gc28gdGhlIG1vZGlmaWNhdGlvbiB3aW5kb3cgaXMgbmFycm93LlxuICAgICAgdGhpcy4kJHN0YXRlID0gaXNVbmRlZmluZWQoc3RhdGUpID8gbnVsbCA6IHN0YXRlO1xuICAgICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXIocHJvcGVydHkpIHtcbiAgICByZXR1cm4gKC8qKiBAdGhpcyAqL2Z1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2Vzcykge1xuICAgIHJldHVybiAoLyoqIEB0aGlzICovZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xuICAgICAgICB0aGlzLiQkY29tcG9zZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGxvY2F0aW9uXG4gICAqXG4gICAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlXG4gICAqIFt3aW5kb3cubG9jYXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3dpbmRvdy5sb2NhdGlvbikpIGFuZCBtYWtlcyB0aGUgVVJMXG4gICAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50b1xuICAgKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLlxuICAgKlxuICAgKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKlxuICAgKlxuICAgKiAtIEV4cG9zZXMgdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLCBzbyB5b3UgY2FuXG4gICAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLlxuICAgKiAgIC0gQ2hhbmdlIHRoZSBVUkwuXG4gICAqIC0gU3luY2hyb25pemVzIHRoZSBVUkwgd2l0aCB0aGUgYnJvd3NlciB3aGVuIHRoZSB1c2VyXG4gICAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci5cbiAgICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS5cbiAgICogICAtIENsaWNrcyBvbiBhIGxpbmsuXG4gICAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS5cbiAgICpcbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHtAbGluayBndWlkZS8kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBVc2luZyAkbG9jYXRpb259XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvdmlkZXJcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXJcbiAgICogQHRoaXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC5cbiAgICovXG4gIGZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCkge1xuICAgIHZhciBoYXNoUHJlZml4ID0gJyEnLFxuICAgICAgICBodG1sNU1vZGUgPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLFxuICAgICAgcmV3cml0ZUxpbmtzOiB0cnVlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBwcmVmaXggaXMgYCchJ2AuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAgICovXG4gICAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0geyhib29sZWFufE9iamVjdCk9fSBtb2RlIElmIGJvb2xlYW4sIHNldHMgYGh0bWw1TW9kZS5lbmFibGVkYCB0byB2YWx1ZS5cbiAgICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICAgKiAgIHByb3BlcnRpZXM6XG4gICAgICogICAtICoqZW5hYmxlZCoqIOKAkyBge2Jvb2xlYW59YCDigJMgKGRlZmF1bHQ6IGZhbHNlKSBJZiB0cnVlLCB3aWxsIHJlbHkgb24gYGhpc3RvcnkucHVzaFN0YXRlYCB0b1xuICAgICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICAgKiAgICAgc3VwcG9ydCBgcHVzaFN0YXRlYC5cbiAgICAgKiAgIC0gKipyZXF1aXJlQmFzZSoqIC0gYHtib29sZWFufWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLCBzcGVjaWZpZXNcbiAgICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICAgKiAgICAgdHJ1ZSwgYW5kIGEgYmFzZSB0YWcgaXMgbm90IHByZXNlbnQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIHdoZW4gYCRsb2NhdGlvbmAgaXMgaW5qZWN0ZWQuXG4gICAgICogICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiAkbG9jYXRpb24gZ3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb259XG4gICAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW58c3RyaW5nfWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLFxuICAgICAqICAgICBlbmFibGVzL2Rpc2FibGVzIFVSTCByZXdyaXRpbmcgZm9yIHJlbGF0aXZlIGxpbmtzLiBJZiBzZXQgdG8gYSBzdHJpbmcsIFVSTCByZXdyaXRpbmcgd2lsbFxuICAgICAqICAgICBvbmx5IGhhcHBlbiBvbiBsaW5rcyB3aXRoIGFuIGF0dHJpYnV0ZSB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIHN0cmluZy4gRm9yIGV4YW1wbGUsIGlmIHNldFxuICAgICAqICAgICB0byBgJ2ludGVybmFsLWxpbmsnYCwgdGhlbiB0aGUgVVJMIHdpbGwgb25seSBiZSByZXdyaXR0ZW4gZm9yIGA8YSBpbnRlcm5hbC1saW5rPmAgbGlua3MuXG4gICAgICogICAgIE5vdGUgdGhhdCBbYXR0cmlidXRlIG5hbWUgbm9ybWFsaXphdGlvbl0oZ3VpZGUvZGlyZWN0aXZlI25vcm1hbGl6YXRpb24pIGRvZXMgbm90IGFwcGx5XG4gICAgICogICAgIGhlcmUsIHNvIGAnaW50ZXJuYWxMaW5rJ2Agd2lsbCAqKm5vdCoqIG1hdGNoIGAnaW50ZXJuYWwtbGluaydgLlxuICAgICAqXG4gICAgICogQHJldHVybnMge09iamVjdH0gaHRtbDVNb2RlIG9iamVjdCBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgICAqL1xuICAgIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24gKG1vZGUpIHtcbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHtcbiAgICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHtcblxuICAgICAgICBpZiAoaXNCb29sZWFuKG1vZGUuZW5hYmxlZCkpIHtcbiAgICAgICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGUuZW5hYmxlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXF1aXJlQmFzZSkpIHtcbiAgICAgICAgICBodG1sNU1vZGUucmVxdWlyZUJhc2UgPSBtb2RlLnJlcXVpcmVCYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJld3JpdGVMaW5rcykgfHwgaXNTdHJpbmcobW9kZS5yZXdyaXRlTGlua3MpKSB7XG4gICAgICAgICAgaHRtbDVNb2RlLnJld3JpdGVMaW5rcyA9IG1vZGUucmV3cml0ZUxpbmtzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3RhcnRcbiAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQnJvYWRjYXN0ZWQgYmVmb3JlIGEgVVJMIHdpbGwgY2hhbmdlLlxuICAgICAqXG4gICAgICogVGhpcyBjaGFuZ2UgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nXG4gICAgICogYHByZXZlbnREZWZhdWx0YCBtZXRob2Qgb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBmb3IgbW9yZVxuICAgICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3N9IGlzIGZpcmVkLlxuICAgICAqXG4gICAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGV2ZW50XG4gICAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcbiAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQnJvYWRjYXN0ZWQgYWZ0ZXIgYSBVUkwgd2FzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgICAqIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBIaXN0b3J5IEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsIE5ldyBVUkxcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRTdGF0ZSBIaXN0b3J5IHN0YXRlIG9iamVjdCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAgICovXG5cbiAgICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywgJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGJyb3dzZXIsICRzbmlmZmVyLCAkcm9vdEVsZW1lbnQsICR3aW5kb3cpIHtcbiAgICAgIHZhciAkbG9jYXRpb24sXG4gICAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSxcbiAgICAgICAgICAvLyBpZiBiYXNlW2hyZWZdIGlzIHVuZGVmaW5lZCwgaXQgZGVmYXVsdHMgdG8gJydcbiAgICAgIGluaXRpYWxVcmwgPSAkYnJvd3Nlci51cmwoKSxcbiAgICAgICAgICBhcHBCYXNlO1xuXG4gICAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHtcbiAgICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vYmFzZScsICckbG9jYXRpb24gaW4gSFRNTDUgbW9kZSByZXF1aXJlcyBhIDxiYXNlPiB0YWcgdG8gYmUgcHJlc2VudCEnKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBCYXNlID0gc2VydmVyQmFzZShpbml0aWFsVXJsKSArIChiYXNlSHJlZiB8fCAnLycpO1xuICAgICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwQmFzZSA9IHN0cmlwSGFzaChpbml0aWFsVXJsKTtcbiAgICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcbiAgICAgIH1cbiAgICAgIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuXG4gICAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICAgJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGluaXRpYWxVcmwsIGluaXRpYWxVcmwpO1xuXG4gICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG5cbiAgICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICAgIGZ1bmN0aW9uIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sodXJsLCByZXBsYWNlLCBzdGF0ZSkge1xuICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAkYnJvd3Nlci51cmwodXJsLCByZXBsYWNlLCBzdGF0ZSk7XG5cbiAgICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAgIC8vIHN0YXRlIG9iamVjdDsgdGhpcyBtYWtlcyBwb3NzaWJsZSBxdWljayBjaGVja2luZyBpZiB0aGUgc3RhdGUgY2hhbmdlZCBpbiB0aGUgZGlnZXN0XG4gICAgICAgICAgLy8gbG9vcC4gQ2hlY2tpbmcgZGVlcCBlcXVhbGl0eSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlLlxuICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFJlc3RvcmUgb2xkIHZhbHVlcyBpZiBwdXNoU3RhdGUgZmFpbHNcbiAgICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcblxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHJvb3RFbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgcmV3cml0ZUxpbmtzID0gaHRtbDVNb2RlLnJld3JpdGVMaW5rcztcbiAgICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKVxuICAgICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuXG5cbiAgICAgICAgaWYgKCFyZXdyaXRlTGlua3MgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LndoaWNoID09PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PT0gMikgcmV0dXJuO1xuXG4gICAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgICAvLyB0cmF2ZXJzZSB0aGUgRE9NIHVwIHRvIGZpbmQgZmlyc3QgQSB0YWdcbiAgICAgICAgd2hpbGUgKG5vZGVOYW1lXyhlbG1bMF0pICE9PSAnYScpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICAgIGlmIChlbG1bMF0gPT09ICRyb290RWxlbWVudFswXSB8fCAhKGVsbSA9IGVsbS5wYXJlbnQoKSlbMF0pIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1N0cmluZyhyZXdyaXRlTGlua3MpICYmIGlzVW5kZWZpbmVkKGVsbS5hdHRyKHJld3JpdGVMaW5rcykpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGFic0hyZWYgPSBlbG0ucHJvcCgnaHJlZicpO1xuICAgICAgICAvLyBnZXQgdGhlIGFjdHVhbCBocmVmIGF0dHJpYnV0ZSAtIHNlZVxuICAgICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgICB2YXIgcmVsSHJlZiA9IGVsbS5hdHRyKCdocmVmJykgfHwgZWxtLmF0dHIoJ3hsaW5rOmhyZWYnKTtcblxuICAgICAgICBpZiAoaXNPYmplY3QoYWJzSHJlZikgJiYgYWJzSHJlZi50b1N0cmluZygpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgICAvLyBhbiBhbmltYXRpb24uXG4gICAgICAgICAgYWJzSHJlZiA9IHVybFJlc29sdmUoYWJzSHJlZi5hbmltVmFsKS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIHdoZW4gdXJsIGlzIHN0YXJ0ZWQgd2l0aCBqYXZhc2NyaXB0OiBvciBtYWlsdG86XG4gICAgICAgIGlmIChJR05PUkVfVVJJX1JFR0VYUC50ZXN0KGFic0hyZWYpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBpZiAoJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGFic0hyZWYsIHJlbEhyZWYpKSB7XG4gICAgICAgICAgICAvLyBXZSBkbyBhIHByZXZlbnREZWZhdWx0IGZvciBhbGwgdXJscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBhbmd1bGFyIGFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgICAvLyBnZXR0aW5nIGRvdWJsZSBlbnRyaWVzIGluIHRoZSBsb2NhdGlvbiBoaXN0b3J5LlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3NcbiAgICAgICAgICAgICAgJHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXG4gICAgICBpZiAodHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpICE9PSB0cmltRW1wdHlIYXNoKGluaXRpYWxVcmwpKSB7XG4gICAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzXG4gICAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbiAobmV3VXJsLCBuZXdTdGF0ZSkge1xuXG4gICAgICAgIGlmICghc3RhcnRzV2l0aChuZXdVcmwsIGFwcEJhc2VOb0ZpbGUpKSB7XG4gICAgICAgICAgLy8gSWYgd2UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSBvZiB0aGUgYXBwIHRoZW4gZm9yY2UgYSByZWxvYWRcbiAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdVcmw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkO1xuICAgICAgICAgIG5ld1VybCA9IHRyaW1FbXB0eUhhc2gobmV3VXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gbmV3U3RhdGU7XG5cbiAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgb2xkVXJsLCBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgICAgc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayhvbGRVcmwsIGZhbHNlLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkge1xuICAgICAgICBpZiAoaW5pdGlhbGl6aW5nIHx8ICRsb2NhdGlvbi4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSBmYWxzZTtcblxuICAgICAgICAgIHZhciBvbGRVcmwgPSB0cmltRW1wdHlIYXNoKCRicm93c2VyLnVybCgpKTtcbiAgICAgICAgICB2YXIgbmV3VXJsID0gdHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpO1xuICAgICAgICAgIHZhciBvbGRTdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgICAgICB2YXIgdXJsT3JTdGF0ZUNoYW5nZWQgPSBvbGRVcmwgIT09IG5ld1VybCB8fCAkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZTtcblxuICAgICAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgbmV3VXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCwgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sobmV3VXJsLCBjdXJyZW50UmVwbGFjZSwgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nIGJlY2F1c2UgJGV2YWxBc3luYyB3aWxsIG1ha2UgdGhlIGRpZ2VzdCBsb29wIGRpcnR5IHdoZW5cbiAgICAgICAgLy8gdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gJGxvY2F0aW9uO1xuXG4gICAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgICB9XG4gICAgfV07XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGxvZ1xuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZVxuICAgKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gICAqXG4gICAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIHNpbXBsaWZ5IGRlYnVnZ2luZyBhbmQgdHJvdWJsZXNob290aW5nLlxuICAgKlxuICAgKiBUbyByZXZlYWwgdGhlIGxvY2F0aW9uIG9mIHRoZSBjYWxscyB0byBgJGxvZ2AgaW4gdGhlIEphdmFTY3JpcHQgY29uc29sZSxcbiAgICogeW91IGNhbiBcImJsYWNrYm94XCIgdGhlIEFuZ3VsYXJKUyBzb3VyY2UgaW4geW91ciBicm93c2VyOlxuICAgKlxuICAgKiBbTW96aWxsYSBkZXNjcmlwdGlvbiBvZiBibGFja2JveGluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9EZWJ1Z2dlci9Ib3dfdG8vQmxhY2tfYm94X2Ffc291cmNlKS5cbiAgICogW0Nocm9tZSBkZXNjcmlwdGlvbiBvZiBibGFja2JveGluZ10oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2JsYWNrYm94aW5nKS5cbiAgICpcbiAgICogTm90ZTogTm90IGFsbCBicm93c2VycyBzdXBwb3J0IGJsYWNrYm94aW5nLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBpcyB0byBsb2cgYGRlYnVnYCBtZXNzYWdlcy4gWW91IGNhbiB1c2VcbiAgICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwibG9nRXhhbXBsZVwiIG5hbWU9XCJsb2ctc2VydmljZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsb2dFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdMb2dDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZykge1xuICAgICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9ICdIZWxsbyBXb3JsZCEnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJMb2dDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgICAgPGxhYmVsPk1lc3NhZ2U6XG4gICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibWVzc2FnZVwiIC8+PC9sYWJlbD5cbiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLndhcm4obWVzc2FnZSlcIj53YXJuPC9idXR0b24+XG4gICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmluZm8obWVzc2FnZSlcIj5pbmZvPC9idXR0b24+XG4gICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuZGVidWcobWVzc2FnZSlcIj5kZWJ1ZzwvYnV0dG9uPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvdmlkZXJcbiAgICogQG5hbWUgJGxvZ1Byb3ZpZGVyXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVc2UgdGhlIGAkbG9nUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGxvZ3MgbWVzc2FnZXNcbiAgICovXG4gIGZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgICB2YXIgZGVidWcgPSB0cnVlLFxuICAgICAgICBzZWxmID0gdGhpcztcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZmxhZyBlbmFibGUgb3IgZGlzYWJsZSBkZWJ1ZyBsZXZlbCBtZXNzYWdlc1xuICAgICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAgICovXG4gICAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgaWYgKGlzRGVmaW5lZChmbGFnKSkge1xuICAgICAgICBkZWJ1ZyA9IGZsYWc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlYnVnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZSAxMi0xNCtcbiAgICAgIC8vIElFL0VkZ2UgZGlzcGxheSBlcnJvcnMgaW4gc3VjaCBhIHdheSB0aGF0IGl0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGNsaWNrIGluIDQgcGxhY2VzXG4gICAgICAvLyB0byBzZWUgdGhlIHN0YWNrIHRyYWNlLiBUaGVyZSBpcyBubyB3YXkgdG8gZmVhdHVyZS1kZXRlY3QgaXQgc28gdGhlcmUncyBhIGNoYW5jZVxuICAgICAgLy8gb2YgdGhlIHVzZXIgYWdlbnQgc25pZmZpbmcgdG8gZ28gd3JvbmcgYnV0IHNpbmNlIGl0J3Mgb25seSBhYm91dCBsb2dnaW5nLCB0aGlzIHNob3VsZG4ndFxuICAgICAgLy8gYnJlYWsgYXBwcy4gT3RoZXIgYnJvd3NlcnMgZGlzcGxheSBlcnJvcnMgaW4gYSBzZW5zaWJsZSB3YXkgYW5kIHNvbWUgb2YgdGhlbSBtYXAgc3RhY2tcbiAgICAgIC8vIHRyYWNlcyBhbG9uZyBzb3VyY2UgbWFwcyBpZiBhdmFpbGFibGUgc28gaXQgbWFrZXMgc2Vuc2UgdG8gbGV0IGJyb3dzZXJzIGRpc3BsYXkgaXRcbiAgICAgIC8vIGFzIHRoZXkgd2FudC5cbiAgICAgIHZhciBmb3JtYXRTdGFja1RyYWNlID0gbXNpZSB8fCAvXFxiRWRnZVxcLy8udGVzdCgkd2luZG93Lm5hdmlnYXRvciAmJiAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkbG9nI2xvZ1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogV3JpdGUgYSBsb2cgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAgICovXG4gICAgICAgIGluZm86IGNvbnNvbGVMb2coJ2luZm8nKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkbG9nI3dhcm5cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFdyaXRlIGEgd2FybmluZyBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGxvZyNlcnJvclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICBkZWJ1ZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgIGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSgpXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBmb3JtYXRFcnJvcihhcmcpIHtcbiAgICAgICAgaWYgKGlzRXJyb3IoYXJnKSkge1xuICAgICAgICAgIGlmIChhcmcuc3RhY2sgJiYgZm9ybWF0U3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc3RhY2sgOiBhcmcuc3RhY2s7XG4gICAgICAgICAgfSBlbHNlIGlmIChhcmcuc291cmNlVVJMKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHtcbiAgICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcDtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IG9ubHlcbiAgICAgICAgICAvLyBjb25zb2xlIG1ldGhvZHMgZG9uJ3QgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZSBpbiBJRSA5IHNvIHdlIGNhbid0XG4gICAgICAgICAgLy8gY2FsbCBgbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncylgIGRpcmVjdGx5LlxuICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChsb2dGbiwgY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfV07XG4gIH1cblxuICAvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gICAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAgICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICAgKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gICAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAgICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICAgKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4gIHZhciAkcGFyc2VNaW5FcnIgPSBtaW5FcnIoJyRwYXJzZScpO1xuXG4gIHZhciBvYmplY3RWYWx1ZU9mID0ge30uY29uc3RydWN0b3IucHJvdG90eXBlLnZhbHVlT2Y7XG5cbiAgLy8gU2FuZGJveGluZyBBbmd1bGFyIEV4cHJlc3Npb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBubyBsb25nZXIgc2FuZGJveGVkLiBTbyBpdCBpcyBub3cgZXZlbiBlYXNpZXIgdG8gYWNjZXNzIGFyYml0cmFyeSBKUyBjb2RlIGJ5XG4gIC8vIHZhcmlvdXMgbWVhbnMgc3VjaCBhcyBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gbmF0aXZlIEpTIGZ1bmN0aW9ucyBsaWtlIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cbiAgLy9cbiAgLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XG4gIC8vXG4gIC8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbiAgLy9cbiAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHJlYWxpemUgdGhhdCBpZiB5b3UgY3JlYXRlIGFuIGV4cHJlc3Npb24gZnJvbSBhIHN0cmluZyB0aGF0IGNvbnRhaW5zIHVzZXIgcHJvdmlkZWRcbiAgLy8gY29udGVudCB0aGVuIGl0IGlzIHBvc3NpYmxlIHRoYXQgeW91ciBhcHBsaWNhdGlvbiBjb250YWlucyBhIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdHkgdG8gYW4gWFNTIHN0eWxlIGF0dGFjay5cbiAgLy9cbiAgLy8gU2VlIGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL3NlY3VyaXR5XG5cblxuICBmdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZShuYW1lKSB7XG4gICAgLy8gUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzdHJpbmdzLiBUaGlzIG1lYW5zIHRoYXQgbm9uLXN0cmluZyBvYmplY3RzIGNhbm5vdCBiZSB1c2VkXG4gICAgLy8gYXMga2V5cyBpbiBhbiBvYmplY3QuIEFueSBub24tc3RyaW5nIG9iamVjdCwgaW5jbHVkaW5nIGEgbnVtYmVyLCBpcyB0eXBlY2FzdGVkXG4gICAgLy8gaW50byBhIHN0cmluZyB2aWEgdGhlIHRvU3RyaW5nIG1ldGhvZC5cbiAgICAvLyAtLSBNRE4sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Qcm9wZXJ0eV9hY2Nlc3NvcnMjUHJvcGVydHlfbmFtZXNcbiAgICAvL1xuICAgIC8vIFNvLCB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgY2hlY2tpbmcgdGhlIHNhbWUgYG5hbWVgIHRoYXQgSmF2YVNjcmlwdCB3b3VsZCB1c2UsIHdlIGNhc3QgaXRcbiAgICAvLyB0byBhIHN0cmluZy4gSXQncyBub3QgYWx3YXlzIHBvc3NpYmxlLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGFuZCBpdHMgYHRvU3RyaW5nYCBtZXRob2QgaXNcbiAgICAvLyAnYnJva2VuJyAoZG9lc24ndCByZXR1cm4gYSBzdHJpbmcsIGlzbid0IGEgZnVuY3Rpb24sIGV0Yy4pLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bjpcbiAgICAvL1xuICAgIC8vIFR5cGVFcnJvcjogQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVxuICAgIC8vXG4gICAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGRvbid0IGNhdGNoIHRoaXMgZXJyb3IgaGVyZSBhbmQgYWxsb3cgaXQgdG8gcHJvcGFnYXRlIHVwIHRoZSBjYWxsXG4gICAgLy8gc3RhY2suIE5vdGUgdGhhdCB5b3UnbGwgZ2V0IHRoZSBzYW1lIGVycm9yIGluIEphdmFTY3JpcHQgaWYgeW91IHRyeSB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB1c2luZ1xuICAgIC8vIHN1Y2ggYSAnYnJva2VuJyBvYmplY3QgYXMgYSBrZXkuXG4gICAgcmV0dXJuIG5hbWUgKyAnJztcbiAgfVxuXG4gIHZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbiAgZm9yRWFjaCgnKyAtICogLyAlID09PSAhPT0gPT0gIT0gPCA+IDw9ID49ICYmIHx8ICEgPSB8Jy5zcGxpdCgnICcpLCBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICBPUEVSQVRPUlNbb3BlcmF0b3JdID0gdHJ1ZTtcbiAgfSk7XG4gIHZhciBFU0NBUEUgPSB7ICduJzogJ1xcbicsICdmJzogJ1xcZicsICdyJzogJ1xccicsICd0JzogJ1xcdCcsICd2JzogJ1xcdicsICdcXCcnOiAnXFwnJywgJ1wiJzogJ1wiJyB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgTGV4ZXIgPSBmdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfTtcblxuICBMZXhlci5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IExleGVyLFxuXG4gICAgbGV4OiBmdW5jdGlvbiBsZXgodGV4dCkge1xuICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gJ1xcJycpIHtcbiAgICAgICAgICB0aGlzLnJlYWRTdHJpbmcoY2gpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgICB0aGlzLnJlYWROdW1iZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMucGVla011bHRpY2hhcigpKSkge1xuICAgICAgICAgIHRoaXMucmVhZElkZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pcyhjaCwgJygpe31bXS4sOzo/JykpIHtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsgaW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNoIH0pO1xuICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHtcbiAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNoMiA9IGNoICsgdGhpcy5wZWVrKCk7XG4gICAgICAgICAgdmFyIGNoMyA9IGNoMiArIHRoaXMucGVlaygyKTtcbiAgICAgICAgICB2YXIgb3AxID0gT1BFUkFUT1JTW2NoXTtcbiAgICAgICAgICB2YXIgb3AyID0gT1BFUkFUT1JTW2NoMl07XG4gICAgICAgICAgdmFyIG9wMyA9IE9QRVJBVE9SU1tjaDNdO1xuICAgICAgICAgIGlmIChvcDEgfHwgb3AyIHx8IG9wMykge1xuICAgICAgICAgICAgdmFyIHRva2VuID0gb3AzID8gY2gzIDogb3AyID8gY2gyIDogY2g7XG4gICAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsgaW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IHRva2VuLCBvcGVyYXRvcjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgJywgdGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICAgIH0sXG5cbiAgICBpczogZnVuY3Rpb24gaXMoY2gsIGNoYXJzKSB7XG4gICAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihjaCkgIT09IC0xO1xuICAgIH0sXG5cbiAgICBwZWVrOiBmdW5jdGlvbiBwZWVrKGkpIHtcbiAgICAgIHZhciBudW0gPSBpIHx8IDE7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGggPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7XG4gICAgfSxcblxuICAgIGlzTnVtYmVyOiBmdW5jdGlvbiBpc051bWJlcihjaCkge1xuICAgICAgcmV0dXJuICcwJyA8PSBjaCAmJiBjaCA8PSAnOScgJiYgdHlwZW9mIGNoID09PSAnc3RyaW5nJztcbiAgICB9LFxuXG4gICAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbiBpc1doaXRlc3BhY2UoY2gpIHtcbiAgICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgICAgcmV0dXJuIGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFx0JyB8fCBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx4QTAnO1xuICAgIH0sXG5cbiAgICBpc0lkZW50aWZpZXJTdGFydDogZnVuY3Rpb24gaXNJZGVudGlmaWVyU3RhcnQoY2gpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQgPyB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQoY2gsIHRoaXMuY29kZVBvaW50QXQoY2gpKSA6IHRoaXMuaXNWYWxpZElkZW50aWZpZXJTdGFydChjaCk7XG4gICAgfSxcblxuICAgIGlzVmFsaWRJZGVudGlmaWVyU3RhcnQ6IGZ1bmN0aW9uIGlzVmFsaWRJZGVudGlmaWVyU3RhcnQoY2gpIHtcbiAgICAgIHJldHVybiAnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8ICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHwgJ18nID09PSBjaCB8fCBjaCA9PT0gJyQnO1xuICAgIH0sXG5cbiAgICBpc0lkZW50aWZpZXJDb250aW51ZTogZnVuY3Rpb24gaXNJZGVudGlmaWVyQ29udGludWUoY2gpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyQ29udGludWUgPyB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyQ29udGludWUoY2gsIHRoaXMuY29kZVBvaW50QXQoY2gpKSA6IHRoaXMuaXNWYWxpZElkZW50aWZpZXJDb250aW51ZShjaCk7XG4gICAgfSxcblxuICAgIGlzVmFsaWRJZGVudGlmaWVyQ29udGludWU6IGZ1bmN0aW9uIGlzVmFsaWRJZGVudGlmaWVyQ29udGludWUoY2gsIGNwKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkSWRlbnRpZmllclN0YXJ0KGNoLCBjcCkgfHwgdGhpcy5pc051bWJlcihjaCk7XG4gICAgfSxcblxuICAgIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChjaCkge1xuICAgICAgaWYgKGNoLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgcmV0dXJuIChjaC5jaGFyQ29kZUF0KDApIDw8IDEwKSArIGNoLmNoYXJDb2RlQXQoMSkgLSAweDM1RkRDMDA7XG4gICAgfSxcblxuICAgIHBlZWtNdWx0aWNoYXI6IGZ1bmN0aW9uIHBlZWtNdWx0aWNoYXIoKSB7XG4gICAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgICAgdmFyIHBlZWsgPSB0aGlzLnBlZWsoKTtcbiAgICAgIGlmICghcGVlaykge1xuICAgICAgICByZXR1cm4gY2g7XG4gICAgICB9XG4gICAgICB2YXIgY3AxID0gY2guY2hhckNvZGVBdCgwKTtcbiAgICAgIHZhciBjcDIgPSBwZWVrLmNoYXJDb2RlQXQoMCk7XG4gICAgICBpZiAoY3AxID49IDB4RDgwMCAmJiBjcDEgPD0gMHhEQkZGICYmIGNwMiA+PSAweERDMDAgJiYgY3AyIDw9IDB4REZGRikge1xuICAgICAgICByZXR1cm4gY2ggKyBwZWVrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG5cbiAgICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbiBpc0V4cE9wZXJhdG9yKGNoKSB7XG4gICAgICByZXR1cm4gY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpO1xuICAgIH0sXG5cbiAgICB0aHJvd0Vycm9yOiBmdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yLCBzdGFydCwgZW5kKSB7XG4gICAgICBlbmQgPSBlbmQgfHwgdGhpcy5pbmRleDtcbiAgICAgIHZhciBjb2xTdHIgPSBpc0RlZmluZWQoc3RhcnQpID8gJ3MgJyArIHN0YXJ0ICsgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nIDogJyAnICsgZW5kO1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLCBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICAgIH0sXG5cbiAgICByZWFkTnVtYmVyOiBmdW5jdGlvbiByZWFkTnVtYmVyKCkge1xuICAgICAgdmFyIG51bWJlciA9ICcnO1xuICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7XG4gICAgICAgIGlmIChjaCA9PT0gJy4nIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwZWVrQ2ggPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgICBpZiAoY2ggPT09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJiBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09PSAnZScpIHtcbiAgICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiYgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiYgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT09ICdlJykge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIGV4cG9uZW50Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgICB0ZXh0OiBudW1iZXIsXG4gICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICB2YWx1ZTogTnVtYmVyKG51bWJlcilcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZWFkSWRlbnQ6IGZ1bmN0aW9uIHJlYWRJZGVudCgpIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICB0aGlzLmluZGV4ICs9IHRoaXMucGVla011bHRpY2hhcigpLmxlbmd0aDtcbiAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLnBlZWtNdWx0aWNoYXIoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzSWRlbnRpZmllckNvbnRpbnVlKGNoKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggKz0gY2gubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgdGV4dDogdGhpcy50ZXh0LnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KSxcbiAgICAgICAgaWRlbnRpZmllcjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlYWRTdHJpbmc6IGZ1bmN0aW9uIHJlYWRTdHJpbmcocXVvdGUpIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgICB2YXIgZXNjYXBlID0gZmFsc2U7XG4gICAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgICAgcmF3U3RyaW5nICs9IGNoO1xuICAgICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICAgIHZhciBoZXggPSB0aGlzLnRleHQuc3Vic3RyaW5nKHRoaXMuaW5kZXggKyAxLCB0aGlzLmluZGV4ICsgNSk7XG4gICAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgZXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIHRoaXMudGhyb3dFcnJvcignVW50ZXJtaW5hdGVkIHF1b3RlJywgc3RhcnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgQVNUID0gZnVuY3Rpb24gQVNUKGxleGVyLCBvcHRpb25zKSB7XG4gICAgdGhpcy5sZXhlciA9IGxleGVyO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH07XG5cbiAgQVNULlByb2dyYW0gPSAnUHJvZ3JhbSc7XG4gIEFTVC5FeHByZXNzaW9uU3RhdGVtZW50ID0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnO1xuICBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24gPSAnQXNzaWdubWVudEV4cHJlc3Npb24nO1xuICBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic7XG4gIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiA9ICdMb2dpY2FsRXhwcmVzc2lvbic7XG4gIEFTVC5CaW5hcnlFeHByZXNzaW9uID0gJ0JpbmFyeUV4cHJlc3Npb24nO1xuICBBU1QuVW5hcnlFeHByZXNzaW9uID0gJ1VuYXJ5RXhwcmVzc2lvbic7XG4gIEFTVC5DYWxsRXhwcmVzc2lvbiA9ICdDYWxsRXhwcmVzc2lvbic7XG4gIEFTVC5NZW1iZXJFeHByZXNzaW9uID0gJ01lbWJlckV4cHJlc3Npb24nO1xuICBBU1QuSWRlbnRpZmllciA9ICdJZGVudGlmaWVyJztcbiAgQVNULkxpdGVyYWwgPSAnTGl0ZXJhbCc7XG4gIEFTVC5BcnJheUV4cHJlc3Npb24gPSAnQXJyYXlFeHByZXNzaW9uJztcbiAgQVNULlByb3BlcnR5ID0gJ1Byb3BlcnR5JztcbiAgQVNULk9iamVjdEV4cHJlc3Npb24gPSAnT2JqZWN0RXhwcmVzc2lvbic7XG4gIEFTVC5UaGlzRXhwcmVzc2lvbiA9ICdUaGlzRXhwcmVzc2lvbic7XG4gIEFTVC5Mb2NhbHNFeHByZXNzaW9uID0gJ0xvY2Fsc0V4cHJlc3Npb24nO1xuXG4gIC8vIEludGVybmFsIHVzZSBvbmx5XG4gIEFTVC5OR1ZhbHVlUGFyYW1ldGVyID0gJ05HVmFsdWVQYXJhbWV0ZXInO1xuXG4gIEFTVC5wcm90b3R5cGUgPSB7XG4gICAgYXN0OiBmdW5jdGlvbiBhc3QodGV4dCkge1xuICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgIHRoaXMudG9rZW5zID0gdGhpcy5sZXhlci5sZXgodGV4dCk7XG5cbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgYW4gdW5leHBlY3RlZCB0b2tlbicsIHRoaXMudG9rZW5zWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBwcm9ncmFtOiBmdW5jdGlvbiBwcm9ncmFtKCkge1xuICAgICAgdmFyIGJvZHkgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSkgYm9keS5wdXNoKHRoaXMuZXhwcmVzc2lvblN0YXRlbWVudCgpKTtcbiAgICAgICAgaWYgKCF0aGlzLmV4cGVjdCgnOycpKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHkgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbiBleHByZXNzaW9uU3RhdGVtZW50KCkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogQVNULkV4cHJlc3Npb25TdGF0ZW1lbnQsIGV4cHJlc3Npb246IHRoaXMuZmlsdGVyQ2hhaW4oKSB9O1xuICAgIH0sXG5cbiAgICBmaWx0ZXJDaGFpbjogZnVuY3Rpb24gZmlsdGVyQ2hhaW4oKSB7XG4gICAgICB2YXIgbGVmdCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8JykpIHtcbiAgICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgfSxcblxuICAgIGV4cHJlc3Npb246IGZ1bmN0aW9uIGV4cHJlc3Npb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7XG4gICAgfSxcblxuICAgIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uIGFzc2lnbm1lbnQoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy50ZXJuYXJ5KCk7XG4gICAgICBpZiAodGhpcy5leHBlY3QoJz0nKSkge1xuICAgICAgICBpZiAoIWlzQXNzaWduYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsdmFsJywgJ1RyeWluZyB0byBhc3NpZ24gYSB2YWx1ZSB0byBhIG5vbiBsLXZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSB7IHR5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogcmVzdWx0LCByaWdodDogdGhpcy5hc3NpZ25tZW50KCksIG9wZXJhdG9yOiAnPScgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIHRlcm5hcnk6IGZ1bmN0aW9uIHRlcm5hcnkoKSB7XG4gICAgICB2YXIgdGVzdCA9IHRoaXMubG9naWNhbE9SKCk7XG4gICAgICB2YXIgYWx0ZXJuYXRlO1xuICAgICAgdmFyIGNvbnNlcXVlbnQ7XG4gICAgICBpZiAodGhpcy5leHBlY3QoJz8nKSkge1xuICAgICAgICBhbHRlcm5hdGUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgaWYgKHRoaXMuY29uc3VtZSgnOicpKSB7XG4gICAgICAgICAgY29uc2VxdWVudCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24sIHRlc3Q6IHRlc3QsIGFsdGVybmF0ZTogYWx0ZXJuYXRlLCBjb25zZXF1ZW50OiBjb25zZXF1ZW50IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXN0O1xuICAgIH0sXG5cbiAgICBsb2dpY2FsT1I6IGZ1bmN0aW9uIGxvZ2ljYWxPUigpIHtcbiAgICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsQU5EKCk7XG4gICAgICB3aGlsZSAodGhpcy5leHBlY3QoJ3x8JykpIHtcbiAgICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJ3x8JywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubG9naWNhbEFORCgpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdDtcbiAgICB9LFxuXG4gICAgbG9naWNhbEFORDogZnVuY3Rpb24gbG9naWNhbEFORCgpIHtcbiAgICAgIHZhciBsZWZ0ID0gdGhpcy5lcXVhbGl0eSgpO1xuICAgICAgd2hpbGUgKHRoaXMuZXhwZWN0KCcmJicpKSB7XG4gICAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICcmJicsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmVxdWFsaXR5KCkgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0O1xuICAgIH0sXG5cbiAgICBlcXVhbGl0eTogZnVuY3Rpb24gZXF1YWxpdHkoKSB7XG4gICAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpO1xuICAgICAgdmFyIHRva2VuO1xuICAgICAgd2hpbGUgKHRva2VuID0gdGhpcy5leHBlY3QoJz09JywgJyE9JywgJz09PScsICchPT0nKSkge1xuICAgICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnJlbGF0aW9uYWwoKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgfSxcblxuICAgIHJlbGF0aW9uYWw6IGZ1bmN0aW9uIHJlbGF0aW9uYWwoKSB7XG4gICAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTtcbiAgICAgIHZhciB0b2tlbjtcbiAgICAgIHdoaWxlICh0b2tlbiA9IHRoaXMuZXhwZWN0KCc8JywgJz4nLCAnPD0nLCAnPj0nKSkge1xuICAgICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmFkZGl0aXZlKCkgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0O1xuICAgIH0sXG5cbiAgICBhZGRpdGl2ZTogZnVuY3Rpb24gYWRkaXRpdmUoKSB7XG4gICAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTtcbiAgICAgIHZhciB0b2tlbjtcbiAgICAgIHdoaWxlICh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywgJy0nKSkge1xuICAgICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLm11bHRpcGxpY2F0aXZlKCkgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0O1xuICAgIH0sXG5cbiAgICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24gbXVsdGlwbGljYXRpdmUoKSB7XG4gICAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTtcbiAgICAgIHZhciB0b2tlbjtcbiAgICAgIHdoaWxlICh0b2tlbiA9IHRoaXMuZXhwZWN0KCcqJywgJy8nLCAnJScpKSB7XG4gICAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMudW5hcnkoKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgfSxcblxuICAgIHVuYXJ5OiBmdW5jdGlvbiB1bmFyeSgpIHtcbiAgICAgIHZhciB0b2tlbjtcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywgJy0nLCAnIScpKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5VbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBwcmVmaXg6IHRydWUsIGFyZ3VtZW50OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaW1hcnkoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeSgpIHtcbiAgICAgIHZhciBwcmltYXJ5O1xuICAgICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHtcbiAgICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHtcbiAgICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7XG4gICAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGZSZWZlcmVudGlhbC5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgICBwcmltYXJ5ID0gY29weSh0aGlzLnNlbGZSZWZlcmVudGlhbFt0aGlzLmNvbnN1bWUoKS50ZXh0XSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5saXRlcmFscy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRoaXMub3B0aW9ucy5saXRlcmFsc1t0aGlzLmNvbnN1bWUoKS50ZXh0XSB9O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgIHByaW1hcnkgPSB0aGlzLmlkZW50aWZpZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgICAgcHJpbWFyeSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dDtcbiAgICAgIHdoaWxlIChuZXh0ID0gdGhpcy5leHBlY3QoJygnLCAnWycsICcuJykpIHtcbiAgICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgICAgcHJpbWFyeSA9IHsgdHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnWycpIHtcbiAgICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnLicpIHtcbiAgICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSU1QT1NTSUJMRScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJpbWFyeTtcbiAgICB9LFxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoYmFzZUV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBhcmdzID0gW2Jhc2VFeHByZXNzaW9uXTtcbiAgICAgIHZhciByZXN1bHQgPSB7IHR5cGU6IEFTVC5DYWxsRXhwcmVzc2lvbiwgY2FsbGVlOiB0aGlzLmlkZW50aWZpZXIoKSwgYXJndW1lbnRzOiBhcmdzLCBmaWx0ZXI6IHRydWUgfTtcblxuICAgICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHtcbiAgICAgICAgYXJncy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICcpJykge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgYXJncy5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSk7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfSxcblxuICAgIGlkZW50aWZpZXI6IGZ1bmN0aW9uIGlkZW50aWZpZXIoKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIGlmICghdG9rZW4uaWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInLCB0b2tlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4geyB0eXBlOiBBU1QuSWRlbnRpZmllciwgbmFtZTogdG9rZW4udGV4dCB9O1xuICAgIH0sXG5cbiAgICBjb25zdGFudDogZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgICAvLyBUT0RPIGNoZWNrIHRoYXQgaXQgaXMgYSBjb25zdGFudFxuICAgICAgcmV0dXJuIHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLmNvbnN1bWUoKS52YWx1ZSB9O1xuICAgIH0sXG5cbiAgICBhcnJheURlY2xhcmF0aW9uOiBmdW5jdGlvbiBhcnJheURlY2xhcmF0aW9uKCkge1xuICAgICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh0aGlzLnBlZWsoJ10nKSkge1xuICAgICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgICByZXR1cm4geyB0eXBlOiBBU1QuQXJyYXlFeHByZXNzaW9uLCBlbGVtZW50czogZWxlbWVudHMgfTtcbiAgICB9LFxuXG4gICAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QoKSB7XG4gICAgICB2YXIgcHJvcGVydGllcyA9IFtdLFxuICAgICAgICAgIHByb3BlcnR5O1xuICAgICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ30nKSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAodGhpcy5wZWVrKCd9JykpIHtcbiAgICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9wZXJ0eSA9IHsgdHlwZTogQVNULlByb3BlcnR5LCBraW5kOiAnaW5pdCcgfTtcbiAgICAgICAgICBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICAgICAgICAgIHByb3BlcnR5LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmlkZW50aWZpZXIoKTtcbiAgICAgICAgICAgIHByb3BlcnR5LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wZWVrKCc6JykpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHByb3BlcnR5LmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygnWycpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWUoJ1snKTtcbiAgICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICAgICAgICBwcm9wZXJ0eS5jb21wdXRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignaW52YWxpZCBrZXknLCB0aGlzLnBlZWsoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgICAgfVxuICAgICAgdGhpcy5jb25zdW1lKCd9Jyk7XG5cbiAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5PYmplY3RFeHByZXNzaW9uLCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIH07XG4gICAgfSxcblxuICAgIHRocm93RXJyb3I6IGZ1bmN0aW9uIHRocm93RXJyb3IobXNnLCB0b2tlbikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdzeW50YXgnLCAnU3ludGF4IEVycm9yOiBUb2tlbiBcXCd7MH1cXCcgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uJywgdG9rZW4udGV4dCwgbXNnLCB0b2tlbi5pbmRleCArIDEsIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICAgIH0sXG5cbiAgICBjb25zdW1lOiBmdW5jdGlvbiBjb25zdW1lKGUxKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdChlMSk7XG4gICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9LFxuXG4gICAgcGVla1Rva2VuOiBmdW5jdGlvbiBwZWVrVG9rZW4oKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudG9rZW5zWzBdO1xuICAgIH0sXG5cbiAgICBwZWVrOiBmdW5jdGlvbiBwZWVrKGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wZWVrQWhlYWQoMCwgZTEsIGUyLCBlMywgZTQpO1xuICAgIH0sXG5cbiAgICBwZWVrQWhlYWQ6IGZ1bmN0aW9uIHBlZWtBaGVhZChpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IGkpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbaV07XG4gICAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgICAgaWYgKHQgPT09IGUxIHx8IHQgPT09IGUyIHx8IHQgPT09IGUzIHx8IHQgPT09IGU0IHx8ICFlMSAmJiAhZTIgJiYgIWUzICYmICFlNCkge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBleHBlY3Q6IGZ1bmN0aW9uIGV4cGVjdChlMSwgZTIsIGUzLCBlNCkge1xuICAgICAgdmFyIHRva2VuID0gdGhpcy5wZWVrKGUxLCBlMiwgZTMsIGU0KTtcbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICB0aGlzLnRva2Vucy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHNlbGZSZWZlcmVudGlhbDoge1xuICAgICAgJ3RoaXMnOiB7IHR5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9LFxuICAgICAgJyRsb2NhbHMnOiB7IHR5cGU6IEFTVC5Mb2NhbHNFeHByZXNzaW9uIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaWZEZWZpbmVkKHYsIGQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnID8gdiA6IGQ7XG4gIH1cblxuICBmdW5jdGlvbiBwbHVzRm4obCwgcikge1xuICAgIGlmICh0eXBlb2YgbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByO1xuICAgIGlmICh0eXBlb2YgciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBsO1xuICAgIHJldHVybiBsICsgcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGZpbHRlck5hbWUpIHtcbiAgICB2YXIgZm4gPSAkZmlsdGVyKGZpbHRlck5hbWUpO1xuICAgIHJldHVybiAhZm4uJHN0YXRlZnVsO1xuICB9XG5cbiAgdmFyIFBVUklUWV9BQlNPTFVURSA9IDE7XG4gIHZhciBQVVJJVFlfUkVMQVRJVkUgPSAyO1xuXG4gIC8vIERldGVjdCBub2RlcyB3aGljaCBjb3VsZCBkZXBlbmQgb24gbm9uLXNoYWxsb3cgc3RhdGUgb2Ygb2JqZWN0c1xuICBmdW5jdGlvbiBpc1B1cmUobm9kZSwgcGFyZW50SXNQdXJlKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgIC8vIENvbXB1dGVkIG1lbWJlcnMgbWlnaHQgaW52b2tlIGEgc3RhdGVmdWwgdG9TdHJpbmcoKVxuICAgICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgICAgaWYgKG5vZGUuY29tcHV0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIFVuYXJ5IGFsd2F5cyBjb252ZXJ0IHRvIHByaW1hdGl2ZVxuICAgICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgICByZXR1cm4gUFVSSVRZX0FCU09MVVRFO1xuXG4gICAgICAvLyBUaGUgYmluYXJ5ICsgb3BlcmF0b3IgY2FuIGludm9rZSBhIHN0YXRlZnVsIHRvU3RyaW5nKCkuXG4gICAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgICByZXR1cm4gbm9kZS5vcGVyYXRvciAhPT0gJysnID8gUFVSSVRZX0FCU09MVVRFIDogZmFsc2U7XG5cbiAgICAgIC8vIEZ1bmN0aW9ucyAvIGZpbHRlcnMgcHJvYmFibHkgcmVhZCBzdGF0ZSBmcm9tIHdpdGhpbiBvYmplY3RzXG4gICAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQgPT09IHBhcmVudElzUHVyZSA/IFBVUklUWV9SRUxBVElWRSA6IHBhcmVudElzUHVyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCAkZmlsdGVyLCBwYXJlbnRJc1B1cmUpIHtcbiAgICB2YXIgYWxsQ29uc3RhbnRzO1xuICAgIHZhciBhcmdzVG9XYXRjaDtcbiAgICB2YXIgaXNTdGF0ZWxlc3NGaWx0ZXI7XG5cbiAgICB2YXIgYXN0SXNQdXJlID0gYXN0LmlzUHVyZSA9IGlzUHVyZShhc3QsIHBhcmVudElzUHVyZSk7XG5cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgICAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgICAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwci5leHByZXNzaW9uLCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgICAgIH0pO1xuICAgICAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgICAgYXN0LmNvbnN0YW50ID0gdHJ1ZTtcbiAgICAgICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICBhc3QuY29uc3RhbnQgPSBhc3QuYXJndW1lbnQuY29uc3RhbnQ7XG4gICAgICAgIGFzdC50b1dhdGNoID0gYXN0LmFyZ3VtZW50LnRvV2F0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QubGVmdCwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgICAgIGFzdC5jb25zdGFudCA9IGFzdC5sZWZ0LmNvbnN0YW50ICYmIGFzdC5yaWdodC5jb25zdGFudDtcbiAgICAgICAgYXN0LnRvV2F0Y2ggPSBhc3QubGVmdC50b1dhdGNoLmNvbmNhdChhc3QucmlnaHQudG9XYXRjaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnRlc3QsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuY29uc2VxdWVudCwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgYXN0LmNvbnN0YW50ID0gYXN0LnRlc3QuY29uc3RhbnQgJiYgYXN0LmFsdGVybmF0ZS5jb25zdGFudCAmJiBhc3QuY29uc2VxdWVudC5jb25zdGFudDtcbiAgICAgICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgICAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0Lm9iamVjdCwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGFzdC5jb25zdGFudCA9IGFzdC5vYmplY3QuY29uc3RhbnQgJiYgKCFhc3QuY29tcHV0ZWQgfHwgYXN0LnByb3BlcnR5LmNvbnN0YW50KTtcbiAgICAgICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgICBpc1N0YXRlbGVzc0ZpbHRlciA9IGFzdC5maWx0ZXIgPyBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpIDogZmFsc2U7XG4gICAgICAgIGFsbENvbnN0YW50cyA9IGlzU3RhdGVsZXNzRmlsdGVyO1xuICAgICAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgICAgIGFzdC50b1dhdGNoID0gaXNTdGF0ZWxlc3NGaWx0ZXIgPyBhcmdzVG9XYXRjaCA6IFthc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgICAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICAgICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgICAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICAgICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhwcm9wZXJ0eS52YWx1ZSwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgcHJvcGVydHkudmFsdWUuY29uc3RhbnQ7XG4gICAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkudmFsdWUudG9XYXRjaCk7XG4gICAgICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICAvL2B7W2tleV06IHZhbHVlfWAgaW1wbGljaXRseSBkb2VzIGBrZXkudG9TdHJpbmcoKWAgd2hpY2ggbWF5IGJlIG5vbi1wdXJlXG4gICAgICAgICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKHByb3BlcnR5LmtleSwgJGZpbHRlciwgLypwYXJlbnRJc1B1cmU9Ki9mYWxzZSk7XG4gICAgICAgICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgcHJvcGVydHkua2V5LmNvbnN0YW50O1xuICAgICAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkua2V5LnRvV2F0Y2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICAgICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBU1QuTG9jYWxzRXhwcmVzc2lvbjpcbiAgICAgICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0cyhib2R5KSB7XG4gICAgaWYgKGJvZHkubGVuZ3RoICE9PSAxKSByZXR1cm47XG4gICAgdmFyIGxhc3RFeHByZXNzaW9uID0gYm9keVswXS5leHByZXNzaW9uO1xuICAgIHZhciBjYW5kaWRhdGUgPSBsYXN0RXhwcmVzc2lvbi50b1dhdGNoO1xuICAgIGlmIChjYW5kaWRhdGUubGVuZ3RoICE9PSAxKSByZXR1cm4gY2FuZGlkYXRlO1xuICAgIHJldHVybiBjYW5kaWRhdGVbMF0gIT09IGxhc3RFeHByZXNzaW9uID8gY2FuZGlkYXRlIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NpZ25hYmxlKGFzdCkge1xuICAgIHJldHVybiBhc3QudHlwZSA9PT0gQVNULklkZW50aWZpZXIgfHwgYXN0LnR5cGUgPT09IEFTVC5NZW1iZXJFeHByZXNzaW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzaWduYWJsZUFTVChhc3QpIHtcbiAgICBpZiAoYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIGlzQXNzaWduYWJsZShhc3QuYm9keVswXS5leHByZXNzaW9uKSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uLCBsZWZ0OiBhc3QuYm9keVswXS5leHByZXNzaW9uLCByaWdodDogeyB0eXBlOiBBU1QuTkdWYWx1ZVBhcmFtZXRlciB9LCBvcGVyYXRvcjogJz0nIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNMaXRlcmFsKGFzdCkge1xuICAgIHJldHVybiBhc3QuYm9keS5sZW5ndGggPT09IDAgfHwgYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIChhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5MaXRlcmFsIHx8IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkFycmF5RXhwcmVzc2lvbiB8fCBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5PYmplY3RFeHByZXNzaW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29uc3RhbnQoYXN0KSB7XG4gICAgcmV0dXJuIGFzdC5jb25zdGFudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFTVENvbXBpbGVyKCRmaWx0ZXIpIHtcbiAgICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xuICB9XG5cbiAgQVNUQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoYXN0KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBuZXh0SWQ6IDAsXG4gICAgICAgIGZpbHRlcnM6IHt9LFxuICAgICAgICBmbjogeyB2YXJzOiBbXSwgYm9keTogW10sIG93bjoge30gfSxcbiAgICAgICAgYXNzaWduOiB7IHZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fSB9LFxuICAgICAgICBpbnB1dHM6IFtdXG4gICAgICB9O1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QsIHNlbGYuJGZpbHRlcik7XG4gICAgICB2YXIgZXh0cmEgPSAnJztcbiAgICAgIHZhciBhc3NpZ25hYmxlO1xuICAgICAgdGhpcy5zdGFnZSA9ICdhc3NpZ24nO1xuICAgICAgaWYgKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnYXNzaWduJztcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICAgIHRoaXMucmVjdXJzZShhc3NpZ25hYmxlLCByZXN1bHQpO1xuICAgICAgICB0aGlzLnJldHVybl8ocmVzdWx0KTtcbiAgICAgICAgZXh0cmEgPSAnZm4uYXNzaWduPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2Fzc2lnbicsICdzLHYsbCcpO1xuICAgICAgfVxuICAgICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgICAgc2VsZi5zdGFnZSA9ICdpbnB1dHMnO1xuICAgICAgZm9yRWFjaCh0b1dhdGNoLCBmdW5jdGlvbiAod2F0Y2gsIGtleSkge1xuICAgICAgICB2YXIgZm5LZXkgPSAnZm4nICsga2V5O1xuICAgICAgICBzZWxmLnN0YXRlW2ZuS2V5XSA9IHsgdmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9IH07XG4gICAgICAgIHNlbGYuc3RhdGUuY29tcHV0aW5nID0gZm5LZXk7XG4gICAgICAgIHZhciBpbnRvSWQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICBzZWxmLnJlY3Vyc2Uod2F0Y2gsIGludG9JZCk7XG4gICAgICAgIHNlbGYucmV0dXJuXyhpbnRvSWQpO1xuICAgICAgICBzZWxmLnN0YXRlLmlucHV0cy5wdXNoKHsgbmFtZTogZm5LZXksIGlzUHVyZTogd2F0Y2guaXNQdXJlIH0pO1xuICAgICAgICB3YXRjaC53YXRjaElkID0ga2V5O1xuICAgICAgfSk7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdmbic7XG4gICAgICB0aGlzLnN0YWdlID0gJ21haW4nO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzdCk7XG4gICAgICB2YXIgZm5TdHJpbmcgPVxuICAgICAgLy8gVGhlIGJ1aWxkIGFuZCBtaW5pZmljYXRpb24gc3RlcHMgcmVtb3ZlIHRoZSBzdHJpbmcgXCJ1c2Ugc3RyaWN0XCIgZnJvbSB0aGUgY29kZSwgYnV0IHRoaXMgaXMgZG9uZSB1c2luZyBhIHJlZ2V4LlxuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgdW50aWwgd2UgZG8gYSBiZXR0ZXIgam9iIGF0IG9ubHkgcmVtb3ZpbmcgdGhlIHByZWZpeCBvbmx5IHdoZW4gd2Ugc2hvdWxkLlxuICAgICAgJ1wiJyArIHRoaXMuVVNFICsgJyAnICsgdGhpcy5TVFJJQ1QgKyAnXCI7XFxuJyArIHRoaXMuZmlsdGVyUHJlZml4KCkgKyAndmFyIGZuPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2ZuJywgJ3MsbCxhLGknKSArIGV4dHJhICsgdGhpcy53YXRjaEZucygpICsgJ3JldHVybiBmbjsnO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIHZhciBmbiA9IG5ldyBGdW5jdGlvbignJGZpbHRlcicsICdnZXRTdHJpbmdWYWx1ZScsICdpZkRlZmluZWQnLCAncGx1cycsIGZuU3RyaW5nKSh0aGlzLiRmaWx0ZXIsIGdldFN0cmluZ1ZhbHVlLCBpZkRlZmluZWQsIHBsdXNGbik7XG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFnZSA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9LFxuXG4gICAgVVNFOiAndXNlJyxcblxuICAgIFNUUklDVDogJ3N0cmljdCcsXG5cbiAgICB3YXRjaEZuczogZnVuY3Rpb24gd2F0Y2hGbnMoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB2YXIgaW5wdXRzID0gdGhpcy5zdGF0ZS5pbnB1dHM7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBmb3JFYWNoKGlucHV0cywgZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCd2YXIgJyArIGlucHV0Lm5hbWUgKyAnPScgKyBzZWxmLmdlbmVyYXRlRnVuY3Rpb24oaW5wdXQubmFtZSwgJ3MnKSk7XG4gICAgICAgIGlmIChpbnB1dC5pc1B1cmUpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChpbnB1dC5uYW1lLCAnLmlzUHVyZT0nICsgSlNPTi5zdHJpbmdpZnkoaW5wdXQuaXNQdXJlKSArICc7Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJ2ZuLmlucHV0cz1bJyArIGlucHV0cy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaS5uYW1lO1xuICAgICAgICB9KS5qb2luKCcsJykgKyAnXTsnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlRnVuY3Rpb246IGZ1bmN0aW9uIGdlbmVyYXRlRnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyBwYXJhbXMgKyAnKXsnICsgdGhpcy52YXJzUHJlZml4KG5hbWUpICsgdGhpcy5ib2R5KG5hbWUpICsgJ307JztcbiAgICB9LFxuXG4gICAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbiBmaWx0ZXJQcmVmaXgoKSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGZvckVhY2godGhpcy5zdGF0ZS5maWx0ZXJzLCBmdW5jdGlvbiAoaWQsIGZpbHRlcikge1xuICAgICAgICBwYXJ0cy5wdXNoKGlkICsgJz0kZmlsdGVyKCcgKyBzZWxmLmVzY2FwZShmaWx0ZXIpICsgJyknKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHBhcnRzLmxlbmd0aCkgcmV0dXJuICd2YXIgJyArIHBhcnRzLmpvaW4oJywnKSArICc7JztcbiAgICAgIHJldHVybiAnJztcbiAgICB9LFxuXG4gICAgdmFyc1ByZWZpeDogZnVuY3Rpb24gdmFyc1ByZWZpeChzZWN0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgICB9LFxuXG4gICAgYm9keTogZnVuY3Rpb24gYm9keShzZWN0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS5ib2R5LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICByZWN1cnNlOiBmdW5jdGlvbiByZWN1cnNlKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHNraXBXYXRjaElkQ2hlY2spIHtcbiAgICAgIHZhciBsZWZ0LFxuICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICBjb21wdXRlZDtcbiAgICAgIHJlY3Vyc2lvbkZuID0gcmVjdXJzaW9uRm4gfHwgbm9vcDtcbiAgICAgIGlmICghc2tpcFdhdGNoSWRDaGVjayAmJiBpc0RlZmluZWQoYXN0LndhdGNoSWQpKSB7XG4gICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICB0aGlzLmlmXygnaScsIHRoaXMubGF6eUFzc2lnbihpbnRvSWQsIHRoaXMuY29tcHV0ZWRNZW1iZXIoJ2knLCBhc3Qud2F0Y2hJZCkpLCB0aGlzLmxhenlSZWN1cnNlKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHRydWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgICAgICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgICAgICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uIChleHByZXNzaW9uLCBwb3MpIHtcbiAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgICByaWdodCA9IGV4cHI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwb3MgIT09IGFzdC5ib2R5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5jdXJyZW50KCkuYm9keS5wdXNoKHJpZ2h0LCAnOycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZi5yZXR1cm5fKHJpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5lc2NhcGUoYXN0LnZhbHVlKTtcbiAgICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgICAgIHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgcmlnaHQgPSBleHByO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBhc3Qub3BlcmF0b3IgKyAnKCcgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCkgKyAnKSc7XG4gICAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgbGVmdCA9IGV4cHI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5yaWdodCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgICByaWdodCA9IGV4cHI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGFzdC5vcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wbHVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFzdC5vcGVyYXRvciA9PT0gJy0nKSB7XG4gICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5pZkRlZmluZWQobGVmdCwgMCkgKyBhc3Qub3BlcmF0b3IgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSAnKCcgKyBsZWZ0ICsgJyknICsgYXN0Lm9wZXJhdG9yICsgJygnICsgcmlnaHQgKyAnKSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QubGVmdCwgaW50b0lkKTtcbiAgICAgICAgICBzZWxmLmlmXyhhc3Qub3BlcmF0b3IgPT09ICcmJicgPyBpbnRvSWQgOiBzZWxmLm5vdChpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5yaWdodCwgaW50b0lkKSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QudGVzdCwgaW50b0lkKTtcbiAgICAgICAgICBzZWxmLmlmXyhpbnRvSWQsIHNlbGYubGF6eVJlY3Vyc2UoYXN0LmFsdGVybmF0ZSwgaW50b0lkKSwgc2VsZi5sYXp5UmVjdXJzZShhc3QuY29uc2VxdWVudCwgaW50b0lkKSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgICAgICBuYW1lSWQuY29udGV4dCA9IHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnID8gJ3MnIDogdGhpcy5hc3NpZ24odGhpcy5uZXh0SWQoKSwgdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSArICc/bDpzJyk7XG4gICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0Lm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuaWZfKHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnIHx8IHNlbGYubm90KHNlbGYuZ2V0SGFzT3duUHJvcGVydHkoJ2wnLCBhc3QubmFtZSkpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmlmXyhzZWxmLnN0YWdlID09PSAnaW5wdXRzJyB8fCAncycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLmlzTnVsbChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSksICd7fScpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgaW50b0lkICYmIHNlbGYubGF6eUFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ2wnLCBhc3QubmFtZSkpKTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgICAgIGxlZnQgPSBuYW1lSWQgJiYgKG5hbWVJZC5jb250ZXh0ID0gdGhpcy5uZXh0SWQoKSkgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0Lm9iamVjdCwgbGVmdCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnByb3BlcnR5LCByaWdodCk7XG4gICAgICAgICAgICAgICAgc2VsZi5nZXRTdHJpbmdWYWx1ZShyaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpLCAne30nKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgc2VsZi5pZl8oc2VsZi5pc051bGwoc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSkpLCBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSksICd7fScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5wcm9wZXJ0eS5uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICAgIGlmIChhc3QuZmlsdGVyKSB7XG4gICAgICAgICAgICByaWdodCA9IHNlbGYuZmlsdGVyKGFzdC5jYWxsZWUubmFtZSk7XG4gICAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhcmd1bWVudCk7XG4gICAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QuY2FsbGVlLCByaWdodCwgbGVmdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwocmlnaHQpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFzdC5jb25zdGFudCA/IHVuZGVmaW5lZCA6IHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobGVmdC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgICAgICByaWdodCA9IHRoaXMubmV4dElkKCk7XG4gICAgICAgICAgbGVmdCA9IHt9O1xuICAgICAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCBsZWZ0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdC5jb250ZXh0KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnJpZ2h0LCByaWdodCk7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyBhc3Qub3BlcmF0b3IgKyByaWdodDtcbiAgICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXN0LmNvbnN0YW50ID8gdW5kZWZpbmVkIDogc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSAnWycgKyBhcmdzLmpvaW4oJywnKSArICddJztcbiAgICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3t9Jyk7XG4gICAgICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5yZWN1cnNlKHByb3BlcnR5LmtleSwgbGVmdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/IHByb3BlcnR5LmtleS5uYW1lIDogJycgKyBwcm9wZXJ0eS5rZXkudmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIHJpZ2h0KTtcbiAgICAgICAgICAgICAgc2VsZi5hc3NpZ24oc2VsZi5tZW1iZXIoaW50b0lkLCBsZWZ0LCBwcm9wZXJ0eS5jb21wdXRlZCksIHJpZ2h0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlLCBhc3QuY29uc3RhbnQgPyB1bmRlZmluZWQgOiBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZXNjYXBlKHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/IHByb3BlcnR5LmtleS5uYW1lIDogJycgKyBwcm9wZXJ0eS5rZXkudmFsdWUpICsgJzonICsgZXhwcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHByZXNzaW9uID0gJ3snICsgYXJncy5qb2luKCcsJykgKyAnfSc7XG4gICAgICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3MnKTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgJ3MnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBU1QuTG9jYWxzRXhwcmVzc2lvbjpcbiAgICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsICdsJyk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdsJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCAndicpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24gZ2V0SGFzT3duUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICAgIHZhciBrZXkgPSBlbGVtZW50ICsgJy4nICsgcHJvcGVydHk7XG4gICAgICB2YXIgb3duID0gdGhpcy5jdXJyZW50KCkub3duO1xuICAgICAgaWYgKCFvd24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBvd25ba2V5XSA9IHRoaXMubmV4dElkKGZhbHNlLCBlbGVtZW50ICsgJyYmKCcgKyB0aGlzLmVzY2FwZShwcm9wZXJ0eSkgKyAnIGluICcgKyBlbGVtZW50ICsgJyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvd25ba2V5XTtcbiAgICB9LFxuXG4gICAgYXNzaWduOiBmdW5jdGlvbiBhc3NpZ24oaWQsIHZhbHVlKSB7XG4gICAgICBpZiAoIWlkKSByZXR1cm47XG4gICAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goaWQsICc9JywgdmFsdWUsICc7Jyk7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfSxcblxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGZpbHRlck5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5maWx0ZXJzLmhhc093blByb3BlcnR5KGZpbHRlck5hbWUpKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXSA9IHRoaXMubmV4dElkKHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXTtcbiAgICB9LFxuXG4gICAgaWZEZWZpbmVkOiBmdW5jdGlvbiBpZkRlZmluZWQoaWQsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICdpZkRlZmluZWQoJyArIGlkICsgJywnICsgdGhpcy5lc2NhcGUoZGVmYXVsdFZhbHVlKSArICcpJztcbiAgICB9LFxuXG4gICAgcGx1czogZnVuY3Rpb24gcGx1cyhsZWZ0LCByaWdodCkge1xuICAgICAgcmV0dXJuICdwbHVzKCcgKyBsZWZ0ICsgJywnICsgcmlnaHQgKyAnKSc7XG4gICAgfSxcblxuICAgIHJldHVybl86IGZ1bmN0aW9uIHJldHVybl8oaWQpIHtcbiAgICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCgncmV0dXJuICcsIGlkLCAnOycpO1xuICAgIH0sXG5cbiAgICBpZl86IGZ1bmN0aW9uIGlmXyh0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQpIHtcbiAgICAgIGlmICh0ZXN0ID09PSB0cnVlKSB7XG4gICAgICAgIGFsdGVybmF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJvZHkgPSB0aGlzLmN1cnJlbnQoKS5ib2R5O1xuICAgICAgICBib2R5LnB1c2goJ2lmKCcsIHRlc3QsICcpeycpO1xuICAgICAgICBhbHRlcm5hdGUoKTtcbiAgICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICAgIGlmIChjb25zZXF1ZW50KSB7XG4gICAgICAgICAgYm9keS5wdXNoKCdlbHNleycpO1xuICAgICAgICAgIGNvbnNlcXVlbnQoKTtcbiAgICAgICAgICBib2R5LnB1c2goJ30nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBub3Q6IGZ1bmN0aW9uIG5vdChleHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gJyEoJyArIGV4cHJlc3Npb24gKyAnKSc7XG4gICAgfSxcblxuICAgIGlzTnVsbDogZnVuY3Rpb24gaXNOdWxsKGV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBleHByZXNzaW9uICsgJz09bnVsbCc7XG4gICAgfSxcblxuICAgIG5vdE51bGw6IGZ1bmN0aW9uIG5vdE51bGwoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgICB9LFxuXG4gICAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uIG5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgU0FGRV9JREVOVElGSUVSID0gL15bJF9hLXpBLVpdWyRfYS16QS1aMC05XSokLztcbiAgICAgIHZhciBVTlNBRkVfQ0hBUkFDVEVSUyA9IC9bXiRfYS16QS1aMC05XS9nO1xuICAgICAgaWYgKFNBRkVfSURFTlRJRklFUi50ZXN0KHJpZ2h0KSkge1xuICAgICAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlZnQgKyAnW1wiJyArIHJpZ2h0LnJlcGxhY2UoVU5TQUZFX0NIQVJBQ1RFUlMsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgJ1wiXSc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbiBjb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCkge1xuICAgICAgcmV0dXJuIGxlZnQgKyAnWycgKyByaWdodCArICddJztcbiAgICB9LFxuXG4gICAgbWVtYmVyOiBmdW5jdGlvbiBtZW1iZXIobGVmdCwgcmlnaHQsIGNvbXB1dGVkKSB7XG4gICAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICB9LFxuXG4gICAgZ2V0U3RyaW5nVmFsdWU6IGZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKGl0ZW0pIHtcbiAgICAgIHRoaXMuYXNzaWduKGl0ZW0sICdnZXRTdHJpbmdWYWx1ZSgnICsgaXRlbSArICcpJyk7XG4gICAgfSxcblxuICAgIGxhenlSZWN1cnNlOiBmdW5jdGlvbiBsYXp5UmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjayk7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBsYXp5QXNzaWduOiBmdW5jdGlvbiBsYXp5QXNzaWduKGlkLCB2YWx1ZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5hc3NpZ24oaWQsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHN0cmluZ0VzY2FwZVJlZ2V4OiAvW14gYS16QS1aMC05XS9nLFxuXG4gICAgc3RyaW5nRXNjYXBlRm46IGZ1bmN0aW9uIHN0cmluZ0VzY2FwZUZuKGMpIHtcbiAgICAgIHJldHVybiAnXFxcXHUnICsgKCcwMDAwJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgICB9LFxuXG4gICAgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUodmFsdWUpIHtcbiAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHJldHVybiAnXFwnJyArIHZhbHVlLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCwgdGhpcy5zdHJpbmdFc2NhcGVGbikgKyAnXFwnJztcbiAgICAgIGlmIChpc051bWJlcih2YWx1ZSkpIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSByZXR1cm4gJ3RydWUnO1xuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuICdmYWxzZSc7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuICd1bmRlZmluZWQnO1xuXG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2VzYycsICdJTVBPU1NJQkxFJyk7XG4gICAgfSxcblxuICAgIG5leHRJZDogZnVuY3Rpb24gbmV4dElkKHNraXAsIGluaXQpIHtcbiAgICAgIHZhciBpZCA9ICd2JyArIHRoaXMuc3RhdGUubmV4dElkKys7XG4gICAgICBpZiAoIXNraXApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGlkICsgKGluaXQgPyAnPScgKyBpbml0IDogJycpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpZDtcbiAgICB9LFxuXG4gICAgY3VycmVudDogZnVuY3Rpb24gY3VycmVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlW3RoaXMuc3RhdGUuY29tcHV0aW5nXTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQVNUSW50ZXJwcmV0ZXIoJGZpbHRlcikge1xuICAgIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG4gIH1cblxuICBBU1RJbnRlcnByZXRlci5wcm90b3R5cGUgPSB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZShhc3QpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgICAgdmFyIGFzc2lnbmFibGU7XG4gICAgICB2YXIgYXNzaWduO1xuICAgICAgaWYgKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpIHtcbiAgICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgICAgfVxuICAgICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgICAgdmFyIGlucHV0cztcbiAgICAgIGlmICh0b1dhdGNoKSB7XG4gICAgICAgIGlucHV0cyA9IFtdO1xuICAgICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uICh3YXRjaCwga2V5KSB7XG4gICAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgICBpbnB1dC5pc1B1cmUgPSB3YXRjaC5pc1B1cmU7XG4gICAgICAgICAgd2F0Y2guaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgICBpbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgICAgIGV4cHJlc3Npb25zLnB1c2goc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbikpO1xuICAgICAgfSk7XG4gICAgICB2YXIgZm4gPSBhc3QuYm9keS5sZW5ndGggPT09IDAgPyBub29wIDogYXN0LmJvZHkubGVuZ3RoID09PSAxID8gZXhwcmVzc2lvbnNbMF0gOiBmdW5jdGlvbiAoc2NvcGUsIGxvY2Fscykge1xuICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICBmb3JFYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbiAoZXhwKSB7XG4gICAgICAgICAgbGFzdFZhbHVlID0gZXhwKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgIH07XG4gICAgICBpZiAoYXNzaWduKSB7XG4gICAgICAgIGZuLmFzc2lnbiA9IGZ1bmN0aW9uIChzY29wZSwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICAgIHJldHVybiBhc3NpZ24oc2NvcGUsIGxvY2FscywgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGlucHV0cykge1xuICAgICAgICBmbi5pbnB1dHMgPSBpbnB1dHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm47XG4gICAgfSxcblxuICAgIHJlY3Vyc2U6IGZ1bmN0aW9uIHJlY3Vyc2UoYXN0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICAgIHZhciBsZWZ0LFxuICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIGFyZ3M7XG4gICAgICBpZiAoYXN0LmlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0cyhhc3QuaW5wdXQsIGFzdC53YXRjaElkKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICAgICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZShhc3QudmFsdWUsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmFyZ3VtZW50KTtcbiAgICAgICAgICByZXR1cm4gdGhpc1sndW5hcnknICsgYXN0Lm9wZXJhdG9yXShyaWdodCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgQVNULkJpbmFyeUV4cHJlc3Npb246XG4gICAgICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICAgICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbjpcbiAgICAgICAgICByZXR1cm4gdGhpc1sndGVybmFyeT86J10odGhpcy5yZWN1cnNlKGFzdC50ZXN0KSwgdGhpcy5yZWN1cnNlKGFzdC5hbHRlcm5hdGUpLCB0aGlzLnJlY3Vyc2UoYXN0LmNvbnNlcXVlbnQpLCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgICAgICByZXR1cm4gc2VsZi5pZGVudGlmaWVyKGFzdC5uYW1lLCBjb250ZXh0LCBjcmVhdGUpO1xuICAgICAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0Lm9iamVjdCwgZmFsc2UsICEhY3JlYXRlKTtcbiAgICAgICAgICBpZiAoIWFzdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgcmlnaHQgPSBhc3QucHJvcGVydHkubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFzdC5jb21wdXRlZCkgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnByb3BlcnR5KTtcbiAgICAgICAgICByZXR1cm4gYXN0LmNvbXB1dGVkID8gdGhpcy5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlKSA6IHRoaXMubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSk7XG4gICAgICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uIChleHByKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLiRmaWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgICAgICBpZiAoIWFzdC5maWx0ZXIpIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5jYWxsZWUsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBhc3QuZmlsdGVyID8gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gcmlnaHQuYXBwbHkodW5kZWZpbmVkLCB2YWx1ZXMsIGlucHV0cyk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgY29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZSB9IDogdmFsdWU7XG4gICAgICAgICAgfSA6IGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChyaHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YWx1ZSA9IHJocy52YWx1ZS5hcHBseShyaHMuY29udGV4dCwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogdmFsdWUgfSA6IHZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHRydWUsIDEpO1xuICAgICAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICAgIGxocy5jb250ZXh0W2xocy5uYW1lXSA9IHJocztcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogcmhzIH0gOiByaHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24gKGV4cHIpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHZhbHVlLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiB2YWx1ZSB9IDogdmFsdWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKHsga2V5OiBzZWxmLnJlY3Vyc2UocHJvcGVydHkua2V5KSxcbiAgICAgICAgICAgICAgICBjb21wdXRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFyZ3MucHVzaCh7IGtleTogcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID8gcHJvcGVydHkua2V5Lm5hbWUgOiAnJyArIHByb3BlcnR5LmtleS52YWx1ZSxcbiAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVthcmdzW2ldLmtleShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogdmFsdWUgfSA6IHZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogc2NvcGUgfSA6IHNjb3BlO1xuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQVNULkxvY2Fsc0V4cHJlc3Npb246XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGxvY2FscyB9IDogbG9jYWxzO1xuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24pIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXNzaWduIH0gOiBhc3NpZ247XG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgJ3VuYXJ5Kyc6IGZ1bmN0aW9uIHVuYXJ5KGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICAgIGFyZyA9ICthcmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJnID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGFyZyB9IDogYXJnO1xuICAgICAgfTtcbiAgICB9LFxuICAgICd1bmFyeS0nOiBmdW5jdGlvbiB1bmFyeShhcmd1bWVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgYXJnID0gYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgICBhcmcgPSAtYXJnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyZyA9IC0wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ3VuYXJ5ISc6IGZ1bmN0aW9uIHVuYXJ5KGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSAhYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGFyZyB9IDogYXJnO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdiaW5hcnkrJzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIGFyZyA9IHBsdXNGbihsaHMsIHJocyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeS0nOiBmdW5jdGlvbiBiaW5hcnkobGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgYXJnID0gKGlzRGVmaW5lZChsaHMpID8gbGhzIDogMCkgLSAoaXNEZWZpbmVkKHJocykgPyByaHMgOiAwKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiBhcmcgfSA6IGFyZztcbiAgICAgIH07XG4gICAgfSxcbiAgICAnYmluYXJ5Kic6IGZ1bmN0aW9uIGJpbmFyeShsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgKiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeS8nOiBmdW5jdGlvbiBiaW5hcnkobGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIC8gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGFyZyB9IDogYXJnO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdiaW5hcnklJzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAlIHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiBhcmcgfSA6IGFyZztcbiAgICAgIH07XG4gICAgfSxcbiAgICAnYmluYXJ5PT09JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGFyZyB9IDogYXJnO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdiaW5hcnkhPT0nOiBmdW5jdGlvbiBiaW5hcnkobGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICE9PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeT09JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiBhcmcgfSA6IGFyZztcbiAgICAgIH07XG4gICAgfSxcbiAgICAnYmluYXJ5IT0nOiBmdW5jdGlvbiBiaW5hcnkobGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHsgdmFsdWU6IGFyZyB9IDogYXJnO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdiaW5hcnk8JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiBhcmcgfSA6IGFyZztcbiAgICAgIH07XG4gICAgfSxcbiAgICAnYmluYXJ5Pic6IGZ1bmN0aW9uIGJpbmFyeShsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeTw9JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeT49JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA+PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeSYmJzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAmJiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ2JpbmFyeXx8JzogZnVuY3Rpb24gYmluYXJ5KGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB8fCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8geyB2YWx1ZTogYXJnIH0gOiBhcmc7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ3Rlcm5hcnk/Oic6IGZ1bmN0aW9uIHRlcm5hcnkodGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBhcmcgPSB0ZXN0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA/IGFsdGVybmF0ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgOiBjb25zZXF1ZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IHZhbHVlOiBhcmcgfSA6IGFyZztcbiAgICAgIH07XG4gICAgfSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlMiwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7IGNvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogX3ZhbHVlMiB9IDogX3ZhbHVlMjtcbiAgICAgIH07XG4gICAgfSxcbiAgICBpZGVudGlmaWVyOiBmdW5jdGlvbiBpZGVudGlmaWVyKG5hbWUsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgYmFzZSA9IGxvY2FscyAmJiBuYW1lIGluIGxvY2FscyA/IGxvY2FscyA6IHNjb3BlO1xuICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBiYXNlICYmIGJhc2VbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2VbbmFtZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSBiYXNlID8gYmFzZVtuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4geyBjb250ZXh0OiBiYXNlLCBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBjb21wdXRlZE1lbWJlcjogZnVuY3Rpb24gY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByaHM7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgaWYgKGxocyAhPSBudWxsKSB7XG4gICAgICAgICAgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIHJocyA9IGdldFN0cmluZ1ZhbHVlKHJocyk7XG4gICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgIGlmIChsaHMgJiYgIWxoc1tyaHNdKSB7XG4gICAgICAgICAgICAgIGxoc1tyaHNdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbGhzW3Joc107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4geyBjb250ZXh0OiBsaHMsIG5hbWU6IHJocywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uIG5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgIGlmIChsaHMgJiYgbGhzW3JpZ2h0XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBsaHNbcmlnaHRdID0ge307XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZSA9IGxocyAhPSBudWxsID8gbGhzW3JpZ2h0XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4geyBjb250ZXh0OiBsaHMsIG5hbWU6IHJpZ2h0LCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBpbnB1dHM6IGZ1bmN0aW9uIGlucHV0cyhpbnB1dCwgd2F0Y2hJZCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgdmFsdWUsIGxvY2FscywgaW5wdXRzKSB7XG4gICAgICAgIGlmIChpbnB1dHMpIHJldHVybiBpbnB1dHNbd2F0Y2hJZF07XG4gICAgICAgIHJldHVybiBpbnB1dChzY29wZSwgdmFsdWUsIGxvY2Fscyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFzdCA9IG5ldyBBU1QobGV4ZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuYXN0Q29tcGlsZXIgPSBvcHRpb25zLmNzcCA/IG5ldyBBU1RJbnRlcnByZXRlcigkZmlsdGVyKSA6IG5ldyBBU1RDb21waWxlcigkZmlsdGVyKTtcbiAgfVxuXG4gIFBhcnNlci5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSh0ZXh0KSB7XG4gICAgICB2YXIgYXN0ID0gdGhpcy5hc3QuYXN0KHRleHQpO1xuICAgICAgdmFyIGZuID0gdGhpcy5hc3RDb21waWxlci5jb21waWxlKGFzdCk7XG4gICAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgICBmbi5jb25zdGFudCA9IGlzQ29uc3RhbnQoYXN0KTtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVPZih2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpID8gdmFsdWUudmFsdWVPZigpIDogb2JqZWN0VmFsdWVPZi5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRwYXJzZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7XG4gICAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247XG4gICAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTtcbiAgICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319O1xuICAgKlxuICAgKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTtcbiAgICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7XG4gICAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpO1xuICAgKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTtcbiAgICogYGBgXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAqXG4gICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICogICAgICBgY29udGV4dGAuXG4gICAqXG4gICAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0XG4gICAqICAgICAgICBsaXRlcmFsLlxuICAgKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XG4gICAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy5cbiAgICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlXG4gICAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LlxuICAgKlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIHByb3ZpZGVyXG4gICAqIEBuYW1lICRwYXJzZVByb3ZpZGVyXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9XG4gICAqICBzZXJ2aWNlLlxuICAgKi9cbiAgZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7XG4gICAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7XG4gICAgdmFyIGxpdGVyYWxzID0ge1xuICAgICAgJ3RydWUnOiB0cnVlLFxuICAgICAgJ2ZhbHNlJzogZmFsc2UsXG4gICAgICAnbnVsbCc6IG51bGwsXG4gICAgICAndW5kZWZpbmVkJzogdW5kZWZpbmVkXG4gICAgfTtcbiAgICB2YXIgaWRlbnRTdGFydCwgaWRlbnRDb250aW51ZTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkcGFyc2VQcm92aWRlciNhZGRMaXRlcmFsXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb25maWd1cmUgJHBhcnNlIHNlcnZpY2UgdG8gYWRkIGxpdGVyYWwgdmFsdWVzIHRoYXQgd2lsbCBiZSBwcmVzZW50IGFzIGxpdGVyYWwgYXQgZXhwcmVzc2lvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbE5hbWUgVG9rZW4gZm9yIHRoZSBsaXRlcmFsIHZhbHVlLiBUaGUgbGl0ZXJhbCBuYW1lIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBsaXRlcmFsIG5hbWUuXG4gICAgICogQHBhcmFtIHsqfSBsaXRlcmFsVmFsdWUgVmFsdWUgZm9yIHRoaXMgbGl0ZXJhbC4gQWxsIGxpdGVyYWwgdmFsdWVzIG11c3QgYmUgcHJpbWl0aXZlcyBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqKi9cbiAgICB0aGlzLmFkZExpdGVyYWwgPSBmdW5jdGlvbiAobGl0ZXJhbE5hbWUsIGxpdGVyYWxWYWx1ZSkge1xuICAgICAgbGl0ZXJhbHNbbGl0ZXJhbE5hbWVdID0gbGl0ZXJhbFZhbHVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHBhcnNlUHJvdmlkZXIjc2V0SWRlbnRpZmllckZuc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBbGxvd3MgZGVmaW5pbmcgdGhlIHNldCBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIGFsbG93ZWQgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gVGhlIGZ1bmN0aW9uXG4gICAgICogYGlkZW50aWZpZXJTdGFydGAgd2lsbCBnZXQgY2FsbGVkIHRvIGtub3cgaWYgYSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgdG8gYmUgdGhlXG4gICAgICogZmlyc3QgY2hhcmFjdGVyIGZvciBhbiBpZGVudGlmaWVyLiBUaGUgZnVuY3Rpb24gYGlkZW50aWZpZXJDb250aW51ZWAgd2lsbCBnZXQgY2FsbGVkIHRvIGtub3cgaWZcbiAgICAgKiBhIGdpdmVuIGNoYXJhY3RlciBpcyBhIHZhbGlkIGNoYXJhY3RlciB0byBiZSBhIGZvbGxvdy11cCBpZGVudGlmaWVyIGNoYXJhY3Rlci4gVGhlIGZ1bmN0aW9uc1xuICAgICAqIGBpZGVudGlmaWVyU3RhcnRgIGFuZCBgaWRlbnRpZmllckNvbnRpbnVlYCB3aWxsIHJlY2VpdmUgYXMgYXJndW1lbnRzIHRoZSBzaW5nbGUgY2hhcmFjdGVyIHRvIGJlXG4gICAgICogaWRlbnRpZmllciBhbmQgdGhlIGNoYXJhY3RlciBjb2RlIHBvaW50LiBUaGVzZSBhcmd1bWVudHMgd2lsbCBiZSBgc3RyaW5nYCBhbmQgYG51bWVyaWNgLiBLZWVwIGluXG4gICAgICogbWluZCB0aGF0IHRoZSBgc3RyaW5nYCBwYXJhbWV0ZXIgY2FuIGJlIHR3byBjaGFyYWN0ZXJzIGxvbmcgZGVwZW5kaW5nIG9uIHRoZSBjaGFyYWN0ZXJcbiAgICAgKiByZXByZXNlbnRhdGlvbi4gSXQgaXMgZXhwZWN0ZWQgZm9yIHRoZSBmdW5jdGlvbiB0byByZXR1cm4gYHRydWVgIG9yIGBmYWxzZWAsIHdoZXRoZXIgdGhhdFxuICAgICAqIGNoYXJhY3RlciBpcyBhbGxvd2VkIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIFNpbmNlIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZXh0ZW5zaXZlbHksIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZXNlIGZ1bmN0aW9ucyBmYXN0LFxuICAgICAqIGFzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGVzZSBmdW5jdGlvbnMgaGF2ZSBhIGRpcmVjdCBpbXBhY3Qgb24gdGhlIGV4cHJlc3Npb25zIHBhcnNpbmcgc3BlZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gaWRlbnRpZmllclN0YXJ0IFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVjaWRlIHdoZXRoZXIgdGhlIGdpdmVuIGNoYXJhY3RlciBpc1xuICAgICAqICAgYSB2YWxpZCBpZGVudGlmaWVyIHN0YXJ0IGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gaWRlbnRpZmllckNvbnRpbnVlIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVjaWRlIHdoZXRoZXIgdGhlIGdpdmVuIGNoYXJhY3RlciBpc1xuICAgICAqICAgYSB2YWxpZCBpZGVudGlmaWVyIGNvbnRpbnVlIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICB0aGlzLnNldElkZW50aWZpZXJGbnMgPSBmdW5jdGlvbiAoaWRlbnRpZmllclN0YXJ0LCBpZGVudGlmaWVyQ29udGludWUpIHtcbiAgICAgIGlkZW50U3RhcnQgPSBpZGVudGlmaWVyU3RhcnQ7XG4gICAgICBpZGVudENvbnRpbnVlID0gaWRlbnRpZmllckNvbnRpbnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsIGZ1bmN0aW9uICgkZmlsdGVyKSB7XG4gICAgICB2YXIgbm9VbnNhZmVFdmFsID0gY3NwKCkubm9VbnNhZmVFdmFsO1xuICAgICAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgICAgIGNzcDogbm9VbnNhZmVFdmFsLFxuICAgICAgICBsaXRlcmFsczogY29weShsaXRlcmFscyksXG4gICAgICAgIGlzSWRlbnRpZmllclN0YXJ0OiBpc0Z1bmN0aW9uKGlkZW50U3RhcnQpICYmIGlkZW50U3RhcnQsXG4gICAgICAgIGlzSWRlbnRpZmllckNvbnRpbnVlOiBpc0Z1bmN0aW9uKGlkZW50Q29udGludWUpICYmIGlkZW50Q29udGludWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gJHBhcnNlO1xuXG4gICAgICBmdW5jdGlvbiAkcGFyc2UoZXhwLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICAgIHZhciBwYXJzZWRFeHByZXNzaW9uLCBvbmVUaW1lLCBjYWNoZUtleTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBleHAgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGV4cCkpIHtcbiAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgZXhwID0gZXhwLnRyaW0oKTtcbiAgICAgICAgICAgIGNhY2hlS2V5ID0gZXhwO1xuXG4gICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICAgICAgICBpZiAoIXBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgaWYgKGV4cC5jaGFyQXQoMCkgPT09ICc6JyAmJiBleHAuY2hhckF0KDEpID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBvbmVUaW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBleHAgPSBleHAuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcigkcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsICRwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgICAgICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmNvbnN0YW50KSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob25lVGltZSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsID8gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihleHAsIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihub29wLCBpbnRlcmNlcHRvckZuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld1ZhbHVlLCBvbGRWYWx1ZU9mVmFsdWUsIGNvbXBhcmVPYmplY3RJZGVudGl0eSkge1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG9sZFZhbHVlT2ZWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gbnVsbC91bmRlZmluZWRcbiAgICAgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgodHlwZW9mIG5ld1ZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuZXdWYWx1ZSkpID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlXG4gICAgICAgICAgLy8gVE9ETyhkb2NzKTogYWRkIGEgbm90ZSB0byBkb2NzIHRoYXQgYnkgaW1wbGVtZW50aW5nIHZhbHVlT2YgZXZlbiBvYmplY3RzIGFuZCBhcnJheXMgY2FuXG4gICAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkXG4gICAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZU9mKG5ld1ZhbHVlKTtcblxuICAgICAgICAgIGlmICgodHlwZW9mIG5ld1ZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuZXdWYWx1ZSkpID09PSAnb2JqZWN0JyAmJiAhY29tcGFyZU9iamVjdElkZW50aXR5KSB7XG4gICAgICAgICAgICAvLyBvYmplY3RzL2FycmF5cyBhcmUgbm90IHN1cHBvcnRlZCAtIGRlZXAtd2F0Y2hpbmcgdGhlbSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gZmFsbC10aHJvdWdoIHRvIHRoZSBwcmltaXRpdmUgZXF1YWxpdHkgY2hlY2tcbiAgICAgICAgfVxuXG4gICAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlIHx8IG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIGlucHV0RXhwcmVzc2lvbnMgPSBwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgICAgdmFyIGxhc3RSZXN1bHQ7XG5cbiAgICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIG9sZElucHV0VmFsdWVPZiA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICAgIGlucHV0RXhwcmVzc2lvbnMgPSBpbnB1dEV4cHJlc3Npb25zWzBdO1xuICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9ucyhzY29wZSk7XG4gICAgICAgICAgICBpZiAoIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mLCBpbnB1dEV4cHJlc3Npb25zLmlzUHVyZSkpIHtcbiAgICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBbbmV3SW5wdXRWYWx1ZV0pO1xuICAgICAgICAgICAgICBvbGRJbnB1dFZhbHVlT2YgPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzID0gW107XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgICBvbGRJbnB1dFZhbHVlc1tpXSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dHNXYXRjaChzY29wZSkge1xuICAgICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7XG4gICAgICAgICAgICBpZiAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9ICFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSwgaW5wdXRFeHByZXNzaW9uc1tpXS5pc1B1cmUpKSkge1xuICAgICAgICAgICAgICBvbGRJbnB1dFZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWU7XG4gICAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRJbnB1dFZhbHVlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmlucHV0cykge1xuICAgICAgICAgIHVud2F0Y2ggPSBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2gob25lVGltZVdhdGNoLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW53YXRjaDtcblxuICAgICAgICBmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgICB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0FsbERlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKGxhc3RWYWx1ZSkpIHVud2F0Y2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuXG4gICAgICAgIHJldHVybiB1bndhdGNoO1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICAgIHZhciBhbGxEZWZpbmVkID0gdHJ1ZTtcbiAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoIWlzRGVmaW5lZCh2YWwpKSBhbGxEZWZpbmVkID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFsbERlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29uc3RhbnRXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gY29uc3RhbnRXYXRjaChzY29wZSkge1xuICAgICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7XG4gICAgICAgIHJldHVybiB1bndhdGNoO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgIHZhciB3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7XG4gICAgICAgIHZhciB1c2VJbnB1dHMgPSBmYWxzZTtcblxuICAgICAgICB2YXIgcmVndWxhcldhdGNoID0gd2F0Y2hEZWxlZ2F0ZSAhPT0gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlICYmIHdhdGNoRGVsZWdhdGUgIT09IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuXG4gICAgICAgIHZhciBmbiA9IHJlZ3VsYXJXYXRjaCA/IGZ1bmN0aW9uIHJlZ3VsYXJJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB1c2VJbnB1dHMgJiYgaW5wdXRzID8gaW5wdXRzWzBdIDogcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgcmV0dXJuIGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9IDogZnVuY3Rpb24gb25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAvLyB3ZSBvbmx5IHJldHVybiB0aGUgaW50ZXJjZXB0b3IncyByZXN1bHQgaWYgdGhlXG4gICAgICAgICAgLy8gaW5pdGlhbCB2YWx1ZSBpcyBkZWZpbmVkIChmb3IgYmluZC1vbmNlKVxuICAgICAgICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gcmVzdWx0IDogdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHJvcGFnYXRlICQkd2F0Y2hEZWxlZ2F0ZXMgb3RoZXIgdGhlbiBpbnB1dHNXYXRjaERlbGVnYXRlXG4gICAgICAgIHVzZUlucHV0cyA9ICFwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgICAgaWYgKHdhdGNoRGVsZWdhdGUgJiYgd2F0Y2hEZWxlZ2F0ZSAhPT0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICAgIH0gZWxzZSBpZiAoIWludGVyY2VwdG9yRm4uJHN0YXRlZnVsKSB7XG4gICAgICAgICAgLy8gVHJlYXQgaW50ZXJjZXB0b3IgbGlrZSBmaWx0ZXJzIC0gYXNzdW1lIG5vbi1zdGF0ZWZ1bCBieSBkZWZhdWx0IGFuZCB1c2UgdGhlIGlucHV0c1dhdGNoRGVsZWdhdGVcbiAgICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlO1xuICAgICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzID8gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgOiBbcGFyc2VkRXhwcmVzc2lvbl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm4uaW5wdXRzKSB7XG4gICAgICAgICAgZm4uaW5wdXRzID0gZm4uaW5wdXRzLm1hcChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpc1B1cmUgZmxhZyBvZiBpbnB1dHMgd2hlbiBpdCBpcyBub3QgYWJzb2x1dGUgYmVjYXVzZSB0aGV5IGFyZSBub3cgd3JhcHBlZCBpbiBhXG4gICAgICAgICAgICAvLyBwb3RlbnRpYWxseSBub24tcHVyZSBpbnRlcmNlcHRvciBmdW5jdGlvbi5cbiAgICAgICAgICAgIGlmIChlLmlzUHVyZSA9PT0gUFVSSVRZX1JFTEFUSVZFKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXB1cmlmaWVyKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZShzKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRxXG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBIHNlcnZpY2UgdGhhdCBoZWxwcyB5b3UgcnVuIGZ1bmN0aW9ucyBhc3luY2hyb25vdXNseSwgYW5kIHVzZSB0aGVpciByZXR1cm4gdmFsdWVzIChvciBleGNlcHRpb25zKVxuICAgKiB3aGVuIHRoZXkgYXJlIGRvbmUgcHJvY2Vzc2luZy5cbiAgICpcbiAgICogVGhpcyBpcyBhIFtQcm9taXNlcy9BK10oaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8pLWNvbXBsaWFudCBpbXBsZW1lbnRhdGlvbiBvZiBwcm9taXNlcy9kZWZlcnJlZFxuICAgKiBvYmplY3RzIGluc3BpcmVkIGJ5IFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS5cbiAgICpcbiAgICogJHEgY2FuIGJlIHVzZWQgaW4gdHdvIGZhc2hpb25zIC0tLSBvbmUgd2hpY2ggaXMgbW9yZSBzaW1pbGFyIHRvIEtyaXMgS293YWwncyBRIG9yIGpRdWVyeSdzIERlZmVycmVkXG4gICAqIGltcGxlbWVudGF0aW9ucywgYW5kIHRoZSBvdGhlciB3aGljaCByZXNlbWJsZXMgRVM2IChFUzIwMTUpIHByb21pc2VzIHRvIHNvbWUgZGVncmVlLlxuICAgKlxuICAgKiAjICRxIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIFRoZSBzdHJlYW1saW5lZCBFUzYgc3R5bGUgcHJvbWlzZSBpcyBlc3NlbnRpYWxseSBqdXN0IHVzaW5nICRxIGFzIGEgY29uc3RydWN0b3Igd2hpY2ggdGFrZXMgYSBgcmVzb2x2ZXJgXG4gICAqIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBmcm9tIEVTNixcbiAgICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLlxuICAgKlxuICAgKiBXaGlsZSB0aGUgY29uc3RydWN0b3Itc3R5bGUgdXNlIGlzIHN1cHBvcnRlZCwgbm90IGFsbCBvZiB0aGUgc3VwcG9ydGluZyBtZXRob2RzIGZyb20gRVM2IHByb21pc2VzIGFyZVxuICAgKiBhdmFpbGFibGUgeWV0LlxuICAgKlxuICAgKiBJdCBjYW4gYmUgdXNlZCBsaWtlIHNvOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gICAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICAgKlxuICAgKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICAgKiAgICAgLy8gcGVyZm9ybSBzb21lIGFzeW5jaHJvbm91cyBvcGVyYXRpb24sIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBwcm9taXNlIHdoZW4gYXBwcm9wcmlhdGUuXG4gICAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAqICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICAgKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAgICogICAgICAgICB9IGVsc2Uge1xuICAgKiAgICAgICAgICAgcmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9LCAxMDAwKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH1cbiAgICpcbiAgICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAgICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBOb3RlOiBwcm9ncmVzcy9ub3RpZnkgY2FsbGJhY2tzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCB2aWEgdGhlIEVTNi1zdHlsZSBpbnRlcmZhY2UuXG4gICAqXG4gICAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3IsIGFuIGV4Y2VwdGlvbiB0aHJvd24gaW4gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpbGwgTk9UIGltcGxpY2l0bHkgcmVqZWN0IHRoZSBwcm9taXNlLlxuICAgKlxuICAgKiBIb3dldmVyLCB0aGUgbW9yZSB0cmFkaXRpb25hbCBDb21tb25KUy1zdHlsZSB1c2FnZSBpcyBzdGlsbCBhdmFpbGFibGUsIGFuZCBkb2N1bWVudGVkIGJlbG93LlxuICAgKlxuICAgKiBbVGhlIENvbW1vbkpTIFByb21pc2UgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1Byb21pc2VzKSBkZXNjcmliZXMgYSBwcm9taXNlIGFzIGFuXG4gICAqIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYWN0aW9uIHRoYXQgaXNcbiAgICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuXG4gICAqXG4gICAqIEZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIGRlYWxpbmcgd2l0aCBlcnJvciBoYW5kbGluZywgZGVmZXJyZWQgYW5kIHByb21pc2UgQVBJcyBhcmUgdG9cbiAgICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gICAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICAgKlxuICAgKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICAgKiAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICpcbiAgICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIGRlZmVycmVkLm5vdGlmeSgnQWJvdXQgdG8gZ3JlZXQgJyArIG5hbWUgKyAnLicpO1xuICAgKlxuICAgKiAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gICAqICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAgICogICAgICAgfSBlbHNlIHtcbiAgICogICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfSwgMTAwMCk7XG4gICAqXG4gICAqICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICogICB9XG4gICAqXG4gICAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gICAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICAgKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xuICAgKiAgICAgYWxlcnQoJ0dvdCBub3RpZmljYXRpb246ICcgKyB1cGRhdGUpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZlxuICAgKiBjb21lcyBpbiB0aGUgd2F5IG9mIGd1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBBUElzIG1ha2UsIHNlZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZC5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlXG4gICAqIHRyYWRpdGlvbmFsIGNhbGxiYWNrIChbQ1BTXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbnRpbnVhdGlvbi1wYXNzaW5nX3N0eWxlKSkgYXBwcm9hY2guXG4gICAqIEZvciBtb3JlIG9uIHRoaXMgcGxlYXNlIHNlZSB0aGUgW1EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKSBlc3BlY2lhbGx5IHRoZVxuICAgKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLlxuICAgKlxuICAgKiAjIFRoZSBEZWZlcnJlZCBBUElcbiAgICpcbiAgICogQSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQgaXMgY29uc3RydWN0ZWQgYnkgY2FsbGluZyBgJHEuZGVmZXIoKWAuXG4gICAqXG4gICAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBBUElzXG4gICAqIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNpZ25hbGluZyB0aGUgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWwgY29tcGxldGlvbiwgYXMgd2VsbCBhcyB0aGUgc3RhdHVzXG4gICAqIG9mIHRoZSB0YXNrLlxuICAgKlxuICAgKiAqKk1ldGhvZHMqKlxuICAgKlxuICAgKiAtIGByZXNvbHZlKHZhbHVlKWAg4oCTIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXG4gICAqICAgY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGluc3RlYWQuXG4gICAqIC0gYHJlamVjdChyZWFzb24pYCDigJMgcmVqZWN0cyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGByZWFzb25gLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICogICByZXNvbHZpbmcgaXQgd2l0aCBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAuXG4gICAqIC0gYG5vdGlmeSh2YWx1ZSlgIC0gcHJvdmlkZXMgdXBkYXRlcyBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwcm9taXNlJ3MgZXhlY3V0aW9uLiBUaGlzIG1heSBiZSBjYWxsZWRcbiAgICogICBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgdGhlIHByb21pc2UgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgKlxuICAgKiAqKlByb3BlcnRpZXMqKlxuICAgKlxuICAgKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC5cbiAgICpcbiAgICpcbiAgICogIyBUaGUgUHJvbWlzZSBBUElcbiAgICpcbiAgICogQSBuZXcgcHJvbWlzZSBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoZW4gYSBkZWZlcnJlZCBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBjYW4gYmUgcmV0cmlldmVkIGJ5XG4gICAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLlxuICAgKlxuICAgKiBUaGUgcHVycG9zZSBvZiB0aGUgcHJvbWlzZSBvYmplY3QgaXMgdG8gYWxsb3cgZm9yIGludGVyZXN0ZWQgcGFydGllcyB0byBnZXQgYWNjZXNzIHRvIHRoZSByZXN1bHRcbiAgICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuXG4gICAqXG4gICAqICoqTWV0aG9kcyoqXG4gICAqXG4gICAqIC0gYHRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBbZXJyb3JDYWxsYmFja10sIFtub3RpZnlDYWxsYmFja10pYCDigJMgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvclxuICAgKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XG4gICAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAgICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG9cbiAgICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgKlxuICAgKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZVxuICAgKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AgKHVubGVzcyB0aGF0IHZhbHVlIGlzIGEgcHJvbWlzZSwgaW4gd2hpY2ggY2FzZSBpdCBpcyByZXNvbHZlZFxuICAgKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICAgKiAgIFtwcm9taXNlIGNoYWluaW5nXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9lczYvcHJvbWlzZXMvI3RvYy1wcm9taXNlcy1xdWV1ZXMpKS5cbiAgICogICBJdCBhbHNvIG5vdGlmaWVzIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgbm90aWZ5Q2FsbGJhY2tgIG1ldGhvZC4gVGhlIHByb21pc2UgY2Fubm90IGJlXG4gICAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLiBUaGUgZXJyb3JDYWxsYmFjayBhbmQgbm90aWZ5Q2FsbGJhY2tcbiAgICogICBhcmd1bWVudHMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAgICpcbiAgICogLSBgZmluYWxseShjYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgYWxsb3dzIHlvdSB0byBvYnNlcnZlIGVpdGhlciB0aGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIG9mIGEgcHJvbWlzZSxcbiAgICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gICAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXG4gICAqICAgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL3dpa2kvQVBJLVJlZmVyZW5jZSNwcm9taXNlZmluYWxseWNhbGxiYWNrKSBmb3JcbiAgICogICBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiAjIENoYWluaW5nIHByb21pc2VzXG4gICAqXG4gICAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseVxuICAgKiBwb3NzaWJsZSB0byBjcmVhdGUgYSBjaGFpbiBvZiBwcm9taXNlczpcbiAgICpcbiAgICogYGBganNcbiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAgICogICB9KTtcbiAgICpcbiAgICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAgICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMVxuICAgKiBgYGBcbiAgICpcbiAgICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlclxuICAgKiBwcm9taXNlICh3aGljaCB3aWxsIGRlZmVyIGl0cyByZXNvbHV0aW9uIGZ1cnRoZXIpLCBpdCBpcyBwb3NzaWJsZSB0byBwYXVzZS9kZWZlciByZXNvbHV0aW9uIG9mXG4gICAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAgICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuXG4gICAqXG4gICAqXG4gICAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHFcbiAgICpcbiAgICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAgICpcbiAgICogLSAkcSBpcyBpbnRlZ3JhdGVkIHdpdGggdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlfSBTY29wZSBtb2RlbCBvYnNlcnZhdGlvblxuICAgKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gICAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cbiAgICogLSBRIGhhcyBtYW55IG1vcmUgZmVhdHVyZXMgdGhhbiAkcSwgYnV0IHRoYXQgY29tZXMgYXQgYSBjb3N0IG9mIGJ5dGVzLiAkcSBpcyB0aW55LCBidXQgY29udGFpbnNcbiAgICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICAgKlxuICAgKiAjIFRlc3RpbmdcbiAgICpcbiAgICogIGBgYGpzXG4gICAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkge1xuICAgKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAqICAgICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuICAgKiAgICAgIHZhciByZXNvbHZlZFZhbHVlO1xuICAgKlxuICAgKiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkgeyByZXNvbHZlZFZhbHVlID0gdmFsdWU7IH0pO1xuICAgKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAqXG4gICAqICAgICAgLy8gU2ltdWxhdGUgcmVzb2x2aW5nIG9mIHByb21pc2VcbiAgICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7XG4gICAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICAgKiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSB3YW50IHRoZSBwcm9taXNlIEFQSSB0byBhbHdheXMgYmUgYXN5bmMsIHdoZXRoZXIgb3Igbm90XG4gICAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICAgKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAqXG4gICAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLlxuICAgKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvRXF1YWwoMTIzKTtcbiAgICogICAgfSkpO1xuICAgKiAgYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIGZ1bmN0aW9uKX0gcmVzb2x2ZXIgRnVuY3Rpb24gd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHJlc29sdmluZyBvclxuICAgKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gICAqICAgcHJvbWlzZSwgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgYSBmdW5jdGlvbiB3aGljaCByZWplY3RzIHRoZSBwcm9taXNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAgICovXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvdmlkZXJcbiAgICogQG5hbWUgJHFQcm92aWRlclxuICAgKiBAdGhpc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICovXG4gIGZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG4gICAgdmFyIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcbiAgICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgIH0sICRleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyk7XG4gICAgfV07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHFQcm92aWRlciNlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9uc1xuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhIHJlamVjdGVkIHByb21pc2UgaXMgbm90IGhhbmRsZWQuXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIFdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhIHJlamVjdGVkIHByb21pc2UgaXMgbm90IGhhbmRsZWQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bmcuJHFQcm92aWRlcn0gQ3VycmVudCB2YWx1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IGEgbmV3IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHRoaXMuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKiogQHRoaXMgKi9cbiAgZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gICAgdmFyIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcbiAgICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24gKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkYnJvd3Nlci5kZWZlcihjYWxsYmFjayk7XG4gICAgICB9LCAkZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpO1xuICAgIH1dO1xuXG4gICAgdGhpcy5lcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnM7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBtYW5hZ2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbiguLi4qKX0gZXhjZXB0aW9uSGFuZGxlciBGdW5jdGlvbiBpbnRvIHdoaWNoIHVuZXhwZWN0ZWQgZXhjZXB0aW9ucyBhcmUgcGFzc2VkIGZvclxuICAgKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyBXaGV0aGVyIGFuIGVycm9yIHNob3VsZCBiZSBnZW5lcmF0ZWQgb24gdW5oYW5kbGVkXG4gICAqICAgICBwcm9taXNlcyByZWplY3Rpb25zLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gICAqL1xuICBmdW5jdGlvbiBxRmFjdG9yeShuZXh0VGljaywgZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpIHtcbiAgICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgICB2YXIgcXVldWVTaXplID0gMDtcbiAgICB2YXIgY2hlY2tRdWV1ZSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nLiRxI2RlZmVyXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmVyKCkge1xuICAgICAgcmV0dXJuIG5ldyBEZWZlcnJlZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgpO1xuICAgICAgLy9Ob24gcHJvdG90eXBlIG1ldGhvZHMgbmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICAgIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pO1xuICAgICAgfTtcbiAgICAgIHRoaXMubm90aWZ5ID0gZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgIG5vdGlmeVByb21pc2UocHJvbWlzZSwgcHJvZ3Jlc3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBQcm9taXNlKCkge1xuICAgICAgdGhpcy4kJHN0YXRlID0geyBzdGF0dXM6IDAgfTtcbiAgICB9XG5cbiAgICBleHRlbmQoUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQob25GdWxmaWxsZWQpICYmIGlzVW5kZWZpbmVkKG9uUmVqZWN0ZWQpICYmIGlzVW5kZWZpbmVkKHByb2dyZXNzQmFjaykpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcblxuICAgICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdO1xuICAgICAgICB0aGlzLiQkc3RhdGUucGVuZGluZy5wdXNoKFtyZXN1bHQsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2tdKTtcbiAgICAgICAgaWYgKHRoaXMuJCRzdGF0ZS5zdGF0dXMgPiAwKSBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLiQkc3RhdGUpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbiBfY2F0Y2goY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICAnZmluYWxseSc6IGZ1bmN0aW9uIF9maW5hbGx5KGNhbGxiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHJlc29sdmUsIGNhbGxiYWNrKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCByZWplY3QsIGNhbGxiYWNrKTtcbiAgICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgICAgdmFyIGZuLCBwcm9taXNlLCBwZW5kaW5nO1xuXG4gICAgICBwZW5kaW5nID0gc3RhdGUucGVuZGluZztcbiAgICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBtYXJrUVN0YXRlRXhjZXB0aW9uSGFuZGxlZChzdGF0ZSk7XG4gICAgICAgICAgcHJvbWlzZSA9IHBlbmRpbmdbaV1bMF07XG4gICAgICAgICAgZm4gPSBwZW5kaW5nW2ldW3N0YXRlLnN0YXR1c107XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0dXMgPT09IDEpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIC0tcXVldWVTaXplO1xuICAgICAgICBpZiAoZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgJiYgcXVldWVTaXplID09PSAwKSB7XG4gICAgICAgICAgbmV4dFRpY2socHJvY2Vzc0NoZWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQ2hlY2tzKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb25cbiAgICAgIHdoaWxlICghcXVldWVTaXplICYmIGNoZWNrUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0b0NoZWNrID0gY2hlY2tRdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHRvQ2hlY2spKSB7XG4gICAgICAgICAgbWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQodG9DaGVjayk7XG4gICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdQb3NzaWJseSB1bmhhbmRsZWQgcmVqZWN0aW9uOiAnICsgdG9EZWJ1Z1N0cmluZyh0b0NoZWNrLnZhbHVlKTtcbiAgICAgICAgICBpZiAoaXNFcnJvcih0b0NoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcih0b0NoZWNrLnZhbHVlLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVQcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICAgIGlmIChlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyAmJiAhc3RhdGUucGVuZGluZyAmJiBzdGF0ZS5zdGF0dXMgPT09IDIgJiYgIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHN0YXRlKSkge1xuICAgICAgICBpZiAocXVldWVTaXplID09PSAwICYmIGNoZWNrUXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgbmV4dFRpY2socHJvY2Vzc0NoZWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tRdWV1ZS5wdXNoKHN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgICBzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICsrcXVldWVTaXplO1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBwcm9jZXNzUXVldWUoc3RhdGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKSB7XG4gICAgICBpZiAocHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuO1xuICAgICAgaWYgKHZhbCA9PT0gcHJvbWlzZSkge1xuICAgICAgICAkJHJlamVjdChwcm9taXNlLCAkcU1pbkVycigncWN5Y2xlJywgJ0V4cGVjdGVkIHByb21pc2UgdG8gYmUgcmVzb2x2ZWQgd2l0aCB2YWx1ZSBvdGhlciB0aGFuIGl0c2VsZiBcXCd7MH1cXCcnLCB2YWwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpIHtcbiAgICAgIHZhciB0aGVuO1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGVuKSkge1xuICAgICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBkb1Jlc29sdmUsIGRvUmVqZWN0LCBkb05vdGlmeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxO1xuICAgICAgICAgIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHByb21pc2UuJCRzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZG9SZWplY3QoZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRvUmVzb2x2ZSh2YWwpIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZG9SZWplY3QodmFsKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAkJHJlamVjdChwcm9taXNlLCB2YWwpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZG9Ob3RpZnkocHJvZ3Jlc3MpIHtcbiAgICAgICAgbm90aWZ5UHJvbWlzZShwcm9taXNlLCBwcm9ncmVzcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pIHtcbiAgICAgIGlmIChwcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgICAkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgICAgcHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gcmVhc29uO1xuICAgICAgcHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDI7XG4gICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vdGlmeVByb21pc2UocHJvbWlzZSwgcHJvZ3Jlc3MpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSBwcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgICAgaWYgKHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCAmJiBjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrLCByZXN1bHQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldWzNdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbm90aWZ5UHJvbWlzZShyZXN1bHQsIGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRxI3JlamVjdFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIHNwZWNpZmllZCBgcmVhc29uYC4gVGhpcyBhcGkgc2hvdWxkIGJlXG4gICAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAgICogYSBwcm9taXNlIGNoYWluLCB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC5cbiAgICAgKlxuICAgICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgICAqIGByZWplY3RgIGFzIHRoZSBgdGhyb3dgIGtleXdvcmQgaW4gSmF2YVNjcmlwdC4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgaWYgeW91IFwiY2F0Y2hcIiBhbiBlcnJvciB2aWFcbiAgICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGVcbiAgICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAgICogYHJlamVjdGAuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAqICAgICAvLyBzdWNjZXNzOiBkbyBzb21ldGhpbmcgYW5kIHJlc29sdmUgcHJvbWlzZUJcbiAgICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgICAqICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgICAqICAgICAvLyAgICAgICAgcmVzb2x2ZSBwcm9taXNlQiB3aXRoIG5ld1Byb21pc2VPclZhbHVlLFxuICAgICAqICAgICAvLyAgICAgICAgb3RoZXJ3aXNlIGZvcndhcmQgdGhlIHJlamVjdGlvbiB0byBwcm9taXNlQlxuICAgICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICAgKiAgICAgIC8vIGhhbmRsZSB0aGUgZXJyb3IgYW5kIHJlY292ZXJcbiAgICAgKiAgICAgIHJldHVybiBuZXdQcm9taXNlT3JWYWx1ZTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgICByZXR1cm4gJHEucmVqZWN0KHJlYXNvbik7XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gcmVhc29uIENvbnN0YW50LCBtZXNzYWdlLCBleGNlcHRpb24gb3IgYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVqZWN0aW9uIHJlYXNvbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcbiAgICAgIHJlamVjdFByb21pc2UocmVzdWx0LCByZWFzb24pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgcmVzb2x2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSBjYWxsYmFja091dHB1dCA9IGNhbGxiYWNrKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja091dHB1dCkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlcih2YWx1ZSk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZXIodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkcSN3aGVuXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmXG4gICAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBwcm9ncmVzc0NhbGxiYWNrXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gd2hlbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCk7XG4gICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIHZhbHVlKTtcbiAgICAgIHJldHVybiByZXN1bHQudGhlbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHEjcmVzb2x2ZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBbGlhcyBvZiB7QGxpbmsgbmcuJHEjd2hlbiB3aGVufSB0byBtYWludGFpbiBuYW1pbmcgY29uc2lzdGVuY3kgd2l0aCBFUzYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBwcm9ncmVzc0NhbGxiYWNrXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgICAqL1xuICAgIHZhciByZXNvbHZlID0gd2hlbjtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkcSNhbGxcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0XG4gICAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgICAqICAgZWFjaCB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9taXNlIGF0IHRoZSBzYW1lIGluZGV4L2tleSBpbiB0aGUgYHByb21pc2VzYCBhcnJheS9oYXNoLlxuICAgICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAgICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKSxcbiAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9O1xuXG4gICAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZSwga2V5KSB7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgd2hlbihwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIGlmICghIC0tY291bnRlcikgcmVzb2x2ZVByb21pc2UocmVzdWx0LCByZXN1bHRzKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIHJlamVjdFByb21pc2UocmVzdWx0LCByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY291bnRlciA9PT0gMCkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIHJlc3VsdHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkcSNyYWNlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cyBhcyBzb29uIGFzIG9uZSBvZiB0aG9zZSBwcm9taXNlc1xuICAgICAqIHJlc29sdmVzIG9yIHJlamVjdHMsIHdpdGggdGhlIHZhbHVlIG9yIHJlYXNvbiBmcm9tIHRoYXQgcHJvbWlzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9yIHJlamVjdHMgYXMgc29vbiBhcyBvbmUgb2YgdGhlIGBwcm9taXNlc2BcbiAgICAgKiByZXNvbHZlcyBvciByZWplY3RzLCB3aXRoIHRoZSB2YWx1ZSBvciByZWFzb24gZnJvbSB0aGF0IHByb21pc2UuXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiByYWNlKHByb21pc2VzKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB3aGVuKHByb21pc2UpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkUShyZXNvbHZlcikge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKHJlc29sdmVyKSkge1xuICAgICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsICdFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgXFwnezB9XFwnJywgcmVzb2x2ZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlamVjdEZuKHJlYXNvbikge1xuICAgICAgICByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICAvLyBMZXQncyBtYWtlIHRoZSBpbnN0YW5jZW9mIG9wZXJhdG9yIHdvcmsgZm9yIHByb21pc2VzLCBzbyB0aGF0XG4gICAgLy8gYG5ldyAkcShmbikgaW5zdGFuY2VvZiAkcWAgd291bGQgZXZhbHVhdGUgdG8gdHJ1ZS5cbiAgICAkUS5wcm90b3R5cGUgPSBQcm9taXNlLnByb3RvdHlwZTtcblxuICAgICRRLmRlZmVyID0gZGVmZXI7XG4gICAgJFEucmVqZWN0ID0gcmVqZWN0O1xuICAgICRRLndoZW4gPSB3aGVuO1xuICAgICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICRRLmFsbCA9IGFsbDtcbiAgICAkUS5yYWNlID0gcmFjZTtcblxuICAgIHJldHVybiAkUTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHN0YXRlKSB7XG4gICAgcmV0dXJuICEhc3RhdGUucHVyO1xuICB9XG4gIGZ1bmN0aW9uIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHN0YXRlKSB7XG4gICAgc3RhdGUucHVyID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBtYXJrUUV4Y2VwdGlvbkhhbmRsZWQocSkge1xuICAgIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHEuJCRzdGF0ZSk7XG4gIH1cblxuICAvKiogQHRoaXMgKi9cbiAgZnVuY3Rpb24gJCRSQUZQcm92aWRlcigpIHtcbiAgICAvL3JBRlxuICAgIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckdGltZW91dCcsIGZ1bmN0aW9uICgkd2luZG93LCAkdGltZW91dCkge1xuICAgICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8ICR3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgJHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICAgIHZhciByYWZTdXBwb3J0ZWQgPSAhIXJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgIHZhciByYWYgPSByYWZTdXBwb3J0ZWQgPyBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdmFyIGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgIH07XG4gICAgICB9IDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciB0aW1lciA9ICR0aW1lb3V0KGZuLCAxNi42NiwgZmFsc2UpOyAvLyAxMDAwIC8gNjAgPSAxNi42NjZcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZXIpO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDtcblxuICAgICAgcmV0dXJuIHJhZjtcbiAgICB9XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBERVNJR04gTk9URVNcbiAgICpcbiAgICogVGhlIGRlc2lnbiBkZWNpc2lvbnMgYmVoaW5kIHRoZSBzY29wZSBhcmUgaGVhdmlseSBmYXZvcmVkIGZvciBzcGVlZCBhbmQgbWVtb3J5IGNvbnN1bXB0aW9uLlxuICAgKlxuICAgKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxuICAgKiB2YWx1ZSBhcyBsYXN0IHRpbWUgc28gd2Ugb3B0aW1pemUgdGhlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcbiAgICogICAtIE5vIGNsb3N1cmVzLCBpbnN0ZWFkIHVzZSBwcm90b3R5cGljYWwgaW5oZXJpdGFuY2UgZm9yIEFQSVxuICAgKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcbiAgICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcbiAgICpcbiAgICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxuICAgKiAgIC0gVGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXG4gICAqICAgICBpdGVtcyB0byB0aGUgYXJyYXkgYXQgdGhlIGJlZ2lubmluZyAodW5zaGlmdCkgaW5zdGVhZCBvZiBhdCB0aGUgZW5kIChwdXNoKVxuICAgKlxuICAgKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW5cbiAgICogICAtIFVzaW5nIGFuIGFycmF5IHdvdWxkIGJlIHNsb3cgc2luY2UgaW5zZXJ0cyBpbiB0aGUgbWlkZGxlIGFyZSBleHBlbnNpdmU7IHNvIHdlIHVzZSBsaW5rZWQgbGlzdHNcbiAgICpcbiAgICogVGhlcmUgYXJlIGZld2VyIHdhdGNoZXMgdGhhbiBvYnNlcnZlcnMuIFRoaXMgaXMgd2h5IHlvdSBkb24ndCB3YW50IHRoZSBvYnNlcnZlciB0byBiZSBpbXBsZW1lbnRlZFxuICAgKiBpbiB0aGUgc2FtZSB3YXkgYXMgd2F0Y2guIFdhdGNoIHJlcXVpcmVzIHJldHVybiBvZiB0aGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgZXhwZW5zaXZlXG4gICAqIHRvIGNvbnN0cnVjdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXIjZGlnZXN0VHRsXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgYCRkaWdlc3RgIGl0ZXJhdGlvbnMgdGhlIHNjb3BlIHNob3VsZCBhdHRlbXB0IHRvIGV4ZWN1dGUgYmVmb3JlIGdpdmluZyB1cCBhbmRcbiAgICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXG4gICAqXG4gICAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy5cbiAgICpcbiAgICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAgICogc2V2ZXJhbCBkaWdlc3QgaXRlcmF0aW9ucy4gSG93ZXZlciBpZiBhbiBhcHBsaWNhdGlvbiBuZWVkcyBtb3JlIHRoYW4gdGhlIGRlZmF1bHQgMTAgZGlnZXN0XG4gICAqIGl0ZXJhdGlvbnMgZm9yIGl0cyBtb2RlbCB0byBzdGFiaWxpemUgdGhlbiB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHdoYXQgaXMgY2F1c2luZyB0aGUgbW9kZWwgdG9cbiAgICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAgICpcbiAgICogSW5jcmVhc2luZyB0aGUgVFRMIGNvdWxkIGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLCBzbyB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQgd2l0aG91dFxuICAgKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkcm9vdFNjb3BlXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFdmVyeSBhcHBsaWNhdGlvbiBoYXMgYSBzaW5nbGUgcm9vdCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gICAqIEFsbCBvdGhlciBzY29wZXMgYXJlIGRlc2NlbmRhbnQgc2NvcGVzIG9mIHRoZSByb290IHNjb3BlLiBTY29wZXMgcHJvdmlkZSBzZXBhcmF0aW9uXG4gICAqIGJldHdlZW4gdGhlIG1vZGVsIGFuZCB0aGUgdmlldywgdmlhIGEgbWVjaGFuaXNtIGZvciB3YXRjaGluZyB0aGUgbW9kZWwgZm9yIGNoYW5nZXMuXG4gICAqIFRoZXkgYWxzbyBwcm92aWRlIGV2ZW50IGVtaXNzaW9uL2Jyb2FkY2FzdCBhbmQgc3Vic2NyaXB0aW9uIGZhY2lsaXR5LiBTZWUgdGhlXG4gICAqIHtAbGluayBndWlkZS9zY29wZSBkZXZlbG9wZXIgZ3VpZGUgb24gc2NvcGVzfS5cbiAgICovXG4gIGZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpIHtcbiAgICB2YXIgVFRMID0gMTA7XG4gICAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcbiAgICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgIHZhciBhcHBseUFzeW5jSWQgPSBudWxsO1xuXG4gICAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIFRUTCA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFRUTDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTY29wZUNsYXNzKHBhcmVudCkge1xuICAgICAgZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307XG4gICAgICAgIHRoaXMuJCR3YXRjaGVyc0NvdW50ID0gMDtcbiAgICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIENoaWxkU2NvcGUucHJvdG90eXBlID0gcGFyZW50O1xuICAgICAgcmV0dXJuIENoaWxkU2NvcGU7XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gWyckZXhjZXB0aW9uSGFuZGxlcicsICckcGFyc2UnLCAnJGJyb3dzZXInLCBmdW5jdGlvbiAoJGV4Y2VwdGlvbkhhbmRsZXIsICRwYXJzZSwgJGJyb3dzZXIpIHtcblxuICAgICAgZnVuY3Rpb24gZGVzdHJveUNoaWxkU2NvcGUoJGV2ZW50KSB7XG4gICAgICAgICRldmVudC5jdXJyZW50U2NvcGUuJCRkZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhblVwU2NvcGUoJHNjb3BlKSB7XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSBvbmx5XG4gICAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgYSBtZW1vcnkgbGVhayBpbiBJRTkgaWYgYWxsIGNoaWxkIHNjb3BlcyBhcmUgbm90IGRpc2Nvbm5lY3RlZFxuICAgICAgICAgIC8vIGNvbXBsZXRlbHkgd2hlbiBhIHNjb3BlIGlzIGRlc3Ryb3llZC4gU28gdGhpcyBjb2RlIHdpbGwgcmVjdXJzZSB1cCB0aHJvdWdoXG4gICAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBTZWUgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTA3MDZcbiAgICAgICAgICBpZiAoJHNjb3BlLiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgICBjbGVhblVwU2NvcGUoJHNjb3BlLiQkY2hpbGRIZWFkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRzY29wZS4kJG5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBjbGVhblVwU2NvcGUoJHNjb3BlLiQkbmV4dFNpYmxpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBjb2RlIGJlbG93IHdvcmtzIGFyb3VuZCBJRTkgYW5kIFY4J3MgbWVtb3J5IGxlYWtzXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZTpcbiAgICAgICAgLy8gLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MyNjMjZcbiAgICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy82Nzk0I2lzc3VlY29tbWVudC0zODY0ODkwOVxuICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICAgJHNjb3BlLiRwYXJlbnQgPSAkc2NvcGUuJCRuZXh0U2libGluZyA9ICRzY29wZS4kJHByZXZTaWJsaW5nID0gJHNjb3BlLiQkY2hpbGRIZWFkID0gJHNjb3BlLiQkY2hpbGRUYWlsID0gJHNjb3BlLiRyb290ID0gJHNjb3BlLiQkd2F0Y2hlcnMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlXG4gICAgICAgKiB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIHVzaW5nIHRoZVxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pIFNlZSBhbHNvIHRoZSB7QGxpbmsgZ3VpZGUvc2NvcGUgU2NvcGVzIGd1aWRlfSBmb3JcbiAgICAgICAqIGFuIGluLWRlcHRoIGludHJvZHVjdGlvbiBhbmQgdXNhZ2UgZXhhbXBsZXMuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgSW5oZXJpdGFuY2VcbiAgICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAgICogYGBganNcbiAgICAgICAgICAgdmFyIHBhcmVudCA9ICRyb290U2NvcGU7XG4gICAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG4gICAgICAgICAgICBwYXJlbnQuc2FsdXRhdGlvbiA9IFwiSGVsbG9cIjtcbiAgICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICAgICAgICBjaGlsZC5zYWx1dGF0aW9uID0gXCJXZWxjb21lXCI7XG4gICAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIFdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBgU2NvcGVgIGluIHRlc3RzLCBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIGFyZSBhdmFpbGFibGUgb24gdGhlXG4gICAgICAgKiBpbnN0YW5jZXMgb2YgYFNjb3BlYCB0eXBlLiBTZWUge0BsaW5rIG5nTW9jay4kcm9vdFNjb3BlLlNjb3BlIG5nTW9jayBTY29wZX0gZm9yIGFkZGl0aW9uYWxcbiAgICAgICAqIGRldGFpbHMuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uXG4gICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuJHJvb3QgPSB0aGlzO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgICB0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGlkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBVbmlxdWUgc2NvcGUgSUQgKG1vbm90b25pY2FsbHkgaW5jcmVhc2luZykgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHJvb3RcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcm9vdCBzY29wZS5cbiAgICAgICAqL1xuXG4gICAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IGNoaWxkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50LlxuICAgICAgICAgKiBUaGUgc2NvcGUgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NvcGUgaGllcmFyY2h5IHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9LlxuICAgICAgICAgKlxuICAgICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXNcbiAgICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmRcbiAgICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZVxuICAgICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50XG4gICAgICAgICAqICAgICAgICAgc3RhdGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U2NvcGV9IFtwYXJlbnQ9dGhpc10gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBTY29wZWB9IHRoYXQgd2lsbCBiZSB0aGUgYCRwYXJlbnRgXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgc2NvcGUuIERlZmF1bHRzIHRvIGB0aGlzYCBzY29wZSBpZiBub3QgcHJvdmlkZWQuXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY29wZSBoaWVyYXJjaHkgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGNvcnJlY3QgcHJvdG90eXBpY2FsXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgJG5ldzogZnVuY3Rpb24gJG5ldyhpc29sYXRlLCBwYXJlbnQpIHtcbiAgICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdGhpcztcblxuICAgICAgICAgIGlmIChpc29sYXRlKSB7XG4gICAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgICAgY2hpbGQuJHJvb3QgPSB0aGlzLiRyb290O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAgIC8vIGJ1dCBjYWNoZSBpdCB0byBhbGxvdyB0aGUgVk0gdG8gb3B0aW1pemUgbG9va3Vwcy5cbiAgICAgICAgICAgIGlmICghdGhpcy4kJENoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZCA9IG5ldyB0aGlzLiQkQ2hpbGRTY29wZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZC4kcGFyZW50ID0gcGFyZW50O1xuICAgICAgICAgIGNoaWxkLiQkcHJldlNpYmxpbmcgPSBwYXJlbnQuJCRjaGlsZFRhaWw7XG4gICAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbCA9IGNoaWxkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAgIC8vIHRoZSBwYXJlbnQgc2NvcGUgaXMgZGVzdHJveWVkLCB0aGUgcHJvcGVydHkgYCQkZGVzdHJveWVkYCBpcyBpbmhlcml0ZWRcbiAgICAgICAgICAvLyBwcm90b3R5cGljYWxseS4gSW4gYWxsIG90aGVyIGNhc2VzLCB0aGlzIHByb3BlcnR5IG5lZWRzIHRvIGJlIHNldFxuICAgICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgICAgLy8gVGhlIGxpc3RlbmVyIG5lZWRzIHRvIGJlIGFkZGVkIGFmdGVyIHRoZSBwYXJlbnQgaXMgc2V0XG4gICAgICAgICAgaWYgKGlzb2xhdGUgfHwgcGFyZW50ICE9PSB0aGlzKSBjaGlsZC4kb24oJyRkZXN0cm95JywgZGVzdHJveUNoaWxkU2NvcGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgICAqICAgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHdhdGNoZWQuIChgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgbm90IGNoYW5nZVxuICAgICAgICAgKiAgIGl0cyB2YWx1ZSB3aGVuIGV4ZWN1dGVkIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWUgaW5wdXQgYmVjYXVzZSBpdCBtYXkgYmUgZXhlY3V0ZWQgbXVsdGlwbGVcbiAgICAgICAgICogICB0aW1lcyBieSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0uIFRoYXQgaXMsIGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBiZVxuICAgICAgICAgKiAgIFtpZGVtcG90ZW50XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lkZW1wb3RlbmNlKS4pXG4gICAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgICAqICAgcHJldmlvdXMgY2FsbCB0byBgd2F0Y2hFeHByZXNzaW9uYCBhcmUgbm90IGVxdWFsICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGluaXRpYWwgcnVuLFxuICAgICAgICAgKiAgIHNlZSBiZWxvdykuIEluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8gcmVmZXJlbmNlIGluZXF1YWxpdHksXG4gICAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgICAqICAgIHZpYSB0aGUgYCE9PWAgSmF2YXNjcmlwdCBvcGVyYXRvciwgdW5sZXNzIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYFxuICAgICAgICAgKiAgIChzZWUgbmV4dCBwb2ludClcbiAgICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICAgKiAgIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBmdW5jdGlvbi4gVG8gc2F2ZSB0aGUgdmFsdWUgb2YgdGhlIG9iamVjdCBmb3JcbiAgICAgICAgICogICBsYXRlciBjb21wYXJpc29uLCB0aGUge0BsaW5rIGFuZ3VsYXIuY29weX0gZnVuY3Rpb24gaXMgdXNlZC4gVGhpcyB0aGVyZWZvcmUgbWVhbnMgdGhhdFxuICAgICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAgICogLSBUaGlzIHNob3VsZCBub3QgYmUgdXNlZCB0byB3YXRjaCBmb3IgY2hhbmdlcyBpbiBvYmplY3RzIHRoYXQgYXJlXG4gICAgICAgICAqICAgb3IgY29udGFpbiBbRmlsZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0ZpbGUpIG9iamVjdHMgZHVlIHRvIGxpbWl0YXRpb25zIHdpdGgge0BsaW5rIGFuZ3VsYXIuY29weSBgYW5ndWxhci5jb3B5YH0uXG4gICAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgICAqICAgVGhpcyBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW5cbiAgICAgICAgICogICBpdGVyYXRpb24gbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLlxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCxcbiAgICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICAgKiBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGB3YXRjaEV4cHJlc3Npb25gIGJlY2F1c2UgaXQgd2lsbCBleGVjdXRlIG11bHRpcGxlIHRpbWVzIGluIGFcbiAgICAgICAgICogc2luZ2xlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUgaWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuKVxuICAgICAgICAgKlxuICAgICAgICAgKiBBZnRlciBhIHdhdGNoZXIgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzY29wZSwgdGhlIGBsaXN0ZW5lcmAgZm4gaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAqICh2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWxBc3luYyAkZXZhbEFzeW5jfSkgdG8gaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgICAqIG9mIGB3YXRjaEV4cHJlc3Npb25gIGRpZG4ndCBjaGFuZ2UuIFRvIGRldGVjdCB0aGlzIHNjZW5hcmlvIHdpdGhpbiB0aGUgYGxpc3RlbmVyYCBmbiwgeW91XG4gICAgICAgICAqIGNhbiBjb21wYXJlIHRoZSBgbmV3VmFsYCBhbmQgYG9sZFZhbGAuIElmIHRoZXNlIHR3byB2YWx1ZXMgYXJlIGlkZW50aWNhbCAoYD09PWApIHRoZW4gdGhlXG4gICAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICAgIHZhciBzY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuICAgICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBhIGZ1bmN0aW9uIGFzIGEgd2F0Y2hFeHByZXNzaW9uXG4gICAgICAgICAgICAgdmFyIGZvb2Q7XG4gICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgICBzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9vZDsgfSxcbiAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNoYW5nZSBsaXN0ZW5lciwgY2FsbGVkIHdoZW4gdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGFib3ZlIGZ1bmN0aW9uIGNoYW5nZXNcbiAgICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICBpZiAoIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGluY3JlbWVudCB0aGUgY291bnRlciBpZiB0aGUgdmFsdWUgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAvLyBObyBkaWdlc3QgaGFzIGJlZW4gcnVuIHNvIHRoZSBjb3VudGVyIHdpbGwgYmUgemVyb1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgICAgLy8gUnVuIHRoZSBkaWdlc3QgYnV0IHNpbmNlIGZvb2QgaGFzIG5vdCBjaGFuZ2VkIGNvdW50IHdpbGwgc3RpbGwgYmUgemVyb1xuICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSBmb29kIGFuZCBydW4gZGlnZXN0LiAgTm93IHRoZSBjb3VudGVyIHdpbGwgaW5jcmVtZW50XG4gICAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMSk7XG4gICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsoZnVuY3Rpb24oKXxzdHJpbmcpfSB3YXRjaEV4cHJlc3Npb24gRXhwcmVzc2lvbiB0aGF0IGlzIGV2YWx1YXRlZCBvbiBlYWNoXG4gICAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAgICogICAgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBgc2NvcGVgIGFzIGEgcGFyYW1ldGVyLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgdmFsdWVcbiAgICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogICAgLSBgbmV3VmFsYCBjb250YWlucyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgICAqICAgIC0gYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGVcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW29iamVjdEVxdWFsaXR5PWZhbHNlXSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mXG4gICAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAgICovXG4gICAgICAgICR3YXRjaDogZnVuY3Rpb24gJHdhdGNoKHdhdGNoRXhwLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApO1xuXG4gICAgICAgICAgaWYgKGdldC4kJHdhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0LCB3YXRjaEV4cCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyxcbiAgICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgIGZuOiBsaXN0ZW5lcixcbiAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCxcbiAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgZXhwOiBwcmV0dHlQcmludEV4cHJlc3Npb24gfHwgd2F0Y2hFeHAsXG4gICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICB3YXRjaGVyLmZuID0gbm9vcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTtcbiAgICAgICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleCA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLlxuICAgICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTtcbiAgICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXgrKztcbiAgICAgICAgICBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KHRoaXMsIDEpO1xuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaCgpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGFycmF5UmVtb3ZlKGFycmF5LCB3YXRjaGVyKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQoc2NvcGUsIC0xKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4IDwgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4KSB7XG4gICAgICAgICAgICAgICAgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4LS07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEEgdmFyaWFudCBvZiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdoZXJlIGl0IHdhdGNoZXMgYW4gYXJyYXkgb2YgYHdhdGNoRXhwcmVzc2lvbnNgLlxuICAgICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogLSBUaGUgaXRlbXMgaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBhcmUgb2JzZXJ2ZWQgdmlhIHRoZSBzdGFuZGFyZCBgJHdhdGNoYCBvcGVyYXRpb24uIFRoZWlyIHJldHVyblxuICAgICAgICAgKiAgIHZhbHVlcyBhcmUgZXhhbWluZWQgZm9yIGNoYW5nZXMgb24gZXZlcnkgY2FsbCB0byBgJGRpZ2VzdGAuXG4gICAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogYCR3YXRjaEdyb3VwYCBpcyBtb3JlIHBlcmZvcm1hbnQgdGhhbiB3YXRjaGluZyBlYWNoIGV4cHJlc3Npb24gaW5kaXZpZHVhbGx5LCBhbmQgc2hvdWxkIGJlXG4gICAgICAgICAqIHVzZWQgd2hlbiB0aGUgbGlzdGVuZXIgZG9lcyBub3QgbmVlZCB0byBrbm93IHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQuXG4gICAgICAgICAqIElmIHRoZSBsaXN0ZW5lciBuZWVkcyB0byBrbm93IHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQsXG4gICAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gb3JcbiAgICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9uKCl9IHNob3VsZCBiZSB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5XG4gICAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueVxuICAgICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgICAqICAgIFRoZSBgbmV3VmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgY3VycmVudCB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYC5cbiAgICAgICAgICpcbiAgICAgICAgICogICAgTm90ZSB0aGF0IGBuZXdWYWx1ZXNgIGFuZCBgb2xkVmFsdWVzYCByZWZsZWN0IHRoZSBkaWZmZXJlbmNlcyBpbiBlYWNoICoqaW5kaXZpZHVhbCoqXG4gICAgICAgICAqICAgIGV4cHJlc3Npb24sIGFuZCBub3QgdGhlIGRpZmZlcmVuY2Ugb2YgdGhlIHZhbHVlcyBiZXR3ZWVuIGVhY2ggY2FsbCBvZiB0aGUgbGlzdGVuZXIuXG4gICAgICAgICAqICAgIFRoYXQgbWVhbnMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBgbmV3VmFsdWVzYCBhbmQgYG9sZFZhbHVlc2AgY2Fubm90IGJlIHVzZWQgdG8gZGV0ZXJtaW5lXG4gICAgICAgICAqICAgIHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQgLyByZW1haW5lZCBzdGFibGU6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgIGBgYGpzXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICRzY29wZS4kd2F0Y2hHcm91cChbJ3YxJywgJ3YyJ10sIGZ1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzKSB7XG4gICAgICAgICAqICAgICAgY29uc29sZS5sb2cobmV3VmFsdWVzLCBvbGRWYWx1ZXMpO1xuICAgICAgICAgKiAgICB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgLy8gbmV3VmFsdWVzLCBvbGRWYWx1ZXMgaW5pdGlhbGx5XG4gICAgICAgICAqICAgIC8vIFt1bmRlZmluZWQsIHVuZGVmaW5lZF0sIFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgJHNjb3BlLnYxID0gJ2EnO1xuICAgICAgICAgKiAgICAkc2NvcGUudjIgPSAnYSc7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgIC8vIFsnYScsICdhJ10sIFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgJHNjb3BlLnYyID0gJ2InXG4gICAgICAgICAqXG4gICAgICAgICAqICAgIC8vIHYxIGhhc24ndCBjaGFuZ2VkIHNpbmNlIGl0IGJlY2FtZSBgJ2EnYCwgdGhlcmVmb3JlIGl0cyBvbGRWYWx1ZSBpcyBzdGlsbCBgdW5kZWZpbmVkYFxuICAgICAgICAgKiAgICAvLyBbJ2EnLCAnYiddLCBbdW5kZWZpbmVkLCAnYSddXG4gICAgICAgICAqXG4gICAgICAgICAqICAgIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uICR3YXRjaEdyb3VwKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdmFyIGNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIE5vIGV4cHJlc3Npb25zIG1lYW5zIHdlIGNhbGwgdGhlIGxpc3RlbmVyIEFTQVBcbiAgICAgICAgICAgIHZhciBzaG91bGRDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBzaXplIG9mIG9uZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbnNbMF0sIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBzY29wZSkge1xuICAgICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgb2xkVmFsdWVzWzBdID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgdmFsdWUgPT09IG9sZFZhbHVlID8gbmV3VmFsdWVzIDogb2xkVmFsdWVzLCBzY29wZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3JFYWNoKHdhdGNoRXhwcmVzc2lvbnMsIGZ1bmN0aW9uIChleHByLCBpKSB7XG4gICAgICAgICAgICB2YXIgdW53YXRjaEZuID0gc2VsZi4kd2F0Y2goZXhwciwgZnVuY3Rpb24gd2F0Y2hHcm91cFN1YkFjdGlvbih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgbmV3VmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgICBpZiAoIWNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24oKSB7XG4gICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnNoaWZ0KCkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogU2hhbGxvdyB3YXRjaGVzIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmQgZmlyZXMgd2hlbmV2ZXIgYW55IG9mIHRoZSBwcm9wZXJ0aWVzIGNoYW5nZVxuICAgICAgICAgKiAoZm9yIGFycmF5cywgdGhpcyBpbXBsaWVzIHdhdGNoaW5nIHRoZSBhcnJheSBpdGVtczsgZm9yIG9iamVjdCBtYXBzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmdcbiAgICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIC0gVGhlIGBvYmpgIGNvbGxlY3Rpb24gaXMgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGlzIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICAgKiAtIFRoZSBgbGlzdGVuZXJgIGlzIGNhbGxlZCB3aGVuZXZlciBhbnl0aGluZyB3aXRoaW4gdGhlIGBvYmpgIGhhcyBjaGFuZ2VkLiBFeGFtcGxlcyBpbmNsdWRlXG4gICAgICAgICAqICAgYWRkaW5nLCByZW1vdmluZywgYW5kIG1vdmluZyBpdGVtcyBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnaWdvcicsICdtYXRpYXMnLCAnbWlza28nLCAnamFtZXMnXTtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSA0O1xuICAgICAgICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCduYW1lcycsIGZ1bmN0aW9uKG5ld05hbWVzLCBvbGROYW1lcykge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YUNvdW50ID0gbmV3TmFtZXMubGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgIC8vc3RpbGwgYXQgNCAuLi4gbm8gY2hhbmdlc1xuICAgICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWVzLnBvcCgpO1xuICAgICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICAvL25vdyB0aGVyZSdzIGJlZW4gYSBjaGFuZ2VcbiAgICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb24oc2NvcGUpfSBvYmogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LiBUaGVcbiAgICAgICAgICogICAgZXhwcmVzc2lvbiB2YWx1ZSBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IG9yIGFuIGFycmF5IHdoaWNoIGlzIG9ic2VydmVkIG9uIGVhY2hcbiAgICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAgICogICAgY29sbGVjdGlvbiB3aWxsIHRyaWdnZXIgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAgICogICAgd2hlbiBhIGNoYW5nZSBpcyBkZXRlY3RlZC5cbiAgICAgICAgICogICAgLSBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uXG4gICAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICAgKiAgICAgIER1ZSB0byBwZXJmb3JtYW5jZSBjb25zaWRlcmF0aW9ucywgdGhlYG9sZENvbGxlY3Rpb25gIHZhbHVlIGlzIGNvbXB1dGVkIG9ubHkgaWYgdGhlXG4gICAgICAgICAqICAgICAgYGxpc3RlbmVyYCBmdW5jdGlvbiBkZWNsYXJlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMuXG4gICAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGVcbiAgICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IuJHN0YXRlZnVsID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICAgIHZhciBuZXdWYWx1ZTtcbiAgICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB0aGUgbGFzdCBkaXJ0eS1jaGVjayBydW4sXG4gICAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgICAgdmFyIG9sZFZhbHVlO1xuICAgICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHdoZW4gdGhlIGxhc3QgY2hhbmdlIGhhcHBlbmVkXG4gICAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgICAvLyBvbmx5IHRyYWNrIHZlcnlPbGRWYWx1ZSBpZiB0aGUgbGlzdGVuZXIgaXMgYXNraW5nIGZvciBpdFxuICAgICAgICAgIHZhciB0cmFja1ZlcnlPbGRWYWx1ZSA9IGxpc3RlbmVyLmxlbmd0aCA+IDE7XG4gICAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDtcbiAgICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICAgIHZhciBpbnRlcm5hbEFycmF5ID0gW107XG4gICAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICAgIHZhciBvbGRMZW5ndGggPSAwO1xuXG4gICAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgICB2YXIgbmV3TGVuZ3RoLCBrZXksIGJvdGhOYU4sIG5ld0l0ZW0sIG9sZEl0ZW07XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXcgdmFsdWUgaXMgdW5kZWZpbmVkLCB0aGVuIHJldHVybiB1bmRlZmluZWQgYXMgdGhlIHdhdGNoIG1heSBiZSBhIG9uZS10aW1lIHdhdGNoXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHByaW1pdGl2ZVxuICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIGFycmF5IGludG8gYXJyYXkuXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICAgIG9sZExlbmd0aCA9IG9sZFZhbHVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG5ld0xlbmd0aCA9IG5ld1ZhbHVlLmxlbmd0aDtcblxuICAgICAgICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUubGVuZ3RoID0gb2xkTGVuZ3RoID0gbmV3TGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtpXTtcblxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICAgICAgICAgICBib3RoTmFOID0gb2xkSXRlbSAhPT0gb2xkSXRlbSAmJiBuZXdJdGVtICE9PSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiBvbGRJdGVtICE9PSBuZXdJdGVtKSB7XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbE9iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBvbGRMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVba2V5XTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgICAgICAgICAgICAgIGJvdGhOYU4gPSBvbGRJdGVtICE9PSBvbGRJdGVtICYmIG5ld0l0ZW0gIT09IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiBvbGRJdGVtICE9PSBuZXdJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaW5pdFJ1bikge1xuICAgICAgICAgICAgICBpbml0UnVuID0gZmFsc2U7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBuZXdWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgdmVyeU9sZFZhbHVlLCBzZWxmKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICAgIGlmICh0cmFja1ZlcnlPbGRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vcHJpbWl0aXZlXG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIG9iamVjdFxuICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZFxuICAgICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlXG4gICAgICAgICAqIHRoZSBtb2RlbCwgdGhlIGAkZGlnZXN0KClgIGtlZXBzIGNhbGxpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc31cbiAgICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgICogaXRlcmF0aW9ucyBleGNlZWRzIDEwLlxuICAgICAgICAgKlxuICAgICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxuICAgICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW5cbiAgICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICAgICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluXG4gICAgICAgICAqIGEge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZX0pLCB3aGljaCB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCxcbiAgICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGhcbiAgICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEluIHVuaXQgdGVzdHMsIHlvdSBtYXkgbmVlZCB0byBjYWxsIGAkZGlnZXN0KClgIHRvIHNpbXVsYXRlIHRoZSBzY29wZSBsaWZlIGN5Y2xlLlxuICAgICAgICAgKlxuICAgICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47XG4gICAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuICAgICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICAkZGlnZXN0OiBmdW5jdGlvbiAkZGlnZXN0KCkge1xuICAgICAgICAgIHZhciB3YXRjaCxcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIGxhc3QsXG4gICAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgICBnZXQsXG4gICAgICAgICAgICAgIHdhdGNoZXJzLFxuICAgICAgICAgICAgICBkaXJ0eSxcbiAgICAgICAgICAgICAgdHRsID0gVFRMLFxuICAgICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgICB3YXRjaExvZyA9IFtdLFxuICAgICAgICAgICAgICBsb2dJZHgsXG4gICAgICAgICAgICAgIGFzeW5jVGFzaztcblxuICAgICAgICAgIGJlZ2luUGhhc2UoJyRkaWdlc3QnKTtcbiAgICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGluIHN5bmMgYmVmb3JlIHRoZSBjYWxsIHRvICRkaWdlc3RcbiAgICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSAmJiBhcHBseUFzeW5jSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3Qgc2NvcGUsIGFuZCAkYXBwbHlBc3luYyBoYXMgc2NoZWR1bGVkIGEgZGVmZXJyZWQgJGFwcGx5KCksIHRoZW5cbiAgICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAgICRicm93c2VyLmRlZmVyLmNhbmNlbChhcHBseUFzeW5jSWQpO1xuICAgICAgICAgICAgZmx1c2hBcHBseUFzeW5jKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gXCJ3aGlsZSBkaXJ0eVwiIGxvb3BcbiAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgICAvLyBJdCdzIHNhZmUgZm9yIGFzeW5jUXVldWVQb3NpdGlvbiB0byBiZSBhIGxvY2FsIHZhcmlhYmxlIGhlcmUgYmVjYXVzZSB0aGlzIGxvb3AgY2FuJ3RcbiAgICAgICAgICAgIC8vIGJlIHJlZW50ZXJlZCByZWN1cnNpdmVseS4gQ2FsbGluZyAkZGlnZXN0IGZyb20gYSBmdW5jdGlvbiBwYXNzZWQgdG8gJGV2YWxBc3luYyB3b3VsZFxuICAgICAgICAgICAgLy8gbGVhZCB0byBhICckZGlnZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnIGVycm9yLlxuICAgICAgICAgICAgZm9yICh2YXIgYXN5bmNRdWV1ZVBvc2l0aW9uID0gMDsgYXN5bmNRdWV1ZVBvc2l0aW9uIDwgYXN5bmNRdWV1ZS5sZW5ndGg7IGFzeW5jUXVldWVQb3NpdGlvbisrKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZVthc3luY1F1ZXVlUG9zaXRpb25dO1xuICAgICAgICAgICAgICAgIGZuID0gYXN5bmNUYXNrLmZuO1xuICAgICAgICAgICAgICAgIGZuKGFzeW5jVGFzay5zY29wZSwgYXN5bmNUYXNrLmxvY2Fscyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3luY1F1ZXVlLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDogZG8ge1xuICAgICAgICAgICAgICAvLyBcInRyYXZlcnNlIHRoZSBzY29wZXNcIiBsb29wXG4gICAgICAgICAgICAgIGlmICh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykge1xuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgICB3YXRjaGVycy4kJGRpZ2VzdFdhdGNoSW5kZXggPSB3YXRjaGVycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHdhdGNoZXJzLiQkZGlnZXN0V2F0Y2hJbmRleC0tKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB3YXRjaCA9IHdhdGNoZXJzW3dhdGNoZXJzLiQkZGlnZXN0V2F0Y2hJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vc3QgY29tbW9uIHdhdGNoZXMgYXJlIG9uIHByaW1pdGl2ZXMsIGluIHdoaWNoIGNhc2Ugd2UgY2FuIHNob3J0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZ2V0ID0gd2F0Y2guZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSBnZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmICEod2F0Y2guZXEgPyBlcXVhbHModmFsdWUsIGxhc3QpIDogaXNOdW1iZXJOYU4odmFsdWUpICYmIGlzTnVtYmVyTmFOKGxhc3QpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmxhc3QgPSB3YXRjaC5lcSA/IGNvcHkodmFsdWUsIG51bGwpIDogdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbiA9IHdhdGNoLmZuO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUsIGxhc3QgPT09IGluaXRXYXRjaFZhbCA/IHZhbHVlIDogbGFzdCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhdGNoTG9nW2xvZ0lkeF0pIHdhdGNoTG9nW2xvZ0lkeF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGlzRnVuY3Rpb24od2F0Y2guZXhwKSA/ICdmbjogJyArICh3YXRjaC5leHAubmFtZSB8fCB3YXRjaC5leHAudG9TdHJpbmcoKSkgOiB3YXRjaC5leHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWw6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXRjaCA9PT0gbGFzdERpcnR5V2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtb3N0IHJlY2VudGx5IGRpcnR5IHdhdGNoZXIgaXMgbm93IGNsZWFuLCBzaG9ydCBjaXJjdWl0IHNpbmNlIHRoZSByZW1haW5pbmcgd2F0Y2hlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgYWxyZWFkeSBiZWVuIHRlc3RlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3RcbiAgICAgICAgICAgICAgaWYgKCEobmV4dCA9IGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQgfHwgY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChjdXJyZW50ID0gbmV4dCk7XG5cbiAgICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICAgIGlmICgoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpICYmICF0dGwtLSkge1xuICAgICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsICd7MH0gJGRpZ2VzdCgpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJyArICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsIFRUTCwgd2F0Y2hMb2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTtcblxuICAgICAgICAgIGNsZWFyUGhhc2UoKTtcblxuICAgICAgICAgIC8vIHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIGlzbid0IGxvY2FsIGhlcmUgYmVjYXVzZSB0aGlzIGxvb3AgY2FuIGJlIHJlZW50ZXJlZCByZWN1cnNpdmVseS5cbiAgICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPCBwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwb3N0RGlnZXN0UXVldWVbcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24rK10oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5sZW5ndGggPSBwb3N0RGlnZXN0UXVldWVQb3NpdGlvbiA9IDA7XG5cbiAgICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgICAgICAgIC8vIChmb3Igd2hpY2ggbm8gZXZlbnQgaXMgZmlyZWQ7IGUuZy4gdmlhIGBoaXN0b3J5LnB1c2hTdGF0ZSgpYClcbiAgICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHNjb3BlIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogQnJvYWRjYXN0ZWQgd2hlbiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4gYXJlIGJlaW5nIGRlc3Ryb3llZC5cbiAgICAgICAgICpcbiAgICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXNcbiAgICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXJcbiAgICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGVcbiAgICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLlxuICAgICAgICAgKlxuICAgICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuXG4gICAgICAgICAqIEFwcGxpY2F0aW9uIGNvZGUgY2FuIHJlZ2lzdGVyIGEgYCRkZXN0cm95YCBldmVudCBoYW5kbGVyIHRoYXQgd2lsbCBnaXZlIGl0IGEgY2hhbmNlIHRvXG4gICAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICAgKlxuICAgICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgICAqL1xuICAgICAgICAkZGVzdHJveTogZnVuY3Rpb24gJGRlc3Ryb3koKSB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QgZGVzdHJveSBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50O1xuXG4gICAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUpIHtcbiAgICAgICAgICAgIC8vUmVtb3ZlIGhhbmRsZXJzIGF0dGFjaGVkIHRvIHdpbmRvdyB3aGVuICRyb290U2NvcGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICAgJGJyb3dzZXIuJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtcbiAgICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQodGhpcywgdGhpcy4kJGxpc3RlbmVyQ291bnRbZXZlbnROYW1lXSwgZXZlbnROYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzZXZlciBhbGwgdGhlIHJlZmVyZW5jZXMgdG8gcGFyZW50IHNjb3BlcyAoYWZ0ZXIgdGhpcyBjbGVhbnVwLCB0aGUgY3VycmVudCBzY29wZSBzaG91bGRcbiAgICAgICAgICAvLyBub3QgYmUgcmV0YWluZWQgYnkgYW55IG9mIG91ciByZWZlcmVuY2VzIGFuZCBzaG91bGQgYmUgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbilcbiAgICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkSGVhZCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xuICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LiQkY2hpbGRUYWlsID09PSB0aGlzKSBwYXJlbnQuJCRjaGlsZFRhaWwgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG4gICAgICAgICAgaWYgKHRoaXMuJCRwcmV2U2libGluZykgdGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgICAvLyBEaXNhYmxlIGxpc3RlbmVycywgd2F0Y2hlcnMgYW5kIGFwcGx5L2RpZ2VzdCBtZXRob2RzXG4gICAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gdGhpcy4kZXZhbEFzeW5jID0gdGhpcy4kYXBwbHlBc3luYyA9IG5vb3A7XG4gICAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAgIC8vIERpc2Nvbm5lY3QgdGhlIG5leHQgc2libGluZyB0byBwcmV2ZW50IGBjbGVhblVwU2NvcGVgIGRlc3Ryb3lpbmcgdGhvc2UgdG9vXG4gICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gbnVsbDtcbiAgICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRXhlY3V0ZXMgdGhlIGBleHByZXNzaW9uYCBvbiB0aGUgY3VycmVudCBzY29wZSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LiBBbnkgZXhjZXB0aW9ucyBpblxuICAgICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICAgKiBleHByZXNzaW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICAgdmFyIHNjb3BlID0gbmcuJHJvb3RTY29wZS5TY29wZSgpO1xuICAgICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICAgIHNjb3BlLmIgPSAyO1xuICAgICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbChmdW5jdGlvbihzY29wZSl7IHJldHVybiBzY29wZS5hICsgc2NvcGUuYjsgfSkpLnRvRXF1YWwoMyk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAgICovXG4gICAgICAgICRldmFsOiBmdW5jdGlvbiAkZXZhbChleHByLCBsb2NhbHMpIHtcbiAgICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIpKHRoaXMsIGxvY2Fscyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seVxuICAgICAgICAgKiB0aGF0OlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlZCB0aGUgZXZhbHVhdGlvbiAocHJlZmVyYWJseSBiZWZvcmUgRE9NXG4gICAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICAgKiAgIC0gYXQgbGVhc3Qgb25lIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXJcbiAgICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGVcbiAgICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsXG4gICAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAgICovXG4gICAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uICRldmFsQXN5bmMoZXhwciwgbG9jYWxzKSB7XG4gICAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jXG4gICAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSAmJiAhYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFzeW5jUXVldWUucHVzaCh7IHNjb3BlOiB0aGlzLCBmbjogJHBhcnNlKGV4cHIpLCBsb2NhbHM6IGxvY2FscyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAkJHBvc3REaWdlc3Q6IGZ1bmN0aW9uICQkcG9zdERpZ2VzdChmbikge1xuICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICAgKiBmcmFtZXdvcmsuIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuXG4gICAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlXG4gICAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0IGV4ZWN1dGluZyB3YXRjaGVzfS5cbiAgICAgICAgICpcbiAgICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAjIFBzZXVkby1Db2RlIG9mIGAkYXBwbHkoKWBcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICBmdW5jdGlvbiAkYXBwbHkoZXhwcikge1xuICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICRyb290LiRkaWdlc3QoKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKiBTY29wZSdzIGAkYXBwbHkoKWAgbWV0aG9kIHRyYW5zaXRpb25zIHRocm91Z2ggdGhlIGZvbGxvd2luZyBzdGFnZXM6XG4gICAgICAgICAqXG4gICAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwgJGV2YWwoKX0gbWV0aG9kLlxuICAgICAgICAgKiAyLiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICAgKiAzLiBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgICAgICAgKiAgICBleHByZXNzaW9uIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IG1ldGhvZC5cbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgJGFwcGx5OiBmdW5jdGlvbiAkYXBwbHkoZXhwcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBiZWdpblBoYXNlKCckYXBwbHknKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBTY2hlZHVsZSB0aGUgaW52b2NhdGlvbiBvZiAkYXBwbHkgdG8gb2NjdXIgYXQgYSBsYXRlciB0aW1lLiBUaGUgYWN0dWFsIHRpbWUgZGlmZmVyZW5jZVxuICAgICAgICAgKiB2YXJpZXMgYWNyb3NzIGJyb3dzZXJzLCBidXQgaXMgdHlwaWNhbGx5IGFyb3VuZCB+MTAgbWlsbGlzZWNvbmRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHF1ZXVlIHVwIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoaWNoIG5lZWQgdG8gYmUgZXZhbHVhdGVkIGluIHRoZSBzYW1lXG4gICAgICAgICAqIGRpZ2VzdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uICRhcHBseUFzeW5jKGV4cHIpIHtcbiAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgICAgIGlmIChleHByKSB7XG4gICAgICAgICAgICBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHByID0gJHBhcnNlKGV4cHIpO1xuICAgICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gJGFwcGx5QXN5bmNFeHByZXNzaW9uKCkge1xuICAgICAgICAgICAgc2NvcGUuJGV2YWwoZXhwcik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG9uXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yXG4gICAgICAgICAqIGRpc2N1c3Npb24gb2YgZXZlbnQgbGlmZSBjeWNsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIGZvcm1hdCBpczogYGZ1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKWAuIFRoZSBgZXZlbnRgIG9iamVjdFxuICAgICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSBvbiB3aGljaCB0aGUgZXZlbnQgd2FzIGAkZW1pdGAtZWQgb3JcbiAgICAgICAgICogICAgIGAkYnJvYWRjYXN0YC1lZC5cbiAgICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgdGhhdCBpcyBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGV2ZW50LiBPbmNlIHRoZVxuICAgICAgICAgKiAgICAgZXZlbnQgcHJvcGFnYXRlcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHksIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIG51bGwuXG4gICAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgICAgICogICAtIGBzdG9wUHJvcGFnYXRpb25gIC0gYHtmdW5jdGlvbj19YDogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbFxuICAgICAgICAgKiAgICAgZnVydGhlciBldmVudCBwcm9wYWdhdGlvbiAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuXG4gICAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZ1xuICAgICAgICAgKiAgICAgdG8gdHJ1ZS5cbiAgICAgICAgICogICAtIGBkZWZhdWx0UHJldmVudGVkYCAtIGB7Ym9vbGVhbn1gOiB0cnVlIGlmIGBwcmV2ZW50RGVmYXVsdGAgd2FzIGNhbGxlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQsIC4uLmFyZ3MpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgICAqL1xuICAgICAgICAkb246IGZ1bmN0aW9uICRvbihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07XG4gICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHtcbiAgICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKztcbiAgICAgICAgICB9IHdoaWxlIChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KTtcblxuICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGluZGV4T2ZMaXN0ZW5lciA9IG5hbWVkTGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgICAgaWYgKGluZGV4T2ZMaXN0ZW5lciAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaW5kZXhPZkxpc3RlbmVyXSA9IG51bGw7XG4gICAgICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQoc2VsZiwgMSwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRlbWl0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlXG4gICAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbFxuICAgICAgICAgKiByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzXG4gICAgICAgICAqIGNhbmNlbHMgaXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC5cbiAgICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0IChzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSkuXG4gICAgICAgICAqL1xuICAgICAgICAkZW1pdDogZnVuY3Rpb24gJGVtaXQobmFtZSwgYXJncykge1xuICAgICAgICAgIHZhciBlbXB0eSA9IFtdLFxuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVycyxcbiAgICAgICAgICAgICAgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgICBfc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgICAgICAgICBfc3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIGxlbmd0aDtcblxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7XG4gICAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW5cbiAgICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nXG4gICAgICAgICAgICBpZiAoX3N0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHNcbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgICB9IHdoaWxlIChzY29wZSk7XG5cbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuXG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZVxuICAgICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudFxuICAgICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gYnJvYWRjYXN0LlxuICAgICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259XG4gICAgICAgICAqL1xuICAgICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbiAkYnJvYWRjYXN0KG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcbiAgICAgICAgICAgICAgbmV4dCA9IHRhcmdldCxcbiAgICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCxcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCF0YXJnZXQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSByZXR1cm4gZXZlbnQ7XG5cbiAgICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICAgIGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbGVuZ3RoO1xuXG4gICAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdFxuICAgICAgICAgIHdoaWxlIChjdXJyZW50ID0gbmV4dCkge1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDtcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpXG4gICAgICAgICAgICBpZiAoIShuZXh0ID0gY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gJiYgY3VycmVudC4kJGNoaWxkSGVhZCB8fCBjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAgIC8vVGhlIGludGVybmFsIHF1ZXVlcy4gRXhwb3NlIHRoZW0gb24gdGhlICRyb290U2NvcGUgZm9yIGRlYnVnZ2luZy90ZXN0aW5nIHB1cnBvc2VzLlxuICAgICAgdmFyIGFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXN5bmNRdWV1ZSA9IFtdO1xuICAgICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICAgIHZhciBhcHBseUFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXBwbHlBc3luY1F1ZXVlID0gW107XG5cbiAgICAgIHZhciBwb3N0RGlnZXN0UXVldWVQb3NpdGlvbiA9IDA7XG5cbiAgICAgIHJldHVybiAkcm9vdFNjb3BlO1xuXG4gICAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7XG4gICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbnByb2cnLCAnezB9IGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAkcm9vdFNjb3BlLiQkcGhhc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XG4gICAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGluY3JlbWVudFdhdGNoZXJzQ291bnQoY3VycmVudCwgY291bnQpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICs9IGNvdW50O1xuICAgICAgICB9IHdoaWxlIChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVjcmVtZW50TGlzdGVuZXJDb3VudChjdXJyZW50LCBjb3VudCwgbmFtZSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgICBpZiAoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICAgKiBiZWNhdXNlIGl0J3MgdW5pcXVlIHdlIGNhbiBlYXNpbHkgdGVsbCBpdCBhcGFydCBmcm9tIG90aGVyIHZhbHVlc1xuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaEFwcGx5QXN5bmMoKSB7XG4gICAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFwcGx5QXN5bmNRdWV1ZS5zaGlmdCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNjaGVkdWxlQXBwbHlBc3luYygpIHtcbiAgICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICAgIGFwcGx5QXN5bmNJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZsdXNoQXBwbHlBc3luYyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkcm9vdEVsZW1lbnRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSByb290IGVsZW1lbnQgb2YgQW5ndWxhciBhcHBsaWNhdGlvbi4gVGhpcyBpcyBlaXRoZXIgdGhlIGVsZW1lbnQgd2hlcmUge0BsaW5rXG4gICAqIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gd2FzIGRlY2xhcmVkIG9yIHRoZSBlbGVtZW50IHBhc3NlZCBpbnRvXG4gICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0uIFRoZSBlbGVtZW50IHJlcHJlc2VudHMgdGhlIHJvb3QgZWxlbWVudCBvZiBhcHBsaWNhdGlvbi4gSXQgaXMgYWxzbyB0aGVcbiAgICogbG9jYXRpb24gd2hlcmUgdGhlIGFwcGxpY2F0aW9uJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gc2VydmljZSBnZXRzXG4gICAqIHB1Ymxpc2hlZCwgYW5kIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgYCRyb290RWxlbWVudC5pbmplY3RvcigpYC5cbiAgICovXG5cbiAgLy8gdGhlIGltcGxlbWVudGF0aW9uIGlzIGluIGFuZ3VsYXIuYm9vdHN0cmFwXG5cbiAgLyoqXG4gICAqIEB0aGlzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICAgKi9cbiAgZnVuY3Rpb24gJCRTYW5pdGl6ZVVyaVByb3ZpZGVyKCkge1xuICAgIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKChodHRwcz98ZnRwfGZpbGV8YmxvYik6fGRhdGE6aW1hZ2VcXC8pLztcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAgICpcbiAgICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAgIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAgICpcbiAgICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgIH07XG5cbiAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2FuaXRpemVVcmkodXJpLCBpc0ltYWdlKSB7XG4gICAgICAgIHZhciByZWdleCA9IGlzSW1hZ2UgPyBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgOiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICAgIG5vcm1hbGl6ZWRWYWwgPSB1cmxSZXNvbHZlKHVyaSkuaHJlZjtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRWYWwgIT09ICcnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gICAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAgICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICAgKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gICAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAgICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICAgKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4gIC8qIGV4cG9ydGVkICRTY2VQcm92aWRlciwgJFNjZURlbGVnYXRlUHJvdmlkZXIgKi9cblxuICB2YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xuXG4gIHZhciBTQ0VfQ09OVEVYVFMgPSB7XG4gICAgLy8gSFRNTCBpcyB1c2VkIHdoZW4gdGhlcmUncyBIVE1MIHJlbmRlcmVkIChlLmcuIG5nLWJpbmQtaHRtbCwgaWZyYW1lIHNyY2RvYyBiaW5kaW5nKS5cbiAgICBIVE1MOiAnaHRtbCcsXG5cbiAgICAvLyBTdHlsZSBzdGF0ZW1lbnRzIG9yIHN0eWxlc2hlZXRzLiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgICBDU1M6ICdjc3MnLFxuXG4gICAgLy8gQW4gVVJMIHVzZWQgaW4gYSBjb250ZXh0IHdoZXJlIGl0IGRvZXMgbm90IHJlZmVyIHRvIGEgcmVzb3VyY2UgdGhhdCBsb2FkcyBjb2RlLiBDdXJyZW50bHlcbiAgICAvLyB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICAgIFVSTDogJ3VybCcsXG5cbiAgICAvLyBSRVNPVVJDRV9VUkwgaXMgYSBzdWJ0eXBlIG9mIFVSTCB1c2VkIHdoZXJlIHRoZSByZWZlcnJlZC10byByZXNvdXJjZSBjb3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICAgIC8vIGNvZGUuIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMgYmluZGluZywgdGVtcGxhdGVVcmwpXG4gICAgUkVTT1VSQ0VfVVJMOiAncmVzb3VyY2VVcmwnLFxuXG4gICAgLy8gU2NyaXB0LiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgICBKUzogJ2pzJ1xuICB9O1xuXG4gIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9sbG93LlxuXG4gIHZhciBVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAgPSAvXyhbYS16XSkvZztcblxuICBmdW5jdGlvbiBzbmFrZVRvQ2FtZWwobmFtZSkge1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoVU5ERVJTQ09SRV9MT1dFUkNBU0VfUkVHRVhQLCBmbkNhbWVsQ2FzZVJlcGxhY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSB7XG4gICAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykge1xuICAgICAgcmV0dXJuIG1hdGNoZXI7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyhtYXRjaGVyKSkge1xuICAgICAgLy8gU3RyaW5ncyBtYXRjaCBleGFjdGx5IGV4Y2VwdCBmb3IgMiB3aWxkY2FyZHMgLSAnKicgYW5kICcqKicuXG4gICAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAgIC8vICcqKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIChsaWtlIC4qIGluIGEgUmVnRXhwKS5cbiAgICAgIC8vIE1vcmUgdGhhbiAyIConcyByYWlzZXMgYW4gZXJyb3IgYXMgaXQncyBpbGwgZGVmaW5lZC5cbiAgICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXdjYXJkJywgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICAgIH1cbiAgICAgIG1hdGNoZXIgPSBlc2NhcGVGb3JSZWdleHAobWF0Y2hlcikucmVwbGFjZSgvXFxcXFxcKlxcXFxcXCovZywgJy4qJykucmVwbGFjZSgvXFxcXFxcKi9nLCAnW146Ly4/JjtdKicpO1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlciArICckJyk7XG4gICAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkge1xuICAgICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgICAvLyBNYXRjaCBlbnRpcmUgVVJMIC8gZGlzYWxsb3cgcGFydGlhbCBtYXRjaGVzLlxuICAgICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpXG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJywgJ01hdGNoZXJzIG1heSBvbmx5IGJlIFwic2VsZlwiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGp1c3RNYXRjaGVycyhtYXRjaGVycykge1xuICAgIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107XG4gICAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICAgIGZvckVhY2gobWF0Y2hlcnMsIGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICAgIGFkanVzdGVkTWF0Y2hlcnMucHVzaChhZGp1c3RNYXRjaGVyKG1hdGNoZXIpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRqdXN0ZWRNYXRjaGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gICAqIENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9IHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cbiAgICpcbiAgICogRm9yIGFuIG92ZXJ2aWV3IG9mIHRoaXMgc2VydmljZSBhbmQgdGhlIGZ1bmN0aW9ubmFsaXR5IGl0IHByb3ZpZGVzIGluIEFuZ3VsYXJKUywgc2VlIHRoZSBtYWluXG4gICAqIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlIFNDRX0uIFRoZSBjdXJyZW50IHBhZ2UgaXMgdGFyZ2V0ZWQgZm9yIGRldmVsb3BlcnMgd2hvIG5lZWQgdG8gYWx0ZXIgaG93XG4gICAqIFNDRSB3b3JrcyBpbiB0aGVpciBhcHBsaWNhdGlvbiwgd2hpY2ggc2hvdWxkbid0IGJlIG5lZWRlZCBpbiBtb3N0IGNhc2VzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAqIEFuZ3VsYXJKUyBzdHJvbmdseSByZWxpZXMgb24gY29udGV4dHVhbCBlc2NhcGluZyBmb3IgdGhlIHNlY3VyaXR5IG9mIGJpbmRpbmdzOiBkaXNhYmxpbmcgb3JcbiAgICogbW9kaWZ5aW5nIHRoaXMgbWlnaHQgY2F1c2UgY3Jvc3Mgc2l0ZSBzY3JpcHRpbmcgKFhTUykgdnVsbmVyYWJpbGl0aWVzLiBGb3IgbGlicmFyaWVzIG93bmVycyxcbiAgICogY2hhbmdlcyB0byB0aGlzIHNlcnZpY2Ugd2lsbCBhbHNvIGluZmx1ZW5jZSB1c2Vycywgc28gYmUgZXh0cmEgY2FyZWZ1bCBhbmQgZG9jdW1lbnQgeW91ciBjaGFuZ2VzLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY29uZmlndXJlIG9yIG92ZXJyaWRlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gaW5zdGVhZCBvZlxuICAgKiB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gY3VzdG9taXplIHRoZSB3YXkgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgd29ya3MgaW4gQW5ndWxhckpTLiAgVGhpcyBpc1xuICAgKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICAgKiBvdmVycmlkZSAzIGNvcmUgZnVuY3Rpb25zIChgdHJ1c3RBc2AsIGBnZXRUcnVzdGVkYCBhbmQgYHZhbHVlT2ZgKSB0byByZXBsYWNlIHRoZSB3YXkgdGhpbmdzXG4gICAqIHdvcmsgYmVjYXVzZSBgJHNjZWAgZGVsZWdhdGVzIHRvIGAkc2NlRGVsZWdhdGVgIGZvciB0aGVzZSBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IHRvIGNvbmZpZ3VyZSB0aGlzIHNlcnZpY2UuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAgICogY2FuIG92ZXJyaWRlIGl0IGNvbXBsZXRlbHkgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZiBgJHNjZWAsIHRoZSBjb21tb24gY2FzZSB3b3VsZFxuICAgKiBpbnZvbHZlIGNvbmZpZ3VyaW5nIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGluc3RlYWQgYnkgc2V0dGluZ1xuICAgKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gICAqIHRlbXBsYXRlcy4gIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICAgKiAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kIHtAbGlua1xuICAgKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlclxuICAgKiBAdGhpc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gICAqICRzY2VEZWxlZ2F0ZSBzZXJ2aWNlfSwgdXNlZCBhcyBhIGRlbGVnYXRlIGZvciB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gICAqXG4gICAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICAgKiB0aGF0IHRoZSBVUkxzIHVzZWQgZm9yIHNvdXJjaW5nIEFuZ3VsYXJKUyB0ZW1wbGF0ZXMgYW5kIG90aGVyIHNjcmlwdC1ydW5uaW5nIFVSTHMgYXJlIHNhZmUgKGFsbFxuICAgKiBwbGFjZXMgdGhhdCB1c2UgdGhlIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCkuIFNlZVxuICAgKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9XG4gICAqIGFuZFxuICAgKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9LFxuICAgKlxuICAgKiBGb3IgdGhlIGdlbmVyYWwgZGV0YWlscyBhYm91dCB0aGlzIHNlcnZpY2UgaW4gQW5ndWxhciwgcmVhZCB0aGUgbWFpbiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZVxuICAgKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gICAqXG4gICAqICoqRXhhbXBsZSoqOiAgQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlLiA8YSBuYW1lPVwiZXhhbXBsZVwiPjwvYT5cbiAgICpcbiAgICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYFxuICAgKiAtIGJ1dCBzb21lIG9mIHlvdXIgdGVtcGxhdGVzIGFyZSBob3N0ZWQgb24gb3RoZXIgZG9tYWlucyB5b3UgY29udHJvbCBzdWNoIGFzXG4gICAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCwgYGh0dHA6Ly9zcnYwMi5hc3NldHMuZXhhbXBsZS5jb20vYCwgZXRjLlxuICAgKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gICAqXG4gICAqIEhlcmUgaXMgd2hhdCBhIHNlY3VyZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIHNjZW5hcmlvIG1pZ2h0IGxvb2sgbGlrZTpcbiAgICpcbiAgICogYGBgXG4gICAqICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG4gICAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAgICogICAgICAvLyBBbGxvdyBzYW1lIG9yaWdpbiByZXNvdXJjZSBsb2Fkcy5cbiAgICogICAgICAnc2VsZicsXG4gICAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gICAqICAgICAgJ2h0dHA6Ly9zcnYqLmFzc2V0cy5leGFtcGxlLmNvbS8qKidcbiAgICogICAgXSk7XG4gICAqXG4gICAqICAgIC8vIFRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3Qgc28gdGhlIG9wZW4gcmVkaXJlY3QgaGVyZSBpcyBibG9ja2VkLlxuICAgKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbXG4gICAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAgICogICAgXSk7XG4gICAqICB9KTtcbiAgICogYGBgXG4gICAqIE5vdGUgdGhhdCBhbiBlbXB0eSB3aGl0ZWxpc3Qgd2lsbCBibG9jayBldmVyeSByZXNvdXJjZSBVUkwgZnJvbSBiZWluZyBsb2FkZWQsIGFuZCB3aWxsIHJlcXVpcmVcbiAgICogeW91IHRvIG1hbnVhbGx5IG1hcmsgZWFjaCBvbmUgYXMgdHJ1c3RlZCB3aXRoIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybGAuIEhvd2V2ZXIsIHRlbXBsYXRlc1xuICAgKiByZXF1ZXN0ZWQgYnkge0BsaW5rIG5nLiR0ZW1wbGF0ZVJlcXVlc3QgJHRlbXBsYXRlUmVxdWVzdH0gdGhhdCBhcmUgcHJlc2VudCBpblxuICAgKiB7QGxpbmsgbmcuJHRlbXBsYXRlQ2FjaGUgJHRlbXBsYXRlQ2FjaGV9IHdpbGwgbm90IGdvIHRocm91Z2ggdGhpcyBjaGVjay4gSWYgeW91IGhhdmUgYSBtZWNoYW5pc21cbiAgICogdG8gcG9wdWxhdGUgeW91ciB0ZW1wbGF0ZXMgaW4gdGhhdCBjYWNoZSBhdCBjb25maWcgdGltZSwgdGhlbiBpdCBpcyBhIGdvb2QgaWRlYSB0byByZW1vdmUgJ3NlbGYnXG4gICAqIGZyb20gdGhhdCB3aGl0ZWxpc3QuIFRoaXMgaGVscHMgdG8gbWl0aWdhdGUgdGhlIHNlY3VyaXR5IGltcGFjdCBvZiBjZXJ0YWluIHR5cGVzIG9mIGlzc3VlcywgbGlrZVxuICAgKiBmb3IgaW5zdGFuY2UgYXR0YWNrZXItY29udHJvbGxlZCBgbmctaW5jbHVkZXNgLlxuICAgKi9cblxuICBmdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHtcbiAgICB0aGlzLlNDRV9DT05URVhUUyA9IFNDRV9DT05URVhUUztcblxuICAgIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXG4gICAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXG4gICAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheT19IHdoaXRlbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAgICogICAgIEZvbGxvdyB7QGxpbmsgbmcuJHNjZSNyZXNvdXJjZVVybFBhdHRlcm5JdGVtIHRoaXMgbGlua30gZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW1zXG4gICAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY3VycmVudGx5IHNldCB3aGl0ZWxpc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzL0dldHMgdGhlIHdoaXRlbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAgICpcbiAgICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5XG4gICAgICogc2FtZSBvcmlnaW4gcmVzb3VyY2UgcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAqICoqTm90ZToqKiB0aGUgZGVmYXVsdCB3aGl0ZWxpc3Qgb2YgJ3NlbGYnIGlzIG5vdCByZWNvbW1lbmRlZCBpZiB5b3VyIGFwcCBzaGFyZXMgaXRzIG9yaWdpblxuICAgICAqIHdpdGggb3RoZXIgYXBwcyEgSXQgaXMgYSBnb29kIGlkZWEgdG8gbGltaXQgaXQgdG8gb25seSB5b3VyIGFwcGxpY2F0aW9uJ3MgZGlyZWN0b3J5LlxuICAgICAqIDwvZGl2PlxuICAgICAqL1xuICAgIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3RcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuPC9wPjxwPlxuICAgICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuPC9wPjxwPlxuICAgICAqICAgICBUaGUgdHlwaWNhbCB1c2FnZSBmb3IgdGhlIGJsYWNrbGlzdCBpcyB0byAqKmJsb2NrXG4gICAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICAgKiAgICAgdGhlc2Ugd291bGQgb3RoZXJ3aXNlIGJlIHRydXN0ZWQgYnV0IGFjdHVhbGx5IHJldHVybiBjb250ZW50IGZyb20gdGhlIHJlZGlyZWN0ZWQgZG9tYWluLlxuICAgICAqICAgICA8L3A+PHA+XG4gICAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY3VycmVudGx5IHNldCBibGFja2xpc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAgICpcbiAgICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgdGhlIGVtcHR5IGFycmF5IChpLmUuIHRoZXJlXG4gICAgICogaXMgbm8gYmxhY2tsaXN0LilcbiAgICAgKi9cblxuICAgIHRoaXMucmVzb3VyY2VVcmxCbGFja2xpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc291cmNlVXJsQmxhY2tsaXN0O1xuICAgIH07XG5cbiAgICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHtcblxuICAgICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1hdGNoVXJsKG1hdGNoZXIsIHBhcnNlZFVybCkge1xuICAgICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KHVybCkge1xuICAgICAgICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZSh1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gZnJvbSB0aGUgd2hpdGVsaXN0IGFsbG93cyB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLlxuICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybEJsYWNrbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVIb2xkZXJUeXBlKEJhc2UpIHtcbiAgICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICAgIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGlmIChCYXNlKSB7XG4gICAgICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUgPSBuZXcgQmFzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gc2NlVG9TdHJpbmcoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKS50b1N0cmluZygpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaG9sZGVyVHlwZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgICBieVR5cGUgPSB7fTtcblxuICAgICAgYnlUeXBlW1NDRV9DT05URVhUUy5IVE1MXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSlNdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgYSB0cnVzdGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgY29udGV4dC4gVGhpcyB0cnVzdGVkXG4gICAgICAgKiBvYmplY3Qgd2lsbCBsYXRlciBvbiBiZSB1c2VkIGFzLWlzLCB3aXRob3V0IGFueSBzZWN1cml0eSBjaGVjaywgYnkgYmluZGluZ3Mgb3IgZGlyZWN0aXZlc1xuICAgICAgICogdGhhdCByZXF1aXJlIHRoaXMgc2VjdXJpdHkgY29udGV4dC5cbiAgICAgICAqIEZvciBpbnN0YW5jZSwgbWFya2luZyBhIHN0cmluZyBhcyB0cnVzdGVkIGZvciB0aGUgYCRzY2UuSFRNTGAgY29udGV4dCB3aWxsIGVudGlyZWx5IGJ5cGFzc1xuICAgICAgICogdGhlIHBvdGVudGlhbCBgJHNhbml0aXplYCBjYWxsIGluIGNvcnJlc3BvbmRpbmcgYCRzY2UuSFRNTGAgYmluZGluZ3Mgb3IgZGlyZWN0aXZlcywgc3VjaCBhc1xuICAgICAgICogYG5nLWJpbmQtaHRtbGAuIE5vdGUgdGhhdCBpbiBtb3N0IGNhc2VzIHlvdSB3b24ndCBuZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbjogaWYgeW91IGhhdmUgdGhlXG4gICAgICAgKiBzYW5pdGl6ZXIgbG9hZGVkLCBwYXNzaW5nIHRoZSB2YWx1ZSBpdHNlbGYgd2lsbCByZW5kZXIgYWxsIHRoZSBIVE1MIHRoYXQgZG9lcyBub3QgcG9zZSBhXG4gICAgICAgKiBzZWN1cml0eSByaXNrLlxuICAgICAgICpcbiAgICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgZ2V0VHJ1c3RlZH0gZm9yIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgY29uc3VtZSB0aG9zZVxuICAgICAgICogdHJ1c3RlZCB2YWx1ZXMsIGFuZCB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZ2VuZXJhbCBkb2N1bWVudGF0aW9uIGFib3V0IHN0cmljdCBjb250ZXh0dWFsXG4gICAgICAgKiBlc2NhcGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZSwgZS5nLiBgJHNjZS5VUkxgLFxuICAgICAgICogICAgIGAkc2NlLlJFU09VUkNFX1VSTGAsIGAkc2NlLkhUTUxgLCBgJHNjZS5KU2Agb3IgYCRzY2UuQ1NTYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHRydXN0ZWQgcmVwcmVzZW50YXRpb24gb2YgdmFsdWUsIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIGdpdmVuIGNvbnRleHQuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGw7XG4gICAgICAgIGlmICghQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSB2YWx1ZSBpbiBpbnZhbGlkIGNvbnRleHQuIENvbnRleHQ6IHswfTsgVmFsdWU6IHsxfScsIHR5cGUsIHRydXN0ZWRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRydXN0ZWRWYWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh0cnVzdGVkVmFsdWUpIHx8IHRydXN0ZWRWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsbCB0aGUgY3VycmVudCBjb250ZXh0cyBpbiBTQ0VfQ09OVEVYVFMgaGFwcGVuIHRvIGJlIHN0cmluZ3MuICBJbiBvcmRlciB0byBhdm9pZCB0cnVzdGluZ1xuICAgICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cbiAgICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXR5cGUnLCAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2ZcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgICAqIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHBhc3NlZCB0byB7QGxpbmtcbiAgICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LlxuICAgICAgICpcbiAgICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbHVlIHRoYXQgaGFkIGJlZW4gcmV0dXJuZWQgYnkge0BsaW5rXG4gICAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgaXQgbXVzdCBiZSByZXR1cm5lZCBhcy1pcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH1cbiAgICAgICAqICAgICBjYWxsIG9yIGFueXRoaW5nIGVsc2UuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIGB2YWx1ZWAgaXMgdGhlIHJlc3VsdCBvZiBzdWNoIGEgY2FsbC4gIE90aGVyd2lzZSwgcmV0dXJuc1xuICAgICAgICogICAgIGB2YWx1ZWAgdW5jaGFuZ2VkLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2YWx1ZU9mKG1heWJlVHJ1c3RlZCkge1xuICAgICAgICBpZiAobWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSkge1xuICAgICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZURlbGVnYXRlI2dldFRydXN0ZWRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFRha2VzIGFueSBpbnB1dCwgYW5kIGVpdGhlciByZXR1cm5zIGEgdmFsdWUgdGhhdCdzIHNhZmUgdG8gdXNlIGluIHRoZSBzcGVjaWZpZWQgY29udGV4dCwgb3JcbiAgICAgICAqIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgKlxuICAgICAgICogSW4gcHJhY3RpY2UsIHRoZXJlIGFyZSBzZXZlcmFsIGNhc2VzLiBXaGVuIGdpdmVuIGEgc3RyaW5nLCB0aGlzIGZ1bmN0aW9uIHJ1bnMgY2hlY2tzXG4gICAgICAgKiBhbmQgc2FuaXRpemF0aW9uIHRvIG1ha2UgaXQgc2FmZSB3aXRob3V0IHByaW9yIGFzc3VtcHRpb25zLiBXaGVuIGdpdmVuIHRoZSByZXN1bHQgb2YgYSB7QGxpbmtcbiAgICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIGl0IHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWRcbiAgICAgICAqIHZhbHVlIGlmIHRoYXQgdmFsdWUncyBjb250ZXh0IGlzIHZhbGlkIGZvciB0aGlzIGNhbGwncyBjb250ZXh0LiBGaW5hbGx5LCB0aGlzIGZ1bmN0aW9uIGNhblxuICAgICAgICogYWxzbyB0aHJvdyB3aGVuIHRoZXJlIGlzIG5vIHdheSB0byB0dXJuIGBtYXliZVRydXN0ZWRgIGluIGEgc2FmZSB2YWx1ZSAoZS5nLiwgbm8gc2FuaXRpemF0aW9uXG4gICAgICAgKiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZCAoc3VjaCBhcyBgJHNjZS5IVE1MYCkuXG4gICAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbCwgb3IgYW55dGhpbmcgZWxzZSAod2hpY2ggd2lsbCBub3QgYmUgY29uc2lkZXJlZCB0cnVzdGVkLilcbiAgICAgICAqIEByZXR1cm4geyp9IEEgdmVyc2lvbiBvZiB0aGUgdmFsdWUgdGhhdCdzIHNhZmUgdG8gdXNlIGluIHRoZSBnaXZlbiBjb250ZXh0LCBvciB0aHJvd3MgYW5cbiAgICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRUcnVzdGVkKHR5cGUsIG1heWJlVHJ1c3RlZCkge1xuICAgICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbDtcbiAgICAgICAgLy8gSWYgbWF5YmVUcnVzdGVkIGlzIGEgdHJ1c3RlZCBjbGFzcyBpbnN0YW5jZSBvciBzdWJjbGFzcyBpbnN0YW5jZSwgdGhlbiB1bndyYXAgYW5kIHJldHVyblxuICAgICAgICAvLyBhcy1pcy5cbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgaWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgbWF5IGVpdGhlciBtYWtlIGl0IHNhZmUsIG9yIHRocm93IGFuIGV4Y2VwdGlvbi4gVGhpc1xuICAgICAgICAvLyBkZXBlbmRzIG9uIHRoZSBjb250ZXh0OiBzb21lIGFyZSBzYW5pdGl6YXRpYmxlIChIVE1MKSwgc29tZSB1c2Ugd2hpdGVsaXN0cyAoUkVTT1VSQ0VfVVJMKSxcbiAgICAgICAgLy8gc29tZSBhcmUgaW1wb3NzaWJsZSB0byBkbyAoSlMpLiBUaGlzIHN0ZXAgaXNuJ3QgaW1wbGVtZW50ZWQgZm9yIENTUyBhbmQgVVJMLCBhcyBBbmd1bGFySlNcbiAgICAgICAgLy8gaGFzIG5vIGNvcnJlc3BvbmRpbmcgc2lua3MuXG4gICAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgICAgLy8gUkVTT1VSQ0VfVVJMIHVzZXMgYSB3aGl0ZWxpc3QuXG4gICAgICAgICAgaWYgKGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kobWF5YmVUcnVzdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaW5zZWN1cmwnLCAnQmxvY2tlZCBsb2FkaW5nIHJlc291cmNlIGZyb20gdXJsIG5vdCBhbGxvd2VkIGJ5ICRzY2VEZWxlZ2F0ZSBwb2xpY3kuICBVUkw6IHswfScsIG1heWJlVHJ1c3RlZC50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLkhUTUwpIHtcbiAgICAgICAgICAvLyBodG1sU2FuaXRpemVyIHRocm93cyBpdHMgb3duIGVycm9yIHdoZW4gbm8gc2FuaXRpemVyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICByZXR1cm4gaHRtbFNhbml0aXplcihtYXliZVRydXN0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlZmF1bHQgZXJyb3Igd2hlbiB0aGUgJHNjZSBzZXJ2aWNlIGhhcyBubyB3YXkgdG8gbWFrZSB0aGUgaW5wdXQgc2FmZS5cbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgdHJ1c3RBczogdHJ1c3RBcyxcbiAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCxcbiAgICAgICAgdmFsdWVPZjogdmFsdWVPZiB9O1xuICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkc2NlUHJvdmlkZXJcbiAgICogQHRoaXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICAgKiAtICAgZW5hYmxlL2Rpc2FibGUgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaW4gYSBtb2R1bGVcbiAgICogLSAgIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHdpdGggYSBjdXN0b20gZGVsZWdhdGVcbiAgICpcbiAgICogUmVhZCBtb3JlIGFib3V0IHtAbGluayBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRzY2VcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gICAqXG4gICAqICMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmdcbiAgICpcbiAgICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaXMgYSBtb2RlIGluIHdoaWNoIEFuZ3VsYXJKUyBjb25zdHJhaW5zIGJpbmRpbmdzIHRvIG9ubHkgcmVuZGVyXG4gICAqIHRydXN0ZWQgdmFsdWVzLiBJdHMgZ29hbCBpcyB0byBhc3Npc3QgaW4gd3JpdGluZyBjb2RlIGluIGEgd2F5IHRoYXQgKGEpIGlzIHNlY3VyZSBieSBkZWZhdWx0LCBhbmRcbiAgICogKGIpIG1ha2VzIGF1ZGl0aW5nIGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgc3VjaCBhcyBYU1MsIGNsaWNramFja2luZywgZXRjLiBhIGxvdCBlYXNpZXIuXG4gICAqXG4gICAqICMjIE92ZXJ2aWV3XG4gICAqXG4gICAqIFRvIHN5c3RlbWF0aWNhbGx5IGJsb2NrIFhTUyBzZWN1cml0eSBidWdzLCBBbmd1bGFySlMgdHJlYXRzIGFsbCB2YWx1ZXMgYXMgdW50cnVzdGVkIGJ5IGRlZmF1bHQgaW5cbiAgICogSFRNTCBvciBzZW5zaXRpdmUgVVJMIGJpbmRpbmdzLiBXaGVuIGJpbmRpbmcgdW50cnVzdGVkIHZhbHVlcywgQW5ndWxhckpTIHdpbGwgYXV0b21hdGljYWxseVxuICAgKiBydW4gc2VjdXJpdHkgY2hlY2tzIG9uIHRoZW0gKHNhbml0aXphdGlvbnMsIHdoaXRlbGlzdHMsIGRlcGVuZGluZyBvbiBjb250ZXh0KSwgb3IgdGhyb3cgd2hlbiBpdFxuICAgKiBjYW5ub3QgZ3VhcmFudGVlIHRoZSBzZWN1cml0eSBvZiB0aGUgcmVzdWx0LiBUaGF0IGJlaGF2aW9yIGRlcGVuZHMgc3Ryb25nbHkgb24gY29udGV4dHM6IEhUTUxcbiAgICogY2FuIGJlIHNhbml0aXplZCwgYnV0IHRlbXBsYXRlIFVSTHMgY2Fubm90LCBmb3IgaW5zdGFuY2UuXG4gICAqXG4gICAqIFRvIGlsbHVzdHJhdGUgdGhpcywgY29uc2lkZXIgdGhlIGBuZy1iaW5kLWh0bWxgIGRpcmVjdGl2ZS4gSXQgcmVuZGVycyBpdHMgdmFsdWUgZGlyZWN0bHkgYXMgSFRNTDpcbiAgICogd2UgY2FsbCB0aGF0IHRoZSAqY29udGV4dCouIFdoZW4gZ2l2ZW4gYW4gdW50cnVzdGVkIGlucHV0LCBBbmd1bGFySlMgd2lsbCBhdHRlbXB0IHRvIHNhbml0aXplIGl0XG4gICAqIGJlZm9yZSByZW5kZXJpbmcgaWYgYSBzYW5pdGl6ZXIgaXMgYXZhaWxhYmxlLCBhbmQgdGhyb3cgb3RoZXJ3aXNlLiBUbyBieXBhc3Mgc2FuaXRpemF0aW9uIGFuZFxuICAgKiByZW5kZXIgdGhlIGlucHV0IGFzLWlzLCB5b3Ugd2lsbCBuZWVkIHRvIG1hcmsgaXQgYXMgdHJ1c3RlZCBmb3IgdGhhdCBjb250ZXh0IGJlZm9yZSBhdHRlbXB0aW5nXG4gICAqIHRvIGJpbmQgaXQuXG4gICAqXG4gICAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFySlMgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiAjIyBJbiBwcmFjdGljZVxuICAgKlxuICAgKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gICAqXG4gICAqIGBgYFxuICAgKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gICAqIDxkaXYgbmctYmluZC1odG1sPVwidXNlckh0bWxcIj48L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IGBuZy1iaW5kLWh0bWxgIGlzIGJvdW5kIHRvIGB1c2VySHRtbGAgY29udHJvbGxlZCBieSB0aGUgdXNlci4gIFdpdGggU0NFXG4gICAqIGRpc2FibGVkLCB0aGlzIGFwcGxpY2F0aW9uIGFsbG93cyB0aGUgdXNlciB0byByZW5kZXIgYXJiaXRyYXJ5IEhUTUwgaW50byB0aGUgRElWLCB3aGljaCB3b3VsZFxuICAgKiBiZSBhbiBYU1Mgc2VjdXJpdHkgYnVnLiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2dcbiAgICogYXJ0aWNsZXMsIGV0Yy4gdmlhIGJpbmRpbmdzLiAoSFRNTCBpcyBqdXN0IG9uZSBleGFtcGxlIG9mIGEgY29udGV4dCB3aGVyZSByZW5kZXJpbmcgdXNlclxuICAgKiBjb250cm9sbGVkIGlucHV0IGNyZWF0ZXMgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAgICpcbiAgICogRm9yIHRoZSBjYXNlIG9mIEhUTUwsIHlvdSBtaWdodCB1c2UgYSBsaWJyYXJ5LCBlaXRoZXIgb24gdGhlIGNsaWVudCBzaWRlLCBvciBvbiB0aGUgc2VydmVyIHNpZGUsXG4gICAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogSG93IHdvdWxkIHlvdSBlbnN1cmUgdGhhdCBldmVyeSBwbGFjZSB0aGF0IHVzZWQgdGhlc2UgdHlwZXMgb2YgYmluZGluZ3Mgd2FzIGJvdW5kIHRvIGEgdmFsdWUgdGhhdFxuICAgKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gICAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxuICAgKiBwcm9wZXJ0aWVzL2ZpZWxkcyBhbmQgZm9yZ290IHRvIHVwZGF0ZSB0aGUgYmluZGluZyB0byB0aGUgc2FuaXRpemVkIHZhbHVlP1xuICAgKlxuICAgKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgQW5ndWxhckpTIG1ha2VzIHN1cmUgYmluZGluZ3MgZ28gdGhyb3VnaCB0aGF0IHNhbml0aXphdGlvbiwgb3JcbiAgICogYW55IHNpbWlsYXIgdmFsaWRhdGlvbiBwcm9jZXNzLCB1bmxlc3MgdGhlcmUncyBhIGdvb2QgcmVhc29uIHRvIHRydXN0IHRoZSBnaXZlbiB2YWx1ZSBpbiB0aGlzXG4gICAqIGNvbnRleHQuICBUaGF0IHRydXN0IGlzIGZvcm1hbGl6ZWQgd2l0aCBhIGZ1bmN0aW9uIGNhbGwuIFRoaXMgbWVhbnMgdGhhdCBhcyBhIGRldmVsb3BlciwgeW91XG4gICAqIGNhbiBhc3N1bWUgYWxsIHVudHJ1c3RlZCBiaW5kaW5ncyBhcmUgc2FmZS4gVGhlbiwgdG8gYXVkaXQgeW91ciBjb2RlIGZvciBiaW5kaW5nIHNlY3VyaXR5IGlzc3VlcyxcbiAgICogeW91IGp1c3QgbmVlZCB0byBlbnN1cmUgdGhlIHZhbHVlcyB5b3UgbWFyayBhcyB0cnVzdGVkIGluZGVlZCBhcmUgc2FmZSAtIGJlY2F1c2UgdGhleSB3ZXJlXG4gICAqIHJlY2VpdmVkIGZyb20geW91ciBzZXJ2ZXIsIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gWW91IGNhbiBvcmdhbml6ZSB5b3VyIGNvZGViYXNlIHRvXG4gICAqIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwcyBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLlxuICAgKiBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUEkgZXhwb3NlZCBieSB0aGF0IGNvZGUgZG9lc24ndCBtYXJrdXAgYXJiaXRyYXJ5IHZhbHVlcyBhcyBzYWZlIHRoZW5cbiAgICogYmVjb21lcyBhIG1vcmUgbWFuYWdlYWJsZSB0YXNrLlxuICAgKlxuICAgKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc31cbiAgICogKGFuZCBzaG9ydGhhbmQgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0b1xuICAgKiBidWlsZCB0aGUgdHJ1c3RlZCB2ZXJzaW9ucyBvZiB5b3VyIHZhbHVlcy5cbiAgICpcbiAgICogIyMgSG93IGRvZXMgaXQgd29yaz9cbiAgICpcbiAgICogSW4gcHJpdmlsZWdlZCBjb250ZXh0cywgZGlyZWN0aXZlcyBhbmQgY29kZSB3aWxsIGJpbmQgdG8gdGhlIHJlc3VsdCBvZiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkXG4gICAqICRzY2UuZ2V0VHJ1c3RlZChjb250ZXh0LCB2YWx1ZSl9IHJhdGhlciB0aGFuIHRvIHRoZSB2YWx1ZSBkaXJlY3RseS4gIFRoaW5rIG9mIHRoaXMgZnVuY3Rpb24gYXNcbiAgICogYSB3YXkgdG8gZW5mb3JjZSB0aGUgcmVxdWlyZWQgc2VjdXJpdHkgY29udGV4dCBpbiB5b3VyIGRhdGEgc2luay4gRGlyZWN0aXZlcyB1c2Uge0BsaW5rXG4gICAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXNcbiAgICogdGhlIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfSBiZWhpbmQgdGhlIHNjZW5lcyBvbiBub24tY29uc3RhbnQgbGl0ZXJhbHMuIEFsc28sXG4gICAqIHdoZW4gYmluZGluZyB3aXRob3V0IGRpcmVjdGl2ZXMsIEFuZ3VsYXJKUyB3aWxsIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQgb2YgeW91ciBiaW5kaW5nc1xuICAgKiBhdXRvbWF0aWNhbGx5LlxuICAgKlxuICAgKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcbiAgICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcbiAgICogc2ltcGxpZmllZCk6XG4gICAqXG4gICAqIGBgYFxuICAgKiB2YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICogICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAqICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7XG4gICAqICAgICB9KTtcbiAgICogICB9O1xuICAgKiB9XTtcbiAgICogYGBgXG4gICAqXG4gICAqICMjIEltcGFjdCBvbiBsb2FkaW5nIHRlbXBsYXRlc1xuICAgKlxuICAgKiBUaGlzIGFwcGxpZXMgYm90aCB0byB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nLWluY2x1ZGVgfSBkaXJlY3RpdmUgYXMgd2VsbCBhc1xuICAgKiBgdGVtcGxhdGVVcmxgJ3Mgc3BlY2lmaWVkIGJ5IHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIEFuZ3VsYXIgb25seSBsb2FkcyB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZSBhcHBsaWNhdGlvblxuICAgKiBkb2N1bWVudC4gIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gdGhlIHRlbXBsYXRlIFVSTC4gIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3JcbiAgICogcHJvdG9jb2xzLCB5b3UgbWF5IGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0XG4gICAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS5cbiAgICpcbiAgICogKlBsZWFzZSBub3RlKjpcbiAgICogVGhlIGJyb3dzZXInc1xuICAgKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICAgKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pXG4gICAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHlcbiAgICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICAgKiB3b24ndCB3b3JrIG9uIGFsbCBicm93c2Vycy4gIEFsc28sIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYGZpbGU6Ly9gIFVSTCBkb2VzIG5vdCB3b3JrIG9uIHNvbWVcbiAgICogYnJvd3NlcnMuXG4gICAqXG4gICAqICMjIFRoaXMgZmVlbHMgbGlrZSB0b28gbXVjaCBvdmVyaGVhZFxuICAgKlxuICAgKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAgICpcbiAgICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0b1xuICAgKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKGUuZy5cbiAgICogYDxkaXYgbmctYmluZC1odG1sPVwiJzxiPmltcGxpY2l0bHkgdHJ1c3RlZDwvYj4nXCI+PC9kaXY+YCkganVzdCB3b3Jrcy4gVGhlIGAkc2NlRGVsZWdhdGVgIHdpbGxcbiAgICogYWxzbyB1c2UgdGhlIGAkc2FuaXRpemVgIHNlcnZpY2UgaWYgaXQgaXMgYXZhaWxhYmxlIHdoZW4gYmluZGluZyB1bnRydXN0ZWQgdmFsdWVzIHRvXG4gICAqIGAkc2NlLkhUTUxgIGNvbnRleHQuIEFuZ3VsYXJKUyBwcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBpbiBgYW5ndWxhci1zYW5pdGl6ZS5qc2AsIGFuZCBpZiB5b3VcbiAgICogd2lzaCB0byB1c2UgaXQsIHlvdSB3aWxsIGFsc28gbmVlZCB0byBkZXBlbmQgb24gdGhlIHtAbGluayBuZ1Nhbml0aXplIGBuZ1Nhbml0aXplYH0gbW9kdWxlIGluXG4gICAqIHlvdXIgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIFRoZSBpbmNsdWRlZCB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gY29tZXMgd2l0aCBzYW5lIGRlZmF1bHRzIHRvIGFsbG93IHlvdSB0byBsb2FkXG4gICAqIHRlbXBsYXRlcyBpbiBgbmctaW5jbHVkZWAgZnJvbSB5b3VyIGFwcGxpY2F0aW9uJ3MgZG9tYWluIHdpdGhvdXQgaGF2aW5nIHRvIGV2ZW4ga25vdyBhYm91dCBTQ0UuXG4gICAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAgICogc2VydmVkIGRvY3VtZW50LiAgWW91IGNhbiBjaGFuZ2UgdGhlc2UgYnkgc2V0dGluZyB5b3VyIG93biBjdXN0b20ge0BsaW5rXG4gICAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdHN9IGFuZCB7QGxpbmtcbiAgICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAgICpcbiAgICogVGhpcyBzaWduaWZpY2FudGx5IHJlZHVjZXMgdGhlIG92ZXJoZWFkLiAgSXQgaXMgZmFyIGVhc2llciB0byBwYXkgdGhlIHNtYWxsIG92ZXJoZWFkIGFuZCBoYXZlIGFuXG4gICAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gICAqIHNlY3VyaXR5IG9udG8gYW4gYXBwbGljYXRpb24gbGF0ZXIuXG4gICAqXG4gICAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAgICogIyMgV2hhdCB0cnVzdGVkIGNvbnRleHQgdHlwZXMgYXJlIHN1cHBvcnRlZD9cbiAgICpcbiAgICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gSWYgYW4gdW5zYWZlIHZhbHVlIGlzIGVuY291bnRlcmVkLCBhbmQgdGhlIHtAbGluayBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UgaXMgYXZhaWxhYmxlIChpbXBsZW1lbnRlZCBieSB0aGUge0BsaW5rIG5nU2FuaXRpemUgbmdTYW5pdGl6ZX0gbW9kdWxlKSB0aGlzIHdpbGwgc2FuaXRpemUgdGhlIHZhbHVlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuIHxcbiAgICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHksIG5vIGJpbmRpbmdzIHJlcXVpcmUgdGhpcyBjb250ZXh0LiBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAgICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gLCBgPGltZyBzcmM9YCwgYW5kIHNvbWUgb3RoZXJzIHNhbml0aXplIHRoZWlyIHVybHMgYW5kIGRvbid0IGNvbnN0aXR1dGUgYW4gU0NFIGNvbnRleHQuKSB8XG4gICAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AsIGBWSURFT2AsIGBBVURJT2AsIGBTT1VSQ0VgLCBhbmQgYFRSQUNLYCAoZS5nLiBgSUZSQU1FYCwgYE9CSkVDVGAsIGV0Yy4pICA8YnI+PGJyPk5vdGUgdGhhdCBgJHNjZS5SRVNPVVJDRV9VUkxgIG1ha2VzIGEgc3Ryb25nZXIgc3RhdGVtZW50IGFib3V0IHRoZSBVUkwgdGhhbiBgJHNjZS5VUkxgIGRvZXMgKGl0J3Mgbm90IGp1c3QgdGhlIFVSTCB0aGF0IG1hdHRlcnMsIGJ1dCBhbHNvIHdoYXQgaXMgYXQgdGhlIGVuZCBvZiBpdCksIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8XG4gICAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5LCBubyBiaW5kaW5ncyByZXF1aXJlIHRoaXMgY29udGV4dC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICAgKlxuICAgKlxuICAgKiBCZSBhd2FyZSB0aGF0IGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAgICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uIFRoZXJlJ3Mgbm8gQ1NTLSwgVVJMLSwgb3IgSlMtY29udGV4dCBiaW5kaW5nc1xuICAgKiBpbiBBbmd1bGFySlMgY3VycmVudGx5LCBzbyB0aGVpciBjb3JyZXNwb25kaW5nIGAkc2NlLnRydXN0QXNgIGZ1bmN0aW9ucyBhcmVuJ3QgdXNlZnVsIHlldC4gVGhpc1xuICAgKiBtaWdodCBldm9sdmUuXG4gICAqXG4gICAqICMjIEZvcm1hdCBvZiBpdGVtcyBpbiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgcmVzb3VyY2VVcmxXaGl0ZWxpc3R9L3tAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBCbGFja2xpc3R9IDxhIG5hbWU9XCJyZXNvdXJjZVVybFBhdHRlcm5JdGVtXCI+PC9hPlxuICAgKlxuICAgKiAgRWFjaCBlbGVtZW50IGluIHRoZXNlIGFycmF5cyBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICAgKlxuICAgKiAgLSAqKidzZWxmJyoqXG4gICAqICAgIC0gVGhlIHNwZWNpYWwgKipzdHJpbmcqKiwgYCdzZWxmJ2AsIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgYWxsIFVSTHMgb2YgdGhlICoqc2FtZVxuICAgKiAgICAgIGRvbWFpbioqIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB1c2luZyB0aGUgKipzYW1lIHByb3RvY29sKiouXG4gICAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAgICogICAgLSBUaGUgc3RyaW5nIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgZnVsbCAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlXG4gICAqICAgICAgYmVpbmcgdGVzdGVkIChzdWJzdHJpbmcgbWF0Y2hlcyBhcmUgbm90IGdvb2QgZW5vdWdoLilcbiAgICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gICAqICAgICAgbWF0Y2ggdGhlbXNlbHZlcy5cbiAgICogICAgLSBgKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mIGFueSBjaGFyYWN0ZXIgb3RoZXIgdGhhbiBvbmUgb2YgdGhlIGZvbGxvd2luZyA2XG4gICAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICAgKiAgICAgIGluIGEgd2hpdGVsaXN0LlxuICAgKiAgICAtIGAqKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mICphbnkqIGNoYXJhY3Rlci4gIEFzIHN1Y2gsIGl0J3Mgbm90XG4gICAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAgICogICAgICBodHRwOi8vKiouZXhhbXBsZS5jb20vIHdvdWxkIG1hdGNoIGh0dHA6Ly9ldmlsLmNvbS8/aWdub3JlPS5leGFtcGxlLmNvbS8gYW5kIHRoYXQgbWlnaHRcbiAgICogICAgICBub3QgaGF2ZSBiZWVuIHRoZSBpbnRlbnRpb24uKSAgSXRzIHVzYWdlIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgcGF0aCBpcyBvay4gIChlLmcuXG4gICAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICAgKiAgLSAqKlJlZ0V4cCoqICgqc2VlIGNhdmVhdCBiZWxvdyopXG4gICAqICAgIC0gKkNhdmVhdCo6ICBXaGlsZSByZWd1bGFyIGV4cHJlc3Npb25zIGFyZSBwb3dlcmZ1bCBhbmQgb2ZmZXIgZ3JlYXQgZmxleGliaWxpdHksICB0aGVpciBzeW50YXhcbiAgICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICAgKiAgICAgIGFjY2lkZW50YWxseSBpbnRyb2R1Y2UgYSBidWcgd2hlbiBvbmUgdXBkYXRlcyBhIGNvbXBsZXggZXhwcmVzc2lvbiAoaW1obywgYWxsIHJlZ2V4ZXMgc2hvdWxkXG4gICAqICAgICAgaGF2ZSBnb29kIHRlc3QgY292ZXJhZ2UpLiAgRm9yIGluc3RhbmNlLCB0aGUgdXNlIG9mIGAuYCBpbiB0aGUgcmVnZXggaXMgY29ycmVjdCBvbmx5IGluIGFcbiAgICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAgICogICAgICBzdWJkb21haW4gY291bGQgYmUgbWF0Y2hlZCBhZ2FpbnN0IGEgYDpgIG9yIGxpdGVyYWwgYC5gIHRoYXQgd2FzIGxpa2VseSBub3QgaW50ZW5kZWQuICAgSXRcbiAgICogICAgICBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBzdHJpbmcgcGF0dGVybnMgYW5kIG9ubHkgZmFsbCBiYWNrIHRvIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAgICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICAgKiAgICAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBSZWdFeHAgKGkuZS4gbm90IGEgc3RyaW5nLikgIEl0IGlzXG4gICAqICAgICAgbWF0Y2hlZCBhZ2FpbnN0IHRoZSAqKmVudGlyZSoqICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2UgYmVpbmcgdGVzdGVkXG4gICAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICAgKiAgICAgIHByZXNlbnQgb24gdGhlIFJlZ0V4cCAoc3VjaCBhcyBtdWx0aWxpbmUsIGdsb2JhbCwgaWdub3JlQ2FzZSkgYXJlIGlnbm9yZWQuXG4gICAqICAgIC0gSWYgeW91IGFyZSBnZW5lcmF0aW5nIHlvdXIgSmF2YVNjcmlwdCBmcm9tIHNvbWUgb3RoZXIgdGVtcGxhdGluZyBlbmdpbmUgKG5vdFxuICAgKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICAgKiAgICAgIHJlbWVtYmVyIHRvIGVzY2FwZSB5b3VyIHJlZ3VsYXIgZXhwcmVzc2lvbiAoYW5kIGJlIGF3YXJlIHRoYXQgeW91IG1pZ2h0IG5lZWQgbW9yZSB0aGFuXG4gICAqICAgICAgb25lIGxldmVsIG9mIGVzY2FwaW5nIGRlcGVuZGluZyBvbiB5b3VyIHRlbXBsYXRpbmcgZW5naW5lIGFuZCB0aGUgd2F5IHlvdSBpbnRlcnBvbGF0ZWRcbiAgICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gICAqICAgICAgZW5vdWdoIGJlZm9yZSBjb2RpbmcgeW91ciBvd24uICBFLmcuIFJ1YnkgaGFzXG4gICAqICAgICAgW1JlZ2V4cC5lc2NhcGUoc3RyKV0oaHR0cDovL3d3dy5ydWJ5LWRvYy5vcmcvY29yZS0yLjAuMC9SZWdleHAuaHRtbCNtZXRob2QtYy1lc2NhcGUpXG4gICAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAgICogICAgICBKYXZhc2NyaXB0IGxhY2tzIGEgc2ltaWxhciBidWlsdCBpbiBmdW5jdGlvbiBmb3IgZXNjYXBpbmcuICBUYWtlIGEgbG9vayBhdCBHb29nbGVcbiAgICogICAgICBDbG9zdXJlIGxpYnJhcnkncyBbZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHMpXShcbiAgICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICAgKlxuICAgKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGZvciBhbiBleGFtcGxlLlxuICAgKlxuICAgKiAjIyBTaG93IG1lIGFuIGV4YW1wbGUgdXNpbmcgU0NFLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCIgbmFtZT1cInNjZS1zZXJ2aWNlXCI+XG4gICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQXBwQ29udHJvbGxlciBhcyBteUN0cmxcIj5cbiAgICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICAgKiAgICAgPGI+VXNlciBjb21tZW50czwvYj48YnI+XG4gICAqICAgICBCeSBkZWZhdWx0LCBIVE1MIHRoYXQgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkIChlLmcuIEFsaWNlJ3MgY29tbWVudCkgaXMgc2FuaXRpemVkIHdoZW5cbiAgICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICAgKiAgICAgZXhwbG9pdC5cbiAgICogICAgIDxkaXYgY2xhc3M9XCJ3ZWxsXCI+XG4gICAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICAgKiAgICAgICAgIDxiPnt7dXNlckNvbW1lbnQubmFtZX19PC9iPjpcbiAgICogICAgICAgICA8c3BhbiBuZy1iaW5kLWh0bWw9XCJ1c2VyQ29tbWVudC5odG1sQ29tbWVudFwiIGNsYXNzPVwiaHRtbENvbW1lbnRcIj48L3NwYW4+XG4gICAqICAgICAgICAgPGJyPlxuICAgKiAgICAgICA8L2Rpdj5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZGl2PlxuICAgKiA8L2ZpbGU+XG4gICAqXG4gICAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICogICBhbmd1bGFyLm1vZHVsZSgnbXlTY2VBcHAnLCBbJ25nU2FuaXRpemUnXSlcbiAgICogICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckc2NlJyxcbiAgICogICAgICAgZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHtcbiAgICogICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAqICAgICAgICAgJGh0dHAuZ2V0KCd0ZXN0X2RhdGEuanNvbicsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAqICAgICAgICAgICBzZWxmLnVzZXJDb21tZW50cyA9IHJlc3BvbnNlLmRhdGE7XG4gICAqICAgICAgICAgfSk7XG4gICAqICAgICAgICAgc2VsZi5leHBsaWNpdGx5VHJ1c3RlZEh0bWwgPSAkc2NlLnRydXN0QXNIdG1sKFxuICAgKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICAgKiAgICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAgICogICAgICAgfV0pO1xuICAgKiA8L2ZpbGU+XG4gICAqXG4gICAqIDxmaWxlIG5hbWU9XCJ0ZXN0X2RhdGEuanNvblwiPlxuICAgKiBbXG4gICAqICAgeyBcIm5hbWVcIjogXCJBbGljZVwiLFxuICAgKiAgICAgXCJodG1sQ29tbWVudFwiOlxuICAgKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICAgKiAgIH0sXG4gICAqICAgeyBcIm5hbWVcIjogXCJCb2JcIixcbiAgICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAgICogICB9XG4gICAqIF1cbiAgICogPC9maWxlPlxuICAgKlxuICAgKiA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSB1bnRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJy5odG1sQ29tbWVudCcpKS5maXJzdCgpLmdldEF0dHJpYnV0ZSgnaW5uZXJIVE1MJykpXG4gICAqICAgICAgICAgICAudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqICAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdleHBsaWNpdGx5VHJ1c3RlZEh0bWwnKSkuZ2V0QXR0cmlidXRlKCdpbm5lckhUTUwnKSkudG9CZShcbiAgICogICAgICAgICAgICc8c3BhbiBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9JnF1b3Q7RXhwbGljaXRseSB0cnVzdGVkIEhUTUwgYnlwYXNzZXMgJyArXG4gICAqICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH0pO1xuICAgKiA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICpcbiAgICpcbiAgICpcbiAgICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT9cbiAgICpcbiAgICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHNcbiAgICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZFxuICAgKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0VcbiAgICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZFxuICAgKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLiBBbHNvIGRvIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGFwcC13aWRlIHNldHRpbmcsIHNvIGlmXG4gICAqIHlvdSBhcmUgd3JpdGluZyBhIGxpYnJhcnksIHlvdSB3aWxsIGNhdXNlIHNlY3VyaXR5IGJ1Z3MgYXBwbGljYXRpb25zIHVzaW5nIGl0LlxuICAgKlxuICAgKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICAgKlxuICAgKiBgYGBcbiAgICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICAgKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IVxuICAgKiAgIC8vIERvIG5vdCB1c2UgaW4gbmV3IHByb2plY3RzIG9yIGxpYnJhcmllcy5cbiAgICogICAkc2NlUHJvdmlkZXIuZW5hYmxlZChmYWxzZSk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICovXG5cbiAgZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xuICAgIHZhciBlbmFibGVkID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlUHJvdmlkZXIjZW5hYmxlZFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiBwcm92aWRlZCwgdGhlbiBlbmFibGVzL2Rpc2FibGVzIFNDRSBhcHBsaWNhdGlvbi13aWRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICB9O1xuXG4gICAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAgICpcbiAgICAgKiBUaGUgQVBJIGNvbnRyYWN0IGZvciB0aGUgU0NFIGRlbGVnYXRlXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIFRoZSBTQ0UgZGVsZWdhdGUgb2JqZWN0IG11c3QgcHJvdmlkZSB0aGUgZm9sbG93aW5nIDMgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAgICogICAgIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gdGVsbCB0aGUgU0NFIHNlcnZpY2UgdGhhdCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgT0sgdG8gdXNlIGluIHRoZVxuICAgICAqICAgICBjb250ZXh0cyBzcGVjaWZpZWQgYnkgY29udGV4dEVudW0uICBJdCBtdXN0IHJldHVybiBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5XG4gICAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIC0gdmFsdWVPZih2YWx1ZSlcbiAgICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgICAqICAgICBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBpbnB1dCB2YWx1ZSB0byB0cnVzdEFzLiAgQmFzaWNhbGx5LCBpZlxuICAgICAqICAgICB0cnVzdEFzIGlzIHdyYXBwaW5nIHRoZSBnaXZlbiB2YWx1ZXMgaW50byBzb21lIHR5cGUsIHRoaXMgb3BlcmF0aW9uIHVud3JhcHMgaXQgd2hlbiBnaXZlblxuICAgICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAgICpcbiAgICAgKiAtIGdldFRydXN0ZWQoY29udGV4dEVudW0sIHZhbHVlKVxuICAgICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICAgKiAgICAgY29udGV4dEVudW0gb3IgdGhyb3cgYW5kIGV4Y2VwdGlvbiBvdGhlcndpc2UuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgICAqIG9wYXF1ZSBvciB3cmFwcGVkIGluIHNvbWUgaG9sZGVyIG9iamVjdC4gIFRoYXQgaGFwcGVucyB0byBiZSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuICBGb3JcbiAgICAgKiBpbnN0YW5jZSwgYW4gaW1wbGVtZW50YXRpb24gY291bGQgbWFpbnRhaW4gYSByZWdpc3RyeSBvZiBhbGwgdHJ1c3RlZCBvYmplY3RzIGJ5IGNvbnRleHQuICBJblxuICAgICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICAgKiByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IHBhc3NlZCBpbiBpZiBpdCB3YXMgZm91bmQgaW4gdGhlIHJlZ2lzdHJ5IHVuZGVyIGEgY29tcGF0aWJsZSBjb250ZXh0IG9yXG4gICAgICogdGhyb3cgYW4gZXhjZXB0aW9uIG90aGVyd2lzZS4gIEFuIGltcGxlbWVudGF0aW9uIG1pZ2h0IG9ubHkgd3JhcCB2YWx1ZXMgc29tZSBvZiB0aGUgdGltZSBiYXNlZFxuICAgICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICAgKiBjb25zdGFudHMgb3Igb2JqZWN0cyBldmVuIGlmIG5vdCB3cmFwcGVkLiAgQWxsIHN1Y2ggaW1wbGVtZW50YXRpb25zIGZ1bGZpbGwgdGhpcyBjb250cmFjdC5cbiAgICAgKlxuICAgICAqXG4gICAgICogQSBub3RlIG9uIHRoZSBpbmhlcml0YW5jZSBtb2RlbCBmb3IgU0NFIGNvbnRleHRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICAgKiBpcyBwdXJlbHkgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICAgKlxuICAgICAqICAgICBnZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSkgc3VjY2VlZGluZyBpbXBsaWVzIHRoYXQgZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpXG4gICAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgICAqXG4gICAgICogSW5oZXJpdGFuY2UgaGFwcGVucyB0byBjYXB0dXJlIHRoaXMgaW4gYSBuYXR1cmFsIHdheS4gSW4gc29tZSBmdXR1cmUsIHdlIG1heSBub3QgdXNlXG4gICAgICogaW5oZXJpdGFuY2UgYW55bW9yZS4gVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG9cbiAgICAgKiBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC5cbiAgICAgKi9cblxuICAgIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uICgkcGFyc2UsICRzY2VEZWxlZ2F0ZSkge1xuICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93XG4gICAgICAvLyB0aGUgXCJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbilcIiBzeW50YXggd2hpY2ggaXMgaW5zZWN1cmUuXG4gICAgICBpZiAoZW5hYmxlZCAmJiBtc2llIDwgOCkge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgKyAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjZSA9IHNoYWxsb3dDb3B5KFNDRV9DT05URVhUUyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZSNpc0VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLiAgSWYgeW91IHdhbnQgdG8gc2V0IHRoZSB2YWx1ZSwgeW91XG4gICAgICAgKiAgICAgaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cbiAgICAgICAqL1xuICAgICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgICB9O1xuICAgICAgc2NlLnRydXN0QXMgPSAkc2NlRGVsZWdhdGUudHJ1c3RBcztcbiAgICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xuXG4gICAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uICh0eXBlLCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLiAgVGhpcyBpcyBsaWtlIHtAbGlua1xuICAgICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgICAqIHdyYXBzIHRoZSBleHByZXNzaW9uIGluIGEgY2FsbCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosXG4gICAgICAgKiAqcmVzdWx0Kil9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICAgKlxuICAgICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgICAqL1xuICAgICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICRwYXJzZShleHByKTtcbiAgICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiBBcyBzdWNoLCByZXR1cm5zIGFcbiAgICAgICAqIHdyYXBwZWQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB5b3VyIHZhbHVlLCBhbmQgdGhlIHRydXN0IHlvdSBoYXZlIGluIGl0cyBzYWZldHkgZm9yIHRoZSBnaXZlblxuICAgICAgICogY29udGV4dC4gQW5ndWxhckpTIGNhbiB0aGVuIHVzZSB0aGF0IHZhbHVlIGFzLWlzIGluIGJpbmRpbmdzIG9mIHRoZSBzcGVjaWZpZWQgc2VjdXJlIGNvbnRleHQuXG4gICAgICAgKiBUaGlzIGlzIHVzZWQgaW4gYmluZGluZ3MgZm9yIGBuZy1iaW5kLWh0bWxgLCBgbmctaW5jbHVkZWAsIGFuZCBtb3N0IGBzcmNgIGF0dHJpYnV0ZVxuICAgICAgICogaW50ZXJwb2xhdGlvbnMuIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3Igc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UsIGUuZy4gYCRzY2UuVVJMYCxcbiAgICAgICAqICAgICBgJHNjZS5SRVNPVVJDRV9VUkxgLCBgJHNjZS5IVE1MYCwgYCRzY2UuSlNgIG9yIGAkc2NlLkNTU2AuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAgICogICAgIGluIHRoZSBjb250ZXh0IHlvdSBzcGVjaWZpZWQuXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNIdG1sXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0h0bWwodmFsdWUpYCDihpJcbiAgICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLkhUTUxgIGNvbnRleHQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAgICogICAgIGluIGAkc2NlLkhUTUxgIGNvbnRleHQgKGxpa2UgYG5nLWJpbmQtaHRtbGApLlxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZSN0cnVzdEFzQ3NzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5DU1NgIGNvbnRleHQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50XG4gICAgICAgKiAgICAgb2YgeW91ciBgdmFsdWVgIGluIGAkc2NlLkNTU2AgY29udGV4dC4gVGhpcyBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZVxuICAgICAgICogICAgIGFsbW9zdCBubyByZWFzb25zIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHNvIGZhci5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpJcbiAgICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBjb250ZXh0LlxuICAgICAgICogQHJldHVybiB7Kn0gQSB3cmFwcGVkIHZlcnNpb24gb2YgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRydXN0ZWQgdmFyaWFudCBvZiB5b3VyIGB2YWx1ZWBcbiAgICAgICAqICAgICBpbiBgJHNjZS5VUkxgIGNvbnRleHQuIFRoYXQgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmUgYWxtb3N0IG5vIHJlYXNvbnNcbiAgICAgICAqICAgICB0byB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNSZXNvdXJjZVVybFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNvbnRleHQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAgICogICAgIGluIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCAodGVtcGxhdGUgVVJMcyBpbiBgbmctaW5jbHVkZWAsIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICAgKiAgICAgYmluZGluZ3MsIC4uLilcbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuSlNgIGNvbnRleHQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAgICogICAgIGluIGAkc2NlLkpTYCBjb250ZXh0LiBUaGF0IGNvbnRleHQgaXMgY3VycmVudGx5IHVudXNlZCwgc28gdGhlcmUgYXJlIGFsbW9zdCBubyByZWFzb25zIHRvXG4gICAgICAgKiAgICAgdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgICAqIHRha2VzIGFueSBpbnB1dCwgYW5kIGVpdGhlciByZXR1cm5zIGEgdmFsdWUgdGhhdCdzIHNhZmUgdG8gdXNlIGluIHRoZSBzcGVjaWZpZWQgY29udGV4dCxcbiAgICAgICAqIG9yIHRocm93cyBhbiBleGNlcHRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYXdhcmUgb2YgdHJ1c3RlZCB2YWx1ZXMgY3JlYXRlZCBieSB0aGUgYHRydXN0QXNgXG4gICAgICAgKiBmdW5jdGlvbiBhbmQgaXRzIHNob3J0aGFuZHMsIGFuZCB3aGVuIGNvbnRleHRzIGFyZSBhcHByb3ByaWF0ZSwgcmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlXG4gICAgICAgKiBhcy1pcy4gRmluYWxseSwgdGhpcyBmdW5jdGlvbiBjYW4gYWxzbyB0aHJvdyB3aGVuIHRoZXJlIGlzIG5vIHdheSB0byB0dXJuIGBtYXliZVRydXN0ZWRgIGluIGFcbiAgICAgICAqIHNhZmUgdmFsdWUgKGUuZy4sIG5vIHNhbml0aXphdGlvbiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC5cbiAgICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzXG4gICAgICAgKiAgICAgYCRzY2UudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICAgKiBAcmV0dXJuIHsqfSBBIHZlcnNpb24gb2YgdGhlIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgZ2l2ZW4gY29udGV4dCwgb3IgdGhyb3dzIGFuXG4gICAgICAgKiAgICAgZXhjZXB0aW9uIGlmIHRoaXMgaXMgaW1wb3NzaWJsZS5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRDc3NcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkQ3NzKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRVcmxcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRKc1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0h0bWxcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSHRtbChleHByZXNzaW9uIHN0cmluZylgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgICAqXG4gICAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZVxuICAgICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgICAqICAgICAgaW4gYGNvbnRleHRgLlxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHNjZSNwYXJzZUFzQ3NzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAgICpcbiAgICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlc1xuICAgICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmxcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICAgKlxuICAgICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1Jlc291cmNlVXJsXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICAgKlxuICAgICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0pzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0pzKHZhbHVlKWAg4oaSXG4gICAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgICAqXG4gICAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZVxuICAgICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgICAqICAgICAgaW4gYGNvbnRleHRgLlxuICAgICAgICovXG5cbiAgICAgIC8vIFNob3J0aGFuZCBkZWxlZ2F0aW9ucy5cbiAgICAgIHZhciBwYXJzZSA9IHNjZS5wYXJzZUFzLFxuICAgICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCxcbiAgICAgICAgICB0cnVzdEFzID0gc2NlLnRydXN0QXM7XG5cbiAgICAgIGZvckVhY2goU0NFX0NPTlRFWFRTLCBmdW5jdGlvbiAoZW51bVZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHZhciBsTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICAgICAgc2NlW3NuYWtlVG9DYW1lbCgncGFyc2VfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgICB9O1xuICAgICAgICBzY2Vbc25ha2VUb0NhbWVsKCdnZXRfdHJ1c3RlZF8nICsgbE5hbWUpXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBnZXRUcnVzdGVkKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICBzY2Vbc25ha2VUb0NhbWVsKCd0cnVzdF9hc18nICsgbE5hbWUpXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzY2U7XG4gICAgfV07XG4gIH1cblxuICAvKiBleHBvcnRlZCAkU25pZmZlclByb3ZpZGVyICovXG5cbiAgLyoqXG4gICAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICAgKlxuICAgKiBAbmFtZSAkc25pZmZlclxuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGlzdG9yeSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaHRtbDUgaGlzdG9yeSBhcGkgP1xuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zaXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbiBldmVudHMgP1xuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID9cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuXG4gICAqL1xuICBmdW5jdGlvbiAkU25pZmZlclByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbiAoJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sXG5cbiAgICAgIC8vIENocm9tZSBQYWNrYWdlZCBBcHBzIGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgYGhpc3RvcnkucHVzaFN0YXRlYC5cbiAgICAgIC8vIElmIG5vdCBzYW5kYm94ZWQsIHRoZXkgY2FuIGJlIGRldGVjdGVkIGJ5IHRoZSBwcmVzZW5jZSBvZiBgY2hyb21lLmFwcC5ydW50aW1lYFxuICAgICAgLy8gKHNlZSBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2FwcHMvYXBpX2luZGV4KS4gSWYgc2FuZGJveGVkLCB0aGV5IGNhbiBiZSBkZXRlY3RlZCBieVxuICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGFuIGV4dGVuc2lvbiBydW50aW1lIElEIGFuZCB0aGUgYWJzZW5jZSBvZiBvdGhlciBDaHJvbWUgcnVudGltZSBBUElzXG4gICAgICAvLyAoc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYXBwcy9tYW5pZmVzdC9zYW5kYm94KS5cbiAgICAgIC8vIChOVy5qcyBhcHBzIGhhdmUgYWNjZXNzIHRvIENocm9tZSBBUElzLCBidXQgZG8gc3VwcG9ydCBgaGlzdG9yeWAuKVxuICAgICAgaXNOdyA9ICR3aW5kb3cubncgJiYgJHdpbmRvdy5udy5wcm9jZXNzLFxuICAgICAgICAgIGlzQ2hyb21lUGFja2FnZWRBcHAgPSAhaXNOdyAmJiAkd2luZG93LmNocm9tZSAmJiAoJHdpbmRvdy5jaHJvbWUuYXBwICYmICR3aW5kb3cuY2hyb21lLmFwcC5ydW50aW1lIHx8ICEkd2luZG93LmNocm9tZS5hcHAgJiYgJHdpbmRvdy5jaHJvbWUucnVudGltZSAmJiAkd2luZG93LmNocm9tZS5ydW50aW1lLmlkKSxcbiAgICAgICAgICBoYXNIaXN0b3J5UHVzaFN0YXRlID0gIWlzQ2hyb21lUGFja2FnZWRBcHAgJiYgJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUsXG4gICAgICAgICAgYW5kcm9pZCA9IHRvSW50KCgvYW5kcm9pZCAoXFxkKykvLmV4ZWMobG93ZXJjYXNlKCgkd2luZG93Lm5hdmlnYXRvciB8fCB7fSkudXNlckFnZW50KSkgfHwgW10pWzFdKSxcbiAgICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5zdHlsZSxcbiAgICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZTtcblxuICAgICAgaWYgKGJvZHlTdHlsZSkge1xuICAgICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkIDw1LCBCbGFja2JlcnJ5IEJyb3dzZXIgMTAsIGRlZmF1bHQgQ2hyb21lIGluIEFuZHJvaWQgNC40LnhcbiAgICAgICAgLy8gTWVudGlvbmVkIGJyb3dzZXJzIG5lZWQgYSAtd2Via2l0LSBwcmVmaXggZm9yIHRyYW5zaXRpb25zICYgYW5pbWF0aW9ucy5cbiAgICAgICAgdHJhbnNpdGlvbnMgPSAhISgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlIHx8ICd3ZWJraXRUcmFuc2l0aW9uJyBpbiBib2R5U3R5bGUpO1xuICAgICAgICBhbmltYXRpb25zID0gISEoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlIHx8ICd3ZWJraXRBbmltYXRpb24nIGluIGJvZHlTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseVxuICAgICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuXG4gICAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0XG5cbiAgICAgICAgLy8gb2xkZXIgd2Via2l0IGJyb3dzZXIgKDUzMy45KSBvbiBCb3hlZSBib3ggaGFzIGV4YWN0bHkgdGhlIHNhbWUgcHJvYmxlbSBhcyBBbmRyb2lkIGhhc1xuICAgICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhbHNvXG4gICAgICAgIC8vIFdlIGFyZSBwdXJwb3NlZnVsbHkgdXNpbmcgYCEoYW5kcm9pZCA8IDQpYCB0byBjb3ZlciB0aGUgY2FzZSB3aGVuIGBhbmRyb2lkYCBpcyB1bmRlZmluZWRcbiAgICAgICAgaGlzdG9yeTogISEoaGFzSGlzdG9yeVB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLFxuICAgICAgICBoYXNFdmVudDogZnVuY3Rpb24gaGFzRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAgICAgICAvLyBJRTkgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGl0J3Mgc28gZnViYXJlZCB0aGF0IHdlIHJhdGhlciBwcmV0ZW5kIHRoYXQgaXQgZG9lc24ndCBoYXZlXG4gICAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgICAgLy8gd2hlbiBjdXQgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICAgICAgICAvLyBJRTEwKyBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgYnV0IGl0IGVycm9uZW91c2x5IGZpcmVzIHVuZGVyIHZhcmlvdXMgc2l0dWF0aW9ucyxcbiAgICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgICAgaWYgKGV2ZW50ID09PSAnaW5wdXQnICYmIG1zaWUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChldmVudFN1cHBvcnRbZXZlbnRdKSkge1xuICAgICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICAgIH0sXG4gICAgICAgIGNzcDogY3NwKCksXG4gICAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgICAgYW5kcm9pZDogYW5kcm9pZFxuICAgICAgfTtcbiAgICB9XTtcbiAgfVxuXG4gIHZhciAkdGVtcGxhdGVSZXF1ZXN0TWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvdmlkZXJcbiAgICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyXG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVc2VkIHRvIGNvbmZpZ3VyZSB0aGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHtAbGluayAkaHR0cH0gc2VydmljZSB3aGVuIG1ha2luZyBhIHRlbXBsYXRlIHJlcXVlc3QuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIsIHdoZW5cbiAgICogcmVxdWVzdGluZyBhIHRlbXBsYXRlLlxuICAgKi9cbiAgZnVuY3Rpb24gJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyKCkge1xuXG4gICAgdmFyIGh0dHBPcHRpb25zO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlciNodHRwT3B0aW9uc1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUge0BsaW5rICRodHRwfSBzZXJ2aWNlIHdoZW4gbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgICAqIFlvdSBjYW4gdXNlIHRoaXMgdG8gb3ZlcnJpZGUgb3B0aW9ucyBzdWNoIGFzIHRoZSBcIkFjY2VwdFwiIGhlYWRlciBmb3IgdGVtcGxhdGUgcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUaGUge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3R9IHdpbGwgc2V0IHRoZSBgY2FjaGVgIGFuZCB0aGUgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZVxuICAgICAqIG9wdGlvbnMgaWYgbm90IG92ZXJyaWRkZW4gaGVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIGZvciB0aGUge0BsaW5rICRodHRwfSBvcHRpb25zLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUge0BsaW5rICRodHRwfSBvcHRpb25zIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAgICovXG4gICAgdGhpcy5odHRwT3B0aW9ucyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgaHR0cE9wdGlvbnMgPSB2YWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGh0dHBPcHRpb25zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBydW5zIHNlY3VyaXR5IGNoZWNrcyB0aGVuIGRvd25sb2FkcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdXNpbmdcbiAgICAgKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gICAgICogZmFpbHMgb3IgdGhlIHJlc3BvbnNlIGRhdGEgb2YgdGhlIEhUVFAgcmVxdWVzdCBpcyBlbXB0eSwgYSBgJGNvbXBpbGVgIGVycm9yIHdpbGwgYmUgdGhyb3duICh0aGVcbiAgICAgKiBleGNlcHRpb24gY2FuIGJlIHRod2FydGVkIGJ5IHNldHRpbmcgdGhlIDJuZCBwYXJhbWV0ZXIgb2YgdGhlIGZ1bmN0aW9uIHRvIHRydWUpLiBOb3RlIHRoYXQgdGhlXG4gICAgICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gICAgICogd2hlbiBgdHBsYCBpcyBvZiB0eXBlIHN0cmluZyBhbmQgYCR0ZW1wbGF0ZUNhY2hlYCBoYXMgdGhlIG1hdGNoaW5nIGVudHJ5LlxuICAgICAqXG4gICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyBjdXN0b20gb3B0aW9ucyB0byB0aGUgYCRodHRwYCBzZXJ2aWNlLCBzdWNoIGFzIHNldHRpbmcgdGhlIEFjY2VwdCBoZWFkZXIgeW91XG4gICAgICogY2FuIGNvbmZpZ3VyZSB0aGlzIHZpYSB7QGxpbmsgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyI2h0dHBPcHRpb25zfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRSZXNvdXJjZVVybH0gdHBsIFRoZSBIVFRQIHJlcXVlc3QgdGVtcGxhdGUgVVJMXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaWdub3JlUmVxdWVzdEVycm9yIFdoZXRoZXIgb3Igbm90IHRvIGlnbm9yZSB0aGUgZXhjZXB0aW9uIHdoZW4gdGhlIHJlcXVlc3QgZmFpbHMgb3IgdGhlIHRlbXBsYXRlIGlzIGVtcHR5XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgZm9yIHRoZSBIVFRQIHJlc3BvbnNlIGRhdGEgb2YgdGhlIGdpdmVuIFVSTC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICAgICAqL1xuICAgIHRoaXMuJGdldCA9IFsnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJGh0dHAnLCAnJHEnLCAnJHNjZScsIGZ1bmN0aW9uICgkZXhjZXB0aW9uSGFuZGxlciwgJHRlbXBsYXRlQ2FjaGUsICRodHRwLCAkcSwgJHNjZSkge1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzKys7XG5cbiAgICAgICAgLy8gV2UgY29uc2lkZXIgdGhlIHRlbXBsYXRlIGNhY2hlIGhvbGRzIG9ubHkgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHNvXG4gICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBnbyB0aHJvdWdoIHdoaXRlbGlzdGluZyBhZ2FpbiBmb3Iga2V5cyB0aGF0IGFscmVhZHlcbiAgICAgICAgLy8gYXJlIGluY2x1ZGVkIGluIHRoZXJlLiBUaGlzIGFsc28gbWFrZXMgQW5ndWxhciBhY2NlcHQgYW55IHNjcmlwdFxuICAgICAgICAvLyBkaXJlY3RpdmUsIG5vIG1hdHRlciBpdHMgbmFtZS4gSG93ZXZlciwgd2Ugc3RpbGwgbmVlZCB0byB1bndyYXAgdHJ1c3RlZFxuICAgICAgICAvLyB0eXBlcy5cbiAgICAgICAgaWYgKCFpc1N0cmluZyh0cGwpIHx8IGlzVW5kZWZpbmVkKCR0ZW1wbGF0ZUNhY2hlLmdldCh0cGwpKSkge1xuICAgICAgICAgIHRwbCA9ICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHRwbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNmb3JtUmVzcG9uc2UgPSAkaHR0cC5kZWZhdWx0cyAmJiAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZTtcblxuICAgICAgICBpZiAoaXNBcnJheSh0cmFuc2Zvcm1SZXNwb25zZSkpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IHRyYW5zZm9ybVJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAodHJhbnNmb3JtZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lciAhPT0gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2Zvcm1SZXNwb25zZSA9PT0gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSkge1xuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQodHBsLCBleHRlbmQoe1xuICAgICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogdHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgfSwgaHR0cE9wdGlvbnMpKS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgcmVzcCA9ICR0ZW1wbGF0ZVJlcXVlc3RNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9IChIVFRQIHN0YXR1czogezF9IHsyfSknLCB0cGwsIHJlc3Auc3RhdHVzLCByZXNwLnN0YXR1c1RleHQpO1xuXG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihyZXNwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cyA9IDA7XG5cbiAgICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0Rm47XG4gICAgfV07XG4gIH1cblxuICAvKiogQHRoaXMgKi9cbiAgZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGJyb3dzZXIsICRsb2NhdGlvbikge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lICR0ZXN0YWJpbGl0eVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogVGhlIHByaXZhdGUgJCR0ZXN0YWJpbGl0eSBzZXJ2aWNlIHByb3ZpZGVzIGEgY29sbGVjdGlvbiBvZiBtZXRob2RzIGZvciB1c2Ugd2hlbiBkZWJ1Z2dpbmdcbiAgICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICAgKi9cbiAgICAgIHZhciB0ZXN0YWJpbGl0eSA9IHt9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAgICogdG8gZXhwcmVzc2lvbnMgbWF0Y2hpbmcgdGhlIGlucHV0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gVGhlIGJpbmRpbmcgZXhwcmVzc2lvbiB0byBtYXRjaC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICAgKi9cbiAgICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uIChlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICB2YXIgZGF0YUJpbmRpbmcgPSBhbmd1bGFyLmVsZW1lbnQoYmluZGluZykuZGF0YSgnJGJpbmRpbmcnKTtcbiAgICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uIChiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlciA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBlc2NhcGVGb3JSZWdleHAoZXhwcmVzc2lvbikgKyAnKFxcXFxzfFxcXFx8fCQpJyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNmaW5kTW9kZWxzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHR3by13YXkgZm91bmQgdmlhIG5nLW1vZGVsIHRvXG4gICAgICAgKiBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHJvb3QgdG8gc2VhcmNoIGZyb20uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgbW9kZWwgZXhwcmVzc2lvbiB0byBtYXRjaC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHByZWZpeGVzLmxlbmd0aDsgKytwKSB7XG4gICAgICAgICAgdmFyIGF0dHJpYnV0ZUVxdWFscyA9IG9wdF9leGFjdE1hdGNoID8gJz0nIDogJyo9JztcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2dldExvY2F0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaG9ydGN1dCBmb3IgZ2V0dGluZyB0aGUgbG9jYXRpb24gaW4gYSBicm93c2VyIGFnbm9zdGljIHdheS4gUmV0dXJuc1xuICAgICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgICAqL1xuICAgICAgdGVzdGFiaWxpdHkuZ2V0TG9jYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkbG9jYXRpb24udXJsKCk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjc2V0TG9jYXRpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNob3J0Y3V0IGZvciBuYXZpZ2F0aW5nIHRvIGEgbG9jYXRpb24gd2l0aG91dCBkb2luZyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgbG9jYXRpb24gdXJsIChwYXRoLCBzZWFyY2ggYW5kIGhhc2gsXG4gICAgICAgKiAgICAgZS5nLiAvcGF0aD9hPWIjaGFzaCkgdG8gZ28gdG8uXG4gICAgICAgKi9cbiAgICAgIHRlc3RhYmlsaXR5LnNldExvY2F0aW9uID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBpZiAodXJsICE9PSAkbG9jYXRpb24udXJsKCkpIHtcbiAgICAgICAgICAkbG9jYXRpb24udXJsKHVybCk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSN3aGVuU3RhYmxlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDYWxscyB0aGUgY2FsbGJhY2sgd2hlbiAkdGltZW91dCBhbmQgJGh0dHAgcmVxdWVzdHMgYXJlIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAgICovXG4gICAgICB0ZXN0YWJpbGl0eS53aGVuU3RhYmxlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRicm93c2VyLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMoY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHRlc3RhYmlsaXR5O1xuICAgIH1dO1xuICB9XG5cbiAgLyoqIEB0aGlzICovXG4gIGZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gICAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkYnJvd3NlciwgJHEsICQkcSwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuICAgICAgdmFyIGRlZmVycmVkcyA9IHt9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAgKiBAbmFtZSAkdGltZW91dFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIHdyYXBwZWQgaW50byBhIHRyeS9jYXRjaFxuICAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgY2FsbGluZyBgJHRpbWVvdXRgIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAgKiB0aGUgZGVsYXkgaGFzIHBhc3NlZCBhbmQgdGhlIHRpbWVvdXQgZnVuY3Rpb24sIGlmIHByb3ZpZGVkLCBpcyBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAgKlxuICAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kdGltZW91dCBgJHRpbWVvdXQuZmx1c2goKWB9IHRvXG4gICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAgKlxuICAgICAgICogSWYgeW91IG9ubHkgd2FudCBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHNvbWUgc3BlY2lmaWVkIGRlbGF5XG4gICAgICAgKiB0aGVuIHlvdSBjYW4gY2FsbCBgJHRpbWVvdXRgIHdpdGhvdXQgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbWVvdXQgaXMgcmVhY2hlZC4gVGhlIHByb21pc2VcbiAgICAgICAqICAgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIGludm9rZUFwcGx5ID0gZGVsYXk7XG4gICAgICAgICAgZGVsYXkgPSBmbjtcbiAgICAgICAgICBmbiA9IG5vb3A7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXJncyA9IHNsaWNlQXJncyhhcmd1bWVudHMsIDMpLFxuICAgICAgICAgICAgc2tpcEFwcGx5ID0gaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHksXG4gICAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgdGltZW91dElkO1xuXG4gICAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmbi5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgICBwcm9taXNlLiQkdGltZW91dElkID0gdGltZW91dElkO1xuICAgICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICAgICAqICAgY2FuY2VsZWQuXG4gICAgICAgKi9cbiAgICAgIHRpbWVvdXQuY2FuY2VsID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJHRpbWVvdXRJZCBpbiBkZWZlcnJlZHMpIHtcbiAgICAgICAgICAvLyBUaW1lb3V0IGNhbmNlbHMgc2hvdWxkIG5vdCByZXBvcnQgYW4gdW5oYW5kbGVkIHByb21pc2UuXG4gICAgICAgICAgbWFya1FFeGNlcHRpb25IYW5kbGVkKGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5wcm9taXNlKTtcbiAgICAgICAgICBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgICAgcmV0dXJuICRicm93c2VyLmRlZmVyLmNhbmNlbChwcm9taXNlLiQkdGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGltZW91dDtcbiAgICB9XTtcbiAgfVxuXG4gIC8vIE5PVEU6ICBUaGUgdXNhZ2Ugb2Ygd2luZG93IGFuZCBkb2N1bWVudCBpbnN0ZWFkIG9mICR3aW5kb3cgYW5kICRkb2N1bWVudCBoZXJlIGlzXG4gIC8vIGRlbGliZXJhdGUuICBUaGlzIHNlcnZpY2UgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgYmVoYXZpb3Igb2YgYW5jaG9yIG5vZGVzIGNyZWF0ZWQgYnkgdGhlXG4gIC8vIGJyb3dzZXIgKHJlc29sdmluZyBhbmQgcGFyc2luZyBVUkxzKSB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHByb3ZpZGVkIGJ5IG1vY2sgb2JqZWN0cyBhbmRcbiAgLy8gY2F1c2UgdXMgdG8gYnJlYWsgdGVzdHMuICBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgYnJvd3NlciByZXNvbHZlcyBhIFVSTCBmb3IgWEhSLCBpdFxuICAvLyBkb2Vzbid0IGtub3cgYWJvdXQgbW9ja2VkIGxvY2F0aW9ucyBhbmQgcmVzb2x2ZXMgVVJMcyB0byB0aGUgcmVhbCBkb2N1bWVudCAtIHdoaWNoIGlzXG4gIC8vIGV4YWN0bHkgdGhlIGJlaGF2aW9yIG5lZWRlZCBoZXJlLiAgVGhlcmUgaXMgbGl0dGxlIHZhbHVlIGlzIG1vY2tpbmcgdGhlc2Ugb3V0IGZvciB0aGlzXG4gIC8vIHNlcnZpY2UuXG4gIHZhciB1cmxQYXJzaW5nTm9kZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIHZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAvKipcbiAgICpcbiAgICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIG5vbi1JRSBicm93c2Vyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sXG4gICAqIHJlc3VsdHMgYm90aCBpbiB0aGUgbm9ybWFsaXppbmcgYW5kIHBhcnNpbmcgb2YgdGhlIFVSTC4gIE5vcm1hbGl6aW5nIG1lYW5zIHRoYXQgYSByZWxhdGl2ZVxuICAgKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gICAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkXG4gICAqIHByb3BlcnRpZXMgYXJlIGFsbCBwb3B1bGF0ZWQgdG8gcmVmbGVjdCB0aGUgbm9ybWFsaXplZCBVUkwuICBUaGlzIGFwcHJvYWNoIGhhcyB3aWRlXG4gICAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSsgZXRjLiAgU2VlXG4gICAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICAgKlxuICAgKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIElFIDw9IDEwIG5vcm1hbGl6ZXMgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIHRoZSBhbmNob3Igbm9kZSBzaW1pbGFyIHRvIHRoZSBvdGhlclxuICAgKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnlcbiAgICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gXCJmb29cIiwgdGhlbiBhLnByb3RvY29sLCBhLmhvc3QsIGV0Yy4gd2lsbCBiZSBlbXB0eS4pICBXZVxuICAgKiB3b3JrIGFyb3VuZCB0aGF0IGJ5IHBlcmZvcm1pbmcgdGhlIHBhcnNpbmcgaW4gYSAybmQgc3RlcCBieSB0YWtpbmcgYSBwcmV2aW91c2x5IG5vcm1hbGl6ZWRcbiAgICogVVJMIChlLmcuIGJ5IGFzc2lnbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxuICAgKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBldGMuXG4gICAqXG4gICAqIFJlZmVyZW5jZXM6XG4gICAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnRcbiAgICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAgICogICBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMlxuICAgKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tL1xuICAgKlxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxuICAgKiBAZGVzY3JpcHRpb24gTm9ybWFsaXplcyBhbmQgcGFyc2VzIGEgVVJMLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBub3JtYWxpemVkIFVSTCBhcyBhIGRpY3Rpb25hcnkuXG4gICAqXG4gICAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfFxuICAgKiAgIHwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAgICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHxcbiAgICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICB8IGhvc3QgICAgICAgICAgfCBUaGUgaG9zdCBhbmQgcG9ydCAoaWYgdGhlIHBvcnQgaXMgbm9uLWRlZmF1bHQpIG9mIHRoZSBub3JtYWxpemVkVXJsICAgIHxcbiAgICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICB8IGhhc2ggICAgICAgICAgfCBUaGUgaGFzaCBzdHJpbmcsIG1pbnVzIHRoZSBoYXNoIHN5bWJvbFxuICAgKiAgIHwgaG9zdG5hbWUgICAgICB8IFRoZSBob3N0bmFtZVxuICAgKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0IFwiOlwiXG4gICAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGhuYW1lLCBiZWdpbm5pbmcgd2l0aCBcIi9cIlxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gdXJsUmVzb2x2ZSh1cmwpIHtcbiAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgIGlmIChtc2llKSB7XG4gICAgICAvLyBOb3JtYWxpemUgYmVmb3JlIHBhcnNlLiAgUmVmZXIgSW1wbGVtZW50YXRpb24gTm90ZXMgb24gd2h5IHRoaXMgaXNcbiAgICAgIC8vIGRvbmUgaW4gdHdvIHN0ZXBzIG9uIElFLlxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICB9XG5cbiAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICByZXR1cm4ge1xuICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICBwYXRobmFtZTogdXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6ICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVxdWVzdFVybCBUaGUgdXJsIG9mIHRoZSByZXF1ZXN0IGFzIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICAgKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAgICovXG4gIGZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7XG4gICAgdmFyIHBhcnNlZCA9IGlzU3RyaW5nKHJlcXVlc3RVcmwpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7XG4gICAgcmV0dXJuIHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkd2luZG93XG4gICAqIEB0aGlzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2BcbiAgICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxuICAgKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGVcbiAgICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy5cbiAgICpcbiAgICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZVxuICAgKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzXG4gICAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cbiAgICogZXhwcmVzc2lvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwid2luZG93RXhhbXBsZVwiIG5hbWU9XCJ3aW5kb3ctc2VydmljZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnd2luZG93RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsICR3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJztcbiAgICAgICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJncmVldGluZ1wiIGFyaWEtbGFiZWw9XCJncmVldGluZ1wiIC8+XG4gICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJkb0dyZWV0aW5nKGdyZWV0aW5nKVwiPkFMRVJUPC9idXR0b24+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2dyZWV0aW5nJykpLnNlbmRLZXlzKCdIZWxsbywgRTJFIFRlc3RzJyk7XG4gICAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyXG4gICAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTtcbiAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICBmdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKSB7XG4gICAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICQkY29va2llUmVhZGVyXG4gICAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgaXMgYSBwcml2YXRlIHNlcnZpY2UgZm9yIHJlYWRpbmcgY29va2llcyB1c2VkIGJ5ICRodHRwIGFuZCBuZ0Nvb2tpZXNcbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBhIGtleS92YWx1ZSBtYXAgb2YgdGhlIGN1cnJlbnQgY29va2llc1xuICAgKi9cbiAgZnVuY3Rpb24gJCRDb29raWVSZWFkZXIoJGRvY3VtZW50KSB7XG4gICAgdmFyIHJhd0RvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9O1xuICAgIHZhciBsYXN0Q29va2llcyA9IHt9O1xuICAgIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7XG5cbiAgICBmdW5jdGlvbiBzYWZlR2V0Q29va2llKHJhd0RvY3VtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmF3RG9jdW1lbnQuY29va2llIHx8ICcnO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudChzdHIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4LCBuYW1lO1xuICAgICAgdmFyIGN1cnJlbnRDb29raWVTdHJpbmcgPSBzYWZlR2V0Q29va2llKHJhd0RvY3VtZW50KTtcblxuICAgICAgaWYgKGN1cnJlbnRDb29raWVTdHJpbmcgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcbiAgICAgICAgbGFzdENvb2tpZVN0cmluZyA9IGN1cnJlbnRDb29raWVTdHJpbmc7XG4gICAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdCgnOyAnKTtcbiAgICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llc1xuICAgICAgICAgICAgbmFtZSA9IHNhZmVEZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZygwLCBpbmRleCkpO1xuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3RcbiAgICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxuICAgICAgICAgICAgLy8gZm9sbG93IGFyZSBmb3IgbGVzcyBzcGVjaWZpYyBwYXRocy5cbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChsYXN0Q29va2llc1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gICAgfTtcbiAgfVxuXG4gICQkQ29va2llUmVhZGVyLiRpbmplY3QgPSBbJyRkb2N1bWVudCddO1xuXG4gIC8qKiBAdGhpcyAqL1xuICBmdW5jdGlvbiAkJENvb2tpZVJlYWRlclByb3ZpZGVyKCkge1xuICAgIHRoaXMuJGdldCA9ICQkQ29va2llUmVhZGVyO1xuICB9XG5cbiAgLyogZ2xvYmFsIGN1cnJlbmN5RmlsdGVyOiB0cnVlLFxuICAgZGF0ZUZpbHRlcjogdHJ1ZSxcbiAgIGZpbHRlckZpbHRlcjogdHJ1ZSxcbiAgIGpzb25GaWx0ZXI6IHRydWUsXG4gICBsaW1pdFRvRmlsdGVyOiB0cnVlLFxuICAgbG93ZXJjYXNlRmlsdGVyOiB0cnVlLFxuICAgbnVtYmVyRmlsdGVyOiB0cnVlLFxuICAgb3JkZXJCeUZpbHRlcjogdHJ1ZSxcbiAgIHVwcGVyY2FzZUZpbHRlcjogdHJ1ZSxcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlXG4gICAqIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpc1xuICAgKiBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb25cbiAgICogICBmdW5jdGlvbiBNeU1vZHVsZSgkcHJvdmlkZSwgJGZpbHRlclByb3ZpZGVyKSB7XG4gICAqICAgICAvLyBjcmVhdGUgYSBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIGluamVjdGlvbiAobm90IGFsd2F5cyBuZWVkZWQpXG4gICAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXtcbiAgICogICAgICAgcmV0dXJuICdIZWxsbyAnICsgbmFtZSArICchJztcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiAgICAgLy8gcmVnaXN0ZXIgYSBmaWx0ZXIgZmFjdG9yeSB3aGljaCB1c2VzIHRoZVxuICAgKiAgICAgLy8gZ3JlZXQgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBESS5cbiAgICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7XG4gICAqICAgICAgIC8vIHJldHVybiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHVzZXMgdGhlIGdyZWV0IHNlcnZpY2VcbiAgICogICAgICAgLy8gdG8gZ2VuZXJhdGUgc2FsdXRhdGlvblxuICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgKiAgICAgICAgIC8vIGZpbHRlcnMgbmVlZCB0byBiZSBmb3JnaXZpbmcgc28gY2hlY2sgaW5wdXQgdmFsaWRpdHlcbiAgICogICAgICAgICByZXR1cm4gdGV4dCAmJiBncmVldCh0ZXh0KSB8fCB0ZXh0O1xuICAgKiAgICAgICB9O1xuICAgKiAgICAgfSk7XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIGZpbHRlciBmdW5jdGlvbiBpcyByZWdpc3RlcmVkIHdpdGggdGhlIGAkaW5qZWN0b3JgIHVuZGVyIHRoZSBmaWx0ZXIgbmFtZSBzdWZmaXggd2l0aFxuICAgKiBgRmlsdGVyYC5cbiAgICpcbiAgICogYGBganNcbiAgICogICBpdCgnc2hvdWxkIGJlIHRoZSBzYW1lIGluc3RhbmNlJywgaW5qZWN0KFxuICAgKiAgICAgZnVuY3Rpb24oJGZpbHRlclByb3ZpZGVyKSB7XG4gICAqICAgICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigncmV2ZXJzZScsIGZ1bmN0aW9uKCl7XG4gICAqICAgICAgICAgcmV0dXJuIC4uLjtcbiAgICogICAgICAgfSk7XG4gICAqICAgICB9LFxuICAgKiAgICAgZnVuY3Rpb24oJGZpbHRlciwgcmV2ZXJzZUZpbHRlcikge1xuICAgKiAgICAgICBleHBlY3QoJGZpbHRlcigncmV2ZXJzZScpKS50b0JlKHJldmVyc2VGaWx0ZXIpO1xuICAgKiAgICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYW5ndWxhciBmaWx0ZXJzIHdvcmssIGFuZCBob3cgdG8gY3JlYXRlIHlvdXIgb3duIGZpbHRlcnMsIHNlZVxuICAgKiB7QGxpbmsgZ3VpZGUvZmlsdGVyIEZpbHRlcnN9IGluIHRoZSBBbmd1bGFyIERldmVsb3BlciBHdWlkZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRmaWx0ZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gICAqXG4gICAqIFRoZXkgY2FuIGJlIHVzZWQgaW4gdmlldyB0ZW1wbGF0ZXMsIGNvbnRyb2xsZXJzIG9yIHNlcnZpY2VzLkFuZ3VsYXIgY29tZXNcbiAgICogd2l0aCBhIGNvbGxlY3Rpb24gb2YgW2J1aWx0LWluIGZpbHRlcnNdKGFwaS9uZy9maWx0ZXIpLCBidXQgaXQgaXMgZWFzeSB0b1xuICAgKiBkZWZpbmUgeW91ciBvd24gYXMgd2VsbC5cbiAgICpcbiAgICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIHt7IGV4cHJlc3Npb24gW3wgZmlsdGVyX25hbWVbOnBhcmFtZXRlcl92YWx1ZV0gLi4uIF0gfX1cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvblxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwiJGZpbHRlclwiIG1vZHVsZT1cImZpbHRlckV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmxcIj5cbiAgICAgICAgICA8aDM+e3sgb3JpZ2luYWxUZXh0IH19PC9oMz5cbiAgICAgICAgICA8aDM+e3sgZmlsdGVyZWRUZXh0IH19PC9oMz5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgXG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgICAkc2NvcGUub3JpZ2luYWxUZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAkc2NvcGUuZmlsdGVyZWRUZXh0ID0gJGZpbHRlcigndXBwZXJjYXNlJykoJHNjb3BlLm9yaWdpbmFsVGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICovXG4gICRGaWx0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xuICAvKiogQHRoaXMgKi9cbiAgZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7XG4gICAgdmFyIHN1ZmZpeCA9ICdGaWx0ZXInO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRmaWx0ZXJQcm92aWRlciNyZWdpc3RlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgICAqICAgIHRoZSBrZXlzIGFyZSB0aGUgZmlsdGVyIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmlsdGVyIGZhY3Rvcmllcy5cbiAgICAgKlxuICAgICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICogICAgKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICAgKiAgICBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgICAqICAgIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgICAqICAgIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAgICogICAgPC9kaXY+XG4gICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZywgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgZmlsdGVyIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXBcbiAgICAgKiAgICBvZiB0aGUgcmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcbiAgICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uIChmaWx0ZXIsIGtleSkge1xuICAgICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwcm92aWRlLmZhY3RvcnkobmFtZSArIHN1ZmZpeCwgZmFjdG9yeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVnaXN0ZXIgPSByZWdpc3RlcjtcblxuICAgIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24gKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpO1xuICAgICAgfTtcbiAgICB9XTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8qIGdsb2JhbFxuICAgICAgY3VycmVuY3lGaWx0ZXI6IGZhbHNlLFxuICAgICAgZGF0ZUZpbHRlcjogZmFsc2UsXG4gICAgICBmaWx0ZXJGaWx0ZXI6IGZhbHNlLFxuICAgICAganNvbkZpbHRlcjogZmFsc2UsXG4gICAgICBsaW1pdFRvRmlsdGVyOiBmYWxzZSxcbiAgICAgIGxvd2VyY2FzZUZpbHRlcjogZmFsc2UsXG4gICAgICBudW1iZXJGaWx0ZXI6IGZhbHNlLFxuICAgICAgb3JkZXJCeUZpbHRlcjogZmFsc2UsXG4gICAgICB1cHBlcmNhc2VGaWx0ZXI6IGZhbHNlXG4gICAgKi9cblxuICAgIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgICByZWdpc3RlcignZGF0ZScsIGRhdGVGaWx0ZXIpO1xuICAgIHJlZ2lzdGVyKCdmaWx0ZXInLCBmaWx0ZXJGaWx0ZXIpO1xuICAgIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gICAgcmVnaXN0ZXIoJ2xpbWl0VG8nLCBsaW1pdFRvRmlsdGVyKTtcbiAgICByZWdpc3RlcignbG93ZXJjYXNlJywgbG93ZXJjYXNlRmlsdGVyKTtcbiAgICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgICByZWdpc3Rlcignb3JkZXJCeScsIG9yZGVyQnlGaWx0ZXIpO1xuICAgIHJlZ2lzdGVyKCd1cHBlcmNhc2UnLCB1cHBlcmNhc2VGaWx0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmaWx0ZXJcbiAgICogQG5hbWUgZmlsdGVyXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogICAqKk5vdGUqKjogSWYgdGhlIGFycmF5IGNvbnRhaW5zIG9iamVjdHMgdGhhdCByZWZlcmVuY2UgdGhlbXNlbHZlcywgZmlsdGVyaW5nIGlzIG5vdCBwb3NzaWJsZS5cbiAgICogPC9kaXY+XG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cbiAgICogICBgYXJyYXlgLlxuICAgKlxuICAgKiAgIENhbiBiZSBvbmUgb2Y6XG4gICAqXG4gICAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyB1c2VkIGZvciBtYXRjaGluZyBhZ2FpbnN0IHRoZSBjb250ZW50cyBvZiB0aGUgYGFycmF5YC4gQWxsIHN0cmluZ3Mgb3JcbiAgICogICAgIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgbWF0Y2ggdGhpcyBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBhbHNvXG4gICAqICAgICBhcHBsaWVzIHRvIG5lc3RlZCBvYmplY3QgcHJvcGVydGllcy5cbiAgICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gICAqXG4gICAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZFxuICAgKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOlwiTVwiLCBwaG9uZTpcIjFcIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtc1xuICAgKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAgICogICAgIHByb3BlcnR5IG5hbWUgKGAkYCBieSBkZWZhdWx0KSBjYW4gYmUgdXNlZCAoZS5nLiBhcyBpbiBgeyQ6IFwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoXG4gICAqICAgICBhZ2FpbnN0IGFueSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IG9yIGl0cyBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuIFRoYXQncyBlcXVpdmFsZW50IHRvIHRoZVxuICAgKiAgICAgc2ltcGxlIHN1YnN0cmluZyBtYXRjaCB3aXRoIGEgYHN0cmluZ2AgYXMgZGVzY3JpYmVkIGFib3ZlLiBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIGNhbiBiZVxuICAgKiAgICAgb3ZlcndyaXR0ZW4sIHVzaW5nIHRoZSBgYW55UHJvcGVydHlLZXlgIHBhcmFtZXRlci5cbiAgICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gICAqICAgICBGb3IgZXhhbXBsZSBge25hbWU6IFwiIU1cIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYFxuICAgKiAgICAgbm90IGNvbnRhaW5pbmcgXCJNXCIuXG4gICAqXG4gICAqICAgICBOb3RlIHRoYXQgYSBuYW1lZCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb25seSwgd2hpbGUgdGhlIHNwZWNpYWxcbiAgICogICAgIGAkYCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb3IgZGVlcGVyLiBFLmcuIGFuIGFycmF5IGl0ZW0gbGlrZVxuICAgKiAgICAgYHtuYW1lOiB7Zmlyc3Q6ICdKb2huJywgbGFzdDogJ0RvZSd9fWAgd2lsbCAqKm5vdCoqIGJlIG1hdGNoZWQgYnkgYHtuYW1lOiAnSm9obid9YCwgYnV0XG4gICAqICAgICAqKndpbGwqKiBiZSBtYXRjaGVkIGJ5IGB7JDogJ0pvaG4nfWAuXG4gICAqXG4gICAqICAgLSBgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBhcnJheSlgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy5cbiAgICogICAgIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIHdpdGggdGhlIGVsZW1lbnQsIGl0cyBpbmRleCwgYW5kXG4gICAqICAgICB0aGUgZW50aXJlIGFycmF5IGl0c2VsZiBhcyBhcmd1bWVudHMuXG4gICAqXG4gICAqICAgICBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQgdGhlIHByZWRpY2F0ZSByZXR1cm5lZCB0cnVlIGZvci5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfGZhbHNlfSBbY29tcGFyYXRvcl0gQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluXG4gICAqICAgICBkZXRlcm1pbmluZyBpZiB2YWx1ZXMgcmV0cmlldmVkIHVzaW5nIGBleHByZXNzaW9uYCAod2hlbiBpdCBpcyBub3QgYSBmdW5jdGlvbikgc2hvdWxkIGJlXG4gICAqICAgICBjb25zaWRlcmVkIGEgbWF0Y2ggYmFzZWQgb24gdGhlIGV4cGVjdGVkIHZhbHVlIChmcm9tIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbikgYW5kIGFjdHVhbFxuICAgKiAgICAgdmFsdWUgKGZyb20gdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpLlxuICAgKlxuICAgKiAgIENhbiBiZSBvbmUgb2Y6XG4gICAqXG4gICAqICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOlxuICAgKiAgICAgVGhlIGZ1bmN0aW9uIHdpbGwgYmUgZ2l2ZW4gdGhlIG9iamVjdCB2YWx1ZSBhbmQgdGhlIHByZWRpY2F0ZSB2YWx1ZSB0byBjb21wYXJlIGFuZFxuICAgKiAgICAgc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggdmFsdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkIGVxdWFsLlxuICAgKlxuICAgKiAgIC0gYHRydWVgOiBBIHNob3J0aGFuZCBmb3IgYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGFjdHVhbCwgZXhwZWN0ZWQpfWAuXG4gICAqICAgICBUaGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuXG4gICAqXG4gICAqICAgLSBgZmFsc2VgOiBBIHNob3J0IGhhbmQgZm9yIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBsb29rIGZvciBhIHN1YnN0cmluZyBtYXRjaCBpbiBhIGNhc2VcbiAgICogICAgIGluc2Vuc2l0aXZlIHdheS4gUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0XG4gICAqICAgICBwcmltaXRpdmVzLCB1bmxlc3MgdGhleSBoYXZlIGEgY3VzdG9tIGB0b1N0cmluZ2AgbWV0aG9kIChlLmcuIGBEYXRlYCBvYmplY3RzKS5cbiAgICpcbiAgICpcbiAgICogICBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2FueVByb3BlcnR5S2V5XSBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIHRoYXQgbWF0Y2hlcyBhZ2FpbnN0IGFueSBwcm9wZXJ0eS5cbiAgICogICAgIEJ5IGRlZmF1bHQgYCRgLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWZpbHRlclwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjc2J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonODAwLUJJRy1NQVJZJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZXR0ZScsIHBob25lOic1NTUtNTY3OCd9XVwiPjwvZGl2PlxuICBcbiAgICAgICAgIDxsYWJlbD5TZWFyY2g6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaFRleHRcIj48L2xhYmVsPlxuICAgICAgICAgPHRhYmxlIGlkPVwic2VhcmNoVGV4dFJlc3VsdHNcIj5cbiAgICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0XCI+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDxsYWJlbD5Bbnk6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC4kXCI+PC9sYWJlbD4gPGJyPlxuICAgICAgICAgPGxhYmVsPk5hbWUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gubmFtZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgICAgPGxhYmVsPlBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgICA8bGFiZWw+RXF1YWxpdHkgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic3RyaWN0XCI+PC9sYWJlbD48YnI+XG4gICAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hPYmpSZXN1bHRzXCI+XG4gICAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdFwiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5waG9uZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIHZhciBleHBlY3RGcmllbmROYW1lcyA9IGZ1bmN0aW9uKGV4cGVjdGVkTmFtZXMsIGtleSkge1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHtcbiAgICAgICAgICAgICAgIGV4cGVjdCh3ZC5nZXRUZXh0KCkpLnRvTWF0Y2goZXhwZWN0ZWROYW1lc1tpXSk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciBzZWFyY2hUZXh0ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoVGV4dCcpKTtcbiAgICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7XG4gICAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0FkYW0nXSwgJ2ZyaWVuZCcpO1xuICBcbiAgICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCc3NicpO1xuICAgICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpO1xuICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTtcbiAgICAgICAgICAgc2VhcmNoQW55LmNsZWFyKCk7XG4gICAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpO1xuICAgICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgICB9KTtcbiAgICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpO1xuICAgICAgICAgICB2YXIgc3RyaWN0ID0gZWxlbWVudChieS5tb2RlbCgnc3RyaWN0JykpO1xuICAgICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7XG4gICAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7XG4gICAgICAgICAgIHN0cmljdC5jbGljaygpO1xuICAgICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICBmdW5jdGlvbiBmaWx0ZXJGaWx0ZXIoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXkpIHtcbiAgICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICAgIGlmIChhcnJheSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG1pbkVycignZmlsdGVyJykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFueVByb3BlcnR5S2V5ID0gYW55UHJvcGVydHlLZXkgfHwgJyQnO1xuICAgICAgdmFyIGV4cHJlc3Npb25UeXBlID0gZ2V0VHlwZUZvckZpbHRlcihleHByZXNzaW9uKTtcbiAgICAgIHZhciBwcmVkaWNhdGVGbjtcbiAgICAgIHZhciBtYXRjaEFnYWluc3RBbnlQcm9wO1xuXG4gICAgICBzd2l0Y2ggKGV4cHJlc3Npb25UeXBlKSB7XG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICBwcmVkaWNhdGVGbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdudWxsJzpcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBtYXRjaEFnYWluc3RBbnlQcm9wID0gdHJ1ZTtcbiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnJheSwgcHJlZGljYXRlRm4pO1xuICAgIH07XG4gIH1cblxuICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBgZmlsdGVyRmlsdGVyYFxuICBmdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgIHZhciBzaG91bGRNYXRjaFByaW1pdGl2ZXMgPSBpc09iamVjdChleHByZXNzaW9uKSAmJiBhbnlQcm9wZXJ0eUtleSBpbiBleHByZXNzaW9uO1xuICAgIHZhciBwcmVkaWNhdGVGbjtcblxuICAgIGlmIChjb21wYXJhdG9yID09PSB0cnVlKSB7XG4gICAgICBjb21wYXJhdG9yID0gZXF1YWxzO1xuICAgIH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24oY29tcGFyYXRvcikpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbiBjb21wYXJhdG9yKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGFjdHVhbCkpIHtcbiAgICAgICAgICAvLyBObyBzdWJzdHJpbmcgbWF0Y2hpbmcgYWdhaW5zdCBgdW5kZWZpbmVkYFxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0dWFsID09PSBudWxsIHx8IGV4cGVjdGVkID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYG51bGxgOyBvbmx5IG1hdGNoIGFnYWluc3QgYG51bGxgXG4gICAgICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gZXhwZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0KGV4cGVjdGVkKSB8fCBpc09iamVjdChhY3R1YWwpICYmICFoYXNDdXN0b21Ub1N0cmluZyhhY3R1YWwpKSB7XG4gICAgICAgICAgLy8gU2hvdWxkIG5vdCBjb21wYXJlIHByaW1pdGl2ZXMgYWdhaW5zdCBvYmplY3RzLCB1bmxlc3MgdGhleSBoYXZlIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZFxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjdHVhbCA9IGxvd2VyY2FzZSgnJyArIGFjdHVhbCk7XG4gICAgICAgIGV4cGVjdGVkID0gbG93ZXJjYXNlKCcnICsgZXhwZWN0ZWQpO1xuICAgICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpICE9PSAtMTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJlZGljYXRlRm4gPSBmdW5jdGlvbiBwcmVkaWNhdGVGbihpdGVtKSB7XG4gICAgICBpZiAoc2hvdWxkTWF0Y2hQcmltaXRpdmVzICYmICFpc09iamVjdChpdGVtKSkge1xuICAgICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvblthbnlQcm9wZXJ0eUtleV0sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBmYWxzZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJlZGljYXRlRm47XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCwgZG9udE1hdGNoV2hvbGVPYmplY3QpIHtcbiAgICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZUZvckZpbHRlcihleHBlY3RlZCk7XG5cbiAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJyAmJiBleHBlY3RlZC5jaGFyQXQoMCkgPT09ICchJykge1xuICAgICAgcmV0dXJuICFkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLnN1YnN0cmluZygxKSwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShhY3R1YWwpKSB7XG4gICAgICAvLyBJbiBjYXNlIGBhY3R1YWxgIGlzIGFuIGFycmF5LCBjb25zaWRlciBpdCBhIG1hdGNoXG4gICAgICAvLyBpZiBBTlkgb2YgaXQncyBpdGVtcyBtYXRjaGVzIGBleHBlY3RlZGBcbiAgICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN3aXRjaCAoYWN0dWFsVHlwZSkge1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgaWYgKG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICAgIC8vIFVuZGVyIGNlcnRhaW4sIHJhcmUsIGNpcmN1bXN0YW5jZXMsIGtleSBtYXkgbm90IGJlIGEgc3RyaW5nIGFuZCBgY2hhckF0YCB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNTY0NFxuICAgICAgICAgICAgaWYgKGtleS5jaGFyQXQgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIGRlZXBDb21wYXJlKGFjdHVhbFtrZXldLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIHRydWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAoa2V5IGluIGV4cGVjdGVkKSB7XG4gICAgICAgICAgICB2YXIgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZFtrZXldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRWYWwpIHx8IGlzVW5kZWZpbmVkKGV4cGVjdGVkVmFsKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1hdGNoQW55UHJvcGVydHkgPSBrZXkgPT09IGFueVByb3BlcnR5S2V5O1xuICAgICAgICAgICAgdmFyIGFjdHVhbFZhbCA9IG1hdGNoQW55UHJvcGVydHkgPyBhY3R1YWwgOiBhY3R1YWxba2V5XTtcbiAgICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVXNlZCBmb3IgZWFzaWx5IGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIGBudWxsYCBhbmQgYWN0dWFsIGBvYmplY3RgXG4gIGZ1bmN0aW9uIGdldFR5cGVGb3JGaWx0ZXIodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbCk7XG4gIH1cblxuICB2YXIgTUFYX0RJR0lUUyA9IDIyO1xuICB2YXIgREVDSU1BTF9TRVAgPSAnLic7XG4gIHZhciBaRVJPX0NIQVIgPSAnMCc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmaWx0ZXJcbiAgICogQG5hbWUgY3VycmVuY3lcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZvcm1hdHMgYSBudW1iZXIgYXMgYSBjdXJyZW5jeSAoaWUgJDEsMjM0LjU2KS4gV2hlbiBubyBjdXJyZW5jeSBzeW1ib2wgaXMgcHJvdmlkZWQsIGRlZmF1bHRcbiAgICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IElucHV0IHRvIGZpbHRlci5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICAgKiBAcGFyYW0ge251bWJlcj19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIGFtb3VudCB0bywgZGVmYXVsdHMgdG8gZGVmYXVsdCBtYXggZnJhY3Rpb24gc2l6ZSBmb3IgY3VycmVudCBsb2NhbGVcbiAgICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIG51bWJlci5cbiAgICpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCIgbmFtZT1cImN1cnJlbmN5LWZpbHRlclwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5hbW91bnQgPSAxMjM0LjU2O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cImFtb3VudFwiIGFyaWEtbGFiZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktZGVmYXVsdFwiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+XG4gICAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1jdXN0b21cIj57e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwifX08L3NwYW4+PGJyPlxuICAgICAgICAgICBubyBmcmFjdGlvbnMgKDApOiA8c3BhbiBpZD1cImN1cnJlbmN5LW5vLWZyYWN0aW9uc1wiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCI6MH19PC9zcGFuPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgaW5pdCB3aXRoIDEyMzQuNTYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCckMSwyMzQuNTYnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNC41NicpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM1Jyk7XG4gICAgICAgICB9KTtcbiAgICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09PSAnc2FmYXJpJykge1xuICAgICAgICAgICAgIC8vIFNhZmFyaSBkb2VzIG5vdCB1bmRlcnN0YW5kIHRoZSBtaW51cyBrZXkuIFNlZVxuICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLnNlbmRLZXlzKCctMTIzNCcpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0kMSwyMzQuMDAnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuICBmdW5jdGlvbiBjdXJyZW5jeUZpbHRlcigkbG9jYWxlKSB7XG4gICAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICAgIHJldHVybiBmdW5jdGlvbiAoYW1vdW50LCBjdXJyZW5jeVN5bWJvbCwgZnJhY3Rpb25TaXplKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICAgIGN1cnJlbmN5U3ltYm9sID0gZm9ybWF0cy5DVVJSRU5DWV9TWU07XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICAgIGZyYWN0aW9uU2l6ZSA9IGZvcm1hdHMuUEFUVEVSTlNbMV0ubWF4RnJhYztcbiAgICAgIH1cblxuICAgICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgICByZXR1cm4gYW1vdW50ID09IG51bGwgPyBhbW91bnQgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5yZXBsYWNlKC9cXHUwMEE0L2csIGN1cnJlbmN5U3ltYm9sKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmaWx0ZXJcbiAgICogQG5hbWUgbnVtYmVyXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuXG4gICAqXG4gICAqIElmIHRoZSBpbnB1dCBpcyBudWxsIG9yIHVuZGVmaW5lZCwgaXQgd2lsbCBqdXN0IGJlIHJldHVybmVkLlxuICAgKiBJZiB0aGUgaW5wdXQgaXMgaW5maW5pdGUgKEluZmluaXR5IG9yIC1JbmZpbml0eSksIHRoZSBJbmZpbml0eSBzeW1ib2wgJ+KInicgb3IgJy3iiJ4nIGlzIHJldHVybmVkLCByZXNwZWN0aXZlbHkuXG4gICAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cbiAgICogSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgdGhlbiB0aGUgZnJhY3Rpb24gc2l6ZSBpcyBjb21wdXRlZCBmcm9tIHRoZSBjdXJyZW50IGxvY2FsZSdzIG51bWJlclxuICAgKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBgZnJhY3Rpb25TaXplYCBhcHByb3ByaWF0ZWx5IGZvcm1hdHRlZCBiYXNlZCBvbiB0aGUgY3VycmVudFxuICAgKiAgICAgICAgICAgICAgICAgICBsb2NhbGUgKGUuZy4sIGluIHRoZSBlbl9VUyBsb2NhbGUgaXQgd2lsbCBoYXZlIFwiLlwiIGFzIHRoZSBkZWNpbWFsIHNlcGFyYXRvciBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgaW5jbHVkZSBcIixcIiBncm91cCBzZXBhcmF0b3JzIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQpLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCIgbmFtZT1cIm51bWJlci1maWx0ZXJcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnZhbCA9IDEyMzQuNTY3ODk7XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzogPHNwYW4gaWQ9J251bWJlci1kZWZhdWx0Jz57e3ZhbCB8IG51bWJlcn19PC9zcGFuPjxicj5cbiAgICAgICAgICAgTm8gZnJhY3Rpb25zOiA8c3Bhbj57e3ZhbCB8IG51bWJlcjowfX08L3NwYW4+PGJyPlxuICAgICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgbnVtYmVycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbnVtYmVyLWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNC41NjgnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMSwyMzQuNTY3OScpO1xuICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLmNsZWFyKCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMywzNzQuMzMzJyk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMywzNzQnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICBudW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuICBmdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xuICAgIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICAgIC8vIGlmIG51bGwgb3IgdW5kZWZpbmVkIHBhc3MgaXQgdGhyb3VnaFxuICAgICAgcmV0dXJuIG51bWJlciA9PSBudWxsID8gbnVtYmVyIDogZm9ybWF0TnVtYmVyKG51bWJlciwgZm9ybWF0cy5QQVRURVJOU1swXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsIGZyYWN0aW9uU2l6ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIG51bWJlciAoYXMgYSBzdHJpbmcpIGludG8gdGhyZWUgY29tcG9uZW50cyB0aGF0IGNhbiBiZSB1c2VkXG4gICAqIGZvciBmb3JtYXR0aW5nIHRoZSBudW1iZXIuXG4gICAqXG4gICAqIChTaWduaWZpY2FudCBiaXRzIG9mIHRoaXMgcGFyc2UgYWxnb3JpdGhtIGNhbWUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvKVxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IG51bVN0ciBUaGUgbnVtYmVyIHRvIHBhcnNlXG4gICAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhpcyBudW1iZXIsIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAgLSBkIDogYW4gYXJyYXkgb2YgZGlnaXRzIGNvbnRhaW5pbmcgbGVhZGluZyB6ZXJvcyBhcyBuZWNlc3NhcnlcbiAgICogIC0gaSA6IHRoZSBudW1iZXIgb2YgdGhlIGRpZ2l0cyBpbiBgZGAgdGhhdCBhcmUgdG8gdGhlIGxlZnQgb2YgdGhlIGRlY2ltYWwgcG9pbnRcbiAgICogIC0gZSA6IHRoZSBleHBvbmVudCBmb3IgbnVtYmVycyB0aGF0IHdvdWxkIG5lZWQgbW9yZSB0aGFuIGBNQVhfRElHSVRTYCBkaWdpdHMgaW4gYGRgXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZShudW1TdHIpIHtcbiAgICB2YXIgZXhwb25lbnQgPSAwLFxuICAgICAgICBkaWdpdHMsXG4gICAgICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cztcbiAgICB2YXIgaSwgaiwgemVyb3M7XG5cbiAgICAvLyBEZWNpbWFsIHBvaW50P1xuICAgIGlmICgobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmluZGV4T2YoREVDSU1BTF9TRVApKSA+IC0xKSB7XG4gICAgICBudW1TdHIgPSBudW1TdHIucmVwbGFjZShERUNJTUFMX1NFUCwgJycpO1xuICAgIH1cblxuICAgIC8vIEV4cG9uZW50aWFsIGZvcm0/XG4gICAgaWYgKChpID0gbnVtU3RyLnNlYXJjaCgvZS9pKSkgPiAwKSB7XG4gICAgICAvLyBXb3JrIG91dCB0aGUgZXhwb25lbnQuXG4gICAgICBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gaTtcbiAgICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cyArPSArbnVtU3RyLnNsaWNlKGkgKyAxKTtcbiAgICAgIG51bVN0ciA9IG51bVN0ci5zdWJzdHJpbmcoMCwgaSk7XG4gICAgfSBlbHNlIGlmIChudW1iZXJPZkludGVnZXJEaWdpdHMgPCAwKSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gZGVjaW1hbCBwb2ludCBvciBleHBvbmVudCBzbyBpdCBpcyBhbiBpbnRlZ2VyLlxuICAgICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBDb3VudCB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3MuXG4gICAgZm9yIChpID0gMDsgbnVtU3RyLmNoYXJBdChpKSA9PT0gWkVST19DSEFSOyBpKyspIHsvKiBlbXB0eSAqL31cblxuICAgIGlmIChpID09PSAoemVyb3MgPSBudW1TdHIubGVuZ3RoKSkge1xuICAgICAgLy8gVGhlIGRpZ2l0cyBhcmUgYWxsIHplcm8uXG4gICAgICBkaWdpdHMgPSBbMF07XG4gICAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb3VudCB0aGUgbnVtYmVyIG9mIHRyYWlsaW5nIHplcm9zXG4gICAgICB6ZXJvcy0tO1xuICAgICAgd2hpbGUgKG51bVN0ci5jaGFyQXQoemVyb3MpID09PSBaRVJPX0NIQVIpIHtcbiAgICAgICAgemVyb3MtLTtcbiAgICAgIH0gLy8gVHJhaWxpbmcgemVyb3MgYXJlIGluc2lnbmlmaWNhbnQgc28gaWdub3JlIHRoZW1cbiAgICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cyAtPSBpO1xuICAgICAgZGlnaXRzID0gW107XG4gICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLlxuICAgICAgZm9yIChqID0gMDsgaSA8PSB6ZXJvczsgaSsrLCBqKyspIHtcbiAgICAgICAgZGlnaXRzW2pdID0gK251bVN0ci5jaGFyQXQoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG51bWJlciBvdmVyZmxvd3MgdGhlIG1heGltdW0gYWxsb3dlZCBkaWdpdHMgdGhlbiB1c2UgYW4gZXhwb25lbnQuXG4gICAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA+IE1BWF9ESUdJVFMpIHtcbiAgICAgIGRpZ2l0cyA9IGRpZ2l0cy5zcGxpY2UoMCwgTUFYX0RJR0lUUyAtIDEpO1xuICAgICAgZXhwb25lbnQgPSBudW1iZXJPZkludGVnZXJEaWdpdHMgLSAxO1xuICAgICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkOiBkaWdpdHMsIGU6IGV4cG9uZW50LCBpOiBudW1iZXJPZkludGVnZXJEaWdpdHMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3VuZCB0aGUgcGFyc2VkIG51bWJlciB0byB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuICAgKiBUaGlzIGZ1bmN0aW9uIGNoYW5nZWQgdGhlIHBhcnNlZE51bWJlciBpbi1wbGFjZVxuICAgKi9cbiAgZnVuY3Rpb24gcm91bmROdW1iZXIocGFyc2VkTnVtYmVyLCBmcmFjdGlvblNpemUsIG1pbkZyYWMsIG1heEZyYWMpIHtcbiAgICB2YXIgZGlnaXRzID0gcGFyc2VkTnVtYmVyLmQ7XG4gICAgdmFyIGZyYWN0aW9uTGVuID0gZGlnaXRzLmxlbmd0aCAtIHBhcnNlZE51bWJlci5pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGZyYWN0aW9uU2l6ZSBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkOyBgK2ZyYWN0aW9uU2l6ZWAgY29udmVydHMgaXQgdG8gYSBudW1iZXJcbiAgICBmcmFjdGlvblNpemUgPSBpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpID8gTWF0aC5taW4oTWF0aC5tYXgobWluRnJhYywgZnJhY3Rpb25MZW4pLCBtYXhGcmFjKSA6ICtmcmFjdGlvblNpemU7XG5cbiAgICAvLyBUaGUgaW5kZXggb2YgdGhlIGRpZ2l0IHRvIHdoZXJlIHJvdW5kaW5nIGlzIHRvIG9jY3VyXG4gICAgdmFyIHJvdW5kQXQgPSBmcmFjdGlvblNpemUgKyBwYXJzZWROdW1iZXIuaTtcbiAgICB2YXIgZGlnaXQgPSBkaWdpdHNbcm91bmRBdF07XG5cbiAgICBpZiAocm91bmRBdCA+IDApIHtcbiAgICAgIC8vIERyb3AgZnJhY3Rpb25hbCBkaWdpdHMgYmV5b25kIGByb3VuZEF0YFxuICAgICAgZGlnaXRzLnNwbGljZShNYXRoLm1heChwYXJzZWROdW1iZXIuaSwgcm91bmRBdCkpO1xuXG4gICAgICAvLyBTZXQgbm9uLWZyYWN0aW9uYWwgZGlnaXRzIGJleW9uZCBgcm91bmRBdGAgdG8gMFxuICAgICAgZm9yICh2YXIgaiA9IHJvdW5kQXQ7IGogPCBkaWdpdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZGlnaXRzW2pdID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugcm91bmRlZCB0byB6ZXJvIHNvIHJlc2V0IHRoZSBwYXJzZWROdW1iZXJcbiAgICAgIGZyYWN0aW9uTGVuID0gTWF0aC5tYXgoMCwgZnJhY3Rpb25MZW4pO1xuICAgICAgcGFyc2VkTnVtYmVyLmkgPSAxO1xuICAgICAgZGlnaXRzLmxlbmd0aCA9IE1hdGgubWF4KDEsIHJvdW5kQXQgPSBmcmFjdGlvblNpemUgKyAxKTtcbiAgICAgIGRpZ2l0c1swXSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHJvdW5kQXQ7IGkrKykge1xuICAgICAgICBkaWdpdHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaWdpdCA+PSA1KSB7XG4gICAgICBpZiAocm91bmRBdCAtIDEgPCAwKSB7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrID4gcm91bmRBdDsgay0tKSB7XG4gICAgICAgICAgZGlnaXRzLnVuc2hpZnQoMCk7XG4gICAgICAgICAgcGFyc2VkTnVtYmVyLmkrKztcbiAgICAgICAgfVxuICAgICAgICBkaWdpdHMudW5zaGlmdCgxKTtcbiAgICAgICAgcGFyc2VkTnVtYmVyLmkrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpZ2l0c1tyb3VuZEF0IC0gMV0rKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQYWQgb3V0IHdpdGggemVyb3MgdG8gZ2V0IHRoZSByZXF1aXJlZCBmcmFjdGlvbiBsZW5ndGhcbiAgICBmb3IgKDsgZnJhY3Rpb25MZW4gPCBNYXRoLm1heCgwLCBmcmFjdGlvblNpemUpOyBmcmFjdGlvbkxlbisrKSB7XG4gICAgICBkaWdpdHMucHVzaCgwKTtcbiAgICB9IC8vIERvIGFueSBjYXJyeWluZywgZS5nLiBhIGRpZ2l0IHdhcyByb3VuZGVkIHVwIHRvIDEwXG4gICAgdmFyIGNhcnJ5ID0gZGlnaXRzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChjYXJyeSwgZCwgaSwgZGlnaXRzKSB7XG4gICAgICBkID0gZCArIGNhcnJ5O1xuICAgICAgZGlnaXRzW2ldID0gZCAlIDEwO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCAvIDEwKTtcbiAgICB9LCAwKTtcbiAgICBpZiAoY2FycnkpIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KGNhcnJ5KTtcbiAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBhIG51bWJlciBpbnRvIGEgc3RyaW5nXG4gICAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyICAgICAgIFRoZSBudW1iZXIgdG8gZm9ybWF0XG4gICAqIEBwYXJhbSAge3tcbiAgICogICAgICAgICAgIG1pbkZyYWMsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICAgKiAgICAgICAgICAgbWF4RnJhYywgLy8gdGhlIG1heGltdW0gbnVtYmVyIG9mIGRpZ2l0cyByZXF1aXJlZCBpbiB0aGUgZnJhY3Rpb24gcGFydCBvZiB0aGUgbnVtYmVyXG4gICAqICAgICAgICAgICBnU2l6ZSwgICAvLyBudW1iZXIgb2YgZGlnaXRzIGluIGVhY2ggZ3JvdXAgb2Ygc2VwYXJhdGVkIGRpZ2l0c1xuICAgKiAgICAgICAgICAgbGdTaXplLCAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgbGFzdCBncm91cCBvZiBkaWdpdHMgYmVmb3JlIHRoZSBkZWNpbWFsIHNlcGFyYXRvclxuICAgKiAgICAgICAgICAgbmVnUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIG5lZ2F0aXZlIG51bWJlciAoZS5nLiBgLWAgb3IgYChgKSlcbiAgICogICAgICAgICAgIHBvc1ByZSwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gaW4gZnJvbnQgb2YgYSBwb3NpdGl2ZSBudW1iZXJcbiAgICogICAgICAgICAgIG5lZ1N1ZiwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYClgKVxuICAgKiAgICAgICAgICAgcG9zU3VmICAgLy8gdGhlIHN0cmluZyB0byBnbyBhZnRlciBhIHBvc2l0aXZlIG51bWJlclxuICAgKiAgICAgICAgIH19IHBhdHRlcm5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBncm91cFNlcCAgICAgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBncm91cHMgb2YgbnVtYmVyIChlLmcuIGAsYClcbiAgICogQHBhcmFtICB7c3RyaW5nfSBkZWNpbWFsU2VwICAgVGhlIHN0cmluZyB0byBhY3QgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIChlLmcuIGAuYClcbiAgICogQHBhcmFtICB7W3R5cGVdfSBmcmFjdGlvblNpemUgVGhlIHNpemUgb2YgdGhlIGZyYWN0aW9uYWwgcGFydCBvZiB0aGUgbnVtYmVyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgIFRoZSBudW1iZXIgZm9ybWF0dGVkIGFzIGEgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICBpZiAoIShpc1N0cmluZyhudW1iZXIpIHx8IGlzTnVtYmVyKG51bWJlcikpIHx8IGlzTmFOKG51bWJlcikpIHJldHVybiAnJztcblxuICAgIHZhciBpc0luZmluaXR5ID0gIWlzRmluaXRlKG51bWJlcik7XG4gICAgdmFyIGlzWmVybyA9IGZhbHNlO1xuICAgIHZhciBudW1TdHIgPSBNYXRoLmFicyhudW1iZXIpICsgJycsXG4gICAgICAgIGZvcm1hdHRlZFRleHQgPSAnJyxcbiAgICAgICAgcGFyc2VkTnVtYmVyO1xuXG4gICAgaWYgKGlzSW5maW5pdHkpIHtcbiAgICAgIGZvcm1hdHRlZFRleHQgPSAnXFx1MjIxRSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZE51bWJlciA9IHBhcnNlKG51bVN0cik7XG5cbiAgICAgIHJvdW5kTnVtYmVyKHBhcnNlZE51bWJlciwgZnJhY3Rpb25TaXplLCBwYXR0ZXJuLm1pbkZyYWMsIHBhdHRlcm4ubWF4RnJhYyk7XG5cbiAgICAgIHZhciBkaWdpdHMgPSBwYXJzZWROdW1iZXIuZDtcbiAgICAgIHZhciBpbnRlZ2VyTGVuID0gcGFyc2VkTnVtYmVyLmk7XG4gICAgICB2YXIgZXhwb25lbnQgPSBwYXJzZWROdW1iZXIuZTtcbiAgICAgIHZhciBkZWNpbWFscyA9IFtdO1xuICAgICAgaXNaZXJvID0gZGlnaXRzLnJlZHVjZShmdW5jdGlvbiAoaXNaZXJvLCBkKSB7XG4gICAgICAgIHJldHVybiBpc1plcm8gJiYgIWQ7XG4gICAgICB9LCB0cnVlKTtcblxuICAgICAgLy8gcGFkIHplcm9zIGZvciBzbWFsbCBudW1iZXJzXG4gICAgICB3aGlsZSAoaW50ZWdlckxlbiA8IDApIHtcbiAgICAgICAgZGlnaXRzLnVuc2hpZnQoMCk7XG4gICAgICAgIGludGVnZXJMZW4rKztcbiAgICAgIH1cblxuICAgICAgLy8gZXh0cmFjdCBkZWNpbWFscyBkaWdpdHNcbiAgICAgIGlmIChpbnRlZ2VyTGVuID4gMCkge1xuICAgICAgICBkZWNpbWFscyA9IGRpZ2l0cy5zcGxpY2UoaW50ZWdlckxlbiwgZGlnaXRzLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWNpbWFscyA9IGRpZ2l0cztcbiAgICAgICAgZGlnaXRzID0gWzBdO1xuICAgICAgfVxuXG4gICAgICAvLyBmb3JtYXQgdGhlIGludGVnZXIgZGlnaXRzIHdpdGggZ3JvdXBpbmcgc2VwYXJhdG9yc1xuICAgICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgICAgaWYgKGRpZ2l0cy5sZW5ndGggPj0gcGF0dGVybi5sZ1NpemUpIHtcbiAgICAgICAgZ3JvdXBzLnVuc2hpZnQoZGlnaXRzLnNwbGljZSgtcGF0dGVybi5sZ1NpemUsIGRpZ2l0cy5sZW5ndGgpLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoID4gcGF0dGVybi5nU2l6ZSkge1xuICAgICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuc3BsaWNlKC1wYXR0ZXJuLmdTaXplLCBkaWdpdHMubGVuZ3RoKS5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlnaXRzLmxlbmd0aCkge1xuICAgICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuam9pbignJykpO1xuICAgICAgfVxuICAgICAgZm9ybWF0dGVkVGV4dCA9IGdyb3Vwcy5qb2luKGdyb3VwU2VwKTtcblxuICAgICAgLy8gYXBwZW5kIHRoZSBkZWNpbWFsIGRpZ2l0c1xuICAgICAgaWYgKGRlY2ltYWxzLmxlbmd0aCkge1xuICAgICAgICBmb3JtYXR0ZWRUZXh0ICs9IGRlY2ltYWxTZXAgKyBkZWNpbWFscy5qb2luKCcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4cG9uZW50KSB7XG4gICAgICAgIGZvcm1hdHRlZFRleHQgKz0gJ2UrJyArIGV4cG9uZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMCAmJiAhaXNaZXJvKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi5uZWdQcmUgKyBmb3JtYXR0ZWRUZXh0ICsgcGF0dGVybi5uZWdTdWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnBvc1ByZSArIGZvcm1hdHRlZFRleHQgKyBwYXR0ZXJuLnBvc1N1ZjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0sIG5lZ1dyYXApIHtcbiAgICB2YXIgbmVnID0gJyc7XG4gICAgaWYgKG51bSA8IDAgfHwgbmVnV3JhcCAmJiBudW0gPD0gMCkge1xuICAgICAgaWYgKG5lZ1dyYXApIHtcbiAgICAgICAgbnVtID0gLW51bSArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgICBuZWcgPSAnLSc7XG4gICAgICB9XG4gICAgfVxuICAgIG51bSA9ICcnICsgbnVtO1xuICAgIHdoaWxlIChudW0ubGVuZ3RoIDwgZGlnaXRzKSB7XG4gICAgICBudW0gPSBaRVJPX0NIQVIgKyBudW07XG4gICAgfWlmICh0cmltKSB7XG4gICAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICAgIH1cbiAgICByZXR1cm4gbmVnICsgbnVtO1xuICB9XG5cbiAgZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0sIG5lZ1dyYXApIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xuICAgICAgaWYgKG9mZnNldCA+IDAgfHwgdmFsdWUgPiAtb2Zmc2V0KSB7XG4gICAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT09IC0xMikgdmFsdWUgPSAxMjtcbiAgICAgIHJldHVybiBwYWROdW1iZXIodmFsdWUsIHNpemUsIHRyaW0sIG5lZ1dyYXApO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkYXRlU3RyR2V0dGVyKG5hbWUsIHNob3J0Rm9ybSwgc3RhbmRBbG9uZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSwgZm9ybWF0cykge1xuICAgICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgICB2YXIgcHJvcFByZWZpeCA9IChzdGFuZEFsb25lID8gJ1NUQU5EQUxPTkUnIDogJycpICsgKHNob3J0Rm9ybSA/ICdTSE9SVCcgOiAnJyk7XG4gICAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHByb3BQcmVmaXggKyBuYW1lKTtcblxuICAgICAgcmV0dXJuIGZvcm1hdHNbZ2V0XVt2YWx1ZV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVab25lR2V0dGVyKGRhdGUsIGZvcm1hdHMsIG9mZnNldCkge1xuICAgIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gICAgdmFyIHBhZGRlZFpvbmUgPSB6b25lID49IDAgPyAnKycgOiAnJztcblxuICAgIHBhZGRlZFpvbmUgKz0gcGFkTnVtYmVyKE1hdGhbem9uZSA+IDAgPyAnZmxvb3InIDogJ2NlaWwnXSh6b25lIC8gNjApLCAyKSArIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICAgIHJldHVybiBwYWRkZWRab25lO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IG5ldyBEYXRlKHllYXIsIDAsIDEpLmdldERheSgpO1xuICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheSAoKzEgdG8gYWNjb3VudCBmb3IgMXN0ID0gNSlcbiAgICAvLyAxMSA9IGluZGV4IG9mICpuZXh0KiBUaHVyc2RheSAoKzEgYWNjb3VudCBmb3IgMXN0ID0gMTIpXG4gICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsIChkYXlPZldlZWtPbkZpcnN0IDw9IDQgPyA1IDogMTIpIC0gZGF5T2ZXZWVrT25GaXJzdCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5XG4gICAgZGF0ZXRpbWUuZ2V0RGF0ZSgpICsgKDQgLSBkYXRldGltZS5nZXREYXkoKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICB2YXIgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgICByZXN1bHQgPSAxICsgTWF0aC5yb3VuZChkaWZmIC8gNi4wNDhlOCk7IC8vIDYuMDQ4ZTggbXMgcGVyIHdlZWtcblxuICAgICAgcmV0dXJuIHBhZE51bWJlcihyZXN1bHQsIHNpemUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSA8PSAwID8gZm9ybWF0cy5FUkFTWzBdIDogZm9ybWF0cy5FUkFTWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSA8PSAwID8gZm9ybWF0cy5FUkFOQU1FU1swXSA6IGZvcm1hdHMuRVJBTkFNRVNbMV07XG4gIH1cblxuICB2YXIgREFURV9GT1JNQVRTID0ge1xuICAgIHl5eXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgNCwgMCwgZmFsc2UsIHRydWUpLFxuICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUsIHRydWUpLFxuICAgIHk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMSwgMCwgZmFsc2UsIHRydWUpLFxuICAgIE1NTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJyksXG4gICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLFxuICAgIE1NOiBkYXRlR2V0dGVyKCdNb250aCcsIDIsIDEpLFxuICAgIE06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMSwgMSksXG4gICAgTExMTDogZGF0ZVN0ckdldHRlcignTW9udGgnLCBmYWxzZSwgdHJ1ZSksXG4gICAgZGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAyKSxcbiAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksXG4gICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksXG4gICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgIGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSwgLTEyKSxcbiAgICBtbTogZGF0ZUdldHRlcignTWludXRlcycsIDIpLFxuICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSxcbiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLFxuICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAvLyB3aGlsZSBJU08gODYwMSByZXF1aXJlcyBmcmFjdGlvbnMgdG8gYmUgcHJlZml4ZWQgd2l0aCBgLmAgb3IgYCxgXG4gICAgLy8gd2UgY2FuIGJlIGp1c3Qgc2FmZWx5IHJlbHkgb24gdXNpbmcgYHNzc2Agc2luY2Ugd2UgY3VycmVudGx5IGRvbid0IHN1cHBvcnQgc2luZ2xlIG9yIHR3byBkaWdpdCBmcmFjdGlvbnNcbiAgICBzc3M6IGRhdGVHZXR0ZXIoJ01pbGxpc2Vjb25kcycsIDMpLFxuICAgIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLFxuICAgIEVFRTogZGF0ZVN0ckdldHRlcignRGF5JywgdHJ1ZSksXG4gICAgYTogYW1wbUdldHRlcixcbiAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICB3OiB3ZWVrR2V0dGVyKDEpLFxuICAgIEc6IGVyYUdldHRlcixcbiAgICBHRzogZXJhR2V0dGVyLFxuICAgIEdHRzogZXJhR2V0dGVyLFxuICAgIEdHR0c6IGxvbmdFcmFHZXR0ZXJcbiAgfTtcblxuICB2YXIgREFURV9GT1JNQVRTX1NQTElUID0gLygoPzpbXnlNTGRIaG1zYVpFd0cnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xMK3xkK3xIK3xoK3xtK3xzK3xhfFp8Ryt8dyspKShbXFxzXFxTXSopLyxcbiAgICAgIE5VTUJFUl9TVFJJTkcgPSAvXi0/XFxkKyQvO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZmlsdGVyXG4gICAqIEBuYW1lIGRhdGVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAgICpcbiAgICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZWxlbWVudHM6XG4gICAqXG4gICAqICAgKiBgJ3l5eXknYDogNCBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyIChlLmcuIEFEIDEgPT4gMDAwMSwgQUQgMjAxMCA9PiAyMDEwKVxuICAgKiAgICogYCd5eSdgOiAyIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIHBhZGRlZCAoMDAtOTkpLiAoZS5nLiBBRCAyMDAxID0+IDAxLCBBRCAyMDEwID0+IDEwKVxuICAgKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICAgKiAgICogYCdNTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpXG4gICAqICAgKiBgJ01NTSdgOiBNb250aCBpbiB5ZWFyIChKYW4tRGVjKVxuICAgKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICAgKiAgICogYCdNJ2A6IE1vbnRoIGluIHllYXIgKDEtMTIpXG4gICAqICAgKiBgJ0xMTEwnYDogU3RhbmQtYWxvbmUgbW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcilcbiAgICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICAgKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSlcbiAgICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KVxuICAgKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICAgKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMylcbiAgICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMylcbiAgICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAgICogICAqIGAnaCdgOiBIb3VyIGluIEFNL1BNLCAoMS0xMilcbiAgICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpXG4gICAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gICAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpXG4gICAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSlcbiAgICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICAgKiAgICogYCdhJ2A6IEFNL1BNIG1hcmtlclxuICAgKiAgICogYCdaJ2A6IDQgZGlnaXQgKCtzaWduKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZXpvbmUgb2Zmc2V0ICgtMTIwMC0rMTIwMClcbiAgICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICAgKiAgICogYCd3J2A6IFdlZWsgb2YgeWVhciAoMC01MykuIFdlZWsgMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICAgKiAgICogYCdHJ2AsIGAnR0cnYCwgYCdHR0cnYDogVGhlIGFiYnJldmlhdGVkIGZvcm0gb2YgdGhlIGVyYSBzdHJpbmcgKGUuZy4gJ0FEJylcbiAgICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gICAqXG4gICAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBhbHNvIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByZWRlZmluZWRcbiAgICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAgICpcbiAgICogICAqIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSBoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlXG4gICAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAgICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgUE0pXG4gICAqICAgKiBgJ2Z1bGxEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdFRUVFLCBNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZVxuICAgKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAgICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKVxuICAgKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKVxuICAgKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICAgKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IFBNKVxuICAgKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgUE0pXG4gICAqXG4gICAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIGVzY2FwZWQgYnkgc3Vycm91bmRpbmcgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuXG4gICAqICAgYFwiaCAnaW4gdGhlIG1vcm5pbmcnXCJgKS4gSW4gb3JkZXIgdG8gb3V0cHV0IGEgc2luZ2xlIHF1b3RlLCBlc2NhcGUgaXQgLSBpLmUuLCB0d28gc2luZ2xlIHF1b3RlcyBpbiBhIHNlcXVlbmNlXG4gICAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAgICpcbiAgICogICBBbnkgb3RoZXIgY2hhcmFjdGVycyBpbiB0aGUgYGZvcm1hdGAgc3RyaW5nIHdpbGwgYmUgb3V0cHV0IGFzLWlzLlxuICAgKlxuICAgKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3JcbiAgICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3Muc3NzWiBhbmQgaXRzXG4gICAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAgICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGZvcm1hdCBGb3JtYXR0aW5nIHJ1bGVzIChzZWUgRGVzY3JpcHRpb24pLiBJZiBub3Qgc3BlY2lmaWVkLFxuICAgKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSB0aW1lem9uZSBUaW1lem9uZSB0byBiZSB1c2VkIGZvciBmb3JtYXR0aW5nLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAgICogICAgY29udGluZW50YWwgVVMgdGltZSB6b25lIGFiYnJldmlhdGlvbnMsIGJ1dCBmb3IgZ2VuZXJhbCB1c2UsIHVzZSBhIHRpbWUgem9uZSBvZmZzZXQsIGZvclxuICAgKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICAgKiAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nIG9yIHRoZSBpbnB1dCBpZiBpbnB1dCBpcyBub3QgcmVjb2duaXplZCBhcyBkYXRlL21pbGxpcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1kYXRlXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+OlxuICAgICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj48YnI+XG4gICAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj48YnI+XG4gICAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjpcbiAgICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj46XG4gICAgICAgICAgICA8c3Bhbj57eycxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIn19PC9zcGFuPjxicj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICAgIHRvTWF0Y2goL09jdCAyXFxkLCAyMDEwIFxcZHsxLDJ9OlxcZHsyfTpcXGR7Mn0gKEFNfFBNKS8pO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWidcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICAgIHRvTWF0Y2goLzIwMTAtMTAtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBAIFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgYXQgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICBkYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbiAgZnVuY3Rpb24gZGF0ZUZpbHRlcigkbG9jYWxlKSB7XG5cbiAgICB2YXIgUl9JU084NjAxX1NUUiA9IC9eKFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKSg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86XFwuKFxcZCspKT8pPyk/KFp8KFsrLV0pKFxcZFxcZCk6PyhcXGRcXGQpKT8pPyQvO1xuICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICAgIGZ1bmN0aW9uIGpzb25TdHJpbmdUb0RhdGUoc3RyaW5nKSB7XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goUl9JU084NjAxX1NUUikpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICAgIHR6SG91ciA9IDAsXG4gICAgICAgICAgICB0ek1pbiA9IDAsXG4gICAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhcixcbiAgICAgICAgICAgIHRpbWVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDSG91cnMgOiBkYXRlLnNldEhvdXJzO1xuXG4gICAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICAgIHR6SG91ciA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTBdKTtcbiAgICAgICAgICB0ek1pbiA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRlU2V0dGVyLmNhbGwoZGF0ZSwgdG9JbnQobWF0Y2hbMV0pLCB0b0ludChtYXRjaFsyXSkgLSAxLCB0b0ludChtYXRjaFszXSkpO1xuICAgICAgICB2YXIgaCA9IHRvSW50KG1hdGNoWzRdIHx8IDApIC0gdHpIb3VyO1xuICAgICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICAgIHZhciBzID0gdG9JbnQobWF0Y2hbNl0gfHwgMCk7XG4gICAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddIHx8IDApKSAqIDEwMDApO1xuICAgICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgICB2YXIgdGV4dCA9ICcnLFxuICAgICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgICAgZm4sXG4gICAgICAgICAgbWF0Y2g7XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7XG4gICAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHtcbiAgICAgICAgZGF0ZSA9IE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSA/IHRvSW50KGRhdGUpIDoganNvblN0cmluZ1RvRGF0ZShkYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTnVtYmVyKGRhdGUpKSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0RhdGUoZGF0ZSkgfHwgIWlzRmluaXRlKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGZvcm1hdCkge1xuICAgICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHBhcnRzID0gY29uY2F0KHBhcnRzLCBtYXRjaCwgMSk7XG4gICAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMucHVzaChmb3JtYXQpO1xuICAgICAgICAgIGZvcm1hdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGVUaW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgICBkYXRlVGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlVGltZXpvbmVPZmZzZXQpO1xuICAgICAgICBkYXRlID0gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgZm4gPSBEQVRFX0ZPUk1BVFNbdmFsdWVdO1xuICAgICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLCBkYXRlVGltZXpvbmVPZmZzZXQpIDogdmFsdWUgPT09ICdcXCdcXCcnID8gJ1xcJycgOiB2YWx1ZS5yZXBsYWNlKC8oXid8JyQpL2csICcnKS5yZXBsYWNlKC8nJy9nLCAnXFwnJyk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZmlsdGVyXG4gICAqIEBuYW1lIGpzb25cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy5cbiAgICpcbiAgICogICBUaGlzIGZpbHRlciBpcyBtb3N0bHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFdoZW4gdXNpbmcgdGhlIGRvdWJsZSBjdXJseSB7e3ZhbHVlfX0gbm90YXRpb25cbiAgICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG9iamVjdCBBbnkgSmF2YVNjcmlwdCBvYmplY3QgKGluY2x1ZGluZyBhcnJheXMgYW5kIHByaW1pdGl2ZSB0eXBlcykgdG8gZmlsdGVyLlxuICAgKiBAcGFyYW0ge251bWJlcj19IHNwYWNpbmcgVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gdXNlIHBlciBpbmRlbnRhdGlvbiwgZGVmYXVsdHMgdG8gMi5cbiAgICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuXG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJmaWx0ZXItanNvblwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8cHJlIGlkPVwiZGVmYXVsdC1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgICAgIDxwcmUgaWQ9XCJjdXN0b20tc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uOjQgfX08L3ByZT5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RlZmF1bHQtc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7Mn1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1c3RvbS1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuIHs0fVwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBqc29uRmlsdGVyKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqZWN0LCBzcGFjaW5nKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoc3BhY2luZykpIHtcbiAgICAgICAgc3BhY2luZyA9IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgc3BhY2luZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZmlsdGVyXG4gICAqIEBuYW1lIGxvd2VyY2FzZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29udmVydHMgc3RyaW5nIHRvIGxvd2VyY2FzZS5cbiAgICpcbiAgICogU2VlIHRoZSB7QGxpbmsgbmcudXBwZXJjYXNlIHVwcGVyY2FzZSBmaWx0ZXIgZG9jdW1lbnRhdGlvbn0gZm9yIGEgZnVuY3Rpb25hbGx5IGlkZW50aWNhbCBleGFtcGxlLlxuICAgKlxuICAgKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gICAqL1xuICB2YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZmlsdGVyXG4gICAqIEBuYW1lIHVwcGVyY2FzZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29udmVydHMgc3RyaW5nIHRvIHVwcGVyY2FzZS5cbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwidXBwZXJjYXNlRmlsdGVyRXhhbXBsZVwiIG5hbWU9XCJmaWx0ZXItdXBwZXJjYXNlXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cHBlcmNhc2VGaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS50aXRsZSA9ICdUaGlzIGlzIGEgdGl0bGUnO1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPCEtLSBUaGlzIHRpdGxlIHNob3VsZCBiZSBmb3JtYXR0ZWQgbm9ybWFsbHkgLS0+XG4gICAgICAgICAgIDxoMT57e3RpdGxlfX08L2gxPlxuICAgICAgICAgICA8IS0tIFRoaXMgdGl0bGUgc2hvdWxkIGJlIGNhcGl0YWxpemVkIC0tPlxuICAgICAgICAgICA8aDE+e3t0aXRsZSB8IHVwcGVyY2FzZX19PC9oMT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIHVwcGVyY2FzZUZpbHRlciA9IHZhbHVlRm4odXBwZXJjYXNlKTtcblxuICAvKipcbiAgICogQG5nZG9jIGZpbHRlclxuICAgKiBAbmFtZSBsaW1pdFRvXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMgYXJlXG4gICAqIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnlcbiAgICogdGhlIHZhbHVlIGFuZCBzaWduIChwb3NpdGl2ZSBvciBuZWdhdGl2ZSkgb2YgYGxpbWl0YC4gT3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGFyZSBhbHNvIHN1cHBvcnRlZFxuICAgKiAoZS5nLiBhcnJheSBzdWJjbGFzc2VzLCBOb2RlTGlzdHMsIGpxTGl0ZS9qUXVlcnkgY29sbGVjdGlvbnMgZXRjKS4gSWYgYSBudW1iZXIgaXMgdXNlZCBhcyBpbnB1dCxcbiAgICogaXQgaXMgY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fEFycmF5TGlrZXxzdHJpbmd8bnVtYmVyfSBpbnB1dCAtIEFycmF5L2FycmF5LWxpa2UsIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsaW1pdCAtIFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyXG4gICAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuXG4gICAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nXG4gICAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYC4gSWYgYGxpbWl0YCBpcyB1bmRlZmluZWQsXG4gICAqICAgICB0aGUgaW5wdXQgd2lsbCBiZSByZXR1cm5lZCB1bmNoYW5nZWQuXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gYmVnaW4gLSBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LFxuICAgKiAgICAgYGJlZ2luYCBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgaW5wdXRgLiBEZWZhdWx0cyB0byBgMGAuXG4gICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd9IEEgbmV3IHN1Yi1hcnJheSBvciBzdWJzdHJpbmcgb2YgbGVuZ3RoIGBsaW1pdGAgb3IgbGVzcyBpZiB0aGUgaW5wdXQgaGFkXG4gICAqICAgICBsZXNzIHRoYW4gYGxpbWl0YCBlbGVtZW50cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwibGltaXRUb0V4YW1wbGVcIiBuYW1lPVwibGltaXQtdG8tZmlsdGVyXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUubnVtYmVycyA9IFsxLDIsMyw0LDUsNiw3LDgsOV07XG4gICAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlciA9IDIzNDU0MzIzNDI7XG4gICAgICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzO1xuICAgICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyTGltaXQgPSAzO1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibnVtTGltaXRcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgIExpbWl0IHt7bGV0dGVyc319IHRvOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8cD5PdXRwdXQgbGV0dGVyczoge3sgbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQgfX08L3A+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGltaXQge3tsb25nTnVtYmVyfX0gdG86XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cImxvbmdOdW1iZXJMaW1pdFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8cD5PdXRwdXQgbG9uZyBudW1iZXI6IHt7IGxvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgbnVtTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ251bUxpbWl0JykpO1xuICAgICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICAgIHZhciBsb25nTnVtYmVyTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xvbmdOdW1iZXJMaW1pdCcpKTtcbiAgICAgICAgIHZhciBsaW1pdGVkTnVtYmVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQnKSk7XG4gICAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgICAgdmFyIGxpbWl0ZWRMb25nTnVtYmVyID0gZWxlbWVudChieS5iaW5kaW5nKCdsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQnKSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChudW1MaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgICBleHBlY3QobGV0dGVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzEsMiwzXScpO1xuICAgICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjJyk7XG4gICAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgICB9KTtcbiAgXG4gICAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgICAgLy8gaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG91dHB1dCB3aGVuIC0zIGlzIGVudGVyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgICAgLy8gICBsZXR0ZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgICAgLy8gICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzcsOCw5XScpO1xuICAgICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMzQyJyk7XG4gICAgICAgICAvLyB9KTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIG5vdCBleGNlZWQgdGhlIG1heGltdW0gc2l6ZSBvZiBpbnB1dCBhcnJheScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgICBsZXR0ZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDMsNCw1LDYsNyw4LDldJyk7XG4gICAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAyMzQ1NDMyMzQyJyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgKi9cbiAgZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICAgIGlmIChNYXRoLmFicyhOdW1iZXIobGltaXQpKSA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgbGltaXQgPSBOdW1iZXIobGltaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGltaXQgPSB0b0ludChsaW1pdCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOdW1iZXJOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICAgIGlmIChpc051bWJlcihpbnB1dCkpIGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcbiAgICAgIGlmICghaXNBcnJheUxpa2UoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICAgIGJlZ2luID0gIWJlZ2luIHx8IGlzTmFOKGJlZ2luKSA/IDAgOiB0b0ludChiZWdpbik7XG4gICAgICBiZWdpbiA9IGJlZ2luIDwgMCA/IE1hdGgubWF4KDAsIGlucHV0Lmxlbmd0aCArIGJlZ2luKSA6IGJlZ2luO1xuXG4gICAgICBpZiAobGltaXQgPj0gMCkge1xuICAgICAgICByZXR1cm4gc2xpY2VGbihpbnB1dCwgYmVnaW4sIGJlZ2luICsgbGltaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJlZ2luID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBNYXRoLm1heCgwLCBiZWdpbiArIGxpbWl0KSwgYmVnaW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWNlRm4oaW5wdXQsIGJlZ2luLCBlbmQpIHtcbiAgICBpZiAoaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgICByZXR1cm4gc2xpY2UuY2FsbChpbnB1dCwgYmVnaW4sIGVuZCk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZpbHRlclxuICAgKiBAbmFtZSBvcmRlckJ5XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZyb20gdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAsIG9yZGVyZWQgYnkgYSBgY29tcGFyYXRvcmBcbiAgICogZnVuY3Rpb24gYmFzZWQgb24gdGhlIHZhbHVlcyBjb21wdXRlZCB1c2luZyB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGBbe2lkOiAnZm9vJ30sIHtpZDogJ2Jhcid9XSB8IG9yZGVyQnk6J2lkJ2Agd291bGQgcmVzdWx0IGluXG4gICAqIGBbe2lkOiAnYmFyJ30sIHtpZDogJ2Zvbyd9XWAuXG4gICAqXG4gICAqIFRoZSBgY29sbGVjdGlvbmAgY2FuIGJlIGFuIEFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChlLmcuIE5vZGVMaXN0LCBqUXVlcnkgb2JqZWN0LCBUeXBlZEFycmF5LFxuICAgKiBTdHJpbmcsIGV0YykuXG4gICAqXG4gICAqIFRoZSBgZXhwcmVzc2lvbmAgY2FuIGJlIGEgc2luZ2xlIHByZWRpY2F0ZSwgb3IgYSBsaXN0IG9mIHByZWRpY2F0ZXMgZWFjaCBzZXJ2aW5nIGFzIGEgdGllLWJyZWFrZXJcbiAgICogZm9yIHRoZSBwcmVjZWRpbmcgb25lLiBUaGUgYGV4cHJlc3Npb25gIGlzIGV2YWx1YXRlZCBhZ2FpbnN0IGVhY2ggaXRlbSBhbmQgdGhlIG91dHB1dCBpcyB1c2VkXG4gICAqIGZvciBjb21wYXJpbmcgd2l0aCBvdGhlciBpdGVtcy5cbiAgICpcbiAgICogWW91IGNhbiBjaGFuZ2UgdGhlIHNvcnRpbmcgb3JkZXIgYnkgc2V0dGluZyBgcmV2ZXJzZWAgdG8gYHRydWVgLiBCeSBkZWZhdWx0LCBpdGVtcyBhcmUgc29ydGVkIGluXG4gICAqIGFzY2VuZGluZyBvcmRlci5cbiAgICpcbiAgICogVGhlIGNvbXBhcmlzb24gaXMgZG9uZSB1c2luZyB0aGUgYGNvbXBhcmF0b3JgIGZ1bmN0aW9uLiBJZiBub25lIGlzIHNwZWNpZmllZCwgYSBkZWZhdWx0LCBidWlsdC1pblxuICAgKiBjb21wYXJhdG9yIGlzIHVzZWQgKHNlZSBiZWxvdyBmb3IgZGV0YWlscyAtIGluIGEgbnV0c2hlbGwsIGl0IGNvbXBhcmVzIG51bWJlcnMgbnVtZXJpY2FsbHkgYW5kXG4gICAqIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHkpLlxuICAgKlxuICAgKiAjIyMgVW5kZXIgdGhlIGhvb2RcbiAgICpcbiAgICogT3JkZXJpbmcgdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAgaGFwcGVucyBpbiB0d28gcGhhc2VzOlxuICAgKlxuICAgKiAxLiBBbGwgaXRlbXMgYXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBwcmVkaWNhdGUgKG9yIHByZWRpY2F0ZXMpLCBhbmQgdGhlIHJldHVybmVkIHZhbHVlcyBhcmUgc2F2ZWRcbiAgICogICAgYWxvbmcgd2l0aCB0aGVpciB0eXBlIChgc3RyaW5nYCwgYG51bWJlcmAgZXRjKS4gRm9yIGV4YW1wbGUsIGFuIGl0ZW0gYHtsYWJlbDogJ2Zvbyd9YCwgcGFzc2VkXG4gICAqICAgIHRocm91Z2ggYSBwcmVkaWNhdGUgdGhhdCBleHRyYWN0cyB0aGUgdmFsdWUgb2YgdGhlIGBsYWJlbGAgcHJvcGVydHksIHdvdWxkIGJlIHRyYW5zZm9ybWVkIHRvOlxuICAgKiAgICBgYGBcbiAgICogICAge1xuICAgKiAgICAgIHZhbHVlOiAnZm9vJyxcbiAgICogICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICogICAgICBpbmRleDogLi4uXG4gICAqICAgIH1cbiAgICogICAgYGBgXG4gICAqIDIuIFRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc29ydCB0aGUgaXRlbXMsIGJhc2VkIG9uIHRoZSBkZXJpdmVkIHZhbHVlcywgdHlwZXMgYW5kXG4gICAqICAgIGluZGljZXMuXG4gICAqXG4gICAqIElmIHlvdSB1c2UgYSBjdXN0b20gY29tcGFyYXRvciwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBwYWlycyBvZiBvYmplY3RzIG9mIHRoZSBmb3JtXG4gICAqIGB7dmFsdWU6IC4uLiwgdHlwZTogJy4uLicsIGluZGV4OiAuLi59YCBhbmQgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGAwYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1YWxcbiAgICogKGFzIGZhciBhcyB0aGUgY29tcGFyYXRvciBpcyBjb25jZXJuZWQpLCBgLTFgIGlmIHRoZSAxc3Qgb25lIHNob3VsZCBiZSByYW5rZWQgaGlnaGVyIHRoYW4gdGhlXG4gICAqIHNlY29uZCwgb3IgYDFgIG90aGVyd2lzZS5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIHNvcnRpbmcgd2lsbCBiZSBkZXRlcm1pbmlzdGljIGFjcm9zcyBwbGF0Zm9ybXMsIGlmIG5vbmUgb2YgdGhlXG4gICAqIHNwZWNpZmllZCBwcmVkaWNhdGVzIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBpdGVtcywgYG9yZGVyQnlgIHdpbGwgYXV0b21hdGljYWxseSBpbnRyb2R1Y2UgYVxuICAgKiBkdW1teSBwcmVkaWNhdGUgdGhhdCByZXR1cm5zIHRoZSBpdGVtJ3MgaW5kZXggYXMgYHZhbHVlYC5cbiAgICogKElmIHlvdSBhcmUgdXNpbmcgYSBjdXN0b20gY29tcGFyYXRvciwgbWFrZSBzdXJlIGl0IGNhbiBoYW5kbGUgdGhpcyBwcmVkaWNhdGUgYXMgd2VsbC4pXG4gICAqXG4gICAqIElmIGEgY3VzdG9tIGNvbXBhcmF0b3Igc3RpbGwgY2FuJ3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gaXRlbXMsIHRoZW4gdGhleSB3aWxsIGJlIHNvcnRlZCBiYXNlZFxuICAgKiBvbiB0aGVpciBpbmRleCB1c2luZyB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAgICpcbiAgICogRmluYWxseSwgaW4gYW4gYXR0ZW1wdCB0byBzaW1wbGlmeSB0aGluZ3MsIGlmIGEgcHJlZGljYXRlIHJldHVybnMgYW4gb2JqZWN0IGFzIHRoZSBleHRyYWN0ZWRcbiAgICogdmFsdWUgZm9yIGFuIGl0ZW0sIGBvcmRlckJ5YCB3aWxsIHRyeSB0byBjb252ZXJ0IHRoYXQgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHZhbHVlLCBiZWZvcmUgcGFzc2luZ1xuICAgKiBpdCB0byB0aGUgY29tcGFyYXRvci4gVGhlIGZvbGxvd2luZyBydWxlcyBnb3Zlcm4gdGhlIGNvbnZlcnNpb246XG4gICAqXG4gICAqIDEuIElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhIHByaW1pdGl2ZSwgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlXG4gICAqICAgIHVzZWQgaW5zdGVhZC48YnIgLz5cbiAgICogICAgKElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gICAqICAgIHdpbGwgYmUgdXNlZCBpbiBzdWJzZXF1ZW50IHN0ZXBzLilcbiAgICogMi4gSWYgdGhlIG9iamVjdCBoYXMgYSBjdXN0b20gYHRvU3RyaW5nKClgIG1ldGhvZCAoaS5lLiBub3QgdGhlIG9uZSBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0YCkgdGhhdFxuICAgKiAgICByZXR1cm5zIGEgcHJpbWl0aXZlLCBpdHMgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLjxiciAvPlxuICAgKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdG9TdHJpbmcoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gICAqICAgIHdpbGwgYmUgdXNlZCBpbiBzdWJzZXF1ZW50IHN0ZXBzLilcbiAgICogMy4gTm8gY29udmVyc2lvbjsgdGhlIG9iamVjdCBpdHNlbGYgaXMgdXNlZC5cbiAgICpcbiAgICogIyMjIFRoZSBkZWZhdWx0IGNvbXBhcmF0b3JcbiAgICpcbiAgICogVGhlIGRlZmF1bHQsIGJ1aWx0LWluIGNvbXBhcmF0b3Igc2hvdWxkIGJlIHN1ZmZpY2llbnQgZm9yIG1vc3QgdXNlY2FzZXMuIEluIHNob3J0LCBpdCBjb21wYXJlc1xuICAgKiBudW1iZXJzIG51bWVyaWNhbGx5LCBzdHJpbmdzIGFscGhhYmV0aWNhbGx5IChhbmQgY2FzZS1pbnNlbnNpdGl2ZWx5KSwgZm9yIG9iamVjdHMgZmFsbHMgYmFjayB0b1xuICAgKiB1c2luZyB0aGVpciBpbmRleCBpbiB0aGUgb3JpZ2luYWwgY29sbGVjdGlvbiwgYW5kIHNvcnRzIHZhbHVlcyBvZiBkaWZmZXJlbnQgdHlwZXMgYnkgdHlwZS5cbiAgICpcbiAgICogTW9yZSBzcGVjaWZpY2FsbHksIGl0IGZvbGxvd3MgdGhlc2Ugc3RlcHMgdG8gZGV0ZXJtaW5lIHRoZSByZWxhdGl2ZSBvcmRlciBvZiBpdGVtczpcbiAgICpcbiAgICogMS4gSWYgdGhlIGNvbXBhcmVkIHZhbHVlcyBhcmUgb2YgZGlmZmVyZW50IHR5cGVzLCBjb21wYXJlIHRoZSB0eXBlcyB0aGVtc2VsdmVzIGFscGhhYmV0aWNhbGx5LlxuICAgKiAyLiBJZiBib3RoIHZhbHVlcyBhcmUgb2YgdHlwZSBgc3RyaW5nYCwgY29tcGFyZSB0aGVtIGFscGhhYmV0aWNhbGx5IGluIGEgY2FzZS0gYW5kXG4gICAqICAgIGxvY2FsZS1pbnNlbnNpdGl2ZSB3YXkuXG4gICAqIDMuIElmIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzLCBjb21wYXJlIHRoZWlyIGluZGljZXMgaW5zdGVhZC5cbiAgICogNC4gT3RoZXJ3aXNlLCByZXR1cm46XG4gICAqICAgIC0gIGAwYCwgaWYgdGhlIHZhbHVlcyBhcmUgZXF1YWwgKGJ5IHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29uLCBpLmUuIHVzaW5nIGA9PT1gKS5cbiAgICogICAgLSBgLTFgLCBpZiB0aGUgMXN0IHZhbHVlIGlzIFwibGVzcyB0aGFuXCIgdGhlIDJuZCB2YWx1ZSAoY29tcGFyZWQgdXNpbmcgdGhlIGA8YCBvcGVyYXRvcikuXG4gICAqICAgIC0gIGAxYCwgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgeW91IG5vdGljZSBudW1iZXJzIG5vdCBiZWluZyBzb3J0ZWQgYXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGV5IGFyZSBhY3R1YWxseSBiZWluZ1xuICAgKiAgICAgICAgICAgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuXG4gICAqICoqTm90ZToqKiBGb3IgdGhlIHB1cnBvc2Ugb2Ygc29ydGluZywgYG51bGxgIHZhbHVlcyBhcmUgdHJlYXRlZCBhcyB0aGUgc3RyaW5nIGAnbnVsbCdgIChpLmUuXG4gICAqICAgICAgICAgICBgdHlwZTogJ3N0cmluZydgLCBgdmFsdWU6ICdudWxsJ2ApLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIHNvcnQgb3JkZXIgcmVsYXRpdmUgdG9cbiAgICogICAgICAgICAgIG90aGVyIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheXxBcnJheUxpa2V9IGNvbGxlY3Rpb24gLSBUaGUgY29sbGVjdGlvbiAoYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QpIHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7KEZ1bmN0aW9ufHN0cmluZ3xBcnJheS48RnVuY3Rpb258c3RyaW5nPik9fSBleHByZXNzaW9uIC0gQSBwcmVkaWNhdGUgKG9yIGxpc3Qgb2ZcbiAgICogICAgcHJlZGljYXRlcykgdG8gYmUgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICAgKlxuICAgKiAgICBDYW4gYmUgb25lIG9mOlxuICAgKlxuICAgKiAgICAtIGBGdW5jdGlvbmA6IEEgZ2V0dGVyIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggZWFjaCBpdGVtIGFzIGFyZ3VtZW50IGFuZFxuICAgKiAgICAgIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkIGZvciBzb3J0aW5nLlxuICAgKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGV2YWx1YXRlZCBhZ2FpbnN0IGVhY2ggaXRlbSBhbmQgdGhlXG4gICAqICAgICAgcmVzdWx0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy4gRm9yIGV4YW1wbGUsIHVzZSBgJ2xhYmVsJ2AgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZFxuICAgKiAgICAgIGBsYWJlbGAgb3IgYCdsYWJlbC5zdWJzdHJpbmcoMCwgMyknYCB0byBzb3J0IGJ5IHRoZSBmaXJzdCAzIGNoYXJhY3RlcnMgb2YgdGhlIGBsYWJlbGBcbiAgICogICAgICBwcm9wZXJ0eS48YnIgLz5cbiAgICogICAgICAoVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb24gaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgZm9yXG4gICAqICAgICAgY29tcGFyaXNvbi4gRm9yIGV4YW1wbGUsIHVzZSBgJ1wic3BlY2lhbCBuYW1lXCInYCAobm90ZSB0aGUgZXh0cmEgcGFpciBvZiBxdW90ZXMpIHRvIHNvcnQgYnkgYVxuICAgKiAgICAgIHByb3BlcnR5IGNhbGxlZCBgc3BlY2lhbCBuYW1lYC4pPGJyIC8+XG4gICAqICAgICAgQW4gZXhwcmVzc2lvbiBjYW4gYmUgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCB0aGUgc29ydGluZyBkaXJlY3Rpb24sXG4gICAqICAgICAgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcuIEZvciBleGFtcGxlLCBgJytsYWJlbCdgIG9yIGAnLWxhYmVsJ2AuIElmIG5vIHByb3BlcnR5IGlzIHByb3ZpZGVkLFxuICAgKiAgICAgIChlLmcuIGAnKydgIG9yIGAnLSdgKSwgdGhlIGNvbGxlY3Rpb24gZWxlbWVudCBpdHNlbGYgaXMgdXNlZCBpbiBjb21wYXJpc29ucy5cbiAgICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBhbmQvb3Igc3RyaW5nIHByZWRpY2F0ZXMuIElmIGEgcHJlZGljYXRlIGNhbm5vdCBkZXRlcm1pbmUgdGhlXG4gICAqICAgICAgcmVsYXRpdmUgb3JkZXIgb2YgdHdvIGl0ZW1zLCB0aGUgbmV4dCBwcmVkaWNhdGUgaXMgdXNlZCBhcyBhIHRpZS1icmVha2VyLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJldmVyc2UgLSBJZiBgdHJ1ZWAsIHJldmVyc2UgdGhlIHNvcnRpbmcgb3JkZXIuXG4gICAqIEBwYXJhbSB7KEZ1bmN0aW9uKT19IGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2ZcbiAgICogICAgdmFsdWUgcGFpcnMuIElmIG9taXR0ZWQsIHRoZSBidWlsdC1pbiBjb21wYXJhdG9yIHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSAtIFRoZSBzb3J0ZWQgYXJyYXkuXG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICMjIyBPcmRlcmluZyBhIHRhYmxlIHdpdGggYG5nUmVwZWF0YFxuICAgKlxuICAgKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUge0BsaW5rIG5nUmVwZWF0IG5nUmVwZWF0fSwgd2hlcmUgdGhlIGRhdGEgaXMgc29ydGVkIGJ5XG4gICAqIGFnZSBpbiBkZXNjZW5kaW5nIG9yZGVyIChleHByZXNzaW9uIGlzIHNldCB0byBgJy1hZ2UnYCkuIFRoZSBgY29tcGFyYXRvcmAgaXMgbm90IHNldCwgd2hpY2ggbWVhbnNcbiAgICogaXQgZGVmYXVsdHMgdG8gdGhlIGJ1aWx0LWluIGNvbXBhcmF0b3IuXG4gICAqXG4gICAgIDxleGFtcGxlIG5hbWU9XCJvcmRlckJ5LXN0YXRpY1wiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlMVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICAgPHRoPlBob25lIE51bWJlcjwvdGg+XG4gICAgICAgICAgICAgICA8dGg+QWdlPC90aD5cbiAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6Jy1hZ2UnXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUxJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICAgICB7bmFtZTogJ0pvaG4nLCAgIHBob25lOiAnNTU1LTEyMTInLCAgYWdlOiAxMH0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ0FkYW0nLCAgIHBob25lOiAnNTU1LTU2NzgnLCAgYWdlOiAzNX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgICBdO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIC5mcmllbmRzIHtcbiAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICAgIH1cbiAgXG4gICAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7XG4gICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgICAgfVxuICAgICAgICAgLmZyaWVuZHMgdGQ6Zmlyc3QtY2hpbGQsIC5mcmllbmRzIHRoOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICAgIHZhciBuYW1lcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBieSBhZ2UgaW4gcmV2ZXJzZSBvcmRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ01pa2UnKTtcbiAgICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ01hcnknKTtcbiAgICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCg0KS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKiA8aHIgLz5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIENoYW5naW5nIHBhcmFtZXRlcnMgZHluYW1pY2FsbHlcbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgY2FuIGJlIGNoYW5nZWQgZHluYW1pY2FsbHkuIFRoZSBuZXh0IGV4YW1wbGUgc2hvd3MgaG93IHlvdSBjYW4gbWFrZSB0aGUgY29sdW1ucyBvZlxuICAgKiBhIHRhYmxlIHNvcnRhYmxlLCBieSBiaW5kaW5nIHRoZSBgZXhwcmVzc2lvbmAgYW5kIGByZXZlcnNlYCBwYXJhbWV0ZXJzIHRvIHNjb3BlIHByb3BlcnRpZXMuXG4gICAqXG4gICAgIDxleGFtcGxlIG5hbWU9XCJvcmRlckJ5LWR5bmFtaWNcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTJcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPHByZT5Tb3J0IGJ5ID0ge3twcm9wZXJ0eU5hbWV9fTsgcmV2ZXJzZSA9IHt7cmV2ZXJzZX19PC9wcmU+XG4gICAgICAgICAgIDxoci8+XG4gICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwcm9wZXJ0eU5hbWUgPSBudWxsOyByZXZlcnNlID0gZmFsc2VcIj5TZXQgdG8gdW5zb3J0ZWQ8L2J1dHRvbj5cbiAgICAgICAgICAgPGhyLz5cbiAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICdwaG9uZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ2FnZScpXCI+QWdlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByb3BlcnR5TmFtZTpyZXZlcnNlXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUyJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgdmFyIGZyaWVuZHMgPSBbXG4gICAgICAgICAgICAgICB7bmFtZTogJ0pvaG4nLCAgIHBob25lOiAnNTU1LTEyMTInLCAgYWdlOiAxMH0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ0FkYW0nLCAgIHBob25lOiAnNTU1LTU2NzgnLCAgYWdlOiAzNX0sXG4gICAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgICBdO1xuICBcbiAgICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gJ2FnZSc7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gZnJpZW5kcztcbiAgXG4gICAgICAgICAgICAgJHNjb3BlLnNvcnRCeSA9IGZ1bmN0aW9uKHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAoJHNjb3BlLnByb3BlcnR5TmFtZSA9PT0gcHJvcGVydHlOYW1lKSA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIC5mcmllbmRzIHtcbiAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICAgIH1cbiAgXG4gICAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7XG4gICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgICAgfVxuICAgICAgICAgLmZyaWVuZHMgdGQ6Zmlyc3QtY2hpbGQsIC5mcmllbmRzIHRoOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICAgICB9XG4gIFxuICAgICAgICAgLnNvcnRvcmRlcjphZnRlciB7XG4gICAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgICB9XG4gICAgICAgICAuc29ydG9yZGVyLnJldmVyc2U6YWZ0ZXIge1xuICAgICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICAgIHZhciB1bnNvcnRCdXR0b24gPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCd1bnNvcnRlZCcpKTtcbiAgICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICAgIHZhciBwaG9uZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ1Bob25lJykpO1xuICAgICAgICAgdmFyIGFnZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ0FnZScpKTtcbiAgICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgICB2YXIgbGFzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdyg0KSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gIFxuICAgICAgICAgICBwaG9uZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG4gIFxuICAgICAgICAgICBuYW1lSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ01pa2UnKTtcbiAgXG4gICAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICB9KTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBpbiByZXZlcnNlIG9yZGVyLCB3aGVuIGNsaWNraW5nIG9uIHRoZSBzYW1lIGNvbHVtbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gIFxuICAgICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICBcbiAgICAgICAgICAgYWdlSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIH0pO1xuICBcbiAgICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gIFxuICAgICAgICAgICB1bnNvcnRCdXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKiA8aHIgLz5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIFVzaW5nIGBvcmRlckJ5YCBpbnNpZGUgYSBjb250cm9sbGVyXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgYG9yZGVyQnlgIGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGBvcmRlckJ5RmlsdGVyYCwgYW5kXG4gICAqIGNhbGxpbmcgaXQgd2l0aCB0aGUgZGVzaXJlZCBwYXJhbWV0ZXJzLiAoQWx0ZXJuYXRpdmVseSwgeW91IGNvdWxkIGluamVjdCB0aGUgYCRmaWx0ZXJgIGZhY3RvcnlcbiAgICogYW5kIHJldHJpZXZlIHRoZSBgb3JkZXJCeWAgZmlsdGVyIHdpdGggYCRmaWx0ZXIoJ29yZGVyQnknKWAuKVxuICAgKlxuICAgICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1jYWxsLW1hbnVhbGx5XCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGUzXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxwcmU+U29ydCBieSA9IHt7cHJvcGVydHlOYW1lfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgICA8aHIvPlxuICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KG51bGwpXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICAgIDxoci8+XG4gICAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZHNcIj5cbiAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ25hbWUnKVwiPk5hbWU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICdhZ2UnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUzJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ29yZGVyQnlGaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsIG9yZGVyQnkpIHtcbiAgICAgICAgICAgICB2YXIgZnJpZW5kcyA9IFtcbiAgICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICAgIHtuYW1lOiAnTWlrZScsICAgcGhvbmU6ICc1NTUtNDMyMScsICBhZ2U6IDIxfSxcbiAgICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICAgIF07XG4gIFxuICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSAnYWdlJztcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IHRydWU7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KGZyaWVuZHMsICRzY29wZS5wcm9wZXJ0eU5hbWUsICRzY29wZS5yZXZlcnNlKTtcbiAgXG4gICAgICAgICAgICAgJHNjb3BlLnNvcnRCeSA9IGZ1bmN0aW9uKHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAocHJvcGVydHlOYW1lICE9PSBudWxsICYmICRzY29wZS5wcm9wZXJ0eU5hbWUgPT09IHByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICAgICAgICA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeShmcmllbmRzLCAkc2NvcGUucHJvcGVydHlOYW1lLCAkc2NvcGUucmV2ZXJzZSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAuZnJpZW5kcyB7XG4gICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgICB9XG4gIFxuICAgICAgICAgLmZyaWVuZHMgdGgge1xuICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgICB9XG4gICAgICAgICAuZnJpZW5kcyB0ZCwgLmZyaWVuZHMgdGgge1xuICAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgICAgfVxuICBcbiAgICAgICAgIC5zb3J0b3JkZXI6YWZ0ZXIge1xuICAgICAgICAgICBjb250ZW50OiAnXFwyNWIyJzsgICAvLyBCTEFDSyBVUC1QT0lOVElORyBUUklBTkdMRVxuICAgICAgICAgfVxuICAgICAgICAgLnNvcnRvcmRlci5yZXZlcnNlOmFmdGVyIHtcbiAgICAgICAgICAgY29udGVudDogJ1xcMjViYyc7ICAgLy8gQkxBQ0sgRE9XTi1QT0lOVElORyBUUklBTkdMRVxuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgICB2YXIgdW5zb3J0QnV0dG9uID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgndW5zb3J0ZWQnKSk7XG4gICAgICAgICB2YXIgbmFtZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ05hbWUnKSk7XG4gICAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICAgIHZhciBhZ2VIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdBZ2UnKSk7XG4gICAgICAgICB2YXIgZmlyc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coMCkpO1xuICAgICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuICBcbiAgICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IHNvbWUgcHJvcGVydHksIHdoZW4gY2xpY2tpbmcgb24gdGhlIGNvbHVtbiBoZWFkZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICBcbiAgICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuICBcbiAgICAgICAgICAgbmFtZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG4gIFxuICAgICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgaW4gcmV2ZXJzZSBvcmRlciwgd2hlbiBjbGlja2luZyBvbiB0aGUgc2FtZSBjb2x1bW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICBcbiAgICAgICAgICAgYWdlSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgXG4gICAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICB9KTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHJlc3RvcmUgdGhlIG9yaWdpbmFsIG9yZGVyLCB3aGVuIGNsaWNraW5nIFwiU2V0IHRvIHVuc29ydGVkXCInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICBcbiAgICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICogPGhyIC8+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICMjIyBVc2luZyBhIGN1c3RvbSBjb21wYXJhdG9yXG4gICAqXG4gICAqIElmIHlvdSBoYXZlIHZlcnkgc3BlY2lmaWMgcmVxdWlyZW1lbnRzIGFib3V0IHRoZSB3YXkgaXRlbXMgYXJlIHNvcnRlZCwgeW91IGNhbiBwYXNzIHlvdXIgb3duXG4gICAqIGNvbXBhcmF0b3IgZnVuY3Rpb24uIEZvciBleGFtcGxlLCB5b3UgbWlnaHQgbmVlZCB0byBjb21wYXJlIHNvbWUgc3RyaW5ncyBpbiBhIGxvY2FsZS1zZW5zaXRpdmVcbiAgICogd2F5LiAoV2hlbiBzcGVjaWZ5aW5nIGEgY3VzdG9tIGNvbXBhcmF0b3IsIHlvdSBhbHNvIG5lZWQgdG8gcGFzcyBhIHZhbHVlIGZvciB0aGUgYHJldmVyc2VgXG4gICAqIGFyZ3VtZW50IC0gcGFzc2luZyBgZmFsc2VgIHJldGFpbnMgdGhlIGRlZmF1bHQgc29ydGluZyBvcmRlciwgaS5lLiBhc2NlbmRpbmcuKVxuICAgKlxuICAgICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1jdXN0b20tY29tcGFyYXRvclwiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlNFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnJpZW5kcy1jb250YWluZXIgY3VzdG9tLWNvbXBhcmF0b3JcIj5cbiAgICAgICAgICAgICA8aDM+TG9jYWxlLXNlbnNpdGl2ZSBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgICAgPHRoPkZhdm9yaXRlIExldHRlcjwvdGg+XG4gICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInOmZhbHNlOmxvY2FsZVNlbnNpdGl2ZUNvbXBhcmF0b3JcIj5cbiAgICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5mYXZvcml0ZUxldHRlcn19PC90ZD5cbiAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmllbmRzLWNvbnRhaW5lciBkZWZhdWx0LWNvbXBhcmF0b3JcIj5cbiAgICAgICAgICAgICA8aDM+RGVmYXVsdCBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgICAgPHRoPkZhdm9yaXRlIExldHRlcjwvdGg+XG4gICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInXCI+XG4gICAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuZmF2b3JpdGVMZXR0ZXJ9fTwvdGQ+XG4gICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTQnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgZmF2b3JpdGVMZXR0ZXI6ICfDhCd9LFxuICAgICAgICAgICAgICAge25hbWU6ICdNYXJ5JywgICBmYXZvcml0ZUxldHRlcjogJ8OcJ30sXG4gICAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIGZhdm9yaXRlTGV0dGVyOiAnw5YnfSxcbiAgICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgZmF2b3JpdGVMZXR0ZXI6ICdIJ30sXG4gICAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIGZhdm9yaXRlTGV0dGVyOiAnWid9XG4gICAgICAgICAgICAgXTtcbiAgXG4gICAgICAgICAgICAgJHNjb3BlLmxvY2FsZVNlbnNpdGl2ZUNvbXBhcmF0b3IgPSBmdW5jdGlvbih2MSwgdjIpIHtcbiAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGdldCBzdHJpbmdzLCBqdXN0IGNvbXBhcmUgYnkgaW5kZXhcbiAgICAgICAgICAgICAgIGlmICh2MS50eXBlICE9PSAnc3RyaW5nJyB8fCB2Mi50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gKHYxLmluZGV4IDwgdjIuaW5kZXgpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgfVxuICBcbiAgICAgICAgICAgICAgIC8vIENvbXBhcmUgc3RyaW5ncyBhbHBoYWJldGljYWxseSwgdGFraW5nIGxvY2FsZSBpbnRvIGFjY291bnRcbiAgICAgICAgICAgICAgIHJldHVybiB2MS52YWx1ZS5sb2NhbGVDb21wYXJlKHYyLnZhbHVlKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIC5mcmllbmRzLWNvbnRhaW5lciB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiAwIDMwcHg7XG4gICAgICAgICB9XG4gIFxuICAgICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgICAgfVxuICBcbiAgICAgICAgIC5mcmllbmRzIHRoIHtcbiAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xuICAgICAgICAgfVxuICAgICAgICAgLmZyaWVuZHMgdGQsIC5mcmllbmRzIHRoIHtcbiAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDtcbiAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICB9XG4gICAgICAgICAuZnJpZW5kcyB0ZDpmaXJzdC1jaGlsZCwgLmZyaWVuZHMgdGg6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuY3NzKCcuY3VzdG9tLWNvbXBhcmF0b3InKSk7XG4gICAgICAgICB2YXIgbmFtZXMgPSBjb250YWluZXIuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBieSBmYXZvcml0ZSBsZXR0ZXIgKGluIGNvcnJlY3QgYWxwaGFiZXRpY2FsIG9yZGVyKScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuICAgICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDQpLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKi9cbiAgb3JkZXJCeUZpbHRlci4kaW5qZWN0ID0gWyckcGFyc2UnXTtcbiAgZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIsIGNvbXBhcmVGbikge1xuXG4gICAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIGFycmF5O1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShhcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCdvcmRlckJ5JykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQXJyYXkoc29ydFByZWRpY2F0ZSkpIHtcbiAgICAgICAgc29ydFByZWRpY2F0ZSA9IFtzb3J0UHJlZGljYXRlXTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0UHJlZGljYXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzb3J0UHJlZGljYXRlID0gWycrJ107XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVkaWNhdGVzID0gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSk7XG5cbiAgICAgIHZhciBkZXNjZW5kaW5nID0gcmV2ZXJzZU9yZGVyID8gLTEgOiAxO1xuXG4gICAgICAvLyBEZWZpbmUgdGhlIGBjb21wYXJlKClgIGZ1bmN0aW9uLiBVc2UgYSBkZWZhdWx0IGNvbXBhcmF0b3IgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG4gICAgICB2YXIgY29tcGFyZSA9IGlzRnVuY3Rpb24oY29tcGFyZUZuKSA/IGNvbXBhcmVGbiA6IGRlZmF1bHRDb21wYXJlO1xuXG4gICAgICAvLyBUaGUgbmV4dCB0aHJlZSBsaW5lcyBhcmUgYSB2ZXJzaW9uIG9mIGEgU3dhcnR6aWFuIFRyYW5zZm9ybSBpZGlvbSBmcm9tIFBlcmxcbiAgICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2Nod2FydHppYW5fdHJhbnNmb3JtXG4gICAgICB2YXIgY29tcGFyZVZhbHVlcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcnJheSwgZ2V0Q29tcGFyaXNvbk9iamVjdCk7XG4gICAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICAgIGFycmF5ID0gY29tcGFyZVZhbHVlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGFycmF5O1xuXG4gICAgICBmdW5jdGlvbiBnZXRDb21wYXJpc29uT2JqZWN0KHZhbHVlLCBpbmRleCkge1xuICAgICAgICAvLyBOT1RFOiBXZSBhcmUgYWRkaW5nIGFuIGV4dHJhIGB0aWVCcmVha2VyYCB2YWx1ZSBiYXNlZCBvbiB0aGUgZWxlbWVudCdzIGluZGV4LlxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoZSBzb3J0IHN0YWJsZSB3aGVuIG5vbmUgb2YgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2FuXG4gICAgICAgIC8vIGRpc3Rpbmd1aXNoIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB0aWVCcmVha2VyOiB7IHZhbHVlOiBpbmRleCwgdHlwZTogJ251bWJlcicsIGluZGV4OiBpbmRleCB9LFxuICAgICAgICAgIHByZWRpY2F0ZVZhbHVlczogcHJlZGljYXRlcy5tYXAoZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFByZWRpY2F0ZVZhbHVlKHByZWRpY2F0ZS5nZXQodmFsdWUpLCBpbmRleCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZG9Db21wYXJpc29uKHYxLCB2Mikge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwcmVkaWNhdGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaV0sIHYyLnByZWRpY2F0ZVZhbHVlc1tpXSk7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIHByZWRpY2F0ZXNbaV0uZGVzY2VuZGluZyAqIGRlc2NlbmRpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChjb21wYXJlKHYxLnRpZUJyZWFrZXIsIHYyLnRpZUJyZWFrZXIpIHx8IGRlZmF1bHRDb21wYXJlKHYxLnRpZUJyZWFrZXIsIHYyLnRpZUJyZWFrZXIpKSAqIGRlc2NlbmRpbmc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGVzKSB7XG4gICAgICByZXR1cm4gc29ydFByZWRpY2F0ZXMubWFwKGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIGRlc2NlbmRpbmcgPSAxLFxuICAgICAgICAgICAgZ2V0ID0gaWRlbnRpdHk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJlZGljYXRlKSkge1xuICAgICAgICAgIGdldCA9IHByZWRpY2F0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZS5jaGFyQXQoMCkgPT09ICcrJyB8fCBwcmVkaWNhdGUuY2hhckF0KDApID09PSAnLScpIHtcbiAgICAgICAgICAgIGRlc2NlbmRpbmcgPSBwcmVkaWNhdGUuY2hhckF0KDApID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlZGljYXRlICE9PSAnJykge1xuICAgICAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7XG4gICAgICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBnZXQoKTtcbiAgICAgICAgICAgICAgZ2V0ID0gZnVuY3Rpb24gZ2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlW2tleV07XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGdldDogZ2V0LCBkZXNjZW5kaW5nOiBkZXNjZW5kaW5nIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkge1xuICAgICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9iamVjdFZhbHVlKHZhbHVlKSB7XG4gICAgICAvLyBJZiBgdmFsdWVPZmAgaXMgYSB2YWxpZCBmdW5jdGlvbiB1c2UgdGhhdFxuICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIElmIGB0b1N0cmluZ2AgaXMgYSB2YWxpZCBmdW5jdGlvbiBhbmQgbm90IHRoZSBvbmUgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAgdXNlIHRoYXRcbiAgICAgIGlmIChoYXNDdXN0b21Ub1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmVkaWNhdGVWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICB2YWx1ZSA9ICdudWxsJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFsdWUgPSBvYmplY3RWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIHR5cGU6IHR5cGUsIGluZGV4OiBpbmRleCB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKHYxLCB2Mikge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICB2YXIgdHlwZTEgPSB2MS50eXBlO1xuICAgICAgdmFyIHR5cGUyID0gdjIudHlwZTtcblxuICAgICAgaWYgKHR5cGUxID09PSB0eXBlMikge1xuICAgICAgICB2YXIgdmFsdWUxID0gdjEudmFsdWU7XG4gICAgICAgIHZhciB2YWx1ZTIgPSB2Mi52YWx1ZTtcblxuICAgICAgICBpZiAodHlwZTEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gQ29tcGFyZSBzdHJpbmdzIGNhc2UtaW5zZW5zaXRpdmVseVxuICAgICAgICAgIHZhbHVlMSA9IHZhbHVlMS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHZhbHVlMiA9IHZhbHVlMi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUxID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIEZvciBiYXNpYyBvYmplY3RzLCB1c2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3RcbiAgICAgICAgICAvLyBpbiB0aGUgY29sbGVjdGlvbiBpbnN0ZWFkIG9mIHRoZSB2YWx1ZVxuICAgICAgICAgIGlmIChpc09iamVjdCh2YWx1ZTEpKSB2YWx1ZTEgPSB2MS5pbmRleDtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUyKSkgdmFsdWUyID0gdjIuaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUxICE9PSB2YWx1ZTIpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTEgPCB2YWx1ZTIgPyAtMSA6IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHR5cGUxIDwgdHlwZTIgPyAtMSA6IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmdEaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgICAgZGlyZWN0aXZlID0ge1xuICAgICAgICBsaW5rOiBkaXJlY3RpdmVcbiAgICAgIH07XG4gICAgfVxuICAgIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQUMnO1xuICAgIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBhXG4gICAqIEByZXN0cmljdCBFXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBNb2RpZmllcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgaHRtbCBhIHRhZyBzbyB0aGF0IHRoZSBkZWZhdWx0IGFjdGlvbiBpcyBwcmV2ZW50ZWQgd2hlblxuICAgKiB0aGUgaHJlZiBhdHRyaWJ1dGUgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBkeW5hbWljYWxseSBjcmVhdGluZyBgaHJlZmAgYXR0cmlidXRlcyBmb3IgYSB0YWdzLCBzZWUgdGhlIHtAbGluayBuZy5uZ0hyZWYgYG5nSHJlZmB9IGRpcmVjdGl2ZS5cbiAgICovXG4gIHZhciBodG1sQW5jaG9yRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGxpbmtlZCBlbGVtZW50IGlzIG5vdCBhbiBhbmNob3IgdGFnIGFueW1vcmUsIGRvIG5vdGhpbmdcbiAgICAgICAgICBpZiAoZWxlbWVudFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHJldHVybjtcblxuICAgICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS5cbiAgICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID8gJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGhyZWYgdXJsLCB0aGVuIGRvbid0IG5hdmlnYXRlIGFueXdoZXJlLlxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoaHJlZikpIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nSHJlZlxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAcHJpb3JpdHkgOTlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhbiBocmVmIGF0dHJpYnV0ZSB3aWxsXG4gICAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlXG4gICAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzXG4gICAqIHZhbHVlLiBVbnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBtYXJrdXAgdGhlIGxpbmsgd2lsbCBiZSBicm9rZW5cbiAgICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlXG4gICAqIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gICAqXG4gICAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gICAqIGBgYGh0bWxcbiAgICogPGEgaHJlZj1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiPmxpbmsxPC9hPlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICAgKiBgYGBodG1sXG4gICAqIDxhIG5nLWhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAgICogYGBgXG4gICAqXG4gICAqIEBlbGVtZW50IEFcbiAgICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdIcmVmIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIHZhcmlvdXMgY29tYmluYXRpb25zIG9mIGBocmVmYCwgYG5nLWhyZWZgIGFuZCBgbmctY2xpY2tgIGF0dHJpYnV0ZXNcbiAgICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibmctaHJlZlwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbHVlXCIgLz48YnIgLz5cbiAgICAgICAgICA8YSBpZD1cImxpbmstMVwiIGhyZWYgbmctY2xpY2s9XCJ2YWx1ZSA9IDFcIj5saW5rIDE8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgICAgPGEgaWQ9XCJsaW5rLTNcIiBuZy1ocmVmPVwiL3t7JzEyMyd9fVwiPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+XG4gICAgICAgICAgPGEgaWQ9XCJsaW5rLTRcIiBocmVmPVwiXCIgbmFtZT1cInh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDRcIj5hbmNob3I8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICAgIDxhIGlkPVwibGluay02XCIgbmctaHJlZj1cInt7dmFsdWV9fVwiPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pXG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgd2l0aG91dCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0xJykpLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0xJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgICB9KTtcbiAgXG4gICAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBhbmQgY2hhbmdlIHVybCB3aGVuIG5nLWhyZWYgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0zJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC8xMjMkLyk7XG4gIFxuICAgICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0zJykpLmNsaWNrKCk7XG4gIFxuICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG4gIFxuICAgICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybC5tYXRjaCgvXFwvMTIzJC8pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDUwMDAsICdwYWdlIHNob3VsZCBuYXZpZ2F0ZSB0byAvMTIzJyk7XG4gICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nIGFuZCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay00JykpLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay00JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgICB9KTtcbiAgXG4gICAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gbm8gaHJlZiBidXQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZShudWxsKTtcbiAgICAgICAgICB9KTtcbiAgXG4gICAgICAgICAgaXQoJ3Nob3VsZCBvbmx5IGNoYW5nZSB1cmwgd2hlbiBvbmx5IG5nLWhyZWYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmNsZWFyKCk7XG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9NYXRjaCgvXFwvNiQvKTtcbiAgXG4gICAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcbiAgXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdTcmNcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQHByaW9yaXR5IDk5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndFxuICAgKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gICAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICAgKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAgICpcbiAgICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAgICogYGBgaHRtbFxuICAgKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICAgKiBgYGBodG1sXG4gICAqIDxpbWcgbmctc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICAgKiBgYGBcbiAgICpcbiAgICogQGVsZW1lbnQgSU1HXG4gICAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdTcmNzZXRcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQHByaW9yaXR5IDk5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxuICAgKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gICAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICAgKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAgICpcbiAgICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAgICogYGBgaHRtbFxuICAgKiA8aW1nIHNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICAgKiBgYGBodG1sXG4gICAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICAgKiBgYGBcbiAgICpcbiAgICogQGVsZW1lbnQgSU1HXG4gICAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3Jjc2V0IGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdEaXNhYmxlZFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAcHJpb3JpdHkgMTAwXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaGlzIGRpcmVjdGl2ZSBzZXRzIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCAodHlwaWNhbGx5IGEgZm9ybSBjb250cm9sLFxuICAgKiBlLmcuIGBpbnB1dGAsIGBidXR0b25gLCBgc2VsZWN0YCBldGMuKSBpZiB0aGVcbiAgICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW5zaWRlIGBuZ0Rpc2FibGVkYCBldmFsdWF0ZXMgdG8gdHJ1dGh5LlxuICAgKlxuICAgKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBkaXNhYmxlZGBcbiAgICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibmctZGlzYWJsZWRcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8bGFiZWw+Q2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxidXR0b24gbmctbW9kZWw9XCJidXR0b25cIiBuZy1kaXNhYmxlZD1cImNoZWNrZWRcIj5CdXR0b248L2J1dHRvbj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICpcbiAgICogQGVsZW1lbnQgSU5QVVRcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gICAqICAgICB0aGVuIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0NoZWNrZWRcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQHByaW9yaXR5IDEwMFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ0NoZWNrZWRgIGlzIHRydXRoeS5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgZGlyZWN0aXZlIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sXG4gICAqIGFzIHRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci5cbiAgICpcbiAgICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgY2hlY2tlZGBcbiAgICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibmctY2hlY2tlZFwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYXN0ZXJcIj48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGlucHV0IGlkPVwiY2hlY2tTbGF2ZVwiIHR5cGU9XCJjaGVja2JveFwiIG5nLWNoZWNrZWQ9XCJtYXN0ZXJcIiBhcmlhLWxhYmVsPVwiU2xhdmUgaW5wdXRcIj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBib3RoIGNoZWNrQm94ZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ21hc3RlcicpKS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiBAZWxlbWVudCBJTlBVVFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICAgKiAgICAgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1JlYWRvbmx5XG4gICAqIEByZXN0cmljdCBBXG4gICAqIEBwcmlvcml0eSAxMDBcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFNldHMgdGhlIGByZWFkb25seWAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nUmVhZG9ubHlgIGlzIHRydXRoeS5cbiAgICogTm90ZSB0aGF0IGByZWFkb25seWAgYXBwbGllcyBvbmx5IHRvIGBpbnB1dGAgZWxlbWVudHMgd2l0aCBzcGVjaWZpYyB0eXBlcy4gW1NlZSB0aGUgaW5wdXQgZG9jcyBvblxuICAgKiBNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLXJlYWRvbmx5KSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgcmVhZG9ubHlgXG4gICAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLXJlYWRvbmx5XCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIG1ha2UgdGV4dCByZWFkb25seTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1yZWFkb25seT1cImNoZWNrZWRcIiB2YWx1ZT1cIkknbSBBbmd1bGFyXCIgYXJpYS1sYWJlbD1cIlJlYWRvbmx5IGZpZWxkXCIgLz5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIEBlbGVtZW50IElOUFVUXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdSZWFkb25seSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICAgKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdTZWxlY3RlZFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAcHJpb3JpdHkgMTAwXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ1NlbGVjdGVkYCBpcyB0cnV0aHkuXG4gICAqXG4gICAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYHNlbGVjdGVkYFxuICAgKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogICAqKk5vdGU6KiogYG5nU2VsZWN0ZWRgIGRvZXMgbm90IGludGVyYWN0IHdpdGggdGhlIGBzZWxlY3RgIGFuZCBgbmdNb2RlbGAgZGlyZWN0aXZlcywgaXQgb25seVxuICAgKiAgIHNldHMgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LiBJZiB5b3UgYXJlIHVzaW5nIGBuZ01vZGVsYCBvbiB0aGUgc2VsZWN0LCB5b3VcbiAgICogICBzaG91bGQgbm90IHVzZSBgbmdTZWxlY3RlZGAgb24gdGhlIG9wdGlvbnMsIGFzIGBuZ01vZGVsYCB3aWxsIHNldCB0aGUgc2VsZWN0IHZhbHVlIGFuZFxuICAgKiAgIHNlbGVjdGVkIG9wdGlvbnMuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLXNlbGVjdGVkXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgICAgPHNlbGVjdCBhcmlhLWxhYmVsPVwibmdTZWxlY3RlZCBkZW1vXCI+XG4gICAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgR3JlZXRpbmdzIScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIEBlbGVtZW50IE9QVElPTlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2VsZWN0ZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAgICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJzZWxlY3RlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nT3BlblxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAcHJpb3JpdHkgMTAwXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTZXRzIHRoZSBgb3BlbmAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nT3BlbmAgaXMgdHJ1dGh5LlxuICAgKlxuICAgKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBvcGVuYFxuICAgKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogIyMgQSBub3RlIGFib3V0IGJyb3dzZXIgY29tcGF0aWJpbGl0eVxuICAgKlxuICAgKiBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCB0aGUgYGRldGFpbHNgIGVsZW1lbnQsIGl0IGlzXG4gICAqIHJlY29tbWVuZGVkIHRvIHVzZSB7QGxpbmsgbmcubmdTaG93fSBhbmQge0BsaW5rIG5nLm5nSGlkZX0gaW5zdGVhZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgICA8ZXhhbXBsZSBuYW1lPVwibmctb3BlblwiPlxuICAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICAgPGxhYmVsPlRvZ2dsZSBkZXRhaWxzOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJvcGVuXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8ZGV0YWlscyBpZD1cImRldGFpbHNcIiBuZy1vcGVuPVwib3BlblwiPlxuICAgICAgICAgICAgICA8c3VtbWFyeT5MaXN0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpPkFwcGxlPC9saT5cbiAgICAgICAgICAgICAgICA8bGk+T3JhbmdlPC9saT5cbiAgICAgICAgICAgICAgICA8bGk+RHVyaWFuPC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTtcbiAgICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgIDwvZmlsZT5cbiAgICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIEBlbGVtZW50IERFVEFJTFNcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAgICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJvcGVuXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAgICovXG5cbiAgdmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cbiAgLy8gYm9vbGVhbiBhdHRycyBhcmUgZXZhbHVhdGVkXG4gIGZvckVhY2goQk9PTEVBTl9BVFRSLCBmdW5jdGlvbiAocHJvcE5hbWUsIGF0dHJOYW1lKSB7XG4gICAgLy8gYmluZGluZyB0byBtdWx0aXBsZSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgaWYgKHByb3BOYW1lID09PSAnbXVsdGlwbGUnKSByZXR1cm47XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0cltub3JtYWxpemVkXSwgZnVuY3Rpb24gbmdCb29sZWFuQXR0cldhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgICB2YXIgbGlua0ZuID0gZGVmYXVsdExpbmtGbjtcblxuICAgIGlmIChwcm9wTmFtZSA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgICBsaW5rRm4gPSBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy8gZW5zdXJpbmcgbmdDaGVja2VkIGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggbmdNb2RlbCB3aGVuIGJvdGggYXJlIHNldCBvbiB0aGUgc2FtZSBpbnB1dFxuICAgICAgICBpZiAoYXR0ci5uZ01vZGVsICE9PSBhdHRyW25vcm1hbGl6ZWRdKSB7XG4gICAgICAgICAgZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBsaW5rOiBsaW5rRm5cbiAgICAgIH07XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkXG4gIGZvckVhY2goQUxJQVNFRF9BVFRSLCBmdW5jdGlvbiAoaHRtbEF0dHIsIG5nQXR0cikge1xuICAgIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25nQXR0cl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgLy9zcGVjaWFsIGNhc2UgbmdQYXR0ZXJuIHdoZW4gYSBsaXRlcmFsIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWx1ZVxuICAgICAgICAgIC8vaXMgdXNlZCBhcyB0aGUgZXhwcmVzc2lvbiAodGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB3YXRjaCBhbnl0aGluZykuXG4gICAgICAgICAgaWYgKG5nQXR0ciA9PT0gJ25nUGF0dGVybicgJiYgYXR0ci5uZ1BhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGF0dHIubmdQYXR0ZXJuLm1hdGNoKFJFR0VYX1NUUklOR19SRUdFWFApO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIGF0dHIuJHNldCgnbmdQYXR0ZXJuJywgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldChuZ0F0dHIsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBuZy1zcmMsIG5nLXNyY3NldCwgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkXG4gIGZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24gKGF0dHJOYW1lKSB7XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gICAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmlvcml0eTogOTksIC8vIGl0IG5lZWRzIHRvIHJ1biBhZnRlciB0aGUgYXR0cmlidXRlcyBhcmUgaW50ZXJwb2xhdGVkXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBhdHRyTmFtZSxcbiAgICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lO1xuXG4gICAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiYgdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJztcbiAgICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7XG4gICAgICAgICAgICBwcm9wTmFtZSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicpIHtcbiAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAgICAgICAgIC8vIE9uIElFLCBpZiBcIm5nOnNyY1wiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCBcInNyY1wiIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICAvLyB0aGVuIGNhbGxpbmcgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdmb28nKSBkb2Vzbid0IGRvIGFueXRoaW5nLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAvLyB0byBzZXQgdGhlIHByb3BlcnR5IGFzIHdlbGwgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAgICAgICAgICAvLyBXZSB1c2UgYXR0clthdHRyTmFtZV0gdmFsdWUgc2luY2UgJHNldCBjYW4gc2FuaXRpemUgdGhlIHVybC5cbiAgICAgICAgICAgIGlmIChtc2llICYmIHByb3BOYW1lKSBlbGVtZW50LnByb3AocHJvcE5hbWUsIGF0dHJbbmFtZV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH0pO1xuXG4gIC8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtUEVORElOR19DTEFTUywgLVNVQk1JVFRFRF9DTEFTU1xuICAgKi9cbiAgdmFyIG51bGxGb3JtQ3RybCA9IHtcbiAgICAkYWRkQ29udHJvbDogbm9vcCxcbiAgICAkJHJlbmFtZUNvbnRyb2w6IG51bGxGb3JtUmVuYW1lQ29udHJvbCxcbiAgICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcbiAgICAkc2V0VmFsaWRpdHk6IG5vb3AsXG4gICAgJHNldERpcnR5OiBub29wLFxuICAgICRzZXRQcmlzdGluZTogbm9vcCxcbiAgICAkc2V0U3VibWl0dGVkOiBub29wXG4gIH0sXG4gICAgICBQRU5ESU5HX0NMQVNTID0gJ25nLXBlbmRpbmcnLFxuICAgICAgU1VCTUlUVEVEX0NMQVNTID0gJ25nLXN1Ym1pdHRlZCc7XG5cbiAgZnVuY3Rpb24gbnVsbEZvcm1SZW5hbWVDb250cm9sKGNvbnRyb2wsIG5hbWUpIHtcbiAgICBjb250cm9sLiRuYW1lID0gbmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgdHlwZVxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluaW5nIGZvcm1zIGFuZCBjb250cm9scyBhcmUgdmFsaWQuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkc3VibWl0dGVkIFRydWUgaWYgdXNlciBoYXMgc3VibWl0dGVkIHRoZSBmb3JtIGV2ZW4gaWYgaXRzIGludmFsaWQuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yIGZvcm1zIHdpdGhcbiAgICogIHBlbmRpbmcgdmFsaWRhdG9ycywgd2hlcmU6XG4gICAqXG4gICAqICAtIGtleXMgYXJlIHZhbGlkYXRpb25zIHRva2VucyAoZXJyb3IgbmFtZXMpLlxuICAgKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGhhdmUgYSBwZW5kaW5nIHZhbGlkYXRvciBmb3IgdGhlIGdpdmVuIGVycm9yIG5hbWUuXG4gICAqXG4gICAqIFNlZSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciMkZXJyb3IgJGVycm9yfSBmb3IgYSBsaXN0IG9mIGJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zLlxuICAgKlxuICAgKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIG9iamVjdCBoYXNoLCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gY29udHJvbHMgb3IgZm9ybXMgd2l0aCBmYWlsaW5nXG4gICAqICB2YWxpZGF0b3JzLCB3aGVyZTpcbiAgICpcbiAgICogIC0ga2V5cyBhcmUgdmFsaWRhdGlvbiB0b2tlbnMgKGVycm9yIG5hbWVzKSxcbiAgICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcnJvciBuYW1lLlxuICAgKlxuICAgKiAgQnVpbHQtaW4gdmFsaWRhdGlvbiB0b2tlbnM6XG4gICAqICAtIGBlbWFpbGBcbiAgICogIC0gYG1heGBcbiAgICogIC0gYG1heGxlbmd0aGBcbiAgICogIC0gYG1pbmBcbiAgICogIC0gYG1pbmxlbmd0aGBcbiAgICogIC0gYG51bWJlcmBcbiAgICogIC0gYHBhdHRlcm5gXG4gICAqICAtIGByZXF1aXJlZGBcbiAgICogIC0gYHVybGBcbiAgICogIC0gYGRhdGVgXG4gICAqICAtIGBkYXRldGltZWxvY2FsYFxuICAgKiAgLSBgdGltZWBcbiAgICogIC0gYHdlZWtgXG4gICAqICAtIGBtb250aGBcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIGBGb3JtQ29udHJvbGxlcmAga2VlcHMgdHJhY2sgb2YgYWxsIGl0cyBjb250cm9scyBhbmQgbmVzdGVkIGZvcm1zIGFzIHdlbGwgYXMgdGhlIHN0YXRlIG9mIHRoZW0sXG4gICAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS5cbiAgICpcbiAgICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2VcbiAgICogb2YgYEZvcm1Db250cm9sbGVyYC5cbiAgICpcbiAgICovXG4gIC8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gIEZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG4gIGZ1bmN0aW9uIEZvcm1Db250cm9sbGVyKCRlbGVtZW50LCAkYXR0cnMsICRzY29wZSwgJGFuaW1hdGUsICRpbnRlcnBvbGF0ZSkge1xuICAgIHRoaXMuJCRjb250cm9scyA9IFtdO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuJGVycm9yID0ge307XG4gICAgdGhpcy4kJHN1Y2Nlc3MgPSB7fTtcbiAgICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHJzLm5hbWUgfHwgJGF0dHJzLm5nRm9ybSB8fCAnJykoJHNjb3BlKTtcbiAgICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gICAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICAgIHRoaXMuJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIHRoaXMuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuXG4gICAgdGhpcy4kJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuXG4gICAgc2V0dXBWYWxpZGl0eSh0aGlzKTtcbiAgfVxuXG4gIEZvcm1Db250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICAgKlxuICAgICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICAgKiBhIGZvcm0gdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBwZW5kIHVwZGF0ZXMuXG4gICAgICovXG4gICAgJHJvbGxiYWNrVmlld1ZhbHVlOiBmdW5jdGlvbiAkcm9sbGJhY2tWaWV3VmFsdWUoKSB7XG4gICAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgY29udHJvbC4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb21taXQgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgICAqXG4gICAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgICAqIHVzdWFsbHkgaGFuZGxlcyBjYWxsaW5nIHRoaXMgaW4gcmVzcG9uc2UgdG8gaW5wdXQgZXZlbnRzLlxuICAgICAqL1xuICAgICRjb21taXRWaWV3VmFsdWU6IGZ1bmN0aW9uICRjb21taXRWaWV3VmFsdWUoKSB7XG4gICAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgY29udHJvbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2xcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbCBjb250cm9sIG9iamVjdCwgZWl0aGVyIGEge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXJ9IG9yIGFuXG4gICAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS4gSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5XG4gICAgICogd2hlbiB0aGV5IGFyZSBsaW5rZWQuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyb2wgd2lsbCBub3QgYmUgcmVmbGVjdGVkIG9uIHRoZSBuZXcgcGFyZW50IGZvcm0uIFRoaXNcbiAgICAgKiBpcyBub3QgYW4gaXNzdWUgd2l0aCBub3JtYWwgdXNlLCBhcyBmcmVzaGx5IGNvbXBpbGVkIGFuZCBsaW5rZWQgY29udHJvbHMgYXJlIGluIGEgYCRwcmlzdGluZWBcbiAgICAgKiBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEhvd2V2ZXIsIGlmIHRoZSBtZXRob2QgaXMgdXNlZCBwcm9ncmFtbWF0aWNhbGx5LCBmb3IgZXhhbXBsZSBieSBhZGRpbmcgZHluYW1pY2FsbHkgY3JlYXRlZCBjb250cm9scyxcbiAgICAgKiBvciBjb250cm9scyB0aGF0IGhhdmUgYmVlbiBwcmV2aW91c2x5IHJlbW92ZWQgd2l0aG91dCBkZXN0cm95aW5nIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnQsXG4gICAgICogaXQncyB0aGUgZGV2ZWxvcGVycyByZXNwb25zaWJpbGl0eSB0byBtYWtlIHN1cmUgdGhlIGN1cnJlbnQgc3RhdGUgcHJvcGFnYXRlcyB0byB0aGUgcGFyZW50IGZvcm0uXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgaWYgYW4gaW5wdXQgY29udHJvbCBpcyBhZGRlZCB0aGF0IGlzIGFscmVhZHkgYCRkaXJ0eWAgYW5kIGhhcyBgJGVycm9yYCBwcm9wZXJ0aWVzLFxuICAgICAqIGNhbGxpbmcgYCRzZXREaXJ0eSgpYCBhbmQgYCR2YWxpZGF0ZSgpYCBhZnRlcndhcmRzIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGF0ZSB0byB0aGUgcGFyZW50IGZvcm0uXG4gICAgICovXG4gICAgJGFkZENvbnRyb2w6IGZ1bmN0aW9uICRhZGRDb250cm9sKGNvbnRyb2wpIHtcbiAgICAgIC8vIEJyZWFraW5nIGNoYW5nZSAtIGJlZm9yZSwgaW5wdXRzIHdob3NlIG5hbWUgd2FzIFwiaGFzT3duUHJvcGVydHlcIiB3ZXJlIHF1aWV0bHkgaWdub3JlZFxuICAgICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lLCAnaW5wdXQnKTtcbiAgICAgIHRoaXMuJCRjb250cm9scy5wdXNoKGNvbnRyb2wpO1xuXG4gICAgICBpZiAoY29udHJvbC4kbmFtZSkge1xuICAgICAgICB0aGlzW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcbiAgICAgIH1cblxuICAgICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBQcml2YXRlIEFQSTogcmVuYW1lIGEgZm9ybSBjb250cm9sXG4gICAgJCRyZW5hbWVDb250cm9sOiBmdW5jdGlvbiAkJHJlbmFtZUNvbnRyb2woY29udHJvbCwgbmV3TmFtZSkge1xuICAgICAgdmFyIG9sZE5hbWUgPSBjb250cm9sLiRuYW1lO1xuXG4gICAgICBpZiAodGhpc1tvbGROYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgICBkZWxldGUgdGhpc1tvbGROYW1lXTtcbiAgICAgIH1cbiAgICAgIHRoaXNbbmV3TmFtZV0gPSBjb250cm9sO1xuICAgICAgY29udHJvbC4kbmFtZSA9IG5ld05hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyfVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGVyZWdpc3RlciBhIGNvbnRyb2wgZnJvbSB0aGUgZm9ybS5cbiAgICAgKlxuICAgICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBvbmx5IHRoZSByZW1vdmVkIGNvbnRyb2wncyB2YWxpZGF0aW9uIHN0YXRlIChgJGVycm9yc2BldGMuKSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGVcbiAgICAgKiBmb3JtLiBgJGRpcnR5YCwgYCRzdWJtaXR0ZWRgIHN0YXRlcyB3aWxsIG5vdCBiZSBjaGFuZ2VkLCBiZWNhdXNlIHRoZSBleHBlY3RlZCBiZWhhdmlvciBjYW4gYmVcbiAgICAgKiBkaWZmZXJlbnQgZnJvbSBjYXNlIHRvIGNhc2UuIEZvciBleGFtcGxlLCByZW1vdmluZyB0aGUgb25seSBgJGRpcnR5YCBjb250cm9sIGZyb20gYSBmb3JtIG1heSBvclxuICAgICAqIG1heSBub3QgbWVhbiB0aGF0IHRoZSBmb3JtIGlzIHN0aWxsIGAkZGlydHlgLlxuICAgICAqL1xuICAgICRyZW1vdmVDb250cm9sOiBmdW5jdGlvbiAkcmVtb3ZlQ29udHJvbChjb250cm9sKSB7XG4gICAgICBpZiAoY29udHJvbC4kbmFtZSAmJiB0aGlzW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2NvbnRyb2wuJG5hbWVdO1xuICAgICAgfVxuICAgICAgZm9yRWFjaCh0aGlzLiRwZW5kaW5nLCBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICB0aGlzLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgZm9yRWFjaCh0aGlzLiRlcnJvciwgZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgdGhpcy4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgICB9LCB0aGlzKTtcbiAgICAgIGZvckVhY2godGhpcy4kJHN1Y2Nlc3MsIGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICAgIHRoaXMuJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIGFycmF5UmVtb3ZlKHRoaXMuJCRjb250cm9scywgY29udHJvbCk7XG4gICAgICBjb250cm9sLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldERpcnR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzIHRoZSBmb3JtIHRvIGEgZGlydHkgc3RhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIGFkZCB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGEgZGlydHlcbiAgICAgKiBzdGF0ZSAobmctZGlydHkgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAgICAgKi9cbiAgICAkc2V0RGlydHk6IGZ1bmN0aW9uICRzZXREaXJ0eSgpIHtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kZGlydHkgPSB0cnVlO1xuICAgICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgc2V0cyB0aGUgZm9ybSdzIGAkcHJpc3RpbmVgIHN0YXRlIHRvIHRydWUsIHRoZSBgJGRpcnR5YCBzdGF0ZSB0byBmYWxzZSwgcmVtb3Zlc1xuICAgICAqIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBhZGRzIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzLiBBZGRpdGlvbmFsbHksIGl0IHNldHMgdGhlIGAkc3VibWl0dGVkYFxuICAgICAqIHN0YXRlIHRvIGZhbHNlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZCBpbiB0aGlzIGZvcm0uXG4gICAgICpcbiAgICAgKiBTZXR0aW5nIGEgZm9ybSBiYWNrIHRvIGEgcHJpc3RpbmUgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gd2Ugd2FudCB0byAncmV1c2UnIGEgZm9ybSBhZnRlclxuICAgICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuXG4gICAgICovXG4gICAgJHNldFByaXN0aW5lOiBmdW5jdGlvbiAkc2V0UHJpc3RpbmUoKSB7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICAgIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gICAgICB0aGlzLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdG91Y2hlZCcgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSBjb250cm9scyB0byB0aGVpclxuICAgICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS5cbiAgICAgKlxuICAgICAqIFNldHRpbmcgYSBmb3JtIGNvbnRyb2xzIGJhY2sgdG8gdGhlaXIgdW50b3VjaGVkIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHNldHRpbmcgdGhlIGZvcm1cbiAgICAgKiBiYWNrIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICAgKi9cbiAgICAkc2V0VW50b3VjaGVkOiBmdW5jdGlvbiAkc2V0VW50b3VjaGVkKCkge1xuICAgICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRTdWJtaXR0ZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHN1Ym1pdHRlZCBzdGF0ZS5cbiAgICAgKi9cbiAgICAkc2V0U3VibWl0dGVkOiBmdW5jdGlvbiAkc2V0U3VibWl0dGVkKCkge1xuICAgICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgICB0aGlzLiRzdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldFN1Ym1pdHRlZCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRWYWxpZGl0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2hhbmdlIHRoZSB2YWxpZGl0eSBzdGF0ZSBvZiB0aGUgZm9ybSwgYW5kIG5vdGlmeSB0aGUgcGFyZW50IGZvcm0gKGlmIGFueSkuXG4gICAqXG4gICAqIEFwcGxpY2F0aW9uIGRldmVsb3BlcnMgd2lsbCByYXJlbHkgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJdCBpcyB1c2VkIGludGVybmFsbHksIGJ5XG4gICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eSBOZ01vZGVsQ29udHJvbGxlci4kc2V0VmFsaWRpdHkoKX0sIHRvIHByb3BhZ2F0ZSBhXG4gICAqIGNvbnRyb2wncyB2YWxpZGl0eSBzdGF0ZSB0byB0aGUgcGFyZW50IGBGb3JtQ29udHJvbGxlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWxpZGF0aW9uRXJyb3JLZXkgTmFtZSBvZiB0aGUgdmFsaWRhdG9yLiBUaGUgYHZhbGlkYXRpb25FcnJvcktleWAgd2lsbCBiZVxuICAgKiAgICAgICAgYXNzaWduZWQgdG8gZWl0aGVyIGAkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XWAgb3IgYCRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV1gIChmb3JcbiAgICogICAgICAgIHVuZnVsZmlsbGVkIGAkYXN5bmNWYWxpZGF0b3JzYCksIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIGZvciBkYXRhLWJpbmRpbmcuIFRoZVxuICAgKiAgICAgICAgYHZhbGlkYXRpb25FcnJvcktleWAgc2hvdWxkIGJlIGluIGNhbWVsQ2FzZSBhbmQgd2lsbCBnZXQgY29udmVydGVkIGludG8gZGFzaC1jYXNlIGZvclxuICAgKiAgICAgICAgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kXG4gICAqICAgICAgICBgbmctaW52YWxpZC1teS1lcnJvcmAgY2xhc3NlcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzIGB7eyBzb21lRm9ybS4kZXJyb3IubXlFcnJvciB9fWAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSwgaW52YWxpZCAoZmFsc2UpLCBwZW5kaW5nXG4gICAqICAgICAgICAodW5kZWZpbmVkKSwgIG9yIHNraXBwZWQgKG51bGwpLiBQZW5kaW5nIGlzIHVzZWQgZm9yIHVuZnVsZmlsbGVkIGAkYXN5bmNWYWxpZGF0b3JzYC5cbiAgICogICAgICAgIFNraXBwZWQgaXMgdXNlZCBieSBBbmd1bGFySlMgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kIHdoZW5cbiAgICogICAgICAgIGAkYXN5bmNWYWxpZGF0b3JzYCBkbyBub3QgcnVuIGJlY2F1c2UgYW55IG9mIHRoZSBgJHZhbGlkYXRvcnNgIGZhaWxlZC5cbiAgICogQHBhcmFtIHtOZ01vZGVsQ29udHJvbGxlciB8IEZvcm1Db250cm9sbGVyfSBjb250cm9sbGVyIC0gVGhlIGNvbnRyb2xsZXIgd2hvc2UgdmFsaWRpdHkgc3RhdGUgaXNcbiAgICogICAgICAgIHRyaWdnZXJpbmcgdGhlIGNoYW5nZS5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjbGF6ejogRm9ybUNvbnRyb2xsZXIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoY29udHJvbGxlcik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBsaXN0LnB1c2goY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbiB1bnNldChvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXJyYXlSZW1vdmUobGlzdCwgY29udHJvbGxlcik7XG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0Zvcm1cbiAgICogQHJlc3RyaWN0IEVBQ1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogTmVzdGFibGUgYWxpYXMgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGBmb3JtYH0gZGlyZWN0aXZlLiBIVE1MXG4gICAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhXG4gICAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICAgKlxuICAgKiBOb3RlOiB0aGUgcHVycG9zZSBvZiBgbmdGb3JtYCBpcyB0byBncm91cCBjb250cm9scyxcbiAgICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAgICogKGUuZy4gcG9zdGluZyB0byB0aGUgc2VydmVyLCAuLi4pLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gICAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gICAqXG4gICAqL1xuXG4gIC8qKlxuICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgKiBAbmFtZSBmb3JtXG4gICogQHJlc3RyaWN0IEVcbiAgKlxuICAqIEBkZXNjcmlwdGlvblxuICAqIERpcmVjdGl2ZSB0aGF0IGluc3RhbnRpYXRlc1xuICAqIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyIEZvcm1Db250cm9sbGVyfS5cbiAgKlxuICAqIElmIHRoZSBgbmFtZWAgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciBpcyBwdWJsaXNoZWQgb250byB0aGUgY3VycmVudCBzY29wZSB1bmRlclxuICAqIHRoaXMgbmFtZS5cbiAgKlxuICAqICMgQWxpYXM6IHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfVxuICAqXG4gICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICAqIGZvcm1zIGFyZSB2YWxpZCBhcyB3ZWxsLiBIb3dldmVyLCBicm93c2VycyBkbyBub3QgYWxsb3cgbmVzdGluZyBvZiBgPGZvcm0+YCBlbGVtZW50cywgc29cbiAgKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0gZGlyZWN0aXZlLCB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvXG4gICogYGZvcm1gIGJ1dCBjYW4gYmUgbmVzdGVkLiBOZXN0ZWQgZm9ybXMgY2FuIGJlIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHRoZSB2YWxpZGl0eSBvZiBhIHN1Yi1ncm91cFxuICAqIG9mIGNvbnRyb2xzIG5lZWRzIHRvIGJlIGRldGVybWluZWQuXG4gICpcbiAgKiAjIENTUyBjbGFzc2VzXG4gICogIC0gYG5nLXZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgdmFsaWQuXG4gICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxuICAqICAtIGBuZy1wZW5kaW5nYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcGVuZGluZy5cbiAgKiAgLSBgbmctcHJpc3RpbmVgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBwcmlzdGluZS5cbiAgKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS5cbiAgKiAgLSBgbmctc3VibWl0dGVkYCBpcyBzZXQgaWYgdGhlIGZvcm0gd2FzIHN1Ym1pdHRlZC5cbiAgKlxuICAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICAqXG4gICpcbiAgKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvblxuICAqXG4gICogU2luY2UgdGhlIHJvbGUgb2YgZm9ybXMgaW4gY2xpZW50LXNpZGUgQW5ndWxhciBhcHBsaWNhdGlvbnMgaXMgZGlmZmVyZW50IHRoYW4gaW4gY2xhc3NpY2FsXG4gICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsXG4gICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkXG4gICogdG8gaGFuZGxlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW4gYW4gYXBwbGljYXRpb24tc3BlY2lmaWMgd2F5LlxuICAqXG4gICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGVcbiAgKiBgPGZvcm0+YCBlbGVtZW50IGhhcyBhbiBgYWN0aW9uYCBhdHRyaWJ1dGUgc3BlY2lmaWVkLlxuICAqXG4gICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlblxuICAqIGEgZm9ybSBpcyBzdWJtaXR0ZWQ6XG4gICpcbiAgKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50XG4gICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlIG9uIHRoZSBmaXJzdFxuICAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pXG4gICpcbiAgKiBUbyBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24gb2YgdGhlIGhhbmRsZXIsIHVzZSBvbmx5IG9uZSBvZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH1cbiAgKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy5cbiAgKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjpcbiAgKlxuICAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdFxuICAqIChgbmdTdWJtaXRgKVxuICAqIC0gaWYgYSBmb3JtIGhhcyAyKyBpbnB1dCBmaWVsZHMgYW5kIG5vIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW4gaGl0dGluZyBlbnRlclxuICAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXRcbiAgKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXG4gICogaGl0dGluZyBlbnRlciBpbiBhbnkgb2YgdGhlIGlucHV0IGZpZWxkcyB3aWxsIHRyaWdnZXIgdGhlIGNsaWNrIGhhbmRsZXIgb24gdGhlICpmaXJzdCogYnV0dG9uIG9yXG4gICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKVxuICAqXG4gICogQW55IHBlbmRpbmcgYG5nTW9kZWxPcHRpb25zYCBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzXG4gICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAgKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAgKlxuICAqICMjIEFuaW1hdGlvbiBIb29rc1xuICAqXG4gICogQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQuXG4gICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnlcbiAgKiBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgd2l0aGluIHRoZSBmb3JtLiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgc2ltaWxhciB0byBob3dcbiAgKiB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmQgYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbFxuICAqIGFzIEpTIGFuaW1hdGlvbnMuXG4gICpcbiAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGEgZm9ybSBlbGVtZW50XG4gICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAgKlxuICAqIDxwcmU+XG4gICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gICogLm15LWZvcm0ge1xuICAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgKiB9XG4gICogLm15LWZvcm0ubmctaW52YWxpZCB7XG4gICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gICogICBjb2xvcjp3aGl0ZTtcbiAgKiB9XG4gICogPC9wcmU+XG4gICpcbiAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctZm9ybVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0Zvcm1Db250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnVzZXJUeXBlID0gJ2d1ZXN0JztcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxzdHlsZT5cbiAgICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgfVxuICAgICAgICAgLm15LWZvcm0ubmctaW52YWxpZCB7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJGb3JtQ29udHJvbGxlclwiIGNsYXNzPVwibXktZm9ybVwiPlxuICAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1c2VyVHlwZVwiIHJlcXVpcmVkPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj48YnI+XG4gICAgICAgICAgPGNvZGU+dXNlclR5cGUgPSB7e3VzZXJUeXBlfX08L2NvZGU+PGJyPlxuICAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC9jb2RlPjxicj5cbiAgICAgICAgICA8Y29kZT5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L2NvZGU+PGJyPlxuICAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7XG4gICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICB9KTtcbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgICB2YXIgdXNlcklucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlclR5cGUnKSk7XG4gICAgICAgICAgICB1c2VySW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICpcbiAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAgKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICAqL1xuICB2YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbiBmb3JtRGlyZWN0aXZlRmFjdG9yeShpc05nRm9ybSkge1xuICAgIHJldHVybiBbJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uICgkdGltZW91dCwgJHBhcnNlKSB7XG4gICAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgICAgbmFtZTogJ2Zvcm0nLFxuICAgICAgICByZXN0cmljdDogaXNOZ0Zvcm0gPyAnRUFDJyA6ICdFJyxcbiAgICAgICAgcmVxdWlyZTogWydmb3JtJywgJ15eP2Zvcm0nXSwgLy9maXJzdCBpcyB0aGUgZm9ybSdzIG93biBjdHJsLCBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgcGFyZW50IGZvcm1cbiAgICAgICAgY29udHJvbGxlcjogRm9ybUNvbnRyb2xsZXIsXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nRm9ybUNvbXBpbGUoZm9ybUVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgICAgZm9ybUVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgICAgIHZhciBuYW1lQXR0ciA9IGF0dHIubmFtZSA/ICduYW1lJyA6IGlzTmdGb3JtICYmIGF0dHIubmdGb3JtID8gJ25nRm9ybScgOiBmYWxzZTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nRm9ybVByZUxpbmsoc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGN0cmxzWzBdO1xuXG4gICAgICAgICAgICAgIC8vIGlmIGBhY3Rpb25gIGF0dHIgaXMgbm90IHByZXNlbnQgb24gdGhlIGZvcm0sIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIChzdWJtaXNzaW9uKVxuICAgICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVzZSBqcSBldmVudHMgYmVjYXVzZSBpZiBhIGZvcm0gaXMgZGVzdHJveWVkIGR1cmluZyBzdWJtaXNzaW9uIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gSUUgOSBpcyBub3QgYWZmZWN0ZWQgYmVjYXVzZSBpdCBkb2Vzbid0IGZpcmUgYSBzdWJtaXQgZXZlbnQgYW5kIHRyeSB0byBkbyBhIGZ1bGxcbiAgICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxuICAgICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZUZvcm1TdWJtaXNzaW9uID0gZnVuY3Rpb24gaGFuZGxlRm9ybVN1Ym1pc3Npb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmb3JtRWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVGb3JtU3VibWlzc2lvbik7XG5cbiAgICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYVxuICAgICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtRWxlbWVudFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVGb3JtU3VibWlzc2lvbik7XG4gICAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBjb250cm9sbGVyLiQkcGFyZW50Rm9ybTtcbiAgICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJGFkZENvbnRyb2woY29udHJvbGxlcik7XG5cbiAgICAgICAgICAgICAgdmFyIHNldHRlciA9IG5hbWVBdHRyID8gZ2V0U2V0dGVyKGNvbnRyb2xsZXIuJG5hbWUpIDogbm9vcDtcblxuICAgICAgICAgICAgICBpZiAobmFtZUF0dHIpIHtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIGF0dHIuJG9ic2VydmUobmFtZUF0dHIsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuJG5hbWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2woY29udHJvbGxlciwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgc2V0dGVyID0gZ2V0U2V0dGVyKGNvbnRyb2xsZXIuJG5hbWUpO1xuICAgICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2woY29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGV4dGVuZChjb250cm9sbGVyLCBudWxsRm9ybUN0cmwpOyAvL3N0b3AgcHJvcGFnYXRpbmcgY2hpbGQgZGVzdHJ1Y3Rpb24gaGFuZGxlcnMgdXB3YXJkc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZm9ybURpcmVjdGl2ZTtcblxuICAgICAgZnVuY3Rpb24gZ2V0U2V0dGVyKGV4cHJlc3Npb24pIHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICAgICAgLy9jcmVhdGUgYW4gYXNzaWduYWJsZSBleHByZXNzaW9uLCBzbyBmb3JtcyB3aXRoIGFuIGVtcHR5IG5hbWUgY2FuIGJlIHJlbmFtZWQgbGF0ZXJcbiAgICAgICAgICByZXR1cm4gJHBhcnNlKCd0aGlzW1wiXCJdJykuYXNzaWduO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcGFyc2UoZXhwcmVzc2lvbikuYXNzaWduIHx8IG5vb3A7XG4gICAgICB9XG4gICAgfV07XG4gIH07XG5cbiAgdmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xuICB2YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cbiAgLy8gaGVscGVyIG1ldGhvZHNcbiAgZnVuY3Rpb24gc2V0dXBWYWxpZGl0eShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLiQkY2xhc3NDYWNoZSA9IHt9O1xuICAgIGluc3RhbmNlLiQkY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoaW5zdGFuY2UuJCRjbGFzc0NhY2hlW1ZBTElEX0NMQVNTXSA9IGluc3RhbmNlLiQkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpO1xuICB9XG4gIGZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHtcbiAgICB2YXIgY2xhenogPSBjb250ZXh0LmNsYXp6LFxuICAgICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgICAgdW5zZXQgPSBjb250ZXh0LnVuc2V0O1xuXG4gICAgY2xhenoucHJvdG90eXBlLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uICh2YWxpZGF0aW9uRXJyb3JLZXksIHN0YXRlLCBjb250cm9sbGVyKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7XG4gICAgICAgIGNyZWF0ZUFuZFNldCh0aGlzLCAnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5zZXRBbmRDbGVhbnVwKHRoaXMsICckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQm9vbGVhbihzdGF0ZSkpIHtcbiAgICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHVuc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgICAgc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgICB1bnNldCh0aGlzLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuJHBlbmRpbmcpIHtcbiAgICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3ModGhpcywgUEVORElOR19DTEFTUywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuJHZhbGlkID0gdGhpcy4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcyh0aGlzLCAnJywgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuJHZhbGlkID0gaXNPYmplY3RFbXB0eSh0aGlzLiRlcnJvcik7XG4gICAgICAgIHRoaXMuJGludmFsaWQgPSAhdGhpcy4kdmFsaWQ7XG4gICAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIHRoaXMuJHZhbGlkKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmUtcmVhZCB0aGUgc3RhdGUgYXMgdGhlIHNldC91bnNldCBtZXRob2RzIGNvdWxkIGhhdmVcbiAgICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIHRoaXMuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAgIC8vIHdoZXJlIHNldHRpbmcvdW5zZXR0aW5nIG9ubHkgaW5jcmVtZW50cy9kZWNyZW1lbnRzIHRoZSB2YWx1ZSxcbiAgICAgIC8vIGFuZCBkb2VzIG5vdCByZXBsYWNlIGl0LlxuICAgICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgICBpZiAodGhpcy4kcGVuZGluZyAmJiB0aGlzLiRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgICAgY29tYmluZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgICBjb21iaW5lZFN0YXRlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuJCRzdWNjZXNzW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21iaW5lZFN0YXRlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcyh0aGlzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUpO1xuICAgICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSwgdGhpcyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFuZFNldChjdHJsLCBuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgICAgaWYgKCFjdHJsW25hbWVdKSB7XG4gICAgICAgIGN0cmxbbmFtZV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIHNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5zZXRBbmRDbGVhbnVwKGN0cmwsIG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgICBpZiAoY3RybFtuYW1lXSkge1xuICAgICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkge1xuICAgICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIGNsYXNzTmFtZSwgc3dpdGNoVmFsdWUpIHtcbiAgICAgIGlmIChzd2l0Y2hWYWx1ZSAmJiAhY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgICBjdHJsLiQkYW5pbWF0ZS5hZGRDbGFzcyhjdHJsLiQkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKCFzd2l0Y2hWYWx1ZSAmJiBjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICAgIGN0cmwuJCRhbmltYXRlLnJlbW92ZUNsYXNzKGN0cmwuJCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICBjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyhjdHJsLCB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7XG5cbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIFZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSB0cnVlKTtcbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgIGlmIChvYmopIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBnbG9iYWxcbiAgICBWQUxJRF9DTEFTUzogZmFsc2UsXG4gICAgSU5WQUxJRF9DTEFTUzogZmFsc2UsXG4gICAgUFJJU1RJTkVfQ0xBU1M6IGZhbHNlLFxuICAgIERJUlRZX0NMQVNTOiBmYWxzZSxcbiAgICBuZ01vZGVsTWluRXJyOiBmYWxzZVxuICAqL1xuXG4gIC8vIFJlZ2V4IGNvZGUgd2FzIGluaXRpYWxseSBvYnRhaW5lZCBmcm9tIFNPIHByaW9yIHRvIG1vZGlmaWNhdGlvbjogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzE0MzA3MC9qYXZhc2NyaXB0LXJlZ2V4LWlzby1kYXRldGltZSNhbnN3ZXItMzE0MzIzMVxuICB2YXIgSVNPX0RBVEVfUkVHRVhQID0gL15cXGR7NCx9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKD86WystXVswLTJdXFxkOlswLTVdXFxkfFopJC87XG4gIC8vIFNlZSB2YWxpZCBVUkxzIGluIFJGQzM5ODcgKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODcpXG4gIC8vIE5vdGU6IFdlIGFyZSBiZWluZyBtb3JlIGxlbmllbnQsIGJlY2F1c2UgYnJvd3NlcnMgYXJlIHRvby5cbiAgLy8gICAxLiBTY2hlbWVcbiAgLy8gICAyLiBTbGFzaGVzXG4gIC8vICAgMy4gVXNlcm5hbWVcbiAgLy8gICA0LiBQYXNzd29yZFxuICAvLyAgIDUuIEhvc3RuYW1lXG4gIC8vICAgNi4gUG9ydFxuICAvLyAgIDcuIFBhdGhcbiAgLy8gICA4LiBRdWVyeVxuICAvLyAgIDkuIEZyYWdtZW50XG4gIC8vICAgICAgICAgICAgICAgICAxMTExMTExMTExMTExMTExIDIyMiAgIDMzMzMzMyAgICA0NDQ0NCAgICAgICAgNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUgICAgIDY2NiAgICAgNzc3Nzc3NzcgICAgIDg4ODg4ODggICAgIDk5OVxuICB2YXIgVVJMX1JFR0VYUCA9IC9eW2Etel1bYS16XFxkListXSo6XFwvKig/OlteOkBdKyg/OjpbXkBdKyk/QCk/KD86W15cXHM6Lz8jXSt8XFxbW2EtZlxcZDpdK10pKD86OlxcZCspPyg/OlxcL1tePyNdKik/KD86XFw/W14jXSopPyg/OiMuKik/JC9pO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICB2YXIgRU1BSUxfUkVHRVhQID0gL14oPz0uezEsMjU0fSQpKD89LnsxLDY0fUApWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKyhcXC5bLSEjJCUmJyorLzAtOT0/QS1aXl9gYS16e3x9fl0rKSpAW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPyhcXC5bQS1aYS16MC05XShbQS1aYS16MC05LV17MCw2MX1bQS1aYS16MC05XSk/KSokLztcbiAgdmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooLXxcXCspPyhcXGQrfChcXGQqKFxcLlxcZCopKSkoW2VFXVsrLV0/XFxkKyk/XFxzKiQvO1xuICB2YXIgREFURV9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkezJ9KS0oXFxkezJ9KSQvO1xuICB2YXIgREFURVRJTUVMT0NBTF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcbiAgdmFyIFdFRUtfUkVHRVhQID0gL14oXFxkezQsfSktVyhcXGRcXGQpJC87XG4gIHZhciBNT05USF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKSQvO1xuICB2YXIgVElNRV9SRUdFWFAgPSAvXihcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xuXG4gIHZhciBQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTID0gJ2tleWRvd24gd2hlZWwgbW91c2Vkb3duJztcbiAgdmFyIFBBUlRJQUxfVkFMSURBVElPTl9UWVBFUyA9IGNyZWF0ZU1hcCgpO1xuICBmb3JFYWNoKCdkYXRlLGRhdGV0aW1lLWxvY2FsLG1vbnRoLHRpbWUsd2Vlaycuc3BsaXQoJywnKSwgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gPSB0cnVlO1xuICB9KTtcblxuICB2YXIgaW5wdXRUeXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbdGV4dF1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN0YW5kYXJkIEhUTUwgdGV4dCBpbnB1dCB3aXRoIGFuZ3VsYXIgZGF0YSBiaW5kaW5nLCBpbmhlcml0ZWQgYnkgbW9zdCBvZiB0aGUgYGlucHV0YCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgICAqICAgIG1pbmxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAgICogICAgYW55IGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAgICogICAgYWNjb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAgICAgKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZVxuICAgICAqICAgIGlucHV0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cInRleHQtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGV4dElucHV0RXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgICAgIHRleHQ6ICdndWVzdCcsXG4gICAgICAgICAgICAgICAgICAgd29yZDogL15cXHMqXFx3KlxccyokL1xuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgIDxsYWJlbD5TaW5nbGUgd29yZDpcbiAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS50ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICBuZy1wYXR0ZXJuPVwiZXhhbXBsZS53b3JkXCIgcmVxdWlyZWQgbmctdHJpbT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgICAgIFNpbmdsZSB3b3JkIG9ubHkhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDxjb2RlPnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgPGNvZGU+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudGV4dCcpKTtcbiAgICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudGV4dCcpKTtcbiAgICAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuICAgICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgPC9maWxlPlxuICAgICAgICA8L2V4YW1wbGU+XG4gICAgICovXG4gICAgJ3RleHQnOiB0ZXh0SW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbZGF0ZV1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggZGF0ZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBkYXRlIGZvcm1hdCAoeXl5eS1NTS1kZCksIGZvciBleGFtcGxlOiBgMjAwOS0wMS0wNmAuIFNpbmNlIG1hbnlcbiAgICAgKiBtb2Rlcm4gYnJvd3NlcnMgZG8gbm90IHlldCBzdXBwb3J0IHRoaXMgaW5wdXQgdHlwZSwgaXQgaXMgaW1wb3J0YW50IHRvIHByb3ZpZGUgY3VlcyB0byB1c2VycyBvbiB0aGVcbiAgICAgKiBleHBlY3RlZCBpbnB1dCBmb3JtYXQgdmlhIGEgcGxhY2Vob2xkZXIgb3IgbGFiZWwuXG4gICAgICpcbiAgICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhXG4gICAgICogICB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWluPVwie3ttaW5EYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlXG4gICAgICogICBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgKiAgIChlLmcuIGBtYXg9XCJ7e21heERhdGUgfCBkYXRlOid5eXl5LU1NLWRkJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1XG4gICAgICogICBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cImRhdGUtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUlucHV0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAyMilcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBkYXRlIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFwiIG1pbj1cIjIwMTMtMDEtMDFcIiBtYXg9XCIyMDEzLTEyLTMxXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGVcIj5cbiAgICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwifX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIicpKTtcbiAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cbiAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDEnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCwgY3JlYXRlRGF0ZVBhcnNlcihEQVRFX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJ10pLCAneXl5eS1NTS1kZCcpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGV0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBsb2NhbCBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDIwMTAtMTItMjhUMTQ6NTc6MDBgLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbkRhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAgKiAgIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heERhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAgKiAgIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGV0aW1lIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cImRhdGV0aW1lbG9jYWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMTEsIDI4LCAxNCwgNTcpXG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCIgbWluPVwiMjAwMS0wMS0wMVQwMDowMDowMFwiIG1heD1cIjIwMTMtMTItMzFUMDA6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRldGltZWxvY2FsXCI+XG4gICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wiJykpO1xuICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgfVxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDFUMjM6NTk6MDAnKTtcbiAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsIGNyZWF0ZURhdGVQYXJzZXIoREFURVRJTUVMT0NBTF9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCcsICdISCcsICdtbScsICdzcycsICdzc3MnXSksICd5eXl5LU1NLWRkVEhIOm1tOnNzLnNzcycpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbdGltZV1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggdGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAgKiB0aGUgSFRNTDUgdGltZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogbG9jYWwgdGltZSBmb3JtYXQgKEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAxNDo1NzowMGAuIE1vZGVsIG11c3QgYmUgYSBEYXRlIG9iamVjdC4gVGhpcyBiaW5kaW5nIHdpbGwgYWx3YXlzIG91dHB1dCBhXG4gICAgICogRGF0ZSBvYmplY3QgdG8gdGhlIG1vZGVsIG9mIEphbnVhcnkgMSwgMTk3MCwgb3IgbG9jYWwgZGF0ZSBgbmV3IERhdGUoMTk3MCwgMCwgMSwgSEgsIG1tLCBzcylgLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pblRpbWUgfCBkYXRlOidISDptbTpzcyd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gdGltZSBzdHJpbmcgdGhlXG4gICAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHRpbWUgc3RyaW5nIHRoZVxuICAgICAqICAgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwidGltZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0aW1lRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0aW1lRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDE5NzAsIDAsIDEsIDE0LCA1NywgMClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIHRpbWUgYmV0d2VlbiA4YW0gYW5kIDVwbTo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGltZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IudGltZVwiPlxuICAgICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwiSEg6bW06c3NcIn19PC90dD48YnIvPlxuICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cbiAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTQ6NTc6MDAnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcyMzo1OTowMCcpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAgICd0aW1lJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgndGltZScsIFRJTUVfUkVHRVhQLCBjcmVhdGVEYXRlUGFyc2VyKFRJTUVfUkVHRVhQLCBbJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSwgJ0hIOm1tOnNzLnNzcycpLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbd2Vla11cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICAqIHRoZSBIVE1MNSB3ZWVrIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLCBmb3IgZXhhbXBsZTogYDIwMTMtVzAyYC5cbiAgICAgKlxuICAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5XZWVrIHwgZGF0ZToneXl5eS1Xd3cnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4V2VlayB8IGRhdGU6J3l5eXktV3d3J319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIndlZWstaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwid2Vla0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCd3ZWVrRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDAsIDMpXG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgPGxhYmVsPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIndlZWtcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJZWVlZLVcjI1wiIG1pbj1cIjIwMTItVzMyXCJcbiAgICAgICAgICAgICAgICAgIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLndlZWtcIj5cbiAgICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIicpKTtcbiAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgIH1cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBzZXRJbnB1dCgnMjAxNS1XMDEnKTtcbiAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgaW5wdXRcbiAgICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IG1vbnRoIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBtb250aCBmb3JtYXQgKHl5eXktTU0pLCBmb3IgZXhhbXBsZTogYDIwMDktMDFgLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAgICogdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aC5cbiAgICAgKlxuICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5Nb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gbW9udGggZm9ybWF0ICh5eXl5LU1NKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4TW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJtb250aC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJtb250aEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbW9udGhFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgbW9udGggaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIm1vbnRoXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5tb250aFwiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBtb250aCE8L3NwYW4+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTVwifX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cbiAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCwgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSwgJ3l5eXktTU0nKSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICAgKiBlcnJvciBpZiBub3QgYSB2YWxpZCBudW1iZXIuXG4gICAgICpcbiAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBvZiB0eXBlIGBudW1iZXJgIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogQmUgYXdhcmUgdGhhdCBhIHN0cmluZyBjb250YWluaW5nIGEgbnVtYmVyIGlzIG5vdCBlbm91Z2guIFNlZSB0aGUge0BsaW5rIG5nTW9kZWw6bnVtZm10fVxuICAgICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICAgKlxuICAgICAqIEluIGJyb3dzZXJzIHRoYXQgZm9sbG93IHRoZVxuICAgICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAgICogYGlucHV0W251bWJlcl1gIGRvZXMgbm90IHdvcmsgYXMgZXhwZWN0ZWQgd2l0aCB7QGxpbmsgbmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zLmFsbG93SW52YWxpZGB9LlxuICAgICAqIElmIGEgbm9uLW51bWJlciBpcyBlbnRlcmVkIGluIHRoZSBpbnB1dCwgdGhlIGJyb3dzZXIgd2lsbCByZXBvcnQgdGhlIHZhbHVlIGFzIGFuIGVtcHR5IHN0cmluZyxcbiAgICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICAgKiB3aWxsIGFsc28gYmUgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAgKiAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAgKiAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdNaW4gTGlrZSBgbWluYCwgc2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBuZ01pbmAsXG4gICAgICogICAgYnV0IGRvZXMgbm90IHRyaWdnZXIgSFRNTDUgbmF0aXZlIHZhbGlkYXRpb24uIFRha2VzIGFuIGV4cHJlc3Npb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ01heCBMaWtlIGBtYXhgLCBzZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG5nTWF4YCxcbiAgICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHN0ZXAgU2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGRvZXMgbm90IGZpdCB0aGUgYHN0ZXBgIGNvbnN0cmFpbnQuXG4gICAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nU3RlcCBMaWtlIGBzdGVwYCwgc2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGRvZXMgbm90IGZpdCB0aGUgYG5nU3RlcGAgY29uc3RyYWludCxcbiAgICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgICAqICAgIG1pbmxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAgICogICAgYW55IGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAgICogICAgYWNjb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cIm51bWJlci1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJudW1iZXJFeGFtcGxlXCI+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgdmFsdWU6IDEyXG4gICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgPGxhYmVsPk51bWJlcjpcbiAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiOTlcIiByZXF1aXJlZD5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubnVtYmVyXCI+XG4gICAgICAgICAgICAgICAgIE5vdCB2YWxpZCBudW1iZXIhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZX19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlJykpO1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcbiAgICAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxMicpO1xuICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnbnVtYmVyJzogbnVtYmVySW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbdXJsXVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYVxuICAgICAqIHZhbGlkIFVSTC5cbiAgICAgKlxuICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICogKipOb3RlOioqIGBpbnB1dFt1cmxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgdXJscyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uLCB5b3UgY2FuIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5XG4gICAgICogdGhlIGJ1aWx0LWluIHZhbGlkYXRvcnMgKHNlZSB0aGUge0BsaW5rIGd1aWRlL2Zvcm1zIEZvcm1zIGd1aWRlfSlcbiAgICAgKiA8L2Rpdj5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICAgKiAgICBtaW5sZW5ndGguXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgICAqICAgIGFueSBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgICAqICAgIGFjY291bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICRzY29wZS51cmwgPSB7XG4gICAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgIDxsYWJlbD5VUkw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IudXJsXCI+XG4gICAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3t1cmwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VybC50ZXh0JykpO1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXJsLnRleHQnKSk7XG4gICAgICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdodHRwOi8vZ29vZ2xlLmNvbScpO1xuICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IHVybCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG4gICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAndXJsJzogdXJsSW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgICAqIGFkZHJlc3MuXG4gICAgICpcbiAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAqICoqTm90ZToqKiBgaW5wdXRbZW1haWxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgZW1haWwgYWRkcmVzc2VzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgICAqIHVzZWQgaW4gQ2hyb21pdW0uIElmIHlvdSBuZWVkIHN0cmljdGVyIHZhbGlkYXRpb24gKGUuZy4gcmVxdWlyaW5nIGEgdG9wLWxldmVsIGRvbWFpbiksIHlvdSBjYW5cbiAgICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgICAqICAgIG1pbmxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAgICogICAgYW55IGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAgICogICAgYWNjb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0ge1xuICAgICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgICAgPGxhYmVsPkVtYWlsOlxuICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWxcIj5cbiAgICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZW1haWwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IuZW1haWwgPSB7eyEhbXlGb3JtLiRlcnJvci5lbWFpbH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgPC9maWxlPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdlbWFpbC50ZXh0JykpO1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZW1haWwudGV4dCcpKTtcbiAgICAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21lQGV4YW1wbGUuY29tJyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygneHh4Jyk7XG4gICAgICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W3JhZGlvXVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSFRNTCByYWRpbyBidXR0b24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICAgKiAgICB0b28uIFVzZSBgbmdWYWx1ZWAgaWYgeW91IG5lZWQgY29tcGxleCBtb2RlbHMgKGBudW1iZXJgLCBgb2JqZWN0YCwgLi4uKS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gd2hpY2ggYG5nTW9kZWxgIHdpbGwgYmUgYmUgc2V0IHdoZW4gdGhlIHJhZGlvXG4gICAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAgICogICAgYSBub24tc3RyaW5nIGBuZ01vZGVsYCAoYGJvb2xlYW5gLCBgYXJyYXlgLCAuLi4pLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cInJhZGlvLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInJhZGlvRXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhZGlvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICAgIG5hbWU6ICdibHVlJ1xuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCIxMjM0NVwiLFxuICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJncmVlblwiXG4gICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwicmVkXCI+XG4gICAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgICBHcmVlblxuICAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJibHVlXCI+XG4gICAgICAgICAgICAgICBCbHVlXG4gICAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICAgIDx0dD5jb2xvciA9IHt7Y29sb3IubmFtZSB8IGpzb259fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGlucHV0cyA9IGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdjb2xvci5uYW1lJykpO1xuICAgICAgICAgICAgICB2YXIgY29sb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbG9yLm5hbWUnKSk7XG4gICAgICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2JsdWUnKTtcbiAgICAgICAgICAgICAgIGlucHV0cy5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdyZWQnKTtcbiAgICAgICAgICAgICAgIGlucHV0cy5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdncmVlbicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgPC9maWxlPlxuICAgICAgICA8L2V4YW1wbGU+XG4gICAgICovXG4gICAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgaW5wdXRcbiAgICAgKiBAbmFtZSBpbnB1dFtyYW5nZV1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIE5hdGl2ZSByYW5nZSBpbnB1dCB3aXRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIGZvciB0aGUgcmFuZ2UgaW5wdXQgbXVzdCBhbHdheXMgYmUgYSBgTnVtYmVyYC5cbiAgICAgKlxuICAgICAqIElFOSBhbmQgb3RoZXIgYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgYHJhbmdlYCB0eXBlIGZhbGwgYmFja1xuICAgICAqIHRvIGEgdGV4dCBpbnB1dCB3aXRob3V0IGFueSBkZWZhdWx0IHZhbHVlcyBmb3IgYG1pbmAsIGBtYXhgIGFuZCBgc3RlcGAuIE1vZGVsIGJpbmRpbmcsXG4gICAgICogdmFsaWRhdGlvbiBhbmQgbnVtYmVyIHBhcnNpbmcgYXJlIG5ldmVydGhlbGVzcyBzdXBwb3J0ZWQuXG4gICAgICpcbiAgICAgKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgcmFuZ2UgKGxhdGVzdCBDaHJvbWUsIFNhZmFyaSwgRmlyZWZveCwgRWRnZSkgdHJlYXQgYGlucHV0W3JhbmdlXWBcbiAgICAgKiBpbiBhIHdheSB0aGF0IG5ldmVyIGFsbG93cyB0aGUgaW5wdXQgdG8gaG9sZCBhbiBpbnZhbGlkIHZhbHVlLiBUaGF0IG1lYW5zOlxuICAgICAqIC0gYW55IG5vbi1udW1lcmljYWwgdmFsdWUgaXMgc2V0IHRvIGAobWF4ICsgbWluKSAvIDJgLlxuICAgICAqIC0gYW55IG51bWVyaWNhbCB2YWx1ZSB0aGF0IGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudCBtaW4gdmFsLCBvciBncmVhdGVyIHRoYW4gdGhlIGN1cnJlbnQgbWF4IHZhbFxuICAgICAqIGlzIHNldCB0byB0aGUgbWluIC8gbWF4IHZhbCByZXNwZWN0aXZlbHkuXG4gICAgICogLSBhZGRpdGlvbmFsbHksIHRoZSBjdXJyZW50IGBzdGVwYCBpcyByZXNwZWN0ZWQsIHNvIHRoZSBuZWFyZXN0IHZhbHVlIHRoYXQgc2F0aXNmaWVzIGEgc3RlcFxuICAgICAqIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBTZWUgdGhlIFtIVE1MIFNwZWMgb24gaW5wdXRbdHlwZT1yYW5nZV1dKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9mb3Jtcy5odG1sI3JhbmdlLXN0YXRlLSh0eXBlPXJhbmdlKSlcbiAgICAgKiBmb3IgbW9yZSBpbmZvLlxuICAgICAqXG4gICAgICogVGhpcyBoYXMgdGhlIGZvbGxvd2luZyBjb25zZXF1ZW5jZXMgZm9yIEFuZ3VsYXI6XG4gICAgICpcbiAgICAgKiBTaW5jZSB0aGUgZWxlbWVudCB2YWx1ZSBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgbW9kZWwgdmFsdWUsIGEgcmFuZ2UgaW5wdXRcbiAgICAgKiB3aWxsIHNldCB0aGUgYm91bmQgbmdNb2RlbCBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSB0aGF0IHRoZSBicm93c2VyIGhhcyBzZXQgZm9yIHRoZVxuICAgICAqIGlucHV0IGVsZW1lbnQuIEZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nIGlucHV0IGA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZVwiPmAsXG4gICAgICogaWYgdGhlIGFwcGxpY2F0aW9uIHNldHMgYG1vZGVsLnZhbHVlID0gbnVsbGAsIHRoZSBicm93c2VyIHdpbGwgc2V0IHRoZSBpbnB1dCB0byBgJzUwJ2AuXG4gICAgICogQW5ndWxhciB3aWxsIHRoZW4gc2V0IHRoZSBtb2RlbCB0byBgNTBgLCB0byBwcmV2ZW50IGlucHV0IGFuZCBtb2RlbCB2YWx1ZSBiZWluZyBvdXQgb2Ygc3luYy5cbiAgICAgKlxuICAgICAqIFRoYXQgbWVhbnMgdGhlIG1vZGVsIGZvciByYW5nZSB3aWxsIGltbWVkaWF0ZWx5IGJlIHNldCB0byBgNTBgIGFmdGVyIGBuZ01vZGVsYCBoYXMgYmVlblxuICAgICAqIGluaXRpYWxpemVkLiBJdCBhbHNvIG1lYW5zIGEgcmFuZ2UgaW5wdXQgY2FuIG5ldmVyIGhhdmUgdGhlIHJlcXVpcmVkIGVycm9yLlxuICAgICAqXG4gICAgICogVGhpcyBkb2VzIG5vdCBvbmx5IGFmZmVjdCBjaGFuZ2VzIHRvIHRoZSBtb2RlbCB2YWx1ZSwgYnV0IGFsc28gdG8gdGhlIHZhbHVlcyBvZiB0aGUgYG1pbmAsXG4gICAgICogYG1heGAsIGFuZCBgc3RlcGAgYXR0cmlidXRlcy4gV2hlbiB0aGVzZSBjaGFuZ2UgaW4gYSB3YXkgdGhhdCB3aWxsIGNhdXNlIHRoZSBicm93c2VyIHRvIG1vZGlmeVxuICAgICAqIHRoZSBpbnB1dCB2YWx1ZSwgQW5ndWxhciB3aWxsIGFsc28gdXBkYXRlIHRoZSBtb2RlbCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEF1dG9tYXRpYyB2YWx1ZSBhZGp1c3RtZW50IGFsc28gbWVhbnMgdGhhdCBhIHJhbmdlIGlucHV0IGVsZW1lbnQgY2FuIG5ldmVyIGhhdmUgdGhlIGByZXF1aXJlZGAsXG4gICAgICogYG1pbmAsIG9yIGBtYXhgIGVycm9ycy5cbiAgICAgKlxuICAgICAqIEhvd2V2ZXIsIGBzdGVwYCBpcyBjdXJyZW50bHkgb25seSBmdWxseSBpbXBsZW1lbnRlZCBieSBGaXJlZm94LiBPdGhlciBicm93c2VycyBoYXZlIHByb2JsZW1zXG4gICAgICogd2hlbiB0aGUgc3RlcCB2YWx1ZSBjaGFuZ2VzIGR5bmFtaWNhbGx5IC0gdGhleSBkbyBub3QgYWRqdXN0IHRoZSBlbGVtZW50IHZhbHVlIGNvcnJlY3RseSwgYnV0XG4gICAgICogaW5zdGVhZCBtYXkgc2V0IHRoZSBgc3RlcE1pc21hdGNoYCBlcnJvci4gSWYgdGhhdCdzIHRoZSBjYXNlLCB0aGUgQW5ndWxhciB3aWxsIHNldCB0aGUgYHN0ZXBgXG4gICAgICogZXJyb3Igb24gdGhlIGlucHV0LCBhbmQgc2V0IHRoZSBtb2RlbCB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBgaW5wdXRbcmFuZ2VdYCBpcyBub3QgY29tcGF0aWJsZSB3aXRoYG5nTWF4YCwgYG5nTWluYCwgYW5kIGBuZ1N0ZXBgLCBiZWNhdXNlIHRoZXkgZG9cbiAgICAgKiBub3Qgc2V0IHRoZSBgbWluYCBhbmQgYG1heGAgYXR0cmlidXRlcywgd2hpY2ggbWVhbnMgdGhhdCB0aGUgYnJvd3NlciB3b24ndCBhdXRvbWF0aWNhbGx5IGFkanVzdFxuICAgICAqIHRoZSBpbnB1dCB2YWx1ZSBiYXNlZCBvbiB0aGVpciB2YWx1ZXMsIGFuZCB3aWxsIGFsd2F5cyBhc3N1bWUgbWluID0gMCwgbWF4ID0gMTAwLCBhbmQgc3RlcCA9IDEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXJcbiAgICAgKiAgICAgICAgICAgICAgICAgIHRoYW4gYG1pbmAuIENhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1heGAuXG4gICAgICogICAgICAgICAgICAgICAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RlcCBTZXRzIHRoZSBgc3RlcGAgdmFsaWRhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgZW50ZXJlZCBtYXRjaGVzIHRoZSBgc3RlcGBcbiAgICAgKiAgICAgICAgICAgICAgICAgIENhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbmdNb2RlbCB2YWx1ZSBjaGFuZ2VzIGR1ZVxuICAgICAqICAgICAgICAgICAgICAgICAgdG8gdXNlciBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nQ2hlY2tlZCBJZiB0aGUgZXhwcmVzc2lvbiBpcyB0cnV0aHksIHRoZW4gdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC4gKipOb3RlKiogOiBgbmdDaGVja2VkYCBzaG91bGQgbm90IGJlIHVzZWQgYWxvbmdzaWRlIGBuZ01vZGVsYC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICBDaGVja291dCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2hlY2tlZCBuZ0NoZWNrZWR9IGZvciB1c2FnZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICAgIDxleGFtcGxlIG5hbWU9XCJyYW5nZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYW5nZUV4YW1wbGVcIj5cbiAgICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhbmdlRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSA3NTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5taW4gPSAxMDtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5tYXggPSA5MDtcbiAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICAgIE1vZGVsIGFzIHJhbmdlOiA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cInJhbmdlXCIgbmctbW9kZWw9XCJ2YWx1ZVwiIG1pbj1cInt7bWlufX1cIiAgbWF4PVwie3ttYXh9fVwiPlxuICAgICAgICAgICAgICA8aHI+XG4gICAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgICBNaW46IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtaW5cIj48YnI+XG4gICAgICAgICAgICAgIE1heDogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1heFwiPjxicj5cbiAgICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiR2YWxpZCA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kZXJyb3IgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kZXJyb3J9fTwvY29kZT5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDwvZXhhbXBsZT5cbiAgICAgICogIyMgUmFuZ2UgSW5wdXQgd2l0aCBuZ01pbiAmIG5nTWF4IGF0dHJpYnV0ZXNcbiAgICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cInJhbmdlLWlucHV0LWRpcmVjdGl2ZS1uZ1wiIG1vZHVsZT1cInJhbmdlRXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFuZ2VFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDc1O1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLm1pbiA9IDEwO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDkwO1xuICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBuZy1taW49XCJtaW5cIiBuZy1tYXg9XCJtYXhcIj5cbiAgICAgICAgICAgICAgPGhyPlxuICAgICAgICAgICAgICBNb2RlbCBhcyBudW1iZXI6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPjxicj5cbiAgICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgICBNYXg6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtYXhcIj48YnI+XG4gICAgICAgICAgICAgIHZhbHVlID0gPGNvZGU+e3t2YWx1ZX19PC9jb2RlPjxici8+XG4gICAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgICBteUZvcm0ucmFuZ2UuJGVycm9yID0gPGNvZGU+e3tteUZvcm0ucmFuZ2UuJGVycm9yfX08L2NvZGU+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgPC9maWxlPlxuICAgICAgICA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgICdyYW5nZSc6IHJhbmdlSW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbY2hlY2tib3hdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBIVE1MIGNoZWNrYm94LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cImNoZWNrYm94LWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImNoZWNrYm94RXhhbXBsZVwiPlxuICAgICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoZWNrYm94RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTEgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgIDxsYWJlbD5WYWx1ZTE6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgICA8bGFiZWw+VmFsdWUyOlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9XCInWUVTJ1wiIG5nLWZhbHNlLXZhbHVlPVwiJ05PJ1wiPlxuICAgICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3tjaGVja2JveE1vZGVsLnZhbHVlMn19PC90dD48YnIvPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvZmlsZT5cbiAgICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSBzdGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGVsZW1lbnQoYnkuYmluZGluZygnY2hlY2tib3hNb2RlbC52YWx1ZTInKSk7XG4gICAgICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1lFUycpO1xuICAgICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTInKSkuY2xpY2soKTtcbiAgICAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ05PJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAgICdoaWRkZW4nOiBub29wLFxuICAgICdidXR0b24nOiBub29wLFxuICAgICdzdWJtaXQnOiBub29wLFxuICAgICdyZXNldCc6IG5vb3AsXG4gICAgJ2ZpbGUnOiBub29wXG4gIH07XG5cbiAgZnVuY3Rpb24gc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCkge1xuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gICAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG4gIH1cblxuICBmdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgICB2YXIgdHlwZSA9IGxvd2VyY2FzZShlbGVtZW50WzBdLnR5cGUpO1xuXG4gICAgLy8gSW4gY29tcG9zaXRpb24gbW9kZSwgdXNlcnMgYXJlIHN0aWxsIGlucHV0dGluZyBpbnRlcm1lZGlhdGUgdGV4dCBidWZmZXIsXG4gICAgLy8gaG9sZCB0aGUgbGlzdGVuZXIgdW50aWwgY29tcG9zaXRpb24gaXMgZG9uZS5cbiAgICAvLyBNb3JlIGFib3V0IGNvbXBvc2l0aW9uIGV2ZW50czogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NvbXBvc2l0aW9uRXZlbnRcbiAgICBpZiAoISRzbmlmZmVyLmFuZHJvaWQpIHtcbiAgICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcblxuICAgICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29tcG9zaW5nID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdGltZW91dDtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGV2KSB7XG4gICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvc2luZykgcmV0dXJuO1xuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWwoKSxcbiAgICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAgIC8vIEJ5IGRlZmF1bHQgd2Ugd2lsbCB0cmltIHRoZSB2YWx1ZVxuICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBuZy10cmltIGV4aXN0cyB3ZSB3aWxsIGF2b2lkIHRyaW1taW5nXG4gICAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgICBpZiAodHlwZSAhPT0gJ3Bhc3N3b3JkJyAmJiAoIWF0dHIubmdUcmltIHx8IGF0dHIubmdUcmltICE9PSAnZmFsc2UnKSkge1xuICAgICAgICB2YWx1ZSA9IHRyaW0odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIGNvbnRyb2wgaXMgc3VmZmVyaW5nIGZyb20gYmFkIGlucHV0IChkdWUgdG8gbmF0aXZlIHZhbGlkYXRvcnMpLCBicm93c2VycyBkaXNjYXJkIGl0c1xuICAgICAgLy8gdmFsdWUsIHNvIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gcmV2YWxpZGF0ZSAoYnkgY2FsbGluZyAkc2V0Vmlld1ZhbHVlIGFnYWluKSBldmVuIGlmIHRoZVxuICAgICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUgfHwgdmFsdWUgPT09ICcnICYmIGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSB7XG4gICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBpZiB0aGUgYnJvd3NlciBkb2VzIHN1cHBvcnQgXCJpbnB1dFwiIGV2ZW50LCB3ZSBhcmUgZmluZSAtIGV4Y2VwdCBvbiBJRTkgd2hpY2ggZG9lc24ndCBmaXJlIHRoZVxuICAgIC8vIGlucHV0IGV2ZW50IG9uIGJhY2tzcGFjZSwgZGVsZXRlIG9yIGN1dFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgICAgZWxlbWVudC5vbignaW5wdXQnLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkZWZlckxpc3RlbmVyID0gZnVuY3Rpb24gZGVmZXJMaXN0ZW5lcihldiwgaW5wdXQsIG9yaWdWYWx1ZSkge1xuICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0LnZhbHVlICE9PSBvcmlnVmFsdWUpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgLyoqIEB0aGlzICovZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAgIC8vIGlnbm9yZVxuICAgICAgICAvLyAgICBjb21tYW5kICAgICAgICAgICAgbW9kaWZpZXJzICAgICAgICAgICAgICAgICAgIGFycm93c1xuICAgICAgICBpZiAoa2V5ID09PSA5MSB8fCAxNSA8IGtleSAmJiBrZXkgPCAxOSB8fCAzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSByZXR1cm47XG5cbiAgICAgICAgZGVmZXJMaXN0ZW5lcihldmVudCwgdGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgICAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdwYXN0ZScpKSB7XG4gICAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gICAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gICAgZWxlbWVudC5vbignY2hhbmdlJywgbGlzdGVuZXIpO1xuXG4gICAgLy8gU29tZSBuYXRpdmUgaW5wdXQgdHlwZXMgKGRhdGUtZmFtaWx5KSBoYXZlIHRoZSBhYmlsaXR5IHRvIGNoYW5nZSB2YWxpZGl0eSB3aXRob3V0XG4gICAgLy8gZmlyaW5nIGFueSBpbnB1dC9jaGFuZ2UgZXZlbnRzLlxuICAgIC8vIEZvciB0aGVzZSBldmVudCB0eXBlcywgd2hlbiBuYXRpdmUgdmFsaWRhdG9ycyBhcmUgcHJlc2VudCBhbmQgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIHR5cGUsXG4gICAgLy8gY2hlY2sgZm9yIHZhbGlkaXR5IGNoYW5nZXMgb24gdmFyaW91cyBET00gZXZlbnRzLlxuICAgIGlmIChQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgJiYgdHlwZSA9PT0gYXR0ci50eXBlKSB7XG4gICAgICBlbGVtZW50Lm9uKFBBUlRJQUxfVkFMSURBVElPTl9FVkVOVFMsIC8qKiBAdGhpcyAqL2Z1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICB2YXIgdmFsaWRpdHkgPSB0aGlzW1ZBTElESVRZX1NUQVRFX1BST1BFUlRZXTtcbiAgICAgICAgICB2YXIgb3JpZ0JhZElucHV0ID0gdmFsaWRpdHkuYmFkSW5wdXQ7XG4gICAgICAgICAgdmFyIG9yaWdUeXBlTWlzbWF0Y2ggPSB2YWxpZGl0eS50eXBlTWlzbWF0Y2g7XG4gICAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHZhbGlkaXR5LmJhZElucHV0ICE9PSBvcmlnQmFkSW5wdXQgfHwgdmFsaWRpdHkudHlwZU1pc21hdGNoICE9PSBvcmlnVHlwZU1pc21hdGNoKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgRmlyZWZveCB2YWxpZGF0aW9uICMxMjEwMi5cbiAgICAgIHZhciB2YWx1ZSA9IGN0cmwuJGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlO1xuICAgICAgaWYgKGVsZW1lbnQudmFsKCkgIT09IHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQudmFsKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgICBpZiAoaXNEYXRlKGlzb1dlZWspKSB7XG4gICAgICByZXR1cm4gaXNvV2VlaztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvV2VlaykpIHtcbiAgICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLFxuICAgICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICAgIGhvdXJzID0gMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSAwLFxuICAgICAgICAgICAgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhciksXG4gICAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nRGF0ZSkge1xuICAgICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgc2Vjb25kcyA9IGV4aXN0aW5nRGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsIGZpcnN0VGh1cnMuZ2V0RGF0ZSgpICsgYWRkRGF5cywgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpc28sIGRhdGUpIHtcbiAgICAgIHZhciBwYXJ0cywgbWFwO1xuXG4gICAgICBpZiAoaXNEYXRlKGlzbykpIHtcbiAgICAgICAgcmV0dXJuIGlzbztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGlzbykpIHtcbiAgICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAgIC8vIHNldCBvZiBkb3VibGUgcXVvdGVzLiBUaGlzIG1ha2VzIHRoZSBkYXRlIHBhcnNpbmcgY29kZSB1bmFibGVcbiAgICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuXG4gICAgICAgIGlmIChpc28uY2hhckF0KDApID09PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09PSAnXCInKSB7XG4gICAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IERhdGUoaXNvKTtcbiAgICAgICAgfVxuICAgICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgICAgcGFydHMgPSByZWdleHAuZXhlYyhpc28pO1xuXG4gICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgIG1hcCA9IHtcbiAgICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICBNTTogZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICAgICAgICAgICAgZGQ6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgICBtbTogZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgICAgIHNzOiBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgbWFwcGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOYU47XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkeW5hbWljRGF0ZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyKSB7XG4gICAgICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICAgICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICAgIHZhciB0aW1lem9uZSA9IGN0cmwgJiYgY3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJyk7XG4gICAgICB2YXIgcHJldmlvdXNEYXRlO1xuXG4gICAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChjdHJsLiRpc0VtcHR5KHZhbHVlKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChyZWdleHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAgIC8vIHBhcnNlci9mb3JtYXR0ZXIgaW4gdGhlIHByb2Nlc3NpbmcgY2hhaW4gc28gdGhhdCB0aGUgbW9kZWxcbiAgICAgICAgICAvLyBjb250YWlucyBzb21lIGRpZmZlcmVudCBkYXRhIGZvcm1hdCFcbiAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgICBpZiAodGltZXpvbmUpIHtcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKHBhcnNlZERhdGUsIHRpbWV6b25lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBhcnNlZERhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ZhbGlkRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgICBpZiAocHJldmlvdXNEYXRlICYmIHRpbWV6b25lKSB7XG4gICAgICAgICAgICBwcmV2aW91c0RhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKHByZXZpb3VzRGF0ZSwgdGltZXpvbmUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJGZpbHRlcignZGF0ZScpKHZhbHVlLCBmb3JtYXQsIHRpbWV6b25lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICAgICAgdmFyIG1pblZhbDtcbiAgICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgICB9O1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgbWluVmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICAgIHZhciBtYXhWYWw7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCBwYXJzZURhdGUodmFsdWUpIDw9IG1heFZhbDtcbiAgICAgICAgfTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIG1heFZhbCA9IHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKTtcbiAgICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgICAgcmV0dXJuIHZhbHVlICYmICEodmFsdWUuZ2V0VGltZSAmJiB2YWx1ZS5nZXRUaW1lKCkgIT09IHZhbHVlLmdldFRpbWUoKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICAgIHJldHVybiBpc0RlZmluZWQodmFsKSAmJiAhaXNEYXRlKHZhbCkgPyBwYXJzZURhdGUodmFsKSB8fCB1bmRlZmluZWQgOiB2YWw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgICB2YXIgbmF0aXZlVmFsaWRhdGlvbiA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzID0gaXNPYmplY3Qobm9kZS52YWxpZGl0eSk7XG4gICAgaWYgKG5hdGl2ZVZhbGlkYXRpb24pIHtcbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHZhbGlkaXR5LmJhZElucHV0IHx8IHZhbGlkaXR5LnR5cGVNaXNtYXRjaCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbnVtYmVyRm9ybWF0dGVyUGFyc2VyKGN0cmwpIHtcbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChjdHJsLiRpc0VtcHR5KHZhbHVlKSkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoTlVNQkVSX1JFR0VYUC50ZXN0KHZhbHVlKSkgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCkge1xuICAgIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkge1xuICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gIWlzTnVtYmVyTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc051bWJlckludGVnZXIobnVtKSB7XG4gICAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ2MzY1MzYvaG93LXRvLWNoZWNrLWlmLWEtdmFyaWFibGUtaXMtYW4taW50ZWdlci1pbi1qYXZhc2NyaXB0IzE0Nzk0MDY2XG4gICAgLy8gKG1pbnVzIHRoZSBhc3N1bXB0aW9uIHRoYXQgYG51bWAgaXMgYSBudW1iZXIpXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIHJldHVybiAobnVtIHwgMCkgPT09IG51bTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtKSB7XG4gICAgdmFyIG51bVN0cmluZyA9IG51bS50b1N0cmluZygpO1xuICAgIHZhciBkZWNpbWFsU3ltYm9sSW5kZXggPSBudW1TdHJpbmcuaW5kZXhPZignLicpO1xuXG4gICAgaWYgKGRlY2ltYWxTeW1ib2xJbmRleCA9PT0gLTEpIHtcbiAgICAgIGlmICgtMSA8IG51bSAmJiBudW0gPCAxKSB7XG4gICAgICAgIC8vIEl0IG1heSBiZSBpbiB0aGUgZXhwb25lbnRpYWwgbm90YXRpb24gZm9ybWF0IChgMWUtWGApXG4gICAgICAgIHZhciBtYXRjaCA9IC9lLShcXGQrKSQvLmV4ZWMobnVtU3RyaW5nKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtU3RyaW5nLmxlbmd0aCAtIGRlY2ltYWxTeW1ib2xJbmRleCAtIDE7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ZhbGlkRm9yU3RlcCh2aWV3VmFsdWUsIHN0ZXBCYXNlLCBzdGVwKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBgc3RlcEJhc2VgIGFuZCBgc3RlcGAgYXJlIGV4cGVjdGVkIHRvIGJlIG5vbi1OYU4gdmFsdWVzXG4gICAgLy8gYW5kIGB2aWV3VmFsdWVgIGlzIGV4cGVjdGVkIHRvIGJlIGEgdmFsaWQgc3RyaW5naWZpZWQgbnVtYmVyLlxuICAgIHZhciB2YWx1ZSA9IE51bWJlcih2aWV3VmFsdWUpO1xuXG4gICAgdmFyIGlzTm9uSW50ZWdlclZhbHVlID0gIWlzTnVtYmVySW50ZWdlcih2YWx1ZSk7XG4gICAgdmFyIGlzTm9uSW50ZWdlclN0ZXBCYXNlID0gIWlzTnVtYmVySW50ZWdlcihzdGVwQmFzZSk7XG4gICAgdmFyIGlzTm9uSW50ZWdlclN0ZXAgPSAhaXNOdW1iZXJJbnRlZ2VyKHN0ZXApO1xuXG4gICAgLy8gRHVlIHRvIGxpbWl0YXRpb25zIGluIEZsb2F0aW5nIFBvaW50IEFyaXRobWV0aWMgKGUuZy4gYDAuMyAtIDAuMiAhPT0gMC4xYCBvclxuICAgIC8vIGAwLjUgJSAwLjEgIT09IDBgKSwgd2UgbmVlZCB0byBjb252ZXJ0IGFsbCBudW1iZXJzIHRvIGludGVnZXJzLlxuICAgIGlmIChpc05vbkludGVnZXJWYWx1ZSB8fCBpc05vbkludGVnZXJTdGVwQmFzZSB8fCBpc05vbkludGVnZXJTdGVwKSB7XG4gICAgICB2YXIgdmFsdWVEZWNpbWFscyA9IGlzTm9uSW50ZWdlclZhbHVlID8gY291bnREZWNpbWFscyh2YWx1ZSkgOiAwO1xuICAgICAgdmFyIHN0ZXBCYXNlRGVjaW1hbHMgPSBpc05vbkludGVnZXJTdGVwQmFzZSA/IGNvdW50RGVjaW1hbHMoc3RlcEJhc2UpIDogMDtcbiAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSBpc05vbkludGVnZXJTdGVwID8gY291bnREZWNpbWFscyhzdGVwKSA6IDA7XG5cbiAgICAgIHZhciBkZWNpbWFsQ291bnQgPSBNYXRoLm1heCh2YWx1ZURlY2ltYWxzLCBzdGVwQmFzZURlY2ltYWxzLCBzdGVwRGVjaW1hbHMpO1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbENvdW50KTtcblxuICAgICAgdmFsdWUgPSB2YWx1ZSAqIG11bHRpcGxpZXI7XG4gICAgICBzdGVwQmFzZSA9IHN0ZXBCYXNlICogbXVsdGlwbGllcjtcbiAgICAgIHN0ZXAgPSBzdGVwICogbXVsdGlwbGllcjtcblxuICAgICAgaWYgKGlzTm9uSW50ZWdlclZhbHVlKSB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgaWYgKGlzTm9uSW50ZWdlclN0ZXBCYXNlKSBzdGVwQmFzZSA9IE1hdGgucm91bmQoc3RlcEJhc2UpO1xuICAgICAgaWYgKGlzTm9uSW50ZWdlclN0ZXApIHN0ZXAgPSBNYXRoLnJvdW5kKHN0ZXApO1xuICAgIH1cblxuICAgIHJldHVybiAodmFsdWUgLSBzdGVwQmFzZSkgJSBzdGVwID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gbnVtYmVySW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICAgIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuXG4gICAgdmFyIG1pblZhbDtcbiAgICB2YXIgbWF4VmFsO1xuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1pbikgfHwgYXR0ci5uZ01pbikge1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmFsdWUgPj0gbWluVmFsO1xuICAgICAgfTtcblxuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWluJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCB2YWx1ZSA8PSBtYXhWYWw7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmluZWQoYXR0ci5zdGVwKSB8fCBhdHRyLm5nU3RlcCkge1xuICAgICAgdmFyIHN0ZXBWYWw7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLnN0ZXAgPSBmdW5jdGlvbiAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQoc3RlcFZhbCkgfHwgaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBtaW5WYWwgfHwgMCwgc3RlcFZhbCk7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdzdGVwJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBzdGVwVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgbnVtYmVyRm9ybWF0dGVyUGFyc2VyKGN0cmwpO1xuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgICB2YXIgc3VwcG9ydHNSYW5nZSA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzICYmIGVsZW1lbnRbMF0udHlwZSA9PT0gJ3JhbmdlJyxcbiAgICAgICAgbWluVmFsID0gc3VwcG9ydHNSYW5nZSA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFZhbCA9IHN1cHBvcnRzUmFuZ2UgPyAxMDAgOiB1bmRlZmluZWQsXG4gICAgICAgIHN0ZXBWYWwgPSBzdXBwb3J0c1JhbmdlID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsaWRpdHkgPSBlbGVtZW50WzBdLnZhbGlkaXR5LFxuICAgICAgICBoYXNNaW5BdHRyID0gaXNEZWZpbmVkKGF0dHIubWluKSxcbiAgICAgICAgaGFzTWF4QXR0ciA9IGlzRGVmaW5lZChhdHRyLm1heCksXG4gICAgICAgIGhhc1N0ZXBBdHRyID0gaXNEZWZpbmVkKGF0dHIuc3RlcCk7XG5cbiAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBjdHJsLiRyZW5kZXI7XG5cbiAgICBjdHJsLiRyZW5kZXIgPSBzdXBwb3J0c1JhbmdlICYmIGlzRGVmaW5lZCh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgJiYgaXNEZWZpbmVkKHZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpID9cbiAgICAvL0Jyb3dzZXJzIHRoYXQgaW1wbGVtZW50IHJhbmdlIHdpbGwgc2V0IHRoZXNlIHZhbHVlcyBhdXRvbWF0aWNhbGx5LCBidXQgcmVhZGluZyB0aGUgYWRqdXN0ZWQgdmFsdWVzIGFmdGVyXG4gICAgLy8kcmVuZGVyIHdvdWxkIGNhdXNlIHRoZSBtaW4gLyBtYXggdmFsaWRhdG9ycyB0byBiZSBhcHBsaWVkIHdpdGggdGhlIHdyb25nIHZhbHVlXG4gICAgZnVuY3Rpb24gcmFuZ2VSZW5kZXIoKSB7XG4gICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkpO1xuICAgIH0gOiBvcmlnaW5hbFJlbmRlcjtcblxuICAgIGlmIChoYXNNaW5BdHRyKSB7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IHN1cHBvcnRzUmFuZ2UgP1xuICAgICAgLy8gU2luY2UgYWxsIGJyb3dzZXJzIHNldCB0aGUgaW5wdXQgdG8gYSB2YWxpZCB2YWx1ZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayB2YWxpZGl0eVxuICAgICAgZnVuY3Rpb24gbm9vcE1pblZhbGlkYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IDpcbiAgICAgIC8vIG5vbi1zdXBwb3J0IGJyb3dzZXJzIHZhbGlkYXRlIHRoZSBtaW4gdmFsXG4gICAgICBmdW5jdGlvbiBtaW5WYWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2aWV3VmFsdWUgPj0gbWluVmFsO1xuICAgICAgfTtcblxuICAgICAgc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoJ21pbicsIG1pbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaWYgKGhhc01heEF0dHIpIHtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gc3VwcG9ydHNSYW5nZSA/XG4gICAgICAvLyBTaW5jZSBhbGwgYnJvd3NlcnMgc2V0IHRoZSBpbnB1dCB0byBhIHZhbGlkIHZhbHVlLCB3ZSBkb24ndCBuZWVkIHRvIGNoZWNrIHZhbGlkaXR5XG4gICAgICBmdW5jdGlvbiBub29wTWF4VmFsaWRhdG9yKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gOlxuICAgICAgLy8gbm9uLXN1cHBvcnQgYnJvd3NlcnMgdmFsaWRhdGUgdGhlIG1heCB2YWxcbiAgICAgIGZ1bmN0aW9uIG1heFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZpZXdWYWx1ZSA8PSBtYXhWYWw7XG4gICAgICB9O1xuXG4gICAgICBzZXRJbml0aWFsVmFsdWVBbmRPYnNlcnZlcignbWF4JywgbWF4Q2hhbmdlKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU3RlcEF0dHIpIHtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMuc3RlcCA9IHN1cHBvcnRzUmFuZ2UgPyBmdW5jdGlvbiBuYXRpdmVTdGVwVmFsaWRhdG9yKCkge1xuICAgICAgICAvLyBDdXJyZW50bHksIG9ubHkgRkYgaW1wbGVtZW50cyB0aGUgc3BlYyBvbiBzdGVwIGNoYW5nZSBjb3JyZWN0bHkgKGkuZS4gYWRqdXN0aW5nIHRoZVxuICAgICAgICAvLyBpbnB1dCBlbGVtZW50IHZhbHVlIHRvIGEgdmFsaWQgdmFsdWUpLiBJdCdzIHBvc3NpYmxlIHRoYXQgb3RoZXIgYnJvd3NlcnMgc2V0IHRoZSBzdGVwTWlzbWF0Y2hcbiAgICAgICAgLy8gdmFsaWRpdHkgZXJyb3IgaW5zdGVhZCwgc28gd2UgY2FuIGF0IGxlYXN0IHJlcG9ydCBhbiBlcnJvciBpbiB0aGF0IGNhc2UuXG4gICAgICAgIHJldHVybiAhdmFsaWRpdHkuc3RlcE1pc21hdGNoO1xuICAgICAgfSA6XG4gICAgICAvLyBuZ1N0ZXAgZG9lc24ndCBzZXQgdGhlIHNldHAgYXR0ciwgc28gdGhlIGJyb3dzZXIgZG9lc24ndCBhZGp1c3QgdGhlIGlucHV0IHZhbHVlIGFzIHNldHRpbmcgc3RlcCB3b3VsZFxuICAgICAgZnVuY3Rpb24gc3RlcFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChzdGVwVmFsKSB8fCBpc1ZhbGlkRm9yU3RlcCh2aWV3VmFsdWUsIG1pblZhbCB8fCAwLCBzdGVwVmFsKTtcbiAgICAgIH07XG5cbiAgICAgIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKCdzdGVwJywgc3RlcENoYW5nZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoaHRtbEF0dHJOYW1lLCBjaGFuZ2VGbikge1xuICAgICAgLy8gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZXMgc2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgb25seSBhZnRlciBhIGRpZ2VzdCwgYnV0IHdlIG5lZWQgdGhlXG4gICAgICAvLyBhdHRyaWJ1dGUgdmFsdWUgd2hlbiB0aGUgaW5wdXQgaXMgZmlyc3QgcmVuZGVyZWQsIHNvIHRoYXQgdGhlIGJyb3dzZXIgY2FuIGFkanVzdCB0aGVcbiAgICAgIC8vIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZSBtaW4vbWF4IHZhbHVlXG4gICAgICBlbGVtZW50LmF0dHIoaHRtbEF0dHJOYW1lLCBhdHRyW2h0bWxBdHRyTmFtZV0pO1xuICAgICAgYXR0ci4kb2JzZXJ2ZShodG1sQXR0ck5hbWUsIGNoYW5nZUZuKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtaW5DaGFuZ2UodmFsKSB7XG4gICAgICBtaW5WYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgICAgaWYgKGlzTnVtYmVyTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzUmFuZ2UpIHtcbiAgICAgICAgdmFyIGVsVmFsID0gZWxlbWVudC52YWwoKTtcbiAgICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWluVmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgICBpZiAobWluVmFsID4gZWxWYWwpIHtcbiAgICAgICAgICBlbFZhbCA9IG1pblZhbDtcbiAgICAgICAgICBlbGVtZW50LnZhbChlbFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsVmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heENoYW5nZSh2YWwpIHtcbiAgICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gaWdub3JlIGNoYW5nZXMgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgICBpZiAoaXNOdW1iZXJOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHNSYW5nZSkge1xuICAgICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgICAvLyBJRTExIGRvZXNuJ3Qgc2V0IHRoZSBlbCB2YWwgY29ycmVjdGx5IGlmIHRoZSBtYXhWYWwgaXMgbGVzcyB0aGFuIHRoZSBlbGVtZW50IHZhbHVlXG4gICAgICAgIGlmIChtYXhWYWwgPCBlbFZhbCkge1xuICAgICAgICAgIGVsZW1lbnQudmFsKG1heFZhbCk7XG4gICAgICAgICAgLy8gSUUxMSBhbmQgQ2hyb21lIGRvbid0IHNldCB0aGUgdmFsdWUgdG8gdGhlIG1pblZhbCB3aGVuIG1heCA8IG1pblxuICAgICAgICAgIGVsVmFsID0gbWF4VmFsIDwgbWluVmFsID8gbWluVmFsIDogbWF4VmFsO1xuICAgICAgICB9XG4gICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbFZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGVwQ2hhbmdlKHZhbCkge1xuICAgICAgc3RlcFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gaWdub3JlIGNoYW5nZXMgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgICBpZiAoaXNOdW1iZXJOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTb21lIGJyb3dzZXJzIGRvbid0IGFkanVzdCB0aGUgaW5wdXQgdmFsdWUgY29ycmVjdGx5LCBidXQgc2V0IHRoZSBzdGVwTWlzbWF0Y2ggZXJyb3JcbiAgICAgIGlmIChzdXBwb3J0c1JhbmdlICYmIGN0cmwuJHZpZXdWYWx1ZSAhPT0gZWxlbWVudC52YWwoKSkge1xuICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC52YWwoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cmxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAgIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gICAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMudXJsID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAgIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gICAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdlbWFpbCc7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5lbWFpbCA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICB2YXIgZG9UcmltID0gIWF0dHIubmdUcmltIHx8IHRyaW0oYXR0ci5uZ1RyaW0pICE9PSAnZmFsc2UnO1xuICAgIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICAgIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7XG4gICAgICBlbGVtZW50LmF0dHIoJ25hbWUnLCBuZXh0VWlkKCkpO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGV2KSB7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAoZWxlbWVudFswXS5jaGVja2VkKSB7XG4gICAgICAgIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgICAgaWYgKGRvVHJpbSkge1xuICAgICAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyLnZhbHVlO1xuICAgICAgaWYgKGRvVHJpbSkge1xuICAgICAgICB2YWx1ZSA9IHRyaW0odmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxlbWVudFswXS5jaGVja2VkID0gdmFsdWUgPT09IGN0cmwuJHZpZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBjdHJsLiRyZW5kZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBjb250ZXh0LCBuYW1lLCBleHByZXNzaW9uLCBmYWxsYmFjaykge1xuICAgIHZhciBwYXJzZUZuO1xuICAgIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICAgIHBhcnNlRm4gPSAkcGFyc2UoZXhwcmVzc2lvbik7XG4gICAgICBpZiAoIXBhcnNlRm4uY29uc3RhbnQpIHtcbiAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignY29uc3RleHByJywgJ0V4cGVjdGVkIGNvbnN0YW50IGV4cHJlc3Npb24gZm9yIGB7MH1gLCBidXQgc2F3ICcgKyAnYHsxfWAuJywgbmFtZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VGbihjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gICAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICAgIHZhciBmYWxzZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nRmFsc2VWYWx1ZScsIGF0dHIubmdGYWxzZVZhbHVlLCBmYWxzZSk7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcihldikge1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gICAgfTtcblxuICAgIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gICAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIHRoZSAkdmlld1ZhbHVlIG9mIGFuIGVtcHR5IGNoZWNrYm94IGlzIGFsd2F5cyBzZXQgdG8gYGZhbHNlYFxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgICAvLyBpdCB0byBhIGJvb2xlYW4uXG4gICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgICB9O1xuXG4gICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGVxdWFscyh2YWx1ZSwgdHJ1ZVZhbHVlKTtcbiAgICB9KTtcblxuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSB0ZXh0YXJlYVxuICAgKiBAcmVzdHJpY3QgRVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvblxuICAgKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dCBlbGVtZW50fS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICAgKiAgICBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICAgKlxuICAgKiBAa25vd25Jc3N1ZVxuICAgKlxuICAgKiBXaGVuIHNwZWNpZnlpbmcgdGhlIGBwbGFjZWhvbGRlcmAgYXR0cmlidXRlIG9mIGA8dGV4dGFyZWE+YCwgSW50ZXJuZXQgRXhwbG9yZXIgd2lsbCB0ZW1wb3JhcmlseVxuICAgKiBpbnNlcnQgdGhlIHBsYWNlaG9sZGVyIHZhbHVlIGFzIHRoZSB0ZXh0YXJlYSdzIGNvbnRlbnQuIElmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjb250YWluc1xuICAgKiBpbnRlcnBvbGF0aW9uIChge3sgLi4uIH19YCksIGFuIGVycm9yIHdpbGwgYmUgbG9nZ2VkIGluIHRoZSBjb25zb2xlIHdoZW4gQW5ndWxhciB0cmllcyB0byB1cGRhdGVcbiAgICogdGhlIHZhbHVlIG9mIHRoZSBieS10aGVuLXJlbW92ZWQgdGV4dCBub2RlLiBUaGlzIGRvZXNuJ3QgYWZmZWN0IHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZVxuICAgKiB0ZXh0YXJlYSwgYnV0IGNhbiBiZSB1bmRlc2lyYWJsZS5cbiAgICpcbiAgICogWW91IGNhbiB3b3JrIGFyb3VuZCB0aGlzIEludGVybmV0IEV4cGxvcmVyIGlzc3VlIGJ5IHVzaW5nIGBuZy1hdHRyLXBsYWNlaG9sZGVyYCBpbnN0ZWFkIG9mXG4gICAqIGBwbGFjZWhvbGRlcmAgb24gdGV4dGFyZWFzLCB3aGVuZXZlciB5b3UgbmVlZCBpbnRlcnBvbGF0aW9uIGluIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS4gWW91IGNhblxuICAgKiBmaW5kIG1vcmUgZGV0YWlscyBvbiBgbmdBdHRyYCBpbiB0aGVcbiAgICogW0ludGVycG9sYXRpb25dKGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcykgc2VjdGlvbiBvZiB0aGVcbiAgICogRGV2ZWxvcGVyIEd1aWRlLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBpbnB1dFxuICAgKiBAcmVzdHJpY3QgRVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wuIFdoZW4gdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sIGl0IHByb3ZpZGVzIGRhdGEtYmluZGluZyxcbiAgICogaW5wdXQgc3RhdGUgY29udHJvbCwgYW5kIHZhbGlkYXRpb24uXG4gICAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gICAqIFNwZWNpZmljYWxseSwgZGF0YSBiaW5kaW5nIGFuZCBldmVudCBoYW5kbGluZyB2aWEgYG5nLW1vZGVsYCBpcyB1bnN1cHBvcnRlZCBmb3IgYGlucHV0W2ZpbGVdYC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nUmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpZiBzZXQgdG8gdHJ1ZVxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICAgKiAgICBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgdmFsdWUgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICAgKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZVxuICAgKiAgICBpbnB1dC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJpbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7bmFtZTogJ2d1ZXN0JywgbGFzdDogJ3Zpc2l0b3InfTtcbiAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIFVzZXIgbmFtZTpcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJsYXN0TmFtZVwiIG5nLW1vZGVsPVwidXNlci5sYXN0XCJcbiAgICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCIzXCIgbmctbWF4bGVuZ3RoPVwiMTBcIj5cbiAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoXCI+XG4gICAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWF4bGVuZ3RoXCI+XG4gICAgICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj5cbiAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICA8aHI+XG4gICAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJHZhbGlkID0ge3tteUZvcm0udXNlck5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJGVycm9yID0ge3tteUZvcm0ubGFzdE5hbWUuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWlubGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWlubGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgICAgdmFyIHVzZXJOYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGxhc3ROYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgICAgdmFyIGZvcm1WYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcbiAgXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICB1c2VyTmFtZUlucHV0LnNlbmRLZXlzKCcnKTtcbiAgXG4gICAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIGlmIGVtcHR5IHdoZW4gbWluIGxlbmd0aCBpcyBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJycpO1xuICBcbiAgICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgICBleHBlY3QobGFzdE5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbGVzcyB0aGFuIHJlcXVpcmVkIG1pbiBsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3h4Jyk7XG4gIFxuICAgICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgICBleHBlY3QobGFzdE5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtaW5sZW5ndGgnKTtcbiAgICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTtcbiAgXG4gICAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIn0nKTtcbiAgICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsIGZ1bmN0aW9uICgkYnJvd3NlciwgJHNuaWZmZXIsICRmaWx0ZXIsICRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgcmVxdWlyZTogWyc/bmdNb2RlbCddLFxuICAgICAgbGluazoge1xuICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAgIChpbnB1dFR5cGVbbG93ZXJjYXNlKGF0dHIudHlwZSldIHx8IGlucHV0VHlwZS50ZXh0KShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHNbMF0sICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICB2YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcXGQrKSQvO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEl0IGlzIG1haW5seSB1c2VkIG9uIHtAbGluayBpbnB1dFtyYWRpb10gYGlucHV0W3JhZGlvXWB9IGFuZCBvcHRpb24gZWxlbWVudHMsXG4gICAqIHNvIHRoYXQgd2hlbiB0aGUgZWxlbWVudCBpcyBzZWxlY3RlZCwgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gb2YgdGhhdCBlbGVtZW50IChvciBpdHNcbiAgICoge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gcGFyZW50IGVsZW1lbnQpIGlzIHNldCB0byB0aGUgYm91bmQgdmFsdWUuIEl0IGlzIGVzcGVjaWFsbHkgdXNlZnVsXG4gICAqIGZvciBkeW5hbWljYWxseSBnZW5lcmF0ZWQgbGlzdHMgdXNpbmcge0BsaW5rIG5nUmVwZWF0IGBuZ1JlcGVhdGB9LCBhcyBzaG93biBiZWxvdy5cbiAgICpcbiAgICogSXQgY2FuIGFsc28gYmUgdXNlZCB0byBhY2hpZXZlIG9uZS13YXkgYmluZGluZyBvZiBhIGdpdmVuIGV4cHJlc3Npb24gdG8gYW4gaW5wdXQgZWxlbWVudFxuICAgKiBzdWNoIGFzIGFuIGBpbnB1dFt0ZXh0XWAgb3IgYSBgdGV4dGFyZWFgLCB3aGVuIHRoYXQgZWxlbWVudCBkb2VzIG5vdCB1c2UgbmdNb2RlbC5cbiAgICpcbiAgICogQGVsZW1lbnQgaW5wdXRcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1ZhbHVlIGFuZ3VsYXIgZXhwcmVzc2lvbiwgd2hvc2UgdmFsdWUgd2lsbCBiZSBib3VuZCB0byB0aGUgYHZhbHVlYCBhdHRyaWJ1dGVcbiAgICogYW5kIGB2YWx1ZWAgcHJvcGVydHkgb2YgdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibmdWYWx1ZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ2YWx1ZUV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndmFsdWVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydwaXp6YScsICd1bmljb3JucycsICdyb2JvdHMnXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubXkgPSB7IGZhdm9yaXRlOiAndW5pY29ybnMnIH07XG4gICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgIDxmb3JtIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgICAgPGxhYmVsIG5nLXJlcGVhdD1cIm5hbWUgaW4gbmFtZXNcIiBmb3I9XCJ7e25hbWV9fVwiPlxuICAgICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwibXkuZmF2b3JpdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICBuZy12YWx1ZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImZhdm9yaXRlXCI+XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciBmYXZvcml0ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnbXkuZmF2b3JpdGUnKSk7XG4gIFxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCd1bmljb3JucycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteS5mYXZvcml0ZScpKS5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nVmFsdWVEaXJlY3RpdmUgPSBmdW5jdGlvbiBuZ1ZhbHVlRGlyZWN0aXZlKCkge1xuICAgIC8qKlxuICAgICAqICBpbnB1dHMgdXNlIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYXMgdGhlaXIgZGVmYXVsdCB2YWx1ZSBpZiB0aGUgdmFsdWUgcHJvcGVydHkgaXMgbm90IHNldC5cbiAgICAgKiAgT25jZSB0aGUgdmFsdWUgcHJvcGVydHkgaGFzIGJlZW4gc2V0IChieSBhZGRpbmcgaW5wdXQpLCBpdCB3aWxsIG5vdCByZWFjdCB0byBjaGFuZ2VzIHRvXG4gICAgICogIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYW55bW9yZS4gU2V0dGluZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHkgZml4ZXMgdGhpcyBiZWhhdmlvciwgYW5kXG4gICAgICogIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHVzZSBuZ1ZhbHVlIGFzIGEgc29ydCBvZiBvbmUtd2F5IGJpbmQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFZhbHVlKGVsZW1lbnQsIGF0dHIsIHZhbHVlKSB7XG4gICAgICAvLyBTdXBwb3J0OiBJRTkgb25seVxuICAgICAgLy8gSW4gSUU5IHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZyAoZS5nLiBgaW5wdXQudmFsdWUgPSBudWxsYCByZXN1bHRzIGluIGBpbnB1dC52YWx1ZSA9PT0gJ251bGwnYCkuXG4gICAgICB2YXIgcHJvcFZhbHVlID0gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogbXNpZSA9PT0gOSA/ICcnIDogbnVsbDtcbiAgICAgIGVsZW1lbnQucHJvcCgndmFsdWUnLCBwcm9wVmFsdWUpO1xuICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRwbCwgdHBsQXR0cikge1xuICAgICAgICBpZiAoQ09OU1RBTlRfVkFMVUVfUkVHRVhQLnRlc3QodHBsQXR0ci5uZ1ZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlLiRldmFsKGF0dHIubmdWYWx1ZSk7XG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50VmFsdWUoZWxtLCBhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50VmFsdWUoZWxtLCBhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0JpbmRcbiAgICogQHJlc3RyaWN0IEFDXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50XG4gICAqIHdpdGggdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gZXhwcmVzc2lvbiwgYW5kIHRvIHVwZGF0ZSB0aGUgdGV4dCBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoYXRcbiAgICogZXhwcmVzc2lvbiBjaGFuZ2VzLlxuICAgKlxuICAgKiBUeXBpY2FsbHksIHlvdSBkb24ndCB1c2UgYG5nQmluZGAgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHlvdSB1c2UgdGhlIGRvdWJsZSBjdXJseSBtYXJrdXAgbGlrZVxuICAgKiBge3sgZXhwcmVzc2lvbiB9fWAgd2hpY2ggaXMgc2ltaWxhciBidXQgbGVzcyB2ZXJib3NlLlxuICAgKlxuICAgKiBJdCBpcyBwcmVmZXJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCBpZiBhIHRlbXBsYXRlIGlzIG1vbWVudGFyaWx5XG4gICAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhblxuICAgKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxuICAgKlxuICAgKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXG4gICAqXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRFeGFtcGxlXCIgbmFtZT1cIm5nLWJpbmRcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPkVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgICAgICBIZWxsbyA8c3BhbiBuZy1iaW5kPVwibmFtZVwiPjwvc3Bhbj4hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuICBcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygnd29ybGQnKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ0JpbmREaXJlY3RpdmUgPSBbJyRjb21waWxlJywgZnVuY3Rpb24gKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModGVtcGxhdGVFbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kKTtcbiAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0JpbmRUZW1wbGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGBuZ0JpbmRUZW1wbGF0ZWAgZGlyZWN0aXZlIHNwZWNpZmllcyB0aGF0IHRoZSBlbGVtZW50XG4gICAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAgICogaW4gdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgYXR0cmlidXRlLlxuICAgKiBVbmxpa2UgYG5nQmluZGAsIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGNhbiBjb250YWluIG11bHRpcGxlIGB7e2AgYH19YFxuICAgKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICAgKiAoc3VjaCBhcyBUSVRMRSBhbmQgT1BUSU9OKSBjYW5ub3QgY29udGFpbiBTUEFOIGVsZW1lbnRzLlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nQmluZFRlbXBsYXRlIHRlbXBsYXRlIG9mIGZvcm1cbiAgICogICA8dHQ+e3s8L3R0PiA8dHQ+ZXhwcmVzc2lvbjwvdHQ+IDx0dD59fTwvdHQ+IHRvIGV2YWwuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLlxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kLXRlbXBsYXRlXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxsYWJlbD5TYWx1dGF0aW9uOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInNhbHV0YXRpb25cIj48L2xhYmVsPjxicj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPVwie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hXCI+PC9wcmU+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuICBcbiAgICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7XG4gIFxuICAgICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTtcbiAgICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuICBcbiAgICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnR3JlZXRpbmdzIHVzZXIhJyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24gKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVDb21waWxlKHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIubmdCaW5kVGVtcGxhdGUpKTtcbiAgICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25nQmluZFRlbXBsYXRlJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gaXNVbmRlZmluZWQodmFsdWUpID8gJycgOiB2YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0JpbmRIdG1sXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFdmFsdWF0ZXMgdGhlIGV4cHJlc3Npb24gYW5kIGluc2VydHMgdGhlIHJlc3VsdGluZyBIVE1MIGludG8gdGhlIGVsZW1lbnQgaW4gYSBzZWN1cmUgd2F5LiBCeSBkZWZhdWx0LFxuICAgKiB0aGUgcmVzdWx0aW5nIEhUTUwgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS5cbiAgICogVG8gdXRpbGl6ZSB0aGlzIGZ1bmN0aW9uYWxpdHksIGVuc3VyZSB0aGF0IGAkc2FuaXRpemVgIGlzIGF2YWlsYWJsZSwgZm9yIGV4YW1wbGUsIGJ5IGluY2x1ZGluZyB7QGxpbmtcbiAgICogbmdTYW5pdGl6ZX0gaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMgKG5vdCBpbiBjb3JlIEFuZ3VsYXIpLiBJbiBvcmRlciB0byB1c2Uge0BsaW5rIG5nU2FuaXRpemV9XG4gICAqIGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzLCB5b3UgbmVlZCB0byBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIFlvdSBtYXkgYWxzbyBieXBhc3Mgc2FuaXRpemF0aW9uIGZvciB2YWx1ZXMgeW91IGtub3cgYXJlIHNhZmUuIFRvIGRvIHNvLCBiaW5kIHRvXG4gICAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAgICogdW5kZXIge0BsaW5rIG5nLiRzY2Ujc2hvdy1tZS1hbi1leGFtcGxlLXVzaW5nLXNjZS0gU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICAgKlxuICAgKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICAgKiB3aWxsIGhhdmUgYW4gZXhjZXB0aW9uIChpbnN0ZWFkIG9mIGFuIGV4cGxvaXQuKVxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmRIdG1sIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICBcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEh0bWxFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIiBuYW1lPVwibmctYmluZC1odG1sXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPHAgbmctYmluZC1odG1sPVwibXlIVE1MXCI+PC9wPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICBcbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEh0bWxFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICAgJ0kgYW0gYW4gPGNvZGU+SFRNTDwvY29kZT5zdHJpbmcgd2l0aCAnICtcbiAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj5saW5rcyE8L2E+IGFuZCBvdGhlciA8ZW0+c3R1ZmY8L2VtPic7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L2ZpbGU+XG4gIFxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZC1odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ215SFRNTCcpKS5nZXRUZXh0KCkpLnRvQmUoXG4gICAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICB2YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsICckcGFyc2UnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbiAoJHNjZSwgJHBhcnNlLCAkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kSHRtbENvbXBpbGUodEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgICB2YXIgbmdCaW5kSHRtbEdldHRlciA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCk7XG4gICAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIHNjZVZhbHVlT2YodmFsKSB7XG4gICAgICAgICAgLy8gVW53cmFwIHRoZSB2YWx1ZSB0byBjb21wYXJlIHRoZSBhY3R1YWwgaW5uZXIgc2FmZSB2YWx1ZSwgbm90IHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgICAgICByZXR1cm4gJHNjZS52YWx1ZU9mKHZhbCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0RWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZEh0bWxMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKG5nQmluZEh0bWxXYXRjaCwgZnVuY3Rpb24gbmdCaW5kSHRtbFdhdGNoQWN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVGhlIHdhdGNoZWQgdmFsdWUgaXMgdGhlIHVud3JhcHBlZCB2YWx1ZS4gVG8gYXZvaWQgcmUtZXNjYXBpbmcsIHVzZSB0aGUgZGlyZWN0IGdldHRlci5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpO1xuICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpIHx8ICcnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0NoYW5nZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cbiAgICogVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGltbWVkaWF0ZWx5LCB1bmxpa2UgdGhlIEphdmFTY3JpcHQgb25jaGFuZ2UgZXZlbnRcbiAgICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGVcbiAgICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLlxuICAgKlxuICAgKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlc1xuICAgKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLlxuICAgKlxuICAgKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6XG4gICAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkXG4gICAqICogaWYgdGhlIGlucHV0IGhhcyBjb250aW51ZWQgdG8gYmUgaW52YWxpZCBzaW5jZSB0aGUgbW9kZWwgd2lsbCBzdGF5IGBudWxsYFxuICAgKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWVcbiAgICpcbiAgICpcbiAgICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IGlucHV0XG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2VcbiAgICogaW4gaW5wdXQgdmFsdWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZ0NoYW5nZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGFuZ2VFeGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxzY3JpcHQ+XG4gICAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pXG4gICAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDtcbiAgICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKztcbiAgICogICAgICAgICAgIH07XG4gICAqICAgICAgICAgfV0pO1xuICAgKiAgICAgPC9zY3JpcHQ+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBuZy1jaGFuZ2U9XCJjaGFuZ2UoKVwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUxXCIgLz5cbiAgICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgaWQ9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIiAvPlxuICAgKiAgICAgICA8bGFiZWwgZm9yPVwibmctY2hhbmdlLWV4YW1wbGUyXCI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz5cbiAgICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz5cbiAgICogICAgICAgPHR0PmNvdW50ZXIgPSB7e2NvdW50ZXJ9fTwvdHQ+PGJyLz5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAqICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuYmluZGluZygnY291bnRlcicpKTtcbiAgICogICAgIHZhciBkZWJ1ZyA9IGVsZW1lbnQoYnkuYmluZGluZygnY29uZmlybWVkJykpO1xuICAgKlxuICAgKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcbiAgICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAgICpcbiAgICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUxJykpLmNsaWNrKCk7XG4gICAqXG4gICAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcxJyk7XG4gICAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMicpKS5jbGljaygpO1xuICBcbiAgICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAgICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAqICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ0NoYW5nZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHIubmdDaGFuZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKiBleHBvcnRlZFxuICAgIG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgbmdDbGFzc09kZERpcmVjdGl2ZVxuICAqL1xuXG4gIGZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7XG4gICAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XG4gICAgdmFyIGluZGV4V2F0Y2hFeHByZXNzaW9uO1xuXG4gICAgcmV0dXJuIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IGF0dHJbbmFtZV0udHJpbSgpO1xuICAgICAgICAgIHZhciBpc09uZVRpbWUgPSBleHByZXNzaW9uLmNoYXJBdCgwKSA9PT0gJzonICYmIGV4cHJlc3Npb24uY2hhckF0KDEpID09PSAnOic7XG5cbiAgICAgICAgICB2YXIgd2F0Y2hJbnRlcmNlcHRvciA9IGlzT25lVGltZSA/IHRvRmxhdFZhbHVlIDogdG9DbGFzc1N0cmluZztcbiAgICAgICAgICB2YXIgd2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKGV4cHJlc3Npb24sIHdhdGNoSW50ZXJjZXB0b3IpO1xuICAgICAgICAgIHZhciB3YXRjaEFjdGlvbiA9IGlzT25lVGltZSA/IG5nQ2xhc3NPbmVUaW1lV2F0Y2hBY3Rpb24gOiBuZ0NsYXNzV2F0Y2hBY3Rpb247XG5cbiAgICAgICAgICB2YXIgY2xhc3NDb3VudHMgPSBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycpO1xuICAgICAgICAgIHZhciBvbGRNb2R1bG8gPSB0cnVlO1xuICAgICAgICAgIHZhciBvbGRDbGFzc1N0cmluZztcblxuICAgICAgICAgIGlmICghY2xhc3NDb3VudHMpIHtcbiAgICAgICAgICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eVxuICAgICAgICAgICAgLy8gbmFtZXMgaW4gT2JqZWN0LnByb3RvdHlwZVxuICAgICAgICAgICAgY2xhc3NDb3VudHMgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChuYW1lICE9PSAnbmdDbGFzcycpIHtcbiAgICAgICAgICAgIGlmICghaW5kZXhXYXRjaEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgaW5kZXhXYXRjaEV4cHJlc3Npb24gPSAkcGFyc2UoJyRpbmRleCcsIGZ1bmN0aW9uIG1vZHVsb1R3bygkaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICAgICAgICAgIHJldHVybiAkaW5kZXggJiAxO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGluZGV4V2F0Y2hFeHByZXNzaW9uLCBuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbiwgd2F0Y2hBY3Rpb24sIGlzT25lVGltZSk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgICBjbGFzc1N0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHNwbGl0KGNsYXNzU3RyaW5nKSwgMSk7XG4gICAgICAgICAgICBhdHRyLiRhZGRDbGFzcyhjbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyhjbGFzc1N0cmluZykge1xuICAgICAgICAgICAgY2xhc3NTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyhzcGxpdChjbGFzc1N0cmluZyksIC0xKTtcbiAgICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVDbGFzc2VzKG9sZENsYXNzU3RyaW5nLCBuZXdDbGFzc1N0cmluZykge1xuICAgICAgICAgICAgdmFyIG9sZENsYXNzQXJyYXkgPSBzcGxpdChvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgICB2YXIgbmV3Q2xhc3NBcnJheSA9IHNwbGl0KG5ld0NsYXNzU3RyaW5nKTtcblxuICAgICAgICAgICAgdmFyIHRvUmVtb3ZlQXJyYXkgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NBcnJheSwgbmV3Q2xhc3NBcnJheSk7XG4gICAgICAgICAgICB2YXIgdG9BZGRBcnJheSA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc0FycmF5LCBvbGRDbGFzc0FycmF5KTtcblxuICAgICAgICAgICAgdmFyIHRvUmVtb3ZlU3RyaW5nID0gZGlnZXN0Q2xhc3NDb3VudHModG9SZW1vdmVBcnJheSwgLTEpO1xuICAgICAgICAgICAgdmFyIHRvQWRkU3RyaW5nID0gZGlnZXN0Q2xhc3NDb3VudHModG9BZGRBcnJheSwgMSk7XG5cbiAgICAgICAgICAgIGF0dHIuJGFkZENsYXNzKHRvQWRkU3RyaW5nKTtcbiAgICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKHRvUmVtb3ZlU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc0FycmF5LCBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGNsYXNzZXNUb1VwZGF0ZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3JFYWNoKGNsYXNzQXJyYXksIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCB8fCBjbGFzc0NvdW50c1tjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9IChjbGFzc0NvdW50c1tjbGFzc05hbWVdIHx8IDApICsgY291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgY2xhc3Nlc1RvVXBkYXRlLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbihuZXdNb2R1bG8pIHtcbiAgICAgICAgICAgIC8vIFRoaXMgd2F0Y2gtYWN0aW9uIHNob3VsZCBydW4gYmVmb3JlIHRoZSBgbmdDbGFzc1tPbmVUaW1lXVdhdGNoQWN0aW9uKClgLCB0aHVzIGl0XG4gICAgICAgICAgICAvLyBhZGRzL3JlbW92ZXMgYG9sZENsYXNzU3RyaW5nYC4gSWYgdGhlIGBuZ0NsYXNzYCBleHByZXNzaW9uIGhhcyBjaGFuZ2VkIGFzIHdlbGwsIHRoZVxuICAgICAgICAgICAgLy8gYG5nQ2xhc3NbT25lVGltZV1XYXRjaEFjdGlvbigpYCB3aWxsIHVwZGF0ZSB0aGUgY2xhc3Nlcy5cbiAgICAgICAgICAgIGlmIChuZXdNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzZXMob2xkQ2xhc3NTdHJpbmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9sZE1vZHVsbyA9IG5ld01vZHVsbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzT25lVGltZVdhdGNoQWN0aW9uKG5ld0NsYXNzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBuZXdDbGFzc1N0cmluZyA9IHRvQ2xhc3NTdHJpbmcobmV3Q2xhc3NWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdDbGFzc1N0cmluZyAhPT0gb2xkQ2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICAgICAgbmdDbGFzc1dhdGNoQWN0aW9uKG5ld0NsYXNzU3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzV2F0Y2hBY3Rpb24obmV3Q2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChvbGRNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2xkQ2xhc3NTdHJpbmcgPSBuZXdDbGFzc1N0cmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV07XG5cbiAgICAvLyBIZWxwZXJzXG4gICAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICAgIGlmICghdG9rZW5zMSB8fCAhdG9rZW5zMS5sZW5ndGgpIHJldHVybiBbXTtcbiAgICAgIGlmICghdG9rZW5zMiB8fCAhdG9rZW5zMi5sZW5ndGgpIHJldHVybiB0b2tlbnMxO1xuXG4gICAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICAgIG91dGVyOiBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2VuID09PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucHVzaCh0b2tlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3BsaXQoY2xhc3NTdHJpbmcpIHtcbiAgICAgIHJldHVybiBjbGFzc1N0cmluZyAmJiBjbGFzc1N0cmluZy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQ2xhc3NTdHJpbmcoY2xhc3NWYWx1ZSkge1xuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NWYWx1ZTtcblxuICAgICAgaWYgKGlzQXJyYXkoY2xhc3NWYWx1ZSkpIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgPSBjbGFzc1ZhbHVlLm1hcCh0b0NsYXNzU3RyaW5nKS5qb2luKCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsdWUpKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nID0gT2JqZWN0LmtleXMoY2xhc3NWYWx1ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gY2xhc3NWYWx1ZVtrZXldO1xuICAgICAgICB9KS5qb2luKCcgJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGFzc1N0cmluZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ZsYXRWYWx1ZShjbGFzc1ZhbHVlKSB7XG4gICAgICB2YXIgZmxhdFZhbHVlID0gY2xhc3NWYWx1ZTtcblxuICAgICAgaWYgKGlzQXJyYXkoY2xhc3NWYWx1ZSkpIHtcbiAgICAgICAgZmxhdFZhbHVlID0gY2xhc3NWYWx1ZS5tYXAodG9GbGF0VmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbHVlKSkge1xuICAgICAgICB2YXIgaGFzVW5kZWZpbmVkID0gZmFsc2U7XG5cbiAgICAgICAgZmxhdFZhbHVlID0gT2JqZWN0LmtleXMoY2xhc3NWYWx1ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjbGFzc1ZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoIWhhc1VuZGVmaW5lZCAmJiBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGhhc1VuZGVmaW5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaGFzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gUHJldmVudCB0aGUgYG9uZVRpbWVMaXRlcmFsV2F0Y2hJbnRlcmNlcHRvcmAgZnJvbSB1bnJlZ2lzdGVyaW5nXG4gICAgICAgICAgLy8gdGhlIHdhdGNoZXIsIGJ5IGluY2x1ZGluZyBhdCBsZWFzdCBvbmUgYHVuZGVmaW5lZGAgdmFsdWUuXG4gICAgICAgICAgZmxhdFZhbHVlLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nQ2xhc3NcbiAgICogQHJlc3RyaWN0IEFDXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmdcbiAgICogYW4gZXhwcmVzc2lvbiB0aGF0IHJlcHJlc2VudHMgYWxsIGNsYXNzZXMgdG8gYmUgYWRkZWQuXG4gICAqXG4gICAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvblxuICAgKiBldmFsdWF0ZXMgdG86XG4gICAqXG4gICAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzXG4gICAqIG5hbWVzLlxuICAgKlxuICAgKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZVxuICAgKiBvYmplY3Qgd2l0aCBhIHRydXRoeSB2YWx1ZSB0aGUgY29ycmVzcG9uZGluZyBrZXkgaXMgdXNlZCBhcyBhIGNsYXNzIG5hbWUuXG4gICAqXG4gICAqIDMuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhbiBhcnJheSwgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBzaG91bGQgZWl0aGVyIGJlIGEgc3RyaW5nIGFzIGluXG4gICAqIHR5cGUgMSBvciBhbiBvYmplY3QgYXMgaW4gdHlwZSAyLiBUaGlzIG1lYW5zIHRoYXQgeW91IGNhbiBtaXggc3RyaW5ncyBhbmQgb2JqZWN0cyB0b2dldGhlciBpbiBhbiBhcnJheVxuICAgKiB0byBnaXZlIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IENTUyBjbGFzc2VzIGFwcGVhci4gU2VlIHRoZSBjb2RlIGJlbG93IGZvciBhbiBleGFtcGxlIG9mIHRoaXMuXG4gICAqXG4gICAqXG4gICAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgdGhlIHByZXZpb3VzbHkgYWRkZWQgY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgb25seSB0aGVuIGFyZSB0aGVcbiAgICogbmV3IGNsYXNzZXMgYWRkZWQuXG4gICAqXG4gICAqIEBrbm93bklzc3VlXG4gICAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBjbGFzc2BcbiAgICogYXR0cmlidXRlLCB3aGVuIHVzaW5nIHRoZSBgbmdDbGFzc2AgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAqIFNlZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNrbm93bi1pc3N1ZXMgaGVyZX0gZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogQGFuaW1hdGlvbnNcbiAgICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjYWRkQ2xhc3MgYWRkQ2xhc3N9ICAgICAgIHwganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgICB8XG4gICAqIHwge0BsaW5rIG5nLiRhbmltYXRlI3JlbW92ZUNsYXNzIHJlbW92ZUNsYXNzfSB8IGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgfFxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAgICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzc1xuICAgKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuIEluIHRoZSBjYXNlIG9mIGEgbWFwLCB0aGVcbiAgICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZVxuICAgKiAgIGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3NcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsICdoYXMtZXJyb3InOiBlcnJvcn1cIj5NYXAgU3ludGF4IEV4YW1wbGU8L3A+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJkZWxldGVkXCI+XG4gICAgICAgICAgICBkZWxldGVkIChhcHBseSBcInN0cmlrZVwiIGNsYXNzKVxuICAgICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJpbXBvcnRhbnRcIj5cbiAgICAgICAgICAgIGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpXG4gICAgICAgICA8L2xhYmVsPjxicj5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+XG4gICAgICAgICAgICBlcnJvciAoYXBwbHkgXCJoYXMtZXJyb3JcIiBjbGFzcylcbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8aHI+XG4gICAgICAgICA8cCBuZy1jbGFzcz1cInN0eWxlXCI+VXNpbmcgU3RyaW5nIFN5bnRheDwvcD5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic3R5bGVcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiPlxuICAgICAgICAgPGhyPlxuICAgICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM11cIj5Vc2luZyBBcnJheSBTeW50YXg8L3A+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTFcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCI+PGJyPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUyXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAyXCI+PGJyPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUzXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAzXCI+PGJyPlxuICAgICAgICAgPGhyPlxuICAgICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGU0LCB7b3JhbmdlOiB3YXJuaW5nfV1cIj5Vc2luZyBBcnJheSBhbmQgTWFwIFN5bnRheDwvcD5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlNFwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZVwiPjxicj5cbiAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ3YXJuaW5nXCI+IHdhcm5pbmcgKGFwcGx5IFwib3JhbmdlXCIgY2xhc3MpPC9sYWJlbD5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgLnN0cmlrZSB7XG4gICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICAgICB9XG4gICAgICAgICAuYm9sZCB7XG4gICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICB9XG4gICAgICAgICAucmVkIHtcbiAgICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgfVxuICAgICAgICAgLmhhcy1lcnJvciB7XG4gICAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gICAgICAgICB9XG4gICAgICAgICAub3JhbmdlIHtcbiAgICAgICAgICAgICBjb2xvcjogb3JhbmdlO1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgXG4gICAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL2JvbGQvKTtcbiAgICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvaGFzLWVycm9yLyk7XG4gIFxuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdpbXBvcnRhbnQnKSkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7XG4gIFxuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdlcnJvcicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2hhcy1lcnJvci8pO1xuICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLmNsZWFyKCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpO1xuICAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMycpKS5zZW5kS2V5cygncmVkJyk7XG4gICAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcbiAgICAgICAgIH0pO1xuICBcbiAgICAgICAgIGl0KCdhcnJheSB3aXRoIG1hcCBleGFtcGxlIHNob3VsZCBoYXZlIDIgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlNCcpKS5zZW5kS2V5cygnYm9sZCcpO1xuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd3YXJuaW5nJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIG9yYW5nZScpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gIFxuICAgICAjIyBBbmltYXRpb25zXG4gIFxuICAgICBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyBuZ0NsYXNzLlxuICBcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWNsYXNzXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IGlkPVwic2V0YnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0XCIgbmctY2xpY2s9XCJteVZhcj0nbXktY2xhc3MnXCI+XG4gICAgICAgIDxpbnB1dCBpZD1cImNsZWFyYnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJiYXNlLWNsYXNzXCIgbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAuYmFzZS1jbGFzcyB7XG4gICAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICAgIH1cbiAgXG4gICAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC5cbiAgICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICBcbiAgICAgICAgICAgZWxlbWVudChieS5pZCgnc2V0YnRuJykpLmNsaWNrKCk7XG4gIFxuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTtcbiAgXG4gICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG4gIFxuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgXG4gIFxuICAgICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICAgIFRoZSBuZ0NsYXNzIGRpcmVjdGl2ZSBzdGlsbCBzdXBwb3J0cyBDU1MzIFRyYW5zaXRpb25zL0FuaW1hdGlvbnMgZXZlbiBpZiB0aGV5IGRvIG5vdCBmb2xsb3cgdGhlIG5nQW5pbWF0ZSBDU1MgbmFtaW5nIHN0cnVjdHVyZS5cbiAgICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICAgIHRvIHZpZXcgdGhlIHN0ZXAgYnkgc3RlcCBkZXRhaWxzIG9mIHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyAkYW5pbWF0ZS5hZGRDbGFzc30gYW5kXG4gICAgIHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gICAqL1xuICB2YXIgbmdDbGFzc0RpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCcnLCB0cnVlKTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0NsYXNzT2RkXG4gICAqIEByZXN0cmljdCBBQ1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAgICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlIGVmZmVjdCBvbmx5IG9uIG9kZCAoZXZlbikgcm93cy5cbiAgICpcbiAgICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzT2RkIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAgICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsYXNzLW9kZFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPG9sIG5nLWluaXQ9XCJuYW1lcz1bJ0pvaG4nLCAnTWFyeScsICdDYXRlJywgJ1N1eiddXCI+XG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvb2w+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIC5vZGQge1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgfVxuICAgICAgICAgLmV2ZW4ge1xuICAgICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkucmVwZWF0ZXIoJ25hbWUgaW4gbmFtZXMnKS5yb3coMCkuY29sdW1uKCduYW1lJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAgICogQHJlc3RyaWN0IEFDXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IHRoZXkgd29yayBpblxuICAgKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICAgKlxuICAgKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiB0aGUgc2NvcGUgb2YgYW5cbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICAgKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsYXNzLWV2ZW5cIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cIm5hbWUgaW4gbmFtZXNcIj5cbiAgICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L29sPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAub2RkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5ldmVuIHtcbiAgICAgICAgICAgY29sb3I6IGJsdWU7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICAgIHRvTWF0Y2goL29kZC8pO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdDbG9ha1xuICAgKiBAcmVzdHJpY3QgQUNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICAgKiBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzIHJhdyAodW5jb21waWxlZCkgZm9ybSB3aGlsZSB5b3VyIGFwcGxpY2F0aW9uIGlzIGxvYWRpbmcuIFVzZSB0aGlzXG4gICAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gICAqXG4gICAqIFRoZSBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgdG8gdGhlIGA8Ym9keT5gIGVsZW1lbnQsIGJ1dCB0aGUgcHJlZmVycmVkIHVzYWdlIGlzIHRvIGFwcGx5XG4gICAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAgICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAgICpcbiAgICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICAgKiBgYW5ndWxhci5taW4uanNgLlxuICAgKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAgICpcbiAgICogYGBgY3NzXG4gICAqIFtuZ1xcOmNsb2FrXSwgW25nLWNsb2FrXSwgW2RhdGEtbmctY2xvYWtdLCBbeC1uZy1jbG9ha10sIC5uZy1jbG9haywgLngtbmctY2xvYWsge1xuICAgKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICAgKiBhcmUgdGFnZ2VkIHdpdGggdGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgYXJlIGhpZGRlbi4gV2hlbiBBbmd1bGFyIGVuY291bnRlcnMgdGhpcyBkaXJlY3RpdmVcbiAgICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAgICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAgICpcbiAgICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICAgKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gICAqIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsb2FrXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ3dvcmxkJyB9fTwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KCQoJyN0ZW1wbGF0ZTEnKS5nZXRBdHRyaWJ1dGUoJ25nLWNsb2FrJykpLlxuICAgICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgICB0b0JlTnVsbCgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqL1xuICB2YXIgbmdDbG9ha0RpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGF0dHIuJHNldCgnbmdDbG9haycsIHVuZGVmaW5lZCk7XG4gICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdDb250cm9sbGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIGF0dGFjaGVzIGEgY29udHJvbGxlciBjbGFzcyB0byB0aGUgdmlldy4gVGhpcyBpcyBhIGtleSBhc3BlY3Qgb2YgaG93IGFuZ3VsYXJcbiAgICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gICAqXG4gICAqIE1WQyBjb21wb25lbnRzIGluIGFuZ3VsYXI6XG4gICAqXG4gICAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXNcbiAgICogICBhcmUgYWNjZXNzZWQgdGhyb3VnaCBiaW5kaW5ncy5cbiAgICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gICAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3NcbiAgICogICBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uIHRvIGRlY29yYXRlIHRoZSBzY29wZSB3aXRoIGZ1bmN0aW9ucyBhbmQgdmFsdWVzXG4gICAqXG4gICAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvblxuICAgKiB2aWEgdGhlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UuIEEgY29tbW9uIG1pc3Rha2UgaXMgdG8gZGVjbGFyZSB0aGUgY29udHJvbGxlclxuICAgKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICAgKiBhbmQgZXhlY3V0ZWQgdHdpY2UuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAc2NvcGVcbiAgICogQHByaW9yaXR5IDUwMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gICAqIHRoYXQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZXZhbHVhdGVzIHRvIGEgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqXG4gICAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmdcbiAgICogYG5nLWNvbnRyb2xsZXI9XCJhcyBwcm9wZXJ0eU5hbWVcImAuXG4gICAqXG4gICAqIElmIHRoZSBjdXJyZW50IGAkY29udHJvbGxlclByb3ZpZGVyYCBpcyBjb25maWd1cmVkIHRvIHVzZSBnbG9iYWxzICh2aWFcbiAgICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzIGAkY29udHJvbGxlclByb3ZpZGVyLmFsbG93R2xvYmFscygpYCB9KSwgdGhpcyBtYXlcbiAgICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKGRlcHJlY2F0ZWQsIG5vdCByZWNvbW1lbmRlZCkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAgICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW5cbiAgICogZWFzaWx5IGJlIGNhbGxlZCBmcm9tIHRoZSBhbmd1bGFyIG1hcmt1cC4gQW55IGNoYW5nZXMgdG8gdGhlIGRhdGEgYXJlIGF1dG9tYXRpY2FsbHkgcmVmbGVjdGVkXG4gICAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAgICpcbiAgICogVHdvIGRpZmZlcmVudCBkZWNsYXJhdGlvbiBzdHlsZXMgYXJlIGluY2x1ZGVkIGJlbG93OlxuICAgKlxuICAgKiAqIG9uZSBiaW5kcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGRpcmVjdGx5IG9udG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgYHRoaXNgOlxuICAgKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcImBcbiAgICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICAgKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcImBcbiAgICpcbiAgICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gICAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXJcbiAgICogYW5kIGF2b2lkaW5nIHNjb3BlLlxuICAgKlxuICAgKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW5cbiAgICogbXVsdGlwbGUgY29udHJvbGxlcnMgYXBwbHkgdG8gYW4gZWxlbWVudC5cbiAgICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gICAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS5cbiAgICogKiBTaW5jZSB0aGVyZSBpcyBhbHdheXMgYSBgLmAgaW4gdGhlIGJpbmRpbmdzLCB5b3UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBwcm90b3R5cGFsXG4gICAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAgICpcbiAgICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB0aGUgYGNvbnRyb2xsZXIgYXNgIHN5bnRheC5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlckFzXCIgbW9kdWxlPVwiY29udHJvbGxlckFzRXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAgICogICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPjwvbGFiZWw+XG4gICAqICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLmdyZWV0KClcIj5ncmVldDwvYnV0dG9uPjxici8+XG4gICAqICAgICAgQ29udGFjdDpcbiAgICogICAgICA8dWw+XG4gICAqICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0c1wiPlxuICAgKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgYXJpYS1sYWJlbD1cIkNvbnRhY3QgbWV0aG9kXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICAgKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gICAqICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj5cbiAgICogICAgICAgICAgPC9zZWxlY3Q+XG4gICAqICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAgICogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLmNsZWFyQ29udGFjdChjb250YWN0KVwiPmNsZWFyPC9idXR0b24+XG4gICAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAgICogICAgICAgIDwvbGk+XG4gICAqICAgICAgICA8bGk+PGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLmFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPjwvbGk+XG4gICAqICAgICA8L3VsPlxuICAgKiAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKVxuICAgKiAgICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIxJywgU2V0dGluZ3NDb250cm9sbGVyMSk7XG4gICAqXG4gICAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7XG4gICAqICAgICAgdGhpcy5uYW1lID0gJ0pvaG4gU21pdGgnO1xuICAgKiAgICAgIHRoaXMuY29udGFjdHMgPSBbXG4gICAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAgICogICAgICAgIHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfVxuICAgKiAgICAgIF07XG4gICAqICAgIH1cbiAgICpcbiAgICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICAgKiAgICB9O1xuICAgKlxuICAgKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICAgdGhpcy5jb250YWN0cy5wdXNoKHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICAgKiAgICB9O1xuICAgKlxuICAgKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gICAqICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcbiAgICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gICAqICAgIH07XG4gICAqXG4gICAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAgICogICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnO1xuICAgKiAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAgICogICAgfTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50KGJ5LmlkKCdjdHJsLWFzLWV4bXBsJykpO1xuICAgKiAgICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnc2V0dGluZ3MubmFtZScpKVxuICAgKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICAgKlxuICAgKiAgICAgICB2YXIgZmlyc3RSZXBlYXQgPVxuICAgKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICAgKiAgICAgICB2YXIgc2Vjb25kUmVwZWF0ID1cbiAgICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDEpKTtcbiAgICpcbiAgICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICAgKiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICAgKlxuICAgKiAgICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICAgKiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAgICpcbiAgICogICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5idXR0b25UZXh0KCdjbGVhcicpKS5jbGljaygpO1xuICAgKlxuICAgKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gICAqICAgICAgICAgICAudG9CZSgnJyk7XG4gICAqXG4gICAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICAgKlxuICAgKiAgICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMikpXG4gICAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICAgKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAgICogICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpO1xuICAgKiAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIFwiYXR0YWNoIHRvIGAkc2NvcGVgXCIgc3R5bGUgb2YgY29udHJvbGxlci5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gICAqICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgIDxkaXYgaWQ9XCJjdHJsLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcIj5cbiAgICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAgICogICAgIDxidXR0b24gbmctY2xpY2s9XCJncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICAgKiAgICAgQ29udGFjdDpcbiAgICogICAgIDx1bD5cbiAgICogICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cbiAgICogICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICAgKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAgICogICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gICAqICAgICAgICAgPC9zZWxlY3Q+XG4gICAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICAgKiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICAgKiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJyZW1vdmVDb250YWN0KGNvbnRhY3QpXCI+WDwvYnV0dG9uPlxuICAgKiAgICAgICA8L2xpPlxuICAgKiAgICAgICA8bGk+WyA8YnV0dG9uIG5nLWNsaWNrPVwiYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+IF08L2xpPlxuICAgKiAgICA8L3VsPlxuICAgKiAgIDwvZGl2PlxuICAgKiAgPC9maWxlPlxuICAgKiAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICAgKiAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjInLCBbJyRzY29wZScsIFNldHRpbmdzQ29udHJvbGxlcjJdKTtcbiAgICpcbiAgICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICAgKiAgICAgJHNjb3BlLm5hbWUgPSAnSm9obiBTbWl0aCc7XG4gICAqICAgICAkc2NvcGUuY29udGFjdHMgPSBbXG4gICAqICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSxcbiAgICogICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfVxuICAgKiAgICAgXTtcbiAgICpcbiAgICogICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICBhbGVydCgkc2NvcGUubmFtZSk7XG4gICAqICAgICB9O1xuICAgKlxuICAgKiAgICAgJHNjb3BlLmFkZENvbnRhY3QgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICAgKiAgICAgfTtcbiAgICpcbiAgICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gICAqICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7XG4gICAqICAgICAgICRzY29wZS5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgKiAgICAgfTtcbiAgICpcbiAgICogICAgICRzY29wZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XG4gICAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gICAqICAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAgICogICAgIH07XG4gICAqICAgfVxuICAgKiAgPC9maWxlPlxuICAgKiAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICogICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1leG1wbCcpKTtcbiAgICpcbiAgICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAgICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICAgKlxuICAgKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gICAqICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDApKTtcbiAgICogICAgICB2YXIgc2Vjb25kUmVwZWF0ID1cbiAgICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICAgKlxuICAgKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAgICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICAgKiAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gICAqICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7XG4gICAqXG4gICAqICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5idXR0b25UZXh0KCdjbGVhcicpKS5jbGljaygpO1xuICAgKlxuICAgKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAgICogICAgICAgICAgLnRvQmUoJycpO1xuICAgKlxuICAgKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICAgKlxuICAgKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygyKSlcbiAgICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAgICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAgICogICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gICAqICAgIH0pO1xuICAgKiAgPC9maWxlPlxuICAgKjwvZXhhbXBsZT5cbiAgXG4gICAqL1xuICB2YXIgbmdDb250cm9sbGVyRGlyZWN0aXZlID0gW2Z1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHNjb3BlOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogJ0AnLFxuICAgICAgcHJpb3JpdHk6IDUwMFxuICAgIH07XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nQ3NwXG4gICAqXG4gICAqIEByZXN0cmljdCBBXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQW5ndWxhciBoYXMgc29tZSBmZWF0dXJlcyB0aGF0IGNhbiBjb25mbGljdCB3aXRoIGNlcnRhaW4gcmVzdHJpY3Rpb25zIHRoYXQgYXJlIGFwcGxpZWQgd2hlbiB1c2luZ1xuICAgKiBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgcnVsZXMuXG4gICAqXG4gICAqIElmIHlvdSBpbnRlbmQgdG8gaW1wbGVtZW50IENTUCB3aXRoIHRoZXNlIHJ1bGVzIHRoZW4geW91IG11c3QgdGVsbCBBbmd1bGFyIG5vdCB0byB1c2UgdGhlc2VcbiAgICogZmVhdHVyZXMuXG4gICAqXG4gICAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMgb3IgVW5pdmVyc2FsIFdpbmRvd3MgQXBwcy5cbiAgICpcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBkZWZhdWx0IHJ1bGVzIGluIENTUCBhZmZlY3QgQW5ndWxhcjpcbiAgICpcbiAgICogKiBUaGUgdXNlIG9mIGBldmFsKClgLCBgRnVuY3Rpb24oc3RyaW5nKWAgYW5kIHNpbWlsYXIgZnVuY3Rpb25zIHRvIGR5bmFtaWNhbGx5IGNyZWF0ZSBhbmQgZXhlY3V0ZVxuICAgKiBjb2RlIGZyb20gc3RyaW5ncyBpcyBmb3JiaWRkZW4uIEFuZ3VsYXIgbWFrZXMgdXNlIG9mIHRoaXMgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UgdG9cbiAgICogcHJvdmlkZSBhIDMwJSBpbmNyZWFzZSBpbiB0aGUgc3BlZWQgb2YgZXZhbHVhdGluZyBBbmd1bGFyIGV4cHJlc3Npb25zLiAoVGhpcyBDU1AgcnVsZSBjYW4gYmVcbiAgICogZGlzYWJsZWQgd2l0aCB0aGUgQ1NQIGtleXdvcmQgYHVuc2FmZS1ldmFsYCwgYnV0IGl0IGlzIGdlbmVyYWxseSBub3QgcmVjb21tZW5kZWQgYXMgaXQgd291bGRcbiAgICogd2Vha2VuIHRoZSBwcm90ZWN0aW9ucyBvZmZlcmVkIGJ5IENTUC4pXG4gICAqXG4gICAqICogVGhlIHVzZSBvZiBpbmxpbmUgcmVzb3VyY2VzLCBzdWNoIGFzIGlubGluZSBgPHNjcmlwdD5gIGFuZCBgPHN0eWxlPmAgZWxlbWVudHMsIGFyZSBmb3JiaWRkZW4uXG4gICAqIFRoaXMgcHJldmVudHMgYXBwcyBmcm9tIGluamVjdGluZyBjdXN0b20gc3R5bGVzIGRpcmVjdGx5IGludG8gdGhlIGRvY3VtZW50LiBBbmd1bGFyIG1ha2VzIHVzZSBvZlxuICAgKiB0aGlzIHRvIGluY2x1ZGUgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nQ2xvYWt9IGFuZCB7QGxpbmsgbmdIaWRlfSkuIFRvIG1ha2UgdGhlc2VcbiAgICogZGlyZWN0aXZlcyB3b3JrIHdoZW4gYSBDU1AgcnVsZSBpcyBibG9ja2luZyBpbmxpbmUgc3R5bGVzLCB5b3UgbXVzdCBsaW5rIHRvIHRoZSBgYW5ndWxhci1jc3AuY3NzYFxuICAgKiBpbiB5b3VyIEhUTUwgbWFudWFsbHkuIChUaGlzIENTUCBydWxlIGNhbiBiZSBkaXNhYmxlZCB3aXRoIHRoZSBDU1Aga2V5d29yZCBgdW5zYWZlLWlubGluZWAsIGJ1dFxuICAgKiBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkIHdlYWtlbiB0aGUgcHJvdGVjdGlvbnMgb2ZmZXJlZCBieSBDU1AuKVxuICAgKlxuICAgKiBJZiB5b3UgZG8gbm90IHByb3ZpZGUgYG5nQ3NwYCB0aGVuIEFuZ3VsYXIgdHJpZXMgdG8gYXV0b2RldGVjdCBpZiBDU1AgaXMgYmxvY2tpbmcgZHluYW1pYyBjb2RlXG4gICAqIGNyZWF0aW9uIGZyb20gc3RyaW5ncyAoZS5nLiwgYHVuc2FmZS1ldmFsYCBub3Qgc3BlY2lmaWVkIGluIENTUCBoZWFkZXIpIGFuZCBhdXRvbWF0aWNhbGx5XG4gICAqIGRlYWN0aXZhdGVzIHRoaXMgZmVhdHVyZSBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZS4gVGhpcyBhdXRvZGV0ZWN0aW9uLCBob3dldmVyLCB0cmlnZ2VycyBhXG4gICAqIENTUCBlcnJvciB0byBiZSBsb2dnZWQgaW4gdGhlIGNvbnNvbGU6XG4gICAqXG4gICAqIGBgYFxuICAgKiBSZWZ1c2VkIHRvIGV2YWx1YXRlIGEgc3RyaW5nIGFzIEphdmFTY3JpcHQgYmVjYXVzZSAndW5zYWZlLWV2YWwnIGlzIG5vdCBhbiBhbGxvd2VkIHNvdXJjZSBvZlxuICAgKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICAgKiAnc2NyaXB0LXNyYycgd2FzIG5vdCBleHBsaWNpdGx5IHNldCwgc28gJ2RlZmF1bHQtc3JjJyBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGlzIGVycm9yIGlzIGhhcm1sZXNzIGJ1dCBhbm5veWluZy4gVG8gcHJldmVudCB0aGUgZXJyb3IgZnJvbSBzaG93aW5nIHVwLCBwdXQgdGhlIGBuZ0NzcGBcbiAgICogZGlyZWN0aXZlIG9uIGFuIGVsZW1lbnQgb2YgdGhlIEhUTUwgZG9jdW1lbnQgdGhhdCBhcHBlYXJzIGJlZm9yZSB0aGUgYDxzY3JpcHQ+YCB0YWcgdGhhdCBsb2Fkc1xuICAgKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gICAqXG4gICAqICpOb3RlOiBUaGlzIGRpcmVjdGl2ZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUgYG5nLWNzcGAgYW5kIGBkYXRhLW5nLWNzcGAgYXR0cmlidXRlIGZvcm0uKlxuICAgKlxuICAgKiBZb3UgY2FuIHNwZWNpZnkgd2hpY2ggb2YgdGhlIENTUCByZWxhdGVkIEFuZ3VsYXIgZmVhdHVyZXMgc2hvdWxkIGJlIGRlYWN0aXZhdGVkIGJ5IHByb3ZpZGluZ1xuICAgKiBhIHZhbHVlIGZvciB0aGUgYG5nLWNzcGAgYXR0cmlidXRlLiBUaGUgb3B0aW9ucyBhcmUgYXMgZm9sbG93czpcbiAgICpcbiAgICogKiBuby1pbmxpbmUtc3R5bGU6IHRoaXMgc3RvcHMgQW5ndWxhciBmcm9tIGluamVjdGluZyBDU1Mgc3R5bGVzIGludG8gdGhlIERPTVxuICAgKlxuICAgKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWl6aW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAgICpcbiAgICogWW91IGNhbiB1c2UgdGhlc2UgdmFsdWVzIGluIHRoZSBmb2xsb3dpbmcgY29tYmluYXRpb25zOlxuICAgKlxuICAgKlxuICAgKiAqIE5vIGRlY2xhcmF0aW9uIG1lYW5zIHRoYXQgQW5ndWxhciB3aWxsIGFzc3VtZSB0aGF0IHlvdSBjYW4gZG8gaW5saW5lIHN0eWxlcywgYnV0IGl0IHdpbGwgZG9cbiAgICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91c1xuICAgKiB2ZXJzaW9ucyBvZiBBbmd1bGFyLlxuICAgKlxuICAgKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICAgKiBzdHlsZXMgYW5kIHVuc2FmZSBldmFsLiBFLmcuIGA8Ym9keSBuZy1jc3A+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91c1xuICAgKiB2ZXJzaW9ucyBvZiBBbmd1bGFyLlxuICAgKlxuICAgKiAqIFNwZWNpZnlpbmcgb25seSBgbm8tdW5zYWZlLWV2YWxgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCB1c2UgZXZhbCwgYnV0IHRoYXQgd2UgY2FuXG4gICAqIGluamVjdCBpbmxpbmUgc3R5bGVzLiBFLmcuIGA8Ym9keSBuZy1jc3A9XCJuby11bnNhZmUtZXZhbFwiPmAuXG4gICAqXG4gICAqICogU3BlY2lmeWluZyBvbmx5IGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3Qgc3R5bGVzLCBidXQgdGhhdCB3ZSBjYW5cbiAgICogcnVuIGV2YWwgLSBubyBhdXRvbWF0aWMgY2hlY2sgZm9yIHVuc2FmZSBldmFsIHdpbGwgb2NjdXIuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZVwiPmBcbiAgICpcbiAgICogKiBTcGVjaWZ5aW5nIGJvdGggYG5vLXVuc2FmZS1ldmFsYCBhbmQgYG5vLWlubGluZS1zdHlsZWAgdGVsbHMgQW5ndWxhciB0aGF0IHdlIG11c3Qgbm90IGluamVjdFxuICAgKiBzdHlsZXMgbm9yIHVzZSBldmFsLCB3aGljaCBpcyB0aGUgc2FtZSBhcyBhbiBlbXB0eTogbmctY3NwLlxuICAgKiBFLmcuYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZTtuby11bnNhZmUtZXZhbFwiPmBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICAgIGBgYGh0bWxcbiAgICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAgIC4uLlxuICAgICAgIC4uLlxuICAgICAgIDwvaHRtbD5cbiAgICAgYGBgXG4gICAgKiBAZXhhbXBsZVxuICAgICAgICA8IS0tIE5vdGU6IHRoZSBgLmNzcGAgc3VmZml4IGluIHRoZSBleGFtcGxlIG5hbWUgdHJpZ2dlcnMgQ1NQIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyISAtLT5cbiAgICAgICAgPGV4YW1wbGUgbmFtZT1cImV4YW1wbGUuY3NwXCIgbW9kdWxlPVwiY3NwRXhhbXBsZVwiIG5nLWNzcD1cInRydWVcIj5cbiAgICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgY3RybFwiPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmluYygpXCIgaWQ9XCJpbmNcIj5JbmNyZW1lbnQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBpZD1cImNvdW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgIHt7Y3RybC5jb3VudGVyfX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICBcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5ldmlsKClcIiBpZD1cImV2aWxcIj5FdmlsPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJldmlsRXJyb3JcIj5cbiAgICAgICAgICAgICAgICAgIHt7Y3RybC5ldmlsRXJyb3J9fVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjc3BFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgICB0aGlzLmluYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB0aGlzLmV2aWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBldmFsKCcxKzInKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICA8L2ZpbGU+XG4gICAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcbiAgXG4gICAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpO1xuICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgICAgdmFyIGV2aWxCdG4gPSBlbGVtZW50KGJ5LmlkKCdldmlsJykpO1xuICAgICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTtcbiAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ0VudHJ5LmxldmVsLnZhbHVlID4gd2ViZHJpdmVyLmxvZ2dpbmcuTGV2ZWwuV0FSTklORy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCk7XG4gICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgZnVuY3Rpb24gZXhwZWN0Tm9FcnJvcnMoKSB7XG4gICAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkTG9nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdEVycm9yKHJlZ2V4KSB7XG4gICAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkTG9nLmZvckVhY2goZnVuY3Rpb24obG9nKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGFuIGVycm9yIHRoYXQgbWF0Y2hlcyAnICsgcmVnZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbiAgICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgnc2VsZW5pdW0td2ViZHJpdmVyJyk7XG4gICAgICAgICAgICB9KTtcbiAgXG4gICAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLFxuICAgICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAgIC8vIGFuZCBGaXJlZm94IHdlYmRyaXZlciBhbHdheXMgZGlzYWJsZXMgY29udGVudCBzZWN1cml0eSBwb2xpY3kgKCM2MzU4KVxuICAgICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIGNsZWFyIGVycm9ycyBzbyB3ZSBhcmUgbm90IGRlcGVuZGVudCBvbiBwcmV2aW91cyB0ZXN0c1xuICAgICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAgIC8vIHdlIGNvbWUgaGVyZVxuICAgICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICAgIGluY0J0bi5jbGljaygpO1xuICAgICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGV2aWxCdG4uY2xpY2soKTtcbiAgICAgICAgICAgICAgZXhwZWN0KGV2aWxFcnJvci5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgPC9maWxlPlxuICAgICAgICA8L2V4YW1wbGU+XG4gICAgKi9cblxuICAvLyBgbmdDc3BgIGlzIG5vdCBpbXBsZW1lbnRlZCBhcyBhIHByb3BlciBkaXJlY3RpdmUgYW55IG1vcmUsIGJlY2F1c2Ugd2UgbmVlZCBpdCBiZSBwcm9jZXNzZWQgd2hpbGVcbiAgLy8gd2UgYm9vdHN0cmFwIHRoZSBhcHAgKGJlZm9yZSBgJHBhcnNlYCBpcyBpbnN0YW50aWF0ZWQpLiBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGF2ZSB0aGUgYGNzcCgpYFxuICAvLyBmbiB0aGF0IGxvb2tzIGZvciB0aGUgYG5nLWNzcGAgYXR0cmlidXRlIGFueXdoZXJlIGluIHRoZSBjdXJyZW50IGRvYy5cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0NsaWNrXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuXG4gICAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwcmlvcml0eSAwXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsaWNrXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgICBJbmNyZW1lbnRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMScpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAvKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgZGlyZWN0aXZlcyB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gZXZlbnQgaGFuZGxlcnMgdGhhdCBhcmUgZGVmaW5lZCBhc1xuICAgKiBhbmd1bGFyIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAgICovXG4gIHZhciBuZ0V2ZW50RGlyZWN0aXZlcyA9IHt9O1xuXG4gIC8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb25cbiAgLy8gd2UgbmVlZCB0byBleGVjdXRlIHRoZWlyIGV2ZW50IGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5IHVzaW5nICRldmFsQXN5bmMsXG4gIC8vIHNvIHRoYXQgdGhleSBhcmUgbm90IGV4ZWN1dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS5cbiAgdmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7XG4gICAgJ2JsdXInOiB0cnVlLFxuICAgICdmb2N1cyc6IHRydWVcbiAgfTtcbiAgZm9yRWFjaCgnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZScuc3BsaXQoJyAnKSwgZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgZXZlbnROYW1lKTtcbiAgICBuZ0V2ZW50RGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKCRlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgLy8gTk9URTpcbiAgICAgICAgICAvLyBXZSBleHBvc2UgdGhlIHBvd2VyZnVsIGAkZXZlbnRgIG9iamVjdCBvbiB0aGUgc2NvcGUgdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIFdpbmRvdyxcbiAgICAgICAgICAvLyBldGMuIFRoaXMgaXMgT0ssIGJlY2F1c2UgZXhwcmVzc2lvbnMgYXJlIG5vdCBzYW5kYm94ZWQgYW55IG1vcmUgKGFuZCB0aGUgZXhwcmVzc2lvblxuICAgICAgICAgIC8vIHNhbmRib3ggd2FzIG5ldmVyIG1lYW50IHRvIGJlIGEgc2VjdXJpdHkgZmVhdHVyZSBhbnl3YXkpLlxuICAgICAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdFdmVudEhhbmRsZXIoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQub24oZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHsgJGV2ZW50OiBldmVudCB9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGZvcmNlQXN5bmNFdmVudHNbZXZlbnROYW1lXSAmJiAkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0RibGNsaWNrXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGEgZGJsY2xpY2sgZXZlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICAgKiBhIGRibGNsaWNrLiAoVGhlIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1kYmxjbGlja1wiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgICAgSW5jcmVtZW50IChvbiBkb3VibGUgY2xpY2spXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTW91c2Vkb3duXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHByaW9yaXR5IDBcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIG1vdXNlZG93bi4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZWRvd25cIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8YnV0dG9uIG5nLW1vdXNlZG93bj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTW91c2V1cFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwcmlvcml0eSAwXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAgICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZXVwXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICAgIEluY3JlbWVudCAob24gbW91c2UgdXApXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTW91c2VvdmVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAgICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlb3ZlclwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01vdXNlZW50ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZW50ZXIgZXZlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VlbnRlclwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxidXR0b24gbmctbW91c2VlbnRlcj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01vdXNlbGVhdmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VsZWF2ZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxidXR0b24gbmctbW91c2VsZWF2ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01vdXNlbW92ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vtb3ZlIGV2ZW50LlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHByaW9yaXR5IDBcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbW92ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZW1vdmVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8YnV0dG9uIG5nLW1vdXNlbW92ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nS2V5ZG93blxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwcmlvcml0eSAwXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAgICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleWRvd25cIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmcta2V5ZG93bj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0tleXVwXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXl1cCBldmVudC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwcmlvcml0eSAwXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIGtleXVwLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmcta2V5dXBcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgICAgPGlucHV0IG5nLWtleXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPiBrZXkgdXAgY291bnQ6IHt7Y291bnR9fVxuICBcbiAgICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgICA8aW5wdXQgbmcta2V5dXA9XCJldmVudD0kZXZlbnRcIj5cbiAgICAgICAgIDxwPmV2ZW50IGtleUNvZGU6IHt7IGV2ZW50LmtleUNvZGUgfX08L3A+XG4gICAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdLZXlwcmVzc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5cHJlc3MgZXZlbnQuXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5cHJlc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICAgKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAgICogYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleXByZXNzXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBrZXkgcHJlc3MgY291bnQ6IHt7Y291bnR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1N1Ym1pdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHkgaXQgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uICh3aGljaCBmb3IgZm9ybSBtZWFucyBzZW5kaW5nIHRoZSByZXF1ZXN0IHRvIHRoZVxuICAgKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAgICogYGRhdGEtYWN0aW9uYCwgb3IgYHgtYWN0aW9uYCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKldhcm5pbmc6KiogQmUgY2FyZWZ1bCBub3QgdG8gY2F1c2UgXCJkb3VibGUtc3VibWlzc2lvblwiIGJ5IHVzaW5nIGJvdGggdGhlIGBuZ0NsaWNrYCBhbmRcbiAgICogYG5nU3VibWl0YCBoYW5kbGVycyB0b2dldGhlci4gU2VlIHRoZVxuICAgKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICAgKiBmb3IgYSBkZXRhaWxlZCBkaXNjdXNzaW9uIG9mIHdoZW4gYG5nU3VibWl0YCBtYXkgYmUgdHJpZ2dlcmVkLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQGVsZW1lbnQgZm9ybVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gICAqICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzdWJtaXRFeGFtcGxlXCIgbmFtZT1cIm5nLXN1Ym1pdFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107XG4gICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8Zm9ybSBuZy1zdWJtaXQ9XCJzdWJtaXQoKVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIEVudGVyIHRleHQgYW5kIGhpdCBlbnRlcjpcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInRleHRcIiBuYW1lPVwidGV4dFwiIC8+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdFwiIHZhbHVlPVwiU3VibWl0XCIgLz5cbiAgICAgICAgICA8cHJlPmxpc3Q9e3tsaXN0fX08L3ByZT5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpO1xuICAgICAgICAgfSk7XG4gICAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nRm9jdXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGZvY3VzIGV2ZW50LlxuICAgKlxuICAgKiBOb3RlOiBBcyB0aGUgYGZvY3VzYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gY2FsbGluZyBgaW5wdXQuZm9jdXMoKWBcbiAgICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAgICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gICAqXG4gICAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAgICogQHByaW9yaXR5IDBcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0ZvY3VzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAgICogZm9jdXMuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nQmx1clxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC5cbiAgICpcbiAgICogQSBbYmx1ciBldmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL2JsdXIpIGZpcmVzIHdoZW5cbiAgICogYW4gZWxlbWVudCBoYXMgbG9zdCBmb2N1cy5cbiAgICpcbiAgICogTm90ZTogQXMgdGhlIGBibHVyYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IGFsc28gZHVyaW5nIERPTSBtYW5pcHVsYXRpb25zXG4gICAqIChlLmcuIHJlbW92aW5nIGEgZm9jdXNzZWQgaW5wdXQpLFxuICAgKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICAgKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAgICpcbiAgICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nQ29weVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY29weSBldmVudC5cbiAgICpcbiAgICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gICAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctY29weVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICAgIGNvcGllZDoge3tjb3BpZWR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0N1dFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY3V0IGV2ZW50LlxuICAgKlxuICAgKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gICAqIEBwcmlvcml0eSAwXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDdXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICAgKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctY3V0XCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IG5nLWN1dD1cImN1dD10cnVlXCIgbmctaW5pdD1cImN1dD1mYWxzZTsgdmFsdWU9J2N1dCBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICAgIGN1dDoge3tjdXR9fVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1Bhc3RlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC5cbiAgICpcbiAgICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICAgKiBAcHJpb3JpdHkgMFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICAgKiBwYXN0ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1wYXN0ZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxpbnB1dCBuZy1wYXN0ZT1cInBhc3RlPXRydWVcIiBuZy1pbml0PVwicGFzdGU9ZmFsc2VcIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+XG4gICAgICAgIHBhc3RlZDoge3twYXN0ZX19XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nSWZcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQG11bHRpRWxlbWVudFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhblxuICAgKiB7ZXhwcmVzc2lvbn0uIElmIHRoZSBleHByZXNzaW9uIGFzc2lnbmVkIHRvIGBuZ0lmYCBldmFsdWF0ZXMgdG8gYSBmYWxzZVxuICAgKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGVcbiAgICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXG4gICAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxuICAgKiBjYXNlIHdoZW4gdGhpcyBkaWZmZXJlbmNlIGlzIHNpZ25pZmljYW50IGlzIHdoZW4gdXNpbmcgY3NzIHNlbGVjdG9ycyB0aGF0IHJlbHkgb24gYW4gZWxlbWVudCdzXG4gICAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgd2hlbiBhbiBlbGVtZW50IGlzIHJlbW92ZWQgdXNpbmcgYG5nSWZgIGl0cyBzY29wZSBpcyBkZXN0cm95ZWQgYW5kIGEgbmV3IHNjb3BlXG4gICAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbVxuICAgKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nXG4gICAqIFtwcm90b3R5cGFsIGluaGVyaXRhbmNlXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMjamF2YXNjcmlwdC1wcm90b3R5cGFsLWluaGVyaXRhbmNlKS5cbiAgICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvXG4gICAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGVcbiAgICogdmFyaWFibGUgd2l0aGluIHRoZSBjaGlsZCBzY29wZSB3aWxsIG92ZXJyaWRlIChoaWRlKSB0aGUgdmFsdWUgaW4gdGhlIHBhcmVudCBzY29wZS5cbiAgICpcbiAgICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yXG4gICAqIGlzIGlmIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgaXMgZGlyZWN0bHkgbW9kaWZpZWQgYWZ0ZXIgaXQncyBjb21waWxlZCwgdXNpbmcgc29tZXRoaW5nIGxpa2VcbiAgICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcbiAgICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYFxuICAgKiBhbmQgYGxlYXZlYCBlZmZlY3RzLlxuICAgKlxuICAgKiBAYW5pbWF0aW9uc1xuICAgKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGp1c3QgYWZ0ZXIgdGhlIGBuZ0lmYCBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIGBuZ0lmYCBjb250YWluZXIgfFxuICAgKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gIHwganVzdCBiZWZvcmUgdGhlIGBuZ0lmYCBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00gfFxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHNjb3BlXG4gICAqIEBwcmlvcml0eSA2MDBcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuXG4gICAqICAgICB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSB0cmVlLiBJZiBpdCBpcyB0cnV0aHkgYSBjb3B5IG9mIHRoZSBjb21waWxlZFxuICAgKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWlmXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBuZy1pbml0PVwiY2hlY2tlZD10cnVlXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgICA8c3BhbiBuZy1pZj1cImNoZWNrZWRcIiBjbGFzcz1cImFuaW1hdGUtaWZcIj5cbiAgICAgICAgICBUaGlzIGlzIHJlbW92ZWQgd2hlbiB0aGUgY2hlY2tib3ggaXMgdW5jaGVja2VkLlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLFxuICAgICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICAgIG9wYWNpdHk6MTtcbiAgICAgICAgfVxuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uICgkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgICAgcHJpb3JpdHk6IDYwMCxcbiAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICQkdGxiOiB0cnVlLFxuICAgICAgbGluazogZnVuY3Rpb24gbGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrLCBjaGlsZFNjb3BlLCBwcmV2aW91c0VsZW1lbnRzO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gKGNsb25lLCBuZXdTY29wZSkge1xuICAgICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQoJ2VuZCBuZ0lmJywgJGF0dHIubmdJZik7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jayA9IHtcbiAgICAgICAgICAgICAgICAgIGNsb25lOiBjbG9uZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsICRlbGVtZW50LnBhcmVudCgpLCAkZWxlbWVudCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50cykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzLnJlbW92ZSgpO1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShwcmV2aW91c0VsZW1lbnRzKS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdJbmNsdWRlXG4gICAqIEByZXN0cmljdCBFQ0FcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZldGNoZXMsIGNvbXBpbGVzIGFuZCBpbmNsdWRlcyBhbiBleHRlcm5hbCBIVE1MIGZyYWdtZW50LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAgICogYXBwbGljYXRpb24gZG9jdW1lbnQuIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gaXQuIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBwcm90b2NvbHNcbiAgICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICAgKiB7QGxpbmsgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgd3JhcCB0aGVtfSBhcyB0cnVzdGVkIHZhbHVlcy4gUmVmZXIgdG8gQW5ndWxhcidzIHtAbGlua1xuICAgKiBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nfS5cbiAgICpcbiAgICogSW4gYWRkaXRpb24sIHRoZSBicm93c2VyJ3NcbiAgICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAgICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICAgKiBwb2xpY3kgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZC5cbiAgICogRm9yIGV4YW1wbGUsIGBuZ0luY2x1ZGVgIHdvbid0IHdvcmsgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBvbiBhbGwgYnJvd3NlcnMgYW5kIGZvciBgZmlsZTovL2BcbiAgICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gICAqXG4gICAqIEBhbmltYXRpb25zXG4gICAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBuZXcgaW5jbHVkZSB8XG4gICAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBvbGQgaW5jbHVkZSB8XG4gICAqXG4gICAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cbiAgICpcbiAgICogQHNjb3BlXG4gICAqIEBwcmlvcml0eSA0MDBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nSW5jbHVkZXxzcmMgYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gVVJMLiBJZiB0aGUgc291cmNlIGlzIGEgc3RyaW5nIGNvbnN0YW50LFxuICAgKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluICoqc2luZ2xlKiogcXVvdGVzLCBlLmcuIGBzcmM9XCInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCdcImAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAgICogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAgICAgICAgICAgICAgICAgICoqTm90ZToqKiBXaGVuIHVzaW5nIG9ubG9hZCBvbiBTVkcgZWxlbWVudHMgaW4gSUUxMSwgdGhlIGJyb3dzZXIgd2lsbCB0cnkgdG8gY2FsbFxuICAgKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gICAqICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBpcyB1bmRlZmluZWRcIiBlcnJvci4gVG8gZml4IHRoaXMsIHlvdSBjYW4gaW5zdGVhZCB1c2UgYGRhdGEtb25sb2FkYCBvciBhXG4gICAqICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IGZvcm0gdGhhdCB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI25vcm1hbGl6YXRpb24gbWF0Y2hlc30gYG9ubG9hZGAuXG4gICAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIFdoZXRoZXIgYG5nSW5jbHVkZWAgc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxcbiAgICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAgICpcbiAgICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuXG4gICAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICAgKiAgICAgICAgICAgICAgICAgIC0gT3RoZXJ3aXNlIGVuYWJsZSBzY3JvbGxpbmcgb25seSBpZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1dGh5IHZhbHVlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cImluY2x1ZGVFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWluY2x1ZGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJ0ZW1wbGF0ZVwiIG5nLW9wdGlvbnM9XCJ0Lm5hbWUgZm9yIHQgaW4gdGVtcGxhdGVzXCI+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPihibGFuayk8L29wdGlvbj5cbiAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgdXJsIG9mIHRoZSB0ZW1wbGF0ZTogPGNvZGU+e3t0ZW1wbGF0ZS51cmx9fTwvY29kZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGVcIiBuZy1pbmNsdWRlPVwidGVtcGxhdGUudXJsXCI+PC9kaXY+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9XG4gICAgICAgICAgICAgIFt7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sXG4gICAgICAgICAgICAgICB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ31dO1xuICAgICAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcbiAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMS5odG1sXCI+XG4gICAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTIuaHRtbFwiPlxuICAgICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgICAgaGVpZ2h0OjQwcHg7XG4gICAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuc2xpZGUtYW5pbWF0ZSB7XG4gICAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgICB9XG4gIFxuICAgICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgXG4gICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgdG9wOjA7XG4gICAgICAgICAgbGVmdDowO1xuICAgICAgICAgIHJpZ2h0OjA7XG4gICAgICAgICAgYm90dG9tOjA7XG4gICAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgICB0b3A6LTUwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgICB0b3A6MDtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICAgIHRvcDowO1xuICAgICAgICB9XG4gICAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgICAgdG9wOjUwcHg7XG4gICAgICAgIH1cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICAgIHZhciBpbmNsdWRlRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCdbbmctaW5jbHVkZV0nKSk7XG4gIFxuICAgICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMS5odG1sLyk7XG4gICAgICAgIH0pO1xuICBcbiAgICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICAgIH0pO1xuICBcbiAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5pc1ByZXNlbnQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkXG4gICAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWRcbiAgICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nSW5jbHVkZSBzY29wZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZWxvYWRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudEVycm9yXG4gICAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRW1pdHRlZCB3aGVuIGEgdGVtcGxhdGUgSFRUUCByZXF1ZXN0IHlpZWxkcyBhbiBlcnJvbmVvdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICAgKi9cbiAgdmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlUmVxdWVzdCcsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJywgZnVuY3Rpb24gKCR0ZW1wbGF0ZVJlcXVlc3QsICRhbmNob3JTY3JvbGwsICRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiA0MDAsXG4gICAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmMsXG4gICAgICAgICAgICBvbmxvYWRFeHAgPSBhdHRyLm9ubG9hZCB8fCAnJyxcbiAgICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRyLmF1dG9zY3JvbGw7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLFxuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICAgICAgdmFyIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQgPSBmdW5jdGlvbiBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCkge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2goc3JjRXhwLCBmdW5jdGlvbiBuZ0luY2x1ZGVXYXRjaEFjdGlvbihzcmMpIHtcbiAgICAgICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UgJiYgaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc3JjLCB0cnVlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgICBjdHJsLnRlbXBsYXRlID0gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy1pbmNsdWRlIHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgdXNpbmcgbmctaW5jbHVkZSBvbiBhbiBlbGVtZW50IHdpdGggYWRkaXRpb25hbCBjb250ZW50IGRvZXMgbm90IG1ha2Ugc2Vuc2UuLi5cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0aXZlcyB0byBub24gZXhpc3RpbmcgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS5kb25lKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudExvYWRlZCcsIHNyYyk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikge1xuICAgICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgY2FsbGVkIGR1cmluZyB0aGUgJHRyYW5zY2x1ZGUgY2FsbCBvZiB0aGUgZmlyc3QgYG5nSW5jbHVkZWAgZGlyZWN0aXZlLlxuICAvLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLlxuICAvLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4gIC8vIHRoZSBsaW5rIGZ1bmN0aW9uIG9mIGFub3RoZXIgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgbmdJbmNsdWRlXG4gIC8vIGlzIGNhbGxlZC5cbiAgdmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uICgkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VDQScsXG4gICAgICBwcmlvcml0eTogLTQwMCxcbiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLFxuICAgICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICh0b1N0cmluZy5jYWxsKCRlbGVtZW50WzBdKS5tYXRjaCgvU1ZHLykpIHtcbiAgICAgICAgICAvLyBXZWJLaXQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzU2OTggLS0tIFNWRyBlbGVtZW50cyBkbyBub3RcbiAgICAgICAgICAvLyBzdXBwb3J0IGlubmVySFRNTCwgc28gZGV0ZWN0IHRoaXMgaGVyZSBhbmQgdHJ5IHRvIGdlbmVyYXRlIHRoZSBjb250ZW50c1xuICAgICAgICAgIC8vIHNwZWNpYWxseS5cbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRjb21waWxlKGpxTGl0ZUJ1aWxkRnJhZ21lbnQoY3RybC50ZW1wbGF0ZSwgd2luZG93LmRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSwgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHsgZnV0dXJlUGFyZW50RWxlbWVudDogJGVsZW1lbnQgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuaHRtbChjdHJsLnRlbXBsYXRlKTtcbiAgICAgICAgJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nSW5pdFxuICAgKiBAcmVzdHJpY3QgQUNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZVxuICAgKiBjdXJyZW50IHNjb3BlLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhYnVzZWQgdG8gYWRkIHVubmVjZXNzYXJ5IGFtb3VudHMgb2YgbG9naWMgaW50byB5b3VyIHRlbXBsYXRlcy5cbiAgICogVGhlcmUgYXJlIG9ubHkgYSBmZXcgYXBwcm9wcmlhdGUgdXNlcyBvZiBgbmdJbml0YCwgc3VjaCBhcyBmb3IgYWxpYXNpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzIG9mXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3c7IGFuZCBmb3IgaW5qZWN0aW5nIGRhdGEgdmlhXG4gICAqIHNlcnZlciBzaWRlIHNjcmlwdGluZy4gQmVzaWRlcyB0aGVzZSBmZXcgY2FzZXMsIHlvdSBzaG91bGQgdXNlIHtAbGluayBndWlkZS9jb250cm9sbGVyIGNvbnRyb2xsZXJzfVxuICAgKiByYXRoZXIgdGhhbiBgbmdJbml0YCB0byBpbml0aWFsaXplIHZhbHVlcyBvbiBhIHNjb3BlLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlKio6IElmIHlvdSBoYXZlIGFzc2lnbm1lbnQgaW4gYG5nSW5pdGAgYWxvbmcgd2l0aCBhIHtAbGluayBuZy4kZmlsdGVyIGBmaWx0ZXJgfSwgbWFrZVxuICAgKiBzdXJlIHlvdSBoYXZlIHBhcmVudGhlc2VzIHRvIGVuc3VyZSBjb3JyZWN0IG9wZXJhdG9yIHByZWNlZGVuY2U6XG4gICAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxuICAgKiBgPGRpdiBuZy1pbml0PVwidGVzdDEgPSAoJGluZGV4IHwgdG9TdHJpbmcpXCI+PC9kaXY+YFxuICAgKiA8L3ByZT5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwcmlvcml0eSA0NTBcbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCIgbmFtZT1cIm5nLWluaXRcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbml0RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgIDxkaXYgbmctcmVwZWF0PVwiaW5uZXJMaXN0IGluIGxpc3RcIiBuZy1pbml0PVwib3V0ZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJ2YWx1ZSBpbiBpbm5lckxpc3RcIiBuZy1pbml0PVwiaW5uZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAxIF0gPSBkOycpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICB2YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICAgIHByaW9yaXR5OiA0NTAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24gcHJlKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ0xpc3RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHRcbiAgICogZGVsaW1pdGVyIGlzIGEgY29tbWEgZm9sbG93ZWQgYnkgYSBzcGFjZSAtIGVxdWl2YWxlbnQgdG8gYG5nLWxpc3Q9XCIsIFwiYC4gWW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tXG4gICAqIGRlbGltaXRlciBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZ0xpc3RgIGF0dHJpYnV0ZSAtIGZvciBleGFtcGxlLCBgbmctbGlzdD1cIiB8IFwiYC5cbiAgICpcbiAgICogVGhlIGJlaGF2aW91ciBvZiB0aGUgZGlyZWN0aXZlIGlzIGFmZmVjdGVkIGJ5IHRoZSB1c2Ugb2YgdGhlIGBuZ1RyaW1gIGF0dHJpYnV0ZS5cbiAgICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYFwiZmFsc2VcImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2hcbiAgICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvclxuICAgKiAgIGRlYWxpbmcgd2l0aCB3aGl0ZXNwYWNlIGJ1dCBhbHNvIGFsbG93cyB5b3UgdG8gdXNlIHdoaXRlc3BhY2UgYXMgYSBkZWxpbWl0ZXIsIHN1Y2ggYXMgYVxuICAgKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci5cbiAgICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWRcbiAgICogICB3aGVuIGpvaW5pbmcgdGhlIGxpc3QgaXRlbXMgYmFjayB0b2dldGhlcikgYW5kIHdoaXRlc3BhY2UgYXJvdW5kIGVhY2ggbGlzdCBpdGVtIGlzIHN0cmlwcGVkXG4gICAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAgICpcbiAgICogIyMjIEV4YW1wbGUgd2l0aCBWYWxpZGF0aW9uXG4gICAqXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlXCIgbW9kdWxlPVwibGlzdEV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pXG4gICAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ21vcnBoZXVzJywgJ25lbycsICd0cmluaXR5J107XG4gICAqICAgICAgICB9XSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICA8bGFiZWw+TGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+PC9sYWJlbD5cbiAgICogICAgICA8c3BhbiByb2xlPVwiYWxlcnRcIj5cbiAgICogICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAqICAgICAgPC9zcGFuPlxuICAgKiAgICAgIDxicj5cbiAgICogICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+XG4gICAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvciA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAqICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICogICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAqICAgICA8L2Zvcm0+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTtcbiAgICogICAgIHZhciBuYW1lcyA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCduYW1lcycpKTtcbiAgICogICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpO1xuICAgKiAgICAgdmFyIGVycm9yID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZXJyb3InKSk7XG4gICAqXG4gICAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCdbXCJtb3JwaGV1c1wiLFwibmVvXCIsXCJ0cmluaXR5XCJdJyk7XG4gICAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkudG9CZSgnbm9uZScpO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICogICAgICAgbGlzdElucHV0LmNsZWFyKCk7XG4gICAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnJyk7XG4gICAqXG4gICAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLm5vdC50b0JlKCdub25lJyk7XG4gICAqICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICpcbiAgICogIyMjIEV4YW1wbGUgLSBzcGxpdHRpbmcgb24gbmV3bGluZVxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZS1uZXdsaW5lc1wiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImxpc3RcIiBuZy1saXN0PVwiJiMxMDtcIiBuZy10cmltPVwiZmFsc2VcIj48L3RleHRhcmVhPlxuICAgKiAgICA8cHJlPnt7IGxpc3QgfCBqc29uIH19PC9wcmU+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICogICAgIGl0KFwic2hvdWxkIHNwbGl0IHRoZSB0ZXh0IGJ5IG5ld2xpbmVzXCIsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTtcbiAgICogICAgICAgdmFyIG91dHB1dCA9IGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCB8IGpzb24nKSk7XG4gICAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnYWJjXFxuZGVmXFxuZ2hpJyk7XG4gICAqICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcXG4gIFwiYWJjXCIsXFxuICBcImRlZlwiLFxcbiAgXCJnaGlcIlxcbl0nKTtcbiAgICogICAgIH0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKlxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuXG4gICAqL1xuICB2YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24gbmdMaXN0RGlyZWN0aXZlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICAgICAgdmFyIG5nTGlzdCA9IGF0dHIubmdMaXN0IHx8ICcsICc7XG4gICAgICAgIHZhciB0cmltVmFsdWVzID0gYXR0ci5uZ1RyaW0gIT09ICdmYWxzZSc7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSB0cmltVmFsdWVzID8gdHJpbShuZ0xpc3QpIDogbmdMaXN0O1xuXG4gICAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYFxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xuXG4gICAgICAgICAgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgZm9yRWFjaCh2aWV3VmFsdWUuc3BsaXQoc2VwYXJhdG9yKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7XG4gICAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAgICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLyogZ2xvYmFsIFZBTElEX0NMQVNTOiB0cnVlLFxuICAgIElOVkFMSURfQ0xBU1M6IHRydWUsXG4gICAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsXG4gICAgRElSVFlfQ0xBU1M6IHRydWUsXG4gICAgVU5UT1VDSEVEX0NMQVNTOiB0cnVlLFxuICAgIFRPVUNIRURfQ0xBU1M6IHRydWUsXG4gICAgUEVORElOR19DTEFTUzogdHJ1ZSxcbiAgICBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZSxcbiAgICBzZXR1cFZhbGlkaXR5OiB0cnVlLFxuICAgIGRlZmF1bHRNb2RlbE9wdGlvbnM6IGZhbHNlXG4gICovXG5cbiAgdmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJyxcbiAgICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsXG4gICAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXG4gICAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eScsXG4gICAgICBVTlRPVUNIRURfQ0xBU1MgPSAnbmctdW50b3VjaGVkJyxcbiAgICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCcsXG4gICAgICBFTVBUWV9DTEFTUyA9ICduZy1lbXB0eScsXG4gICAgICBOT1RfRU1QVFlfQ0xBU1MgPSAnbmctbm90LWVtcHR5JztcblxuICB2YXIgbmdNb2RlbE1pbkVyciA9IG1pbkVycignbmdNb2RlbCcpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgdHlwZVxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7Kn0gJHZpZXdWYWx1ZSBUaGUgYWN0dWFsIHZhbHVlIGZyb20gdGhlIGNvbnRyb2wncyB2aWV3LiBGb3IgYGlucHV0YCBlbGVtZW50cywgdGhpcyBpcyBhXG4gICAqIFN0cmluZy4gU2VlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWV9IGZvciBpbmZvcm1hdGlvbiBhYm91dCB3aGVuIHRoZSAkdmlld1ZhbHVlXG4gICAqIGlzIHNldC5cbiAgICpcbiAgICogQHByb3BlcnR5IHsqfSAkbW9kZWxWYWx1ZSBUaGUgdmFsdWUgaW4gdGhlIG1vZGVsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHBhcnNlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXG4gICAqICB0aGUgY29udHJvbCB1cGRhdGVzIHRoZSBuZ01vZGVsQ29udHJvbGxlciB3aXRoIGEgbmV3IHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbiAgICAgIGAkdmlld1ZhbHVlYH0gZnJvbSB0aGUgRE9NLCB1c3VhbGx5IHZpYSB1c2VyIGlucHV0LlxuICAgICAgU2VlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWUgYCRzZXRWaWV3VmFsdWUoKWB9IGZvciBhIGRldGFpbGVkIGxpZmVjeWNsZSBleHBsYW5hdGlvbi5cbiAgICAgIE5vdGUgdGhhdCB0aGUgYCRwYXJzZXJzYCBhcmUgbm90IGNhbGxlZCB3aGVuIHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gY2hhbmdlcyBwcm9ncmFtbWF0aWNhbGx5LlxuICBcbiAgICBUaGUgZnVuY3Rpb25zIGFyZSBjYWxsZWQgaW4gYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZ1xuICAgICAgaXRzIHJldHVybiB2YWx1ZSB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cbiAgXG4gICAgUGFyc2VycyBhcmUgdXNlZCB0byBzYW5pdGl6ZSAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbiAgICAgIGAkdmlld1ZhbHVlYH0uXG4gIFxuICAgIFJldHVybmluZyBgdW5kZWZpbmVkYCBmcm9tIGEgcGFyc2VyIG1lYW5zIGEgcGFyc2UgZXJyb3Igb2NjdXJyZWQuIEluIHRoYXQgY2FzZSxcbiAgICAgIG5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG4gICAgICB3aWxsIGJlIHNldCB0byBgdW5kZWZpbmVkYCB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfVxuICAgICAgaXMgc2V0IHRvIGB0cnVlYC4gVGhlIHBhcnNlIGVycm9yIGlzIHN0b3JlZCBpbiBgbmdNb2RlbC4kZXJyb3IucGFyc2VgLlxuICBcbiAgICBUaGlzIHNpbXBsZSBleGFtcGxlIHNob3dzIGEgcGFyc2VyIHRoYXQgd291bGQgY29udmVydCB0ZXh0IGlucHV0IHZhbHVlIHRvIGxvd2VyY2FzZTpcbiAgICogYGBganNcbiAgICogZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgICogICBpZiAodmFsdWUpIHtcbiAgICogICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBuZ01vZGVsQ29udHJvbGxlci4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcbiAgICogYGBgXG4gIFxuICAgKlxuICAgKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgICAgdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiBjaGFuZ2VzIHByb2dyYW1tYXRpY2FsbHkuIFRoZSBgJGZvcm1hdHRlcnNgIGFyZSBub3QgY2FsbGVkIHdoZW4gdGhlXG4gICAgICB2YWx1ZSBvZiB0aGUgY29udHJvbCBpcyBjaGFuZ2VkIGJ5IHVzZXIgaW50ZXJhY3Rpb24uXG4gIFxuICAgIEZvcm1hdHRlcnMgYXJlIHVzZWQgdG8gZm9ybWF0IC8gY29udmVydCB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJG1vZGVsVmFsdWVcbiAgICAgIGAkbW9kZWxWYWx1ZWB9IGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sLlxuICBcbiAgICBUaGUgZnVuY3Rpb25zIGFyZSBjYWxsZWQgaW4gcmV2ZXJzZSBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nIHRoZSB2YWx1ZSB0aHJvdWdoIHRvIHRoZVxuICAgICAgbmV4dC4gVGhlIGxhc3QgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgdGhlIGFjdHVhbCBET00gdmFsdWUuXG4gIFxuICAgIFRoaXMgc2ltcGxlIGV4YW1wbGUgc2hvd3MgYSBmb3JtYXR0ZXIgdGhhdCB3b3VsZCBjb252ZXJ0IHRoZSBtb2RlbCB2YWx1ZSB0byB1cHBlcmNhc2U6XG4gIFxuICAgKiBgYGBqc1xuICAgKiBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICogICBpZiAodmFsdWUpIHtcbiAgICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZFxuICAgKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGVcbiAgICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpc1xuICAgKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nXG4gICAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi5cbiAgICpcbiAgICogYGBganNcbiAgICogbmdNb2RlbC4kdmFsaWRhdG9ycy52YWxpZENoYXJhY3RlcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiZcbiAgICogICAgICAgICAgL1thLXpdKy8udGVzdCh2YWx1ZSkgJiZcbiAgICogICAgICAgICAgL1tBLVpdKy8udGVzdCh2YWx1ZSkgJiZcbiAgICogICAgICAgICAgL1xcVysvLnRlc3QodmFsdWUpO1xuICAgKiB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkYXN5bmNWYWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0aW9ucyB0aGF0IGFyZSBleHBlY3RlZCB0b1xuICAgKiAgICAgIHBlcmZvcm0gYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRpb24gKGUuZy4gYSBIVFRQIHJlcXVlc3QpLiBUaGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gICAqICAgICAgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGl0IGlzIHJ1biBkdXJpbmcgdGhlIG1vZGVsIHZhbGlkYXRpb24gcHJvY2Vzcy4gT25jZSB0aGUgcHJvbWlzZVxuICAgKiAgICAgIGlzIGRlbGl2ZXJlZCB0aGVuIHRoZSB2YWxpZGF0aW9uIHN0YXR1cyB3aWxsIGJlIHNldCB0byB0cnVlIHdoZW4gZnVsZmlsbGVkIGFuZCBmYWxzZSB3aGVuIHJlamVjdGVkLlxuICAgKiAgICAgIFdoZW4gdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFyZSB0cmlnZ2VyZWQsIGVhY2ggb2YgdGhlIHZhbGlkYXRvcnMgd2lsbCBydW4gaW4gcGFyYWxsZWwgYW5kIHRoZSBtb2RlbFxuICAgKiAgICAgIHZhbHVlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIHZhbGlkYXRvcnMgaGF2ZSBiZWVuIGZ1bGZpbGxlZC4gQXMgbG9uZyBhcyBhbiBhc3luY2hyb25vdXMgdmFsaWRhdG9yXG4gICAqICAgICAgaXMgdW5mdWxmaWxsZWQsIGl0cyBrZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlcnMgYCRwZW5kaW5nYCBwcm9wZXJ0eS4gQWxzbywgYWxsIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzXG4gICAqICAgICAgd2lsbCBvbmx5IHJ1biBvbmNlIGFsbCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGhhdmUgcGFzc2VkLlxuICAgKlxuICAgKiBQbGVhc2Ugbm90ZSB0aGF0IGlmICRodHRwIGlzIHVzZWQgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgc2VydmVyIHJldHVybnMgYSBzdWNjZXNzIEhUVFAgcmVzcG9uc2UgY29kZVxuICAgKiBpbiBvcmRlciB0byBmdWxmaWxsIHRoZSB2YWxpZGF0aW9uIGFuZCBhIHN0YXR1cyBsZXZlbCBvZiBgNHh4YCBpbiBvcmRlciB0byByZWplY3QgdGhlIHZhbGlkYXRpb24uXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy51bmlxdWVVc2VybmFtZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgKlxuICAgKiAgIC8vIExvb2t1cCB1c2VyIGJ5IHVzZXJuYW1lXG4gICAqICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdmFsdWUpLlxuICAgKiAgICAgIHRoZW4oZnVuY3Rpb24gcmVzb2x2ZWQoKSB7XG4gICAqICAgICAgICAvL3VzZXJuYW1lIGV4aXN0cywgdGhpcyBtZWFucyB2YWxpZGF0aW9uIGZhaWxzXG4gICAqICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdleGlzdHMnKTtcbiAgICogICAgICB9LCBmdW5jdGlvbiByZWplY3RlZCgpIHtcbiAgICogICAgICAgIC8vdXNlcm5hbWUgZG9lcyBub3QgZXhpc3QsIHRoZXJlZm9yZSB0aGlzIHZhbGlkYXRpb24gcGFzc2VzXG4gICAqICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICogICAgICB9KTtcbiAgICogfTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlXG4gICAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuXG4gICAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZmFpbGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBwZW5kaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAgICpcbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9ICRuYW1lIFRoZSBuYW1lIGF0dHJpYnV0ZSBvZiB0aGUgY29udHJvbC5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBkaXJlY3RpdmUuXG4gICAqIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZ1xuICAgKiBhbmQgcGFyc2luZy4gSXQgcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvclxuICAgKiBsaXN0ZW5pbmcgdG8gRE9NIGV2ZW50cy5cbiAgICogU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZlxuICAgKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcgdG8gY29udHJvbCBlbGVtZW50cy5cbiAgICogQW5ndWxhciBwcm92aWRlcyB0aGlzIERPTSBsb2dpYyBmb3IgbW9zdCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gZWxlbWVudHMuXG4gICAqIEF0IHRoZSBlbmQgb2YgdGhpcyBwYWdlIHlvdSBjYW4gZmluZCBhIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyI2N1c3RvbS1jb250cm9sLWV4YW1wbGVcbiAgICogY3VzdG9tIGNvbnRyb2wgZXhhbXBsZX0gdGhhdCB1c2VzIGBuZ01vZGVsQ29udHJvbGxlcmAgdG8gYmluZCB0byBgY29udGVudGVkaXRhYmxlYCBlbGVtZW50cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZVxuICAgKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYClcbiAgICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuXG4gICAqXG4gICAqIGBjb250ZW50ZWRpdGFibGVgIGlzIGFuIEhUTUw1IGF0dHJpYnV0ZSwgd2hpY2ggdGVsbHMgdGhlIGJyb3dzZXIgdG8gbGV0IHRoZSBlbGVtZW50XG4gICAqIGNvbnRlbnRzIGJlIGVkaXRlZCBpbiBwbGFjZSBieSB0aGUgdXNlci5cbiAgICpcbiAgICogV2UgYXJlIHVzaW5nIHRoZSB7QGxpbmsgbmcuc2VydmljZTokc2NlICRzY2V9IHNlcnZpY2UgaGVyZSBhbmQgaW5jbHVkZSB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfVxuICAgKiBtb2R1bGUgdG8gYXV0b21hdGljYWxseSByZW1vdmUgXCJiYWRcIiBjb250ZW50IGxpa2UgaW5saW5lIGV2ZW50IGxpc3RlbmVyIChlLmcuIGA8c3BhbiBvbmNsaWNrPVwiLi4uXCI+YCkuXG4gICAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrc1xuICAgKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwiTmdNb2RlbENvbnRyb2xsZXJcIiBtb2R1bGU9XCJjdXN0b21Db250cm9sXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgW2NvbnRlbnRlZGl0YWJsZV0ge1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5uZy1pbnZhbGlkIHtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XG4gICAgICAgIH1cbiAgXG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXN0b21Db250cm9sJywgWyduZ1Nhbml0aXplJ10pLlxuICAgICAgICAgIGRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyXG4gICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICAgIGlmICghbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG4gIFxuICAgICAgICAgICAgICAgIC8vIFNwZWNpZnkgaG93IFVJIHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpKTtcbiAgICAgICAgICAgICAgICB9O1xuICBcbiAgICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZSBldmVudHMgdG8gZW5hYmxlIGJpbmRpbmdcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyIGtleXVwIGNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhyZWFkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemVcbiAgXG4gICAgICAgICAgICAgICAgLy8gV3JpdGUgZGF0YSB0byB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgY2xlYXIgdGhlIGNvbnRlbnQgZWRpdGFibGUgdGhlIGJyb3dzZXIgbGVhdmVzIGEgPGJyPiBiZWhpbmRcbiAgICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0XG4gICAgICAgICAgICAgICAgICBpZiAoYXR0cnMuc3RyaXBCciAmJiBodG1sID09PSAnPGJyPicpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICA8ZGl2IGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgICAgc3RyaXAtYnI9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgcmVxdWlyZWQ+Q2hhbmdlIG1lITwvZGl2PlxuICAgICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgPGhyPlxuICAgICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIiBhcmlhLWxhYmVsPVwiRHluYW1pYyB0ZXh0YXJlYVwiPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ3NhZmFyaScgfHwgYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gU2FmYXJpRHJpdmVyIGNhbid0IGhhbmRsZSBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSAnQ2hhbmdlIG1lISc7XG4gIFxuICAgICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcbiAgXG4gICAgICAgIGNvbnRlbnRFZGl0YWJsZS5jbGVhcigpO1xuICAgICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUuZ2V0VGV4dCgpKS50b0VxdWFsKCcnKTtcbiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTtcbiAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqXG4gICAqL1xuICBOZ01vZGVsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcScsICckaW50ZXJwb2xhdGUnXTtcbiAgZnVuY3Rpb24gTmdNb2RlbENvbnRyb2xsZXIoJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UsICRhbmltYXRlLCAkdGltZW91dCwgJHEsICRpbnRlcnBvbGF0ZSkge1xuICAgIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47XG4gICAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47XG4gICAgdGhpcy4kJHJhd01vZGVsVmFsdWUgPSB1bmRlZmluZWQ7IC8vIHN0b3JlcyB0aGUgcGFyc2VkIG1vZGVsVmFsdWUgLyBtb2RlbCBzZXQgZnJvbSBzY29wZSByZWdhcmRsZXNzIG9mIHZhbGlkaXR5LlxuICAgIHRoaXMuJHZhbGlkYXRvcnMgPSB7fTtcbiAgICB0aGlzLiRhc3luY1ZhbGlkYXRvcnMgPSB7fTtcbiAgICB0aGlzLiRwYXJzZXJzID0gW107XG4gICAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xuICAgIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLiR1bnRvdWNoZWQgPSB0cnVlO1xuICAgIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gICAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gICAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICAgIHRoaXMuJGVycm9yID0ge307IC8vIGtlZXAgaW52YWxpZCBrZXlzIGhlcmVcbiAgICB0aGlzLiQkc3VjY2VzcyA9IHt9OyAvLyBrZWVwIHZhbGlkIGtleXMgaGVyZVxuICAgIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7IC8vIGtlZXAgcGVuZGluZyBrZXlzIGhlcmVcbiAgICB0aGlzLiRuYW1lID0gJGludGVycG9sYXRlKCRhdHRyLm5hbWUgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuICAgIHRoaXMuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuICAgIHRoaXMuJG9wdGlvbnMgPSBkZWZhdWx0TW9kZWxPcHRpb25zO1xuXG4gICAgdGhpcy4kJHBhcnNlZE5nTW9kZWwgPSAkcGFyc2UoJGF0dHIubmdNb2RlbCk7XG4gICAgdGhpcy4kJHBhcnNlZE5nTW9kZWxBc3NpZ24gPSB0aGlzLiQkcGFyc2VkTmdNb2RlbC5hc3NpZ247XG4gICAgdGhpcy4kJG5nTW9kZWxHZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbDtcbiAgICB0aGlzLiQkbmdNb2RlbFNldCA9IHRoaXMuJCRwYXJzZWROZ01vZGVsQXNzaWduO1xuICAgIHRoaXMuJCRwZW5kaW5nRGVib3VuY2UgPSBudWxsO1xuICAgIHRoaXMuJCRwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkID0gMDtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE1ODMzXG4gICAgLy8gUHJldmVudCBgJCRzY29wZWAgZnJvbSBiZWluZyBpdGVyYXRlZCBvdmVyIGJ5IGBjb3B5YCB3aGVuIE5nTW9kZWxDb250cm9sbGVyIGlzIGRlZXAgd2F0Y2hlZFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnJCRzY29wZScsIHsgdmFsdWU6ICRzY29wZSB9KTtcbiAgICB0aGlzLiQkYXR0ciA9ICRhdHRyO1xuICAgIHRoaXMuJCRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kJGFuaW1hdGUgPSAkYW5pbWF0ZTtcbiAgICB0aGlzLiQkdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIHRoaXMuJCRwYXJzZSA9ICRwYXJzZTtcbiAgICB0aGlzLiQkcSA9ICRxO1xuICAgIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyID0gJGV4Y2VwdGlvbkhhbmRsZXI7XG5cbiAgICBzZXR1cFZhbGlkaXR5KHRoaXMpO1xuICAgIHNldHVwTW9kZWxXYXRjaGVyKHRoaXMpO1xuICB9XG5cbiAgTmdNb2RlbENvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICQkaW5pdEdldHRlclNldHRlcnM6IGZ1bmN0aW9uICQkaW5pdEdldHRlclNldHRlcnMoKSB7XG4gICAgICBpZiAodGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2dldHRlclNldHRlcicpKSB7XG4gICAgICAgIHZhciBpbnZva2VNb2RlbEdldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygpJyksXG4gICAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICAgIHRoaXMuJCRuZ01vZGVsR2V0ID0gZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdGhpcy4kJHBhcnNlZE5nTW9kZWwoJHNjb3BlKTtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkge1xuICAgICAgICAgICAgbW9kZWxWYWx1ZSA9IGludm9rZU1vZGVsR2V0dGVyKCRzY29wZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLiQkbmdNb2RlbFNldCA9IGZ1bmN0aW9uICgkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy4kJHBhcnNlZE5nTW9kZWwoJHNjb3BlKSkpIHtcbiAgICAgICAgICAgIGludm9rZU1vZGVsU2V0dGVyKCRzY29wZSwgeyAkJCRwOiBuZXdWYWx1ZSB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kJHBhcnNlZE5nTW9kZWxBc3NpZ24oJHNjb3BlLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmICghdGhpcy4kJHBhcnNlZE5nTW9kZWwuYXNzaWduKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9JywgdGhpcy4kJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcodGhpcy4kJGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICAgKiBkaXJlY3RpdmUgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgICpcbiAgICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgICAqXG4gICAgICogKiBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIGlzIGNhbGxlZC4gIElmIHdlIGFyZSByb2xsaW5nIGJhY2sgdGhlIHZpZXcgdmFsdWUgdG8gdGhlIGxhc3RcbiAgICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAgICogKiBUaGUgdmFsdWUgcmVmZXJlbmNlZCBieSBgbmctbW9kZWxgIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgYm90aCB0aGUgYCRtb2RlbFZhbHVlYCBhbmRcbiAgICAgKiAgIHRoZSBgJHZpZXdWYWx1ZWAgYXJlIGRpZmZlcmVudCBmcm9tIGxhc3QgdGltZS5cbiAgICAgKlxuICAgICAqIFNpbmNlIGBuZy1tb2RlbGAgZG9lcyBub3QgZG8gYSBkZWVwIHdhdGNoLCBgJHJlbmRlcigpYCBpcyBvbmx5IGludm9rZWQgaWYgdGhlIHZhbHVlcyBvZlxuICAgICAqIGAkbW9kZWxWYWx1ZWAgYW5kIGAkdmlld1ZhbHVlYCBhcmUgYWN0dWFsbHkgZGlmZmVyZW50IGZyb20gdGhlaXIgcHJldmlvdXMgdmFsdWVzLiBJZiBgJG1vZGVsVmFsdWVgXG4gICAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICAgKiBpbnZva2VkIGlmIHlvdSBvbmx5IGNoYW5nZSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3RzLlxuICAgICAqL1xuICAgICRyZW5kZXI6IG5vb3AsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAgICpcbiAgICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBgJGlzRW1wdHlgIGZ1bmN0aW9uIGNoZWNrcyB3aGV0aGVyIHRoZSB2YWx1ZSBpcyBgdW5kZWZpbmVkYCwgYCcnYCwgYG51bGxgIG9yIGBOYU5gLlxuICAgICAqXG4gICAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAgICogZGVmYXVsdC4gVGhlIGBjaGVja2JveElucHV0VHlwZWAgZGlyZWN0aXZlIGRvZXMgdGhpcyBiZWNhdXNlIGluIGl0cyBjYXNlIGEgdmFsdWUgb2YgYGZhbHNlYFxuICAgICAqIGltcGxpZXMgZW1wdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgdG8gY2hlY2sgZm9yIGVtcHRpbmVzcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIFwiZW1wdHlcIi5cbiAgICAgKi9cbiAgICAkaXNFbXB0eTogZnVuY3Rpb24gJGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgJCR1cGRhdGVFbXB0eUNsYXNzZXM6IGZ1bmN0aW9uICQkdXBkYXRlRW1wdHlDbGFzc2VzKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIE5PVF9FTVBUWV9DTEFTUyk7XG4gICAgICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBFTVBUWV9DTEFTUyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgRU1QVFlfQ0xBU1MpO1xuICAgICAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgTk9UX0VNUFRZX0NMQVNTKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAgICogc3RhdGUgKGBuZy1wcmlzdGluZWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJpc3RpbmUgd2hlbiB0aGUgY29udHJvbFxuICAgICAqIGhhcyBub3QgYmVlbiBjaGFuZ2VkIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICAgKi9cbiAgICAkc2V0UHJpc3RpbmU6IGZ1bmN0aW9uICRzZXRQcmlzdGluZSgpIHtcbiAgICAgIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldERpcnR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5XG4gICAgICogc3RhdGUgKGBuZy1kaXJ0eWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgZGlydHkgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiBjaGFuZ2VkXG4gICAgICogZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgICAqL1xuICAgICRzZXREaXJ0eTogZnVuY3Rpb24gJHNldERpcnR5KCkge1xuICAgICAgdGhpcy4kZGlydHkgPSB0cnVlO1xuICAgICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICAgKiB1bnRvdWNoZWQgc3RhdGUgKGBuZy11bnRvdWNoZWRgIGNsYXNzKS4gVXBvbiBjb21waWxhdGlvbiwgYSBtb2RlbCBpcyBzZXQgYXMgdW50b3VjaGVkXG4gICAgICogYnkgZGVmYXVsdCwgaG93ZXZlciB0aGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3RvcmUgdGhhdCBzdGF0ZSBpZiB0aGUgbW9kZWwgaGFzXG4gICAgICogYWxyZWFkeSBiZWVuIHRvdWNoZWQgYnkgdGhlIHVzZXIuXG4gICAgICovXG4gICAgJHNldFVudG91Y2hlZDogZnVuY3Rpb24gJHNldFVudG91Y2hlZCgpIHtcbiAgICAgIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFRvdWNoZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHRvdWNoZWQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXVudG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICAgKiB0b3VjaGVkIHN0YXRlIChgbmctdG91Y2hlZGAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhc1xuICAgICAqIGZpcnN0IGZvY3VzZWQgdGhlIGNvbnRyb2wgZWxlbWVudCBhbmQgdGhlbiBzaGlmdGVkIGZvY3VzIGF3YXkgZnJvbSB0aGUgY29udHJvbCAoYmx1ciBldmVudCkuXG4gICAgICovXG4gICAgJHNldFRvdWNoZWQ6IGZ1bmN0aW9uICRzZXRUb3VjaGVkKCkge1xuICAgICAgdGhpcy4kdG91Y2hlZCA9IHRydWU7XG4gICAgICB0aGlzLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnNldENsYXNzKHRoaXMuJCRlbGVtZW50LCBUT1VDSEVEX0NMQVNTLCBVTlRPVUNIRURfQ0xBU1MpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENhbmNlbCBhbiB1cGRhdGUgYW5kIHJlc2V0IHRoZSBpbnB1dCBlbGVtZW50J3MgdmFsdWUgdG8gcHJldmVudCBhbiB1cGRhdGUgdG8gdGhlIGAkbW9kZWxWYWx1ZWAsXG4gICAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIHNvbWVcbiAgICAgKiBmdXR1cmUgZXZlbnQuXG4gICAgICpcbiAgICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgdXBkYXRlcyBvciB1cGRhdGVzIHRoYXRcbiAgICAgKiBkZXBlbmQgb24gc3BlY2lhbCBldmVudHMgc3VjaCBhcyBgYmx1cmAsIHRoZXJlIGNhbiBiZSBhIHBlcmlvZCB3aGVuIHRoZSBgJHZpZXdWYWx1ZWAgaXMgb3V0IG9mXG4gICAgICogc3luYyB3aXRoIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYC5cbiAgICAgKlxuICAgICAqIEluIHRoaXMgY2FzZSwgeW91IGNhbiB1c2UgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCB0byBtYW51YWxseSBjYW5jZWwgdGhlIGRlYm91bmNlZCAvIGZ1dHVyZSB1cGRhdGVcbiAgICAgKiBhbmQgcmVzZXQgdGhlIGlucHV0IHRvIHRoZSBsYXN0IGNvbW1pdHRlZCB2aWV3IHZhbHVlLlxuICAgICAqXG4gICAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0aGF0IHlvdSBydW4gaW50byBkaWZmaWN1bHRpZXMgaWYgeW91IHRyeSB0byB1cGRhdGUgdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgXG4gICAgICogcHJvZ3JhbW1hdGljYWxseSBiZWZvcmUgdGhlc2UgZGVib3VuY2VkL2Z1dHVyZSBldmVudHMgaGF2ZSByZXNvbHZlZC9vY2N1cnJlZCwgYmVjYXVzZSBBbmd1bGFyJ3NcbiAgICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAgICpcbiAgICAgKiBUaGUgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2luZyB0aGUgbW9kZWwgb2YgYW5cbiAgICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICAgKiBpbnB1dCBmaWVsZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG1vZGVsIHZhbHVlIGFuZCBhbnkgcGVuZGluZyBvcGVyYXRpb25zIGFyZSBjYW5jZWxsZWQuXG4gICAgICpcbiAgICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAqICAgICBhbmd1bGFyLm1vZHVsZSgnY2FuY2VsLXVwZGF0ZS1leGFtcGxlJywgW10pXG4gICAgICpcbiAgICAgKiAgICAgLmNvbnRyb2xsZXIoJ0NhbmNlbFVwZGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAqICAgICAgICRzY29wZS5tb2RlbCA9IHt2YWx1ZTE6ICcnLCB2YWx1ZTI6ICcnfTtcbiAgICAgKlxuICAgICAqICAgICAgICRzY29wZS5zZXRFbXB0eSA9IGZ1bmN0aW9uKGUsIHZhbHVlLCByb2xsYmFjaykge1xuICAgICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgKiAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAqICAgICAgICAgICBpZiAocm9sbGJhY2spIHtcbiAgICAgKiAgICAgICAgICAgICAkc2NvcGUubXlGb3JtW3ZhbHVlXS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICAgKiAgICAgICAgICAgfVxuICAgICAqICAgICAgICAgICAkc2NvcGUubW9kZWxbdmFsdWVdID0gJyc7XG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgfTtcbiAgICAgKiAgICAgfV0pO1xuICAgICAqICAgPC9maWxlPlxuICAgICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FuY2VsVXBkYXRlQ29udHJvbGxlclwiPlxuICAgICAqICAgICAgIDxwPkJvdGggb2YgdGhlc2UgaW5wdXRzIGFyZSBvbmx5IHVwZGF0ZWQgaWYgdGhleSBhcmUgYmx1cnJlZC4gSGl0dGluZyBlc2NhcGUgc2hvdWxkXG4gICAgICogICAgICAgZW1wdHkgdGhlbS4gRm9sbG93IHRoZXNlIHN0ZXBzIGFuZCBvYnNlcnZlIHRoZSBkaWZmZXJlbmNlOjwvcD5cbiAgICAgKiAgICAgICA8b2w+XG4gICAgICogICAgICAgICA8bGk+VHlwZSBzb21ldGhpbmcgaW4gdGhlIGlucHV0LiBZb3Ugd2lsbCBzZWUgdGhhdCB0aGUgbW9kZWwgaXMgbm90IHlldCB1cGRhdGVkPC9saT5cbiAgICAgKiAgICAgICAgIDxsaT5QcmVzcyB0aGUgRXNjYXBlIGtleS5cbiAgICAgKiAgICAgICAgICAgPG9sPlxuICAgICAqICAgICAgICAgICAgIDxsaT4gSW4gdGhlIGZpcnN0IGV4YW1wbGUsIG5vdGhpbmcgaGFwcGVucywgYmVjYXVzZSB0aGUgbW9kZWwgaXMgYWxyZWFkeSAnJywgYW5kIG5vXG4gICAgICogICAgICAgICAgICAgdXBkYXRlIGlzIGRldGVjdGVkLiBJZiB5b3UgYmx1ciB0aGUgaW5wdXQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCB2aWV3LlxuICAgICAqICAgICAgICAgICAgIDwvbGk+XG4gICAgICogICAgICAgICAgICAgPGxpPiBJbiB0aGUgc2Vjb25kIGV4YW1wbGUsIHRoZSBwZW5kaW5nIHVwZGF0ZSBpcyBjYW5jZWxsZWQsIGFuZCB0aGUgaW5wdXQgaXMgc2V0IGJhY2tcbiAgICAgKiAgICAgICAgICAgICB0byB0aGUgbGFzdCBjb21taXR0ZWQgdmlldyB2YWx1ZSAoJycpLiBCbHVycmluZyB0aGUgaW5wdXQgZG9lcyBub3RoaW5nLlxuICAgICAqICAgICAgICAgICAgIDwvbGk+XG4gICAgICogICAgICAgICAgIDwvb2w+XG4gICAgICogICAgICAgICA8L2xpPlxuICAgICAqICAgICAgIDwvb2w+XG4gICAgICpcbiAgICAgKiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCI+XG4gICAgICogICAgICAgICA8ZGl2PlxuICAgICAqICAgICAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb24xXCI+V2l0aG91dCAkcm9sbGJhY2tWaWV3VmFsdWUoKTo8L3A+XG4gICAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUxXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24xXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTFcIlxuICAgICAqICAgICAgICAgICAgICAgICAgbmcta2V5ZG93bj1cInNldEVtcHR5KCRldmVudCwgJ3ZhbHVlMScpXCI+XG4gICAgICogICAgICAgICAgIHZhbHVlMTogXCJ7eyBtb2RlbC52YWx1ZTEgfX1cIlxuICAgICAqICAgICAgICAgPC9kaXY+XG4gICAgICpcbiAgICAgKiAgICAgICAgIDxkaXY+XG4gICAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjJcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICAgKiAgICAgICAgICAgPGlucHV0IG5hbWU9XCJ2YWx1ZTJcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvbjJcIiBuZy1tb2RlbD1cIm1vZGVsLnZhbHVlMlwiXG4gICAgICogICAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwic2V0RW1wdHkoJGV2ZW50LCAndmFsdWUyJywgdHJ1ZSlcIj5cbiAgICAgKiAgICAgICAgICAgdmFsdWUyOiBcInt7IG1vZGVsLnZhbHVlMiB9fVwiXG4gICAgICogICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICA8L2Zvcm0+XG4gICAgICogICAgIDwvZGl2PlxuICAgICAqICAgPC9maWxlPlxuICAgICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpdjpudGgtY2hpbGQoMSkge1xuICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqL1xuICAgICRyb2xsYmFja1ZpZXdWYWx1ZTogZnVuY3Rpb24gJHJvbGxiYWNrVmlld1ZhbHVlKCkge1xuICAgICAgdGhpcy4kJHRpbWVvdXQuY2FuY2VsKHRoaXMuJCRwZW5kaW5nRGVib3VuY2UpO1xuICAgICAgdGhpcy4kdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgICB0aGlzLiRyZW5kZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSdW5zIGVhY2ggb2YgdGhlIHJlZ2lzdGVyZWQgdmFsaWRhdG9ycyAoZmlyc3Qgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhbmQgdGhlblxuICAgICAqIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byBpbnZhbGlkLCB0aGUgbW9kZWwgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAsXG4gICAgICogdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0gaXMgYHRydWVgLlxuICAgICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIHZhbGlkLCBpdCB3aWxsIHNldCB0aGUgbW9kZWwgdG8gdGhlIGxhc3QgYXZhaWxhYmxlIHZhbGlkXG4gICAgICogYCRtb2RlbFZhbHVlYCwgaS5lLiBlaXRoZXIgdGhlIGxhc3QgcGFyc2VkIHZhbHVlIG9yIHRoZSBsYXN0IHZhbHVlIHNldCBmcm9tIHRoZSBzY29wZS5cbiAgICAgKi9cbiAgICAkdmFsaWRhdGU6IGZ1bmN0aW9uICR2YWxpZGF0ZSgpIHtcbiAgICAgIC8vIGlnbm9yZSAkdmFsaWRhdGUgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgICBpZiAoaXNOdW1iZXJOYU4odGhpcy4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgICAvLyBOb3RlOiB3ZSB1c2UgdGhlICQkcmF3TW9kZWxWYWx1ZSBhcyAkbW9kZWxWYWx1ZSBtaWdodCBoYXZlIGJlZW5cbiAgICAgIC8vIHNldCB0byB1bmRlZmluZWQgZHVyaW5nIGEgdmlldyAtPiBtb2RlbCB1cGRhdGUgdGhhdCBmb3VuZCB2YWxpZGF0aW9uXG4gICAgICAvLyBlcnJvcnMuIFdlIGNhbid0IHBhcnNlIHRoZSB2aWV3IGhlcmUsIHNpbmNlIHRoYXQgY291bGQgY2hhbmdlXG4gICAgICAvLyB0aGUgbW9kZWwgYWx0aG91Z2ggbmVpdGhlciB2aWV3VmFsdWUgbm9yIHRoZSBtb2RlbCBvbiB0aGUgc2NvcGUgY2hhbmdlZFxuICAgICAgdmFyIG1vZGVsVmFsdWUgPSB0aGlzLiQkcmF3TW9kZWxWYWx1ZTtcblxuICAgICAgdmFyIHByZXZWYWxpZCA9IHRoaXMuJHZhbGlkO1xuICAgICAgdmFyIHByZXZNb2RlbFZhbHVlID0gdGhpcy4kbW9kZWxWYWx1ZTtcblxuICAgICAgdmFyIGFsbG93SW52YWxpZCA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKTtcblxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdGhpcy4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBmdW5jdGlvbiAoYWxsVmFsaWQpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIGNoYW5nZSBpbiB2YWxpZGl0eSwgZG9uJ3QgdXBkYXRlIHRoZSBtb2RlbFxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGNoYW5naW5nIGFuIGludmFsaWQgbW9kZWxWYWx1ZSB0byB1bmRlZmluZWRcbiAgICAgICAgaWYgKCFhbGxvd0ludmFsaWQgJiYgcHJldlZhbGlkICE9PSBhbGxWYWxpZCkge1xuICAgICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIHRoaXMuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgICAvLyBleHRlcm5hbCB2YWxpZGF0b3JzIChlLmcuIGNhbGN1bGF0ZWQgb24gdGhlIHNlcnZlciksXG4gICAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgICB0aGF0LiRtb2RlbFZhbHVlID0gYWxsVmFsaWQgPyBtb2RlbFZhbHVlIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgICAgICB0aGF0LiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAkJHJ1blZhbGlkYXRvcnM6IGZ1bmN0aW9uICQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykge1xuICAgICAgdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICAgIHZhciBsb2NhbFZhbGlkYXRpb25SdW5JZCA9IHRoaXMuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkO1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICAgIGlmICghcHJvY2Vzc1BhcnNlRXJyb3JzKCkpIHtcbiAgICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXByb2Nlc3NTeW5jVmFsaWRhdG9ycygpKSB7XG4gICAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgICBmdW5jdGlvbiBwcm9jZXNzUGFyc2VFcnJvcnMoKSB7XG4gICAgICAgIHZhciBlcnJvcktleSA9IHRoYXQuJCRwYXJzZXJOYW1lIHx8ICdwYXJzZSc7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGF0LiQkcGFyc2VyVmFsaWQpKSB7XG4gICAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdGhhdC4kJHBhcnNlclZhbGlkKSB7XG4gICAgICAgICAgICBmb3JFYWNoKHRoYXQuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uICh2LCBuYW1lKSB7XG4gICAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24gKHYsIG5hbWUpIHtcbiAgICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gU2V0IHRoZSBwYXJzZSBlcnJvciBsYXN0LCB0byBwcmV2ZW50IHVuc2V0dGluZyBpdCwgc2hvdWxkIGEgJHZhbGlkYXRvcnMga2V5ID09IHBhcnNlck5hbWVcbiAgICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgdGhhdC4kJHBhcnNlclZhbGlkKTtcbiAgICAgICAgICByZXR1cm4gdGhhdC4kJHBhcnNlclZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICAgIHZhciBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgZm9yRWFjaCh0aGF0LiR2YWxpZGF0b3JzLCBmdW5jdGlvbiAodmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IEJvb2xlYW4odmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkpO1xuICAgICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7XG4gICAgICAgICAgZm9yRWFjaCh0aGF0LiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uICh2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICAgIHZhciB2YWxpZGF0b3JQcm9taXNlcyA9IFtdO1xuICAgICAgICB2YXIgYWxsVmFsaWQgPSB0cnVlO1xuICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24gKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICAgIHZhciBwcm9taXNlID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc1Byb21pc2VMaWtlKHByb21pc2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub3Byb21pc2UnLCAnRXhwZWN0ZWQgYXN5bmNocm9ub3VzIHZhbGlkYXRvciB0byByZXR1cm4gYSBwcm9taXNlIGJ1dCBnb3QgXFwnezB9XFwnIGluc3RlYWQuJywgcHJvbWlzZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgdmFsaWRhdG9yUHJvbWlzZXMucHVzaChwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYWxsVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgIHZhbGlkYXRpb25Eb25lKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoYXQuJCRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgICAgfSwgbm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCkge1xuICAgICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IHRoYXQuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgICAgdGhhdC4kc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpIHtcbiAgICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSB0aGF0LiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCkge1xuXG4gICAgICAgICAgZG9uZUNhbGxiYWNrKGFsbFZhbGlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICAgKlxuICAgICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICAgKi9cbiAgICAkY29tbWl0Vmlld1ZhbHVlOiBmdW5jdGlvbiAkY29tbWl0Vmlld1ZhbHVlKCkge1xuICAgICAgdmFyIHZpZXdWYWx1ZSA9IHRoaXMuJHZpZXdWYWx1ZTtcblxuICAgICAgdGhpcy4kJHRpbWVvdXQuY2FuY2VsKHRoaXMuJCRwZW5kaW5nRGVib3VuY2UpO1xuXG4gICAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAgIC8vIGEgbmF0aXZlIHZhbGlkYXRvciBvbiB0aGUgZWxlbWVudC4gSW4gdGhpcyBjYXNlIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG1heSBoYXZlIGNoYW5nZWQgZXZlbiB0aG91Z2hcbiAgICAgIC8vIHRoZSB2aWV3VmFsdWUgaGFzIHN0YXllZCBlbXB0eS5cbiAgICAgIGlmICh0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICF0aGlzLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgICAgdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG5cbiAgICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgICAgaWYgKHRoaXMuJHByaXN0aW5lKSB7XG4gICAgICAgIHRoaXMuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSgpO1xuICAgIH0sXG5cbiAgICAkJHBhcnNlQW5kVmFsaWRhdGU6IGZ1bmN0aW9uICQkcGFyc2VBbmRWYWxpZGF0ZSgpIHtcbiAgICAgIHZhciB2aWV3VmFsdWUgPSB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICB0aGlzLiQkcGFyc2VyVmFsaWQgPSBpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSA/IHVuZGVmaW5lZCA6IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLiQkcGFyc2VyVmFsaWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLiRwYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IHRoaXMuJHBhcnNlcnNbaV0obW9kZWxWYWx1ZSk7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLiQkcGFyc2VyVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzTnVtYmVyTmFOKHRoaXMuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIC8vIHRoaXMuJG1vZGVsVmFsdWUgaGFzIG5vdCBiZWVuIHRvdWNoZWQgeWV0Li4uXG4gICAgICAgIHRoaXMuJG1vZGVsVmFsdWUgPSB0aGlzLiQkbmdNb2RlbEdldCh0aGlzLiQkc2NvcGUpO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZNb2RlbFZhbHVlID0gdGhpcy4kbW9kZWxWYWx1ZTtcbiAgICAgIHZhciBhbGxvd0ludmFsaWQgPSB0aGlzLiRvcHRpb25zLmdldE9wdGlvbignYWxsb3dJbnZhbGlkJyk7XG4gICAgICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICAgIGlmIChhbGxvd0ludmFsaWQpIHtcbiAgICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFBhc3MgdGhlICQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSBoZXJlLCBiZWNhdXNlIHRoZSBjYWNoZWQgdmlld1ZhbHVlIG1pZ2h0IGJlIG91dCBvZiBkYXRlLlxuICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGUuZy4gJHNldFZpZXdWYWx1ZSBpcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBwYXJzZXJcbiAgICAgIHRoaXMuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlLCBmdW5jdGlvbiAoYWxsVmFsaWQpIHtcbiAgICAgICAgaWYgKCFhbGxvd0ludmFsaWQpIHtcbiAgICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayB0aGlzLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgICAgdGhhdC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gd3JpdGVUb01vZGVsSWZOZWVkZWQoKSB7XG4gICAgICAgIGlmICh0aGF0LiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICAgIHRoYXQuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgICQkd3JpdGVNb2RlbFRvU2NvcGU6IGZ1bmN0aW9uICQkd3JpdGVNb2RlbFRvU2NvcGUoKSB7XG4gICAgICB0aGlzLiQkbmdNb2RlbFNldCh0aGlzLiQkc2NvcGUsIHRoaXMuJG1vZGVsVmFsdWUpO1xuICAgICAgZm9yRWFjaCh0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICAgIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGEgY29udHJvbCB3YW50cyB0byBjaGFuZ2UgdGhlIHZpZXcgdmFsdWU7IHR5cGljYWxseSxcbiAgICAgKiB0aGlzIGlzIGRvbmUgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICAgICAqIGRpcmVjdGl2ZSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmQge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICAgICAqIGNhbGxzIGl0IHdoZW4gYW4gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICAgICAqXG4gICAgICogV2hlbiBgJHNldFZpZXdWYWx1ZWAgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgICAqIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gSWYgdGhlcmUgYXJlIG5vIHNwZWNpYWwge0BsaW5rIG5nTW9kZWxPcHRpb25zfSBzcGVjaWZpZWQgdGhlbiB0aGUgc3RhZ2VkXG4gICAgICogdmFsdWUgaXMgc2VudCBkaXJlY3RseSBmb3IgcHJvY2Vzc2luZyB0aHJvdWdoIHRoZSBgJHBhcnNlcnNgIHBpcGVsaW5lLiBBZnRlciB0aGlzLCB0aGUgYCR2YWxpZGF0b3JzYCBhbmRcbiAgICAgKiBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIGNhbGxlZCBhbmQgdGhlIHZhbHVlIGlzIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYC5cbiAgICAgKiBGaW5hbGx5LCB0aGUgdmFsdWUgaXMgc2V0IHRvIHRoZSAqKmV4cHJlc3Npb24qKiBzcGVjaWZpZWQgaW4gdGhlIGBuZy1tb2RlbGAgYXR0cmlidXRlIGFuZFxuICAgICAqIGFsbCB0aGUgcmVnaXN0ZXJlZCBjaGFuZ2UgbGlzdGVuZXJzLCBpbiB0aGUgYCR2aWV3Q2hhbmdlTGlzdGVuZXJzYCBsaXN0IGFyZSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBJbiBjYXNlIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfSBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGB1cGRhdGVPbmBcbiAgICAgKiBhbmQgdGhlIGBkZWZhdWx0YCB0cmlnZ2VyIGlzIG5vdCBsaXN0ZWQsIGFsbCB0aG9zZSBhY3Rpb25zIHdpbGwgcmVtYWluIHBlbmRpbmcgdW50aWwgb25lIG9mIHRoZVxuICAgICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICogQWxsIHRoZXNlIGFjdGlvbnMgd2lsbCBiZSBkZWJvdW5jZWQgaWYgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9XG4gICAgICogZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBhIGN1c3RvbSBkZWJvdW5jZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGV2ZW50LlxuICAgICAqIE5vdGUgdGhhdCBhIGAkZGlnZXN0YCBpcyBvbmx5IHRyaWdnZXJlZCBvbmNlIHRoZSBgdXBkYXRlT25gIGV2ZW50cyBhcmUgZmlyZWQsIG9yIGlmIGBkZWJvdW5jZWBcbiAgICAgKiBpcyBzcGVjaWZpZWQsIG9uY2UgdGhlIHRpbWVyIHJ1bnMgb3V0LlxuICAgICAqXG4gICAgICogV2hlbiB1c2VkIHdpdGggc3RhbmRhcmQgaW5wdXRzLCB0aGUgdmlldyB2YWx1ZSB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZyAod2hpY2ggaXMgaW4gc29tZSBjYXNlc1xuICAgICAqIHBhcnNlZCBpbnRvIGFub3RoZXIgdHlwZSwgc3VjaCBhcyBhIGBEYXRlYCBvYmplY3QgZm9yIGBpbnB1dFtkYXRlXWAuKVxuICAgICAqIEhvd2V2ZXIsIGN1c3RvbSBjb250cm9scyBtaWdodCBhbHNvIHBhc3Mgb2JqZWN0cyB0byB0aGlzIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCB3ZSBzaG91bGQgbWFrZVxuICAgICAqIGEgY29weSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIGAkc2V0Vmlld1ZhbHVlYC4gVGhpcyBpcyBiZWNhdXNlIGBuZ01vZGVsYCBkb2VzIG5vdFxuICAgICAqIHBlcmZvcm0gYSBkZWVwIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2VcbiAgICAgKiB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aGVuIG5nTW9kZWwgd2lsbCBub3QgcmVhbGl6ZSB0aGF0IHRoZSBvYmplY3QgaGFzIGNoYW5nZWQgYW5kXG4gICAgICogd2lsbCBub3QgaW52b2tlIHRoZSBgJHBhcnNlcnNgIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gRm9yIHRoaXMgcmVhc29uLCB5b3Ugc2hvdWxkXG4gICAgICogbm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb3B5IG9uY2UgaXQgaGFzIGJlZW4gcGFzc2VkIHRvIGAkc2V0Vmlld1ZhbHVlYC5cbiAgICAgKiBPdGhlcndpc2UgeW91IG1heSBjYXVzZSB0aGUgbW9kZWwgdmFsdWUgb24gdGhlIHNjb3BlIHRvIGNoYW5nZSBpbmNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAgICogSW4gYW55IGNhc2UsIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhlIG1ldGhvZCBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBvZiB0aGUgY29udHJvbC4gRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgY2FsbGluZyBgJHNldFZpZXdWYWx1ZWAgZm9yIGFuIGlucHV0IGVsZW1lbnQsXG4gICAgICogeW91IHNob3VsZCBwYXNzIHRoZSBpbnB1dCBET00gdmFsdWUuIE90aGVyd2lzZSwgdGhlIGNvbnRyb2wgYW5kIHRoZSBzY29wZSBtb2RlbCBiZWNvbWVcbiAgICAgKiBvdXQgb2Ygc3luYy4gSXQncyBhbHNvIGltcG9ydGFudCB0byBub3RlIHRoYXQgYCRzZXRWaWV3VmFsdWVgIGRvZXMgbm90IGNhbGwgYCRyZW5kZXJgIG9yIGNoYW5nZVxuICAgICAqIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlIGluIGFueSB3YXkuIElmIHdlIHdhbnQgdG8gY2hhbmdlIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlXG4gICAgICogcHJvZ3JhbW1hdGljYWxseSwgd2Ugc2hvdWxkIHVwZGF0ZSB0aGUgYG5nTW9kZWxgIHNjb3BlIGV4cHJlc3Npb24uIEl0cyBuZXcgdmFsdWUgd2lsbCBiZVxuICAgICAqIHBpY2tlZCB1cCBieSB0aGUgbW9kZWwgY29udHJvbGxlciwgd2hpY2ggd2lsbCBydW4gaXQgdGhyb3VnaCB0aGUgYCRmb3JtYXR0ZXJzYCwgYCRyZW5kZXJgIGl0XG4gICAgICogdG8gdXBkYXRlIHRoZSBET00sIGFuZCBmaW5hbGx5IGNhbGwgYCR2YWxpZGF0ZWAgb24gaXQuXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRyaWdnZXIgRXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIHVwZGF0ZS5cbiAgICAgKi9cbiAgICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbiAkc2V0Vmlld1ZhbHVlKHZhbHVlLCB0cmlnZ2VyKSB7XG4gICAgICB0aGlzLiR2aWV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT25EZWZhdWx0JykpIHtcbiAgICAgICAgdGhpcy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KHRyaWdnZXIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAkJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0OiBmdW5jdGlvbiAkJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KHRyaWdnZXIpIHtcbiAgICAgIHZhciBkZWJvdW5jZURlbGF5ID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2RlYm91bmNlJyk7XG5cbiAgICAgIGlmIChpc051bWJlcihkZWJvdW5jZURlbGF5W3RyaWdnZXJdKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VEZWxheVt0cmlnZ2VyXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVsnZGVmYXVsdCddKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VEZWxheVsnZGVmYXVsdCddO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICBpZiAoZGVib3VuY2VEZWxheSA+IDApIHtcbiAgICAgICAgLy8gdGhpcyBmYWlscyBpZiBkZWJvdW5jZURlbGF5IGlzIGFuIG9iamVjdFxuICAgICAgICB0aGlzLiQkcGVuZGluZ0RlYm91bmNlID0gdGhpcy4kJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICB9LCBkZWJvdW5jZURlbGF5KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4kJHNjb3BlLiRyb290LiQkcGhhc2UpIHtcbiAgICAgICAgdGhpcy4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGF0LiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKlxuICAgICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJG92ZXJyaWRlTW9kZWxPcHRpb25zXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlIHRoZSBjdXJyZW50IG1vZGVsIG9wdGlvbnMgc2V0dGluZ3MgcHJvZ3JhbW1hdGljYWxseS5cbiAgICAgKlxuICAgICAqIFRoZSBwcmV2aW91cyBgTW9kZWxPcHRpb25zYCB2YWx1ZSB3aWxsIG5vdCBiZSBtb2RpZmllZC4gSW5zdGVhZCwgYVxuICAgICAqIG5ldyBgTW9kZWxPcHRpb25zYCBvYmplY3Qgd2lsbCBpbmhlcml0IGZyb20gdGhlIHByZXZpb3VzIG9uZSBvdmVycmlkaW5nXG4gICAgICogb3IgaW5oZXJpdGluZyBzZXR0aW5ncyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBnaXZlbiBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rIG5nTW9kZWxPcHRpb25zfSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBvcHRpb25zIGNhbiBiZSBzcGVjaWZpZWRcbiAgICAgKiBhbmQgaG93IG1vZGVsIG9wdGlvbiBpbmhlcml0YW5jZSB3b3Jrcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGEgaGFzaCBvZiBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgcHJldmlvdXMgb3B0aW9uc1xuICAgICAqXG4gICAgICovXG4gICAgJG92ZXJyaWRlTW9kZWxPcHRpb25zOiBmdW5jdGlvbiAkb3ZlcnJpZGVNb2RlbE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgdGhpcy4kb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnMuY3JlYXRlQ2hpbGQob3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldHVwTW9kZWxXYXRjaGVyKGN0cmwpIHtcbiAgICAvLyBtb2RlbCAtPiB2YWx1ZVxuICAgIC8vIE5vdGU6IHdlIGNhbm5vdCB1c2UgYSBub3JtYWwgc2NvcGUuJHdhdGNoIGFzIHdlIHdhbnQgdG8gZGV0ZWN0IHRoZSBmb2xsb3dpbmc6XG4gICAgLy8gMS4gc2NvcGUgdmFsdWUgaXMgJ2EnXG4gICAgLy8gMi4gdXNlciBlbnRlcnMgJ2InXG4gICAgLy8gMy4gbmctY2hhbmdlIGtpY2tzIGluIGFuZCByZXZlcnRzIHNjb3BlIHZhbHVlIHRvICdhJ1xuICAgIC8vICAgIC0+IHNjb3BlIHZhbHVlIGRpZCBub3QgY2hhbmdlIHNpbmNlIHRoZSBsYXN0IGRpZ2VzdCBhc1xuICAgIC8vICAgICAgIG5nLWNoYW5nZSBleGVjdXRlcyBpbiBhcHBseSBwaGFzZVxuICAgIC8vIDQuIHZpZXcgc2hvdWxkIGJlIGNoYW5nZWQgYmFjayB0byAnYSdcbiAgICBjdHJsLiQkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nTW9kZWxXYXRjaChzY29wZSkge1xuICAgICAgdmFyIG1vZGVsVmFsdWUgPSBjdHJsLiQkbmdNb2RlbEdldChzY29wZSk7XG5cbiAgICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgICAgLy8gVE9ETyhwZXJmKTogd2h5IG5vdCBtb3ZlIHRoaXMgdG8gdGhlIGFjdGlvbiBmbj9cbiAgICAgIGlmIChtb2RlbFZhbHVlICE9PSBjdHJsLiRtb2RlbFZhbHVlICYmIChcbiAgICAgIC8vIGNoZWNrcyBmb3IgTmFOIGlzIG5lZWRlZCB0byBhbGxvdyBzZXR0aW5nIHRoZSBtb2RlbCB0byBOYU4gd2hlbiB0aGVyZSdzIGFuIGFzeW5jVmFsaWRhdG9yXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID09PSBjdHJsLiRtb2RlbFZhbHVlIHx8IG1vZGVsVmFsdWUgPT09IG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICAgIGN0cmwuJCRwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgZm9ybWF0dGVycyA9IGN0cmwuJGZvcm1hdHRlcnMsXG4gICAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgICB2YXIgdmlld1ZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgd2hpbGUgKGlkeC0tKSB7XG4gICAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmlld1ZhbHVlKSB7XG4gICAgICAgICAgY3RybC4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgICAgICAgIGN0cmwuJHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgICAgIGN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBtb2RlbCBhbmQgdmlldyB2YWx1ZSBoYXZlIGJlZW4gdXBkYXRlZCBkdXJpbmcgcmVuZGVyXG4gICAgICAgICAgY3RybC4kJHJ1blZhbGlkYXRvcnMoY3RybC4kbW9kZWxWYWx1ZSwgY3RybC4kdmlld1ZhbHVlLCBub29wKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHdpdGhpbiAkcGFyc2Vycy8kZm9ybWF0dGVycyBvciBhIGN1c3RvbSB2YWxpZGF0aW9uIGltcGxlbWVudGF0aW9uLlxuICAgKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzYCBjb2xsZWN0aW9ucyB3aGljaCB3aWxsIGNhbGwgYCRzZXRWYWxpZGl0eWAgYXV0b21hdGljYWxseS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqICAgICAgICB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWBcbiAgICogICAgICAgIChmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgKSwgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cbiAgICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAgICogICAgICAgIGZvciBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmQgYG5nLWludmFsaWQtbXktZXJyb3JgXG4gICAqICAgICAgICBjbGFzc2VzIGFuZCBjYW4gYmUgYm91bmQgdG8gYXMgYHt7IHNvbWVGb3JtLnNvbWVDb250cm9sLiRlcnJvci5teUVycm9yIH19YC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBza2lwcGVkIChudWxsKS4gUGVuZGluZyBpcyB1c2VkIGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2AuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwcGVkIGlzIHVzZWQgYnkgQW5ndWxhciB3aGVuIHZhbGlkYXRvcnMgZG8gbm90IHJ1biBiZWNhdXNlIG9mIHBhcnNlIGVycm9ycyBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICAgKi9cbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICAgIGNsYXp6OiBOZ01vZGVsQ29udHJvbGxlcixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICBvYmplY3RbcHJvcGVydHldID0gdHJ1ZTtcbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbiB1bnNldChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICBkZWxldGUgb2JqZWN0W3Byb3BlcnR5XTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTW9kZWxcbiAgICpcbiAgICogQGVsZW1lbnQgaW5wdXRcbiAgICogQHByaW9yaXR5IDFcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlIGJpbmRzIGFuIGBpbnB1dGAsYHNlbGVjdGAsIGB0ZXh0YXJlYWAgKG9yIGN1c3RvbSBmb3JtIGNvbnRyb2wpIHRvIGFcbiAgICogcHJvcGVydHkgb24gdGhlIHNjb3BlIHVzaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSxcbiAgICogd2hpY2ggaXMgY3JlYXRlZCBhbmQgZXhwb3NlZCBieSB0aGlzIGRpcmVjdGl2ZS5cbiAgICpcbiAgICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjpcbiAgICpcbiAgICogLSBCaW5kaW5nIHRoZSB2aWV3IGludG8gdGhlIG1vZGVsLCB3aGljaCBvdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYGlucHV0YCwgYHRleHRhcmVhYCBvciBgc2VsZWN0YFxuICAgKiAgIHJlcXVpcmUuXG4gICAqIC0gUHJvdmlkaW5nIHZhbGlkYXRpb24gYmVoYXZpb3IgKGkuZS4gcmVxdWlyZWQsIG51bWJlciwgZW1haWwsIHVybCkuXG4gICAqIC0gS2VlcGluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB0b3VjaGVkL3VudG91Y2hlZCwgdmFsaWRhdGlvbiBlcnJvcnMpLlxuICAgKiAtIFNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3NlcyBvbiB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgLCBgbmctdG91Y2hlZGAsXG4gICAqICAgYG5nLXVudG91Y2hlZGAsIGBuZy1lbXB0eWAsIGBuZy1ub3QtZW1wdHlgKSBpbmNsdWRpbmcgYW5pbWF0aW9ucy5cbiAgICogLSBSZWdpc3RlcmluZyB0aGUgY29udHJvbCB3aXRoIGl0cyBwYXJlbnQge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19LlxuICAgKlxuICAgKiBOb3RlOiBgbmdNb2RlbGAgd2lsbCB0cnkgdG8gYmluZCB0byB0aGUgcHJvcGVydHkgZ2l2ZW4gYnkgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbiBvbiB0aGVcbiAgICogY3VycmVudCBzY29wZS4gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiB0aGlzIHNjb3BlLCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAgICogaW1wbGljaXRseSBhbmQgYWRkZWQgdG8gdGhlIHNjb3BlLlxuICAgKlxuICAgKiBGb3IgYmVzdCBwcmFjdGljZXMgb24gdXNpbmcgYG5nTW9kZWxgLCBzZWU6XG4gICAqXG4gICAqICAtIFtVbmRlcnN0YW5kaW5nIFNjb3Blc10oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzKVxuICAgKlxuICAgKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6XG4gICAqXG4gICAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gICAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9XG4gICAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH1cbiAgICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfVxuICAgKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn1cbiAgICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfVxuICAgKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH1cbiAgICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX1cbiAgICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdIGRhdGV0aW1lLWxvY2FsfVxuICAgKiAgICAtIHtAbGluayBpbnB1dFt0aW1lXSB0aW1lfVxuICAgKiAgICAtIHtAbGluayBpbnB1dFttb250aF0gbW9udGh9XG4gICAqICAgIC0ge0BsaW5rIGlucHV0W3dlZWtdIHdlZWt9XG4gICAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAgICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX1cbiAgICpcbiAgICogIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYG5nTW9kZWxgIHdhdGNoZXMgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZSwgbm90IHZhbHVlLiBUaGlzIGlzIGltcG9ydGFudCB0byBrbm93IHdoZW5cbiAgICogYmluZGluZyBpbnB1dHMgdG8gbW9kZWxzIHRoYXQgYXJlIG9iamVjdHMgKGUuZy4gYERhdGVgKSBvciBjb2xsZWN0aW9ucyAoZS5nLiBhcnJheXMpLiBJZiBvbmx5IHByb3BlcnRpZXMgb2YgdGhlXG4gICAqIG9iamVjdCBvciBjb2xsZWN0aW9uIGNoYW5nZSwgYG5nTW9kZWxgIHdpbGwgbm90IGJlIG5vdGlmaWVkIGFuZCBzbyB0aGUgaW5wdXQgd2lsbCBub3QgYmUgIHJlLXJlbmRlcmVkLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBiZSBhc3NpZ25lZCBhbiBlbnRpcmVseSBuZXcgb2JqZWN0IG9yIGNvbGxlY3Rpb24gYmVmb3JlIGEgcmUtcmVuZGVyaW5nIHdpbGwgb2NjdXIuXG4gICAqXG4gICAqIFNvbWUgZGlyZWN0aXZlcyBoYXZlIG9wdGlvbnMgdGhhdCB3aWxsIGNhdXNlIHRoZW0gdG8gdXNlIGEgY3VzdG9tIGAkd2F0Y2hDb2xsZWN0aW9uYCBvbiB0aGUgbW9kZWwgZXhwcmVzc2lvblxuICAgKiAtIGZvciBleGFtcGxlLCBgbmdPcHRpb25zYCB3aWxsIGRvIHNvIHdoZW4gYSBgdHJhY2sgYnlgIGNsYXVzZSBpcyBpbmNsdWRlZCBpbiB0aGUgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uIG9yXG4gICAqIGlmIHRoZSBzZWxlY3QgaXMgZ2l2ZW4gdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICAgKlxuICAgKiBUaGUgYCR3YXRjaENvbGxlY3Rpb24oKWAgbWV0aG9kIG9ubHkgZG9lcyBhIHNoYWxsb3cgY29tcGFyaXNvbiwgbWVhbmluZyB0aGF0IGNoYW5naW5nIHByb3BlcnRpZXMgZGVlcGVyIHRoYW4gdGhlXG4gICAqIGZpcnN0IGxldmVsIG9mIHRoZSBvYmplY3QgKG9yIG9ubHkgY2hhbmdpbmcgdGhlIHByb3BlcnRpZXMgb2YgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBpZiBpdCdzIGFuIGFycmF5KSB3aWxsIHN0aWxsXG4gICAqIG5vdCB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nIG9mIHRoZSBtb2RlbC5cbiAgICpcbiAgICogIyBDU1MgY2xhc3Nlc1xuICAgKiBUaGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZCBvbiB0aGUgYXNzb2NpYXRlZCBpbnB1dC9zZWxlY3QvdGV4dGFyZWEgZWxlbWVudFxuICAgKiBkZXBlbmRpbmcgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBtb2RlbC5cbiAgICpcbiAgICogIC0gYG5nLXZhbGlkYDogdGhlIG1vZGVsIGlzIHZhbGlkXG4gICAqICAtIGBuZy1pbnZhbGlkYDogdGhlIG1vZGVsIGlzIGludmFsaWRcbiAgICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gICAqICAtIGBuZy1pbnZhbGlkLVtrZXldYDogZm9yIGVhY2ggaW52YWxpZCBrZXkgYWRkZWQgYnkgYCRzZXRWYWxpZGl0eWBcbiAgICogIC0gYG5nLXByaXN0aW5lYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gaW50ZXJhY3RlZCB3aXRoIHlldFxuICAgKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAgICogIC0gYG5nLXRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBibHVycmVkXG4gICAqICAtIGBuZy11bnRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBibHVycmVkXG4gICAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAgICogIC0gYG5nLWVtcHR5YDogdGhlIHZpZXcgZG9lcyBub3QgY29udGFpbiBhIHZhbHVlIG9yIHRoZSB2YWx1ZSBpcyBkZWVtZWQgXCJlbXB0eVwiLCBhcyBkZWZpbmVkXG4gICAqICAgICBieSB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHl9IG1ldGhvZFxuICAgKiAgLSBgbmctbm90LWVtcHR5YDogdGhlIHZpZXcgY29udGFpbnMgYSBub24tZW1wdHkgdmFsdWVcbiAgICpcbiAgICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gICAqXG4gICAqICMjIEFuaW1hdGlvbiBIb29rc1xuICAgKlxuICAgKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAgICogb24gdGhlIGlucHV0IGVsZW1lbnQgd2hpY2ggaXMgYXR0YWNoZWQgdG8gdGhlIG1vZGVsLiBUaGVzZSBjbGFzc2VzIGluY2x1ZGU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCxcbiAgICogYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkgb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBtb2RlbCBpdHNlbGYuXG4gICAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kXG4gICAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy5cbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50XG4gICAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gICAqXG4gICAqIDxwcmU+XG4gICAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICAgKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAgICogLm15LWlucHV0IHtcbiAgICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAgICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICogfVxuICAgKiAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAqICAgYmFja2dyb3VuZDogcmVkO1xuICAgKiAgIGNvbG9yOndoaXRlO1xuICAgKiB9XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZXhhbXBsZSBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiIG5hbWU9XCJuZy1tb2RlbFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS52YWwgPSAnMSc7XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxzdHlsZT5cbiAgICAgICAgICAgLm15LWlucHV0IHtcbiAgICAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgfVxuICAgICAgICAgICAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgICAgYmFja2dyb3VuZDogcmVkO1xuICAgICAgICAgICB9XG4gICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgVXBkYXRlIGlucHV0IHRvIHNlZSB0cmFuc2l0aW9ucyB3aGVuIHZhbGlkL2ludmFsaWQuXG4gICAgICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLlxuICAgICAgICAgPC9wPlxuICAgICAgICAgPGZvcm0gbmFtZT1cInRlc3RGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbFwiIG5nLXBhdHRlcm49XCIvXlxcZCskL1wiIG5hbWU9XCJhbmltXCIgY2xhc3M9XCJteS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvblwiIC8+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqICMjIEJpbmRpbmcgdG8gYSBnZXR0ZXIvc2V0dGVyXG4gICAqXG4gICAqIFNvbWV0aW1lcyBpdCdzIGhlbHBmdWwgdG8gYmluZCBgbmdNb2RlbGAgdG8gYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLiAgQSBnZXR0ZXIvc2V0dGVyIGlzIGFcbiAgICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggemVybyBhcmd1bWVudHMsIGFuZCBzZXRzXG4gICAqIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJndW1lbnQuIEl0J3Mgc29tZXRpbWVzIHVzZWZ1bCB0byB1c2UgdGhpc1xuICAgKiBmb3IgbW9kZWxzIHRoYXQgaGF2ZSBhbiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiB0aGF0J3MgZGlmZmVyZW50IGZyb20gd2hhdCB0aGUgbW9kZWwgZXhwb3Nlc1xuICAgKiB0byB0aGUgdmlldy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlXG4gICAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0byBhbiBlbGVtZW50IHRoYXRcbiAgICogaGFzIGBuZy1tb2RlbGAgYXR0YWNoZWQgdG8gaXQuIFlvdSBjYW4gYWxzbyBhZGQgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvXG4gICAqIGEgYDxmb3JtPmAsIHdoaWNoIHdpbGwgZW5hYmxlIHRoaXMgYmVoYXZpb3IgZm9yIGFsbCBgPGlucHV0PmBzIHdpdGhpbiBpdC4gU2VlXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zYH0gZm9yIG1vcmUuXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBuZ01vZGVsYCB3aXRoIGEgZ2V0dGVyL3NldHRlcjpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWwtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5ld05hbWUgY2FuIGJlIHVuZGVmaW5lZCBmb3IgdHdvIHJlYXNvbnM6XG4gICAgICAgICAgICAgICAgLy8gMS4gQmVjYXVzZSBpdCBpcyBjYWxsZWQgYXMgYSBnZXR0ZXIgYW5kIHRodXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgIGlucHV0IGlzIGludmFsaWRcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nTW9kZWxEaXJlY3RpdmUgPSBbJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sXG4gICAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlcixcbiAgICAgIC8vIFByZWxpbmsgbmVlZHMgdG8gcnVuIGJlZm9yZSBhbnkgaW5wdXQgZGlyZWN0aXZlXG4gICAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyXG4gICAgICAvLyBiZWZvcmUgYW55b25lIGVsc2UgdXNlcyBpdC5cbiAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkge1xuICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFVOVE9VQ0hFRF9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ01vZGVsUHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG1vZGVsQ3RybC4kJHBhcmVudEZvcm0sXG4gICAgICAgICAgICAgICAgb3B0aW9uc0N0cmwgPSBjdHJsc1syXTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnNDdHJsKSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kb3B0aW9ucyA9IG9wdGlvbnNDdHJsLiRvcHRpb25zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb2RlbEN0cmwuJCRpbml0R2V0dGVyU2V0dGVycygpO1xuXG4gICAgICAgICAgICAvLyBub3RpZnkgb3RoZXJzLCBlc3BlY2lhbGx5IHBhcmVudCBmb3Jtc1xuICAgICAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTtcblxuICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmFtZScsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKG1vZGVsQ3RybCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChtb2RlbEN0cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb3N0OiBmdW5jdGlvbiBuZ01vZGVsUG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF07XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT24nKSkge1xuICAgICAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3VwZGF0ZU9uJyksIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VG91Y2hlZCgpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJHRvdWNoZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhzZXRUb3VjaGVkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKiBleHBvcnRlZCBkZWZhdWx0TW9kZWxPcHRpb25zICovXG4gIHZhciBkZWZhdWx0TW9kZWxPcHRpb25zO1xuICB2YXIgREVGQVVMVF9SRUdFWFAgPSAvKFxccyt8XilkZWZhdWx0KFxccyt8JCkvO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgdHlwZVxuICAgKiBAbmFtZSBNb2RlbE9wdGlvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgY29udGFpbmVyIGZvciB0aGUgb3B0aW9ucyBzZXQgYnkgdGhlIHtAbGluayBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlXG4gICAqL1xuICBmdW5jdGlvbiBNb2RlbE9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuJCRvcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIE1vZGVsT3B0aW9ucy5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgTW9kZWxPcHRpb25zI2dldE9wdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBvcHRpb24gdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIG9mIHRoZSBvcHRpb25cbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gb3B0aW9uXG4gICAgICovXG4gICAgZ2V0T3B0aW9uOiBmdW5jdGlvbiBnZXRPcHRpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCRvcHRpb25zW25hbWVdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgTW9kZWxPcHRpb25zI2NyZWF0ZUNoaWxkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYSBoYXNoIG9mIG9wdGlvbnMgZm9yIHRoZSBuZXcgY2hpbGQgdGhhdCB3aWxsIG92ZXJyaWRlIHRoZSBwYXJlbnQncyBvcHRpb25zXG4gICAgICogQHJldHVybiB7TW9kZWxPcHRpb25zfSBhIG5ldyBgTW9kZWxPcHRpb25zYCBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24gY3JlYXRlQ2hpbGQob3B0aW9ucykge1xuICAgICAgdmFyIGluaGVyaXRBbGwgPSBmYWxzZTtcblxuICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weVxuICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIEluaGVyaXQgb3B0aW9ucyBmcm9tIHRoZSBwYXJlbnQgaWYgc3BlY2lmaWVkIGJ5IHRoZSB2YWx1ZSBgXCIkaW5oZXJpdFwiYFxuICAgICAgZm9yRWFjaChvcHRpb25zLCAvKiBAdGhpcyAqL2Z1bmN0aW9uIChvcHRpb24sIGtleSkge1xuICAgICAgICBpZiAob3B0aW9uID09PSAnJGluaGVyaXQnKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJyonKSB7XG4gICAgICAgICAgICBpbmhlcml0QWxsID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdGhpcy4kJG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIC8vIGB1cGRhdGVPbmAgaXMgc3BlY2lhbCBzbyB3ZSBtdXN0IGFsc28gaW5oZXJpdCB0aGUgYHVwZGF0ZU9uRGVmYXVsdGAgb3B0aW9uXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAndXBkYXRlT24nKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdGhpcy4kJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAndXBkYXRlT24nKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYHVwZGF0ZU9uYCBwcm9wZXJ0eSBjb250YWlucyB0aGUgYGRlZmF1bHRgIGV2ZW50IHRoZW4gd2UgaGF2ZSB0byByZW1vdmVcbiAgICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGV2ZW50IGxpc3QgYW5kIHNldCB0aGUgYHVwZGF0ZU9uRGVmYXVsdGAgZmxhZy5cbiAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zW2tleV0gPSB0cmltKG9wdGlvbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuXG4gICAgICBpZiAoaW5oZXJpdEFsbCkge1xuICAgICAgICAvLyBXZSBoYXZlIGEgcHJvcGVydHkgb2YgdGhlIGZvcm06IGBcIipcIjogXCIkaW5oZXJpdFwiYFxuICAgICAgICBkZWxldGUgb3B0aW9uc1snKiddO1xuICAgICAgICBkZWZhdWx0cyhvcHRpb25zLCB0aGlzLiQkb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsbHkgYWRkIGluIGFueSBtaXNzaW5nIGRlZmF1bHRzXG4gICAgICBkZWZhdWx0cyhvcHRpb25zLCBkZWZhdWx0TW9kZWxPcHRpb25zLiQkb3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBuZXcgTW9kZWxPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICBkZWZhdWx0TW9kZWxPcHRpb25zID0gbmV3IE1vZGVsT3B0aW9ucyh7XG4gICAgdXBkYXRlT246ICcnLFxuICAgIHVwZGF0ZU9uRGVmYXVsdDogdHJ1ZSxcbiAgICBkZWJvdW5jZTogMCxcbiAgICBnZXR0ZXJTZXR0ZXI6IGZhbHNlLFxuICAgIGFsbG93SW52YWxpZDogZmFsc2UsXG4gICAgdGltZXpvbmU6IG51bGxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gbW9kaWZ5IHRoZSBiZWhhdmlvdXIgb2Yge0BsaW5rIG5nTW9kZWx9IGRpcmVjdGl2ZXMgd2l0aGluIHlvdXJcbiAgICogYXBwbGljYXRpb24uIFlvdSBjYW4gc3BlY2lmeSBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSBvbiBhbnkgZWxlbWVudC4gQWxsIHtAbGluayBuZ01vZGVsfVxuICAgKiBkaXJlY3RpdmVzIHdpbGwgdXNlIHRoZSBvcHRpb25zIG9mIHRoZWlyIG5lYXJlc3QgYG5nTW9kZWxPcHRpb25zYCBhbmNlc3Rvci5cbiAgICpcbiAgICogVGhlIGBuZ01vZGVsT3B0aW9uc2Agc2V0dGluZ3MgYXJlIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZGlyZWN0aXZlIGFzXG4gICAqIGFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhpcyBleHByZXNzaW9uIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3QsIHdob3NlIHByb3BlcnRpZXMgY29udGFpblxuICAgKiB0aGUgc2V0dGluZ3MuIEZvciBleGFtcGxlOiBgPGRpdiBcIm5nLW1vZGVsLW9wdGlvbnNcIj1cInsgZGVib3VuY2U6IDEwMCB9XCJgLlxuICAgKlxuICAgKiAjIyBJbmhlcml0aW5nIE9wdGlvbnNcbiAgICpcbiAgICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgYW4gYG5nTW9kZWxPcHRpb25zYCBzZXR0aW5nIHNob3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCBgbmdNb2RlbE9wdGlvbnNgXG4gICAqIGRpcmVjdGl2ZSBieSBnaXZpbmcgaXQgdGhlIHZhbHVlIG9mIGBcIiRpbmhlcml0XCJgLlxuICAgKiBUaGVuIGl0IHdpbGwgaW5oZXJpdCB0aGF0IHNldHRpbmcgZnJvbSB0aGUgZmlyc3QgYG5nTW9kZWxPcHRpb25zYCBkaXJlY3RpdmUgZm91bmQgYnkgdHJhdmVyc2luZyB1cCB0aGVcbiAgICogRE9NIHRyZWUuIElmIHRoZXJlIGlzIG5vIGFuY2VzdG9yIGVsZW1lbnQgY29udGFpbmluZyBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSB0aGVuIGRlZmF1bHQgc2V0dGluZ3NcbiAgICogd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSBnaXZlbiB0aGUgZm9sbG93aW5nIGZyYWdtZW50IG9mIEhUTUxcbiAgICpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8ZGl2IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDIwMCB9XCI+XG4gICAqICAgPGZvcm0gbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJywgYWxsb3dJbnZhbGlkOiAnJGluaGVyaXQnIH1cIj5cbiAgICogICAgIDxpbnB1dCBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQnLCBhbGxvd0ludmFsaWQ6ICckaW5oZXJpdCcgfVwiIC8+XG4gICAqICAgPC9mb3JtPlxuICAgKiA8L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBoYXZlIHRoZSBmb2xsb3dpbmcgc2V0dGluZ3NcbiAgICpcbiAgICogYGBganNcbiAgICogeyBhbGxvd0ludmFsaWQ6IHRydWUsIHVwZGF0ZU9uOiAnZGVmYXVsdCcsIGRlYm91bmNlOiAwIH1cbiAgICogYGBgXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBgZGVib3VuY2VgIHNldHRpbmcgd2FzIG5vdCBpbmhlcml0ZWQgYW5kIHVzZWQgdGhlIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cbiAgICpcbiAgICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgYWxsIHVuZGVmaW5lZCBzZXR0aW5ncyBhcmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgZnJvbSBhbiBhbmNlc3RvciBieVxuICAgKiBpbmNsdWRpbmcgYSBwcm9wZXJ0eSB3aXRoIGtleSBvZiBgXCIqXCJgIGFuZCB2YWx1ZSBvZiBgXCIkaW5oZXJpdFwiYC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUgZ2l2ZW4gdGhlIGZvbGxvd2luZyBmcmFnbWVudCBvZiBIVE1MXG4gICAqXG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPGRpdiBuZy1tb2RlbC1vcHRpb25zPVwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAyMDAgfVwiPlxuICAgKiAgIDxmb3JtIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicsIFwiKlwiOiAnJGluaGVyaXQnIH1cIj5cbiAgICogICAgIDxpbnB1dCBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQnLCBcIipcIjogJyRpbmhlcml0JyB9XCIgLz5cbiAgICogICA8L2Zvcm0+XG4gICAqIDwvZGl2PlxuICAgKiBgYGBcbiAgICpcbiAgICogdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBzZXR0aW5nc1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiB7IGFsbG93SW52YWxpZDogdHJ1ZSwgdXBkYXRlT246ICdkZWZhdWx0JywgZGVib3VuY2U6IDIwMCB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgYGRlYm91bmNlYCBzZXR0aW5nIG5vdyBpbmhlcml0cyB0aGUgdmFsdWUgZnJvbSB0aGUgb3V0ZXIgYDxkaXY+YCBlbGVtZW50LlxuICAgKlxuICAgKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgcmV1c2FibGUgY29tcG9uZW50IHRoZW4geW91IHNob3VsZCBiZSBjYXJlZnVsIHdoZW4gdXNpbmcgYFwiKlwiOiBcIiRpbmhlcml0XCJgXG4gICAqIHNpbmNlIHlvdSBtYXkgaW5hZHZlcnRlbnRseSBpbmhlcml0IGEgc2V0dGluZyBpbiB0aGUgZnV0dXJlIHRoYXQgY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqXG4gICAqICMjIFRyaWdnZXJpbmcgYW5kIGRlYm91bmNpbmcgbW9kZWwgdXBkYXRlc1xuICAgKlxuICAgKiBUaGUgYHVwZGF0ZU9uYCBhbmQgYGRlYm91bmNlYCBwcm9wZXJ0aWVzIGFsbG93IHlvdSB0byBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2YgZXZlbnRzIHRoYXQgd2lsbFxuICAgKiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlIGFuZC9vciBhIGRlYm91bmNpbmcgZGVsYXkgc28gdGhhdCB0aGUgYWN0dWFsIHVwZGF0ZSBvbmx5IHRha2VzIHBsYWNlIHdoZW5cbiAgICogYSB0aW1lciBleHBpcmVzOyB0aGlzIHRpbWVyIHdpbGwgYmUgcmVzZXQgYWZ0ZXIgYW5vdGhlciBjaGFuZ2UgdGFrZXMgcGxhY2UuXG4gICAqXG4gICAqIEdpdmVuIHRoZSBuYXR1cmUgb2YgYG5nTW9kZWxPcHRpb25zYCwgdGhlIHZhbHVlIGRpc3BsYXllZCBpbnNpZGUgaW5wdXQgZmllbGRzIGluIHRoZSB2aWV3IG1pZ2h0XG4gICAqIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB2YWx1ZSBpbiB0aGUgYWN0dWFsIG1vZGVsLiBUaGlzIG1lYW5zIHRoYXQgaWYgeW91IHVwZGF0ZSB0aGUgbW9kZWwgeW91XG4gICAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWV9IG9uIHRoZSByZWxldmFudCBpbnB1dCBmaWVsZCBpblxuICAgKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gcmVmZXJlbmNlIHRoZSBjb250cm9sJ3Mge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlfVxuICAgKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpc1xuICAgKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICAgKiBgbmFtZWAgYXR0cmlidXRlLlxuICAgKlxuICAgKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gICAqIGBzdWJtaXRgIGV2ZW50LiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAgICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gb3ZlcnJpZGUgaW1tZWRpYXRlIHVwZGF0ZXMuIENoYW5nZXMgb24gdGhlIGlucHV0cyB3aXRoaW4gdGhlXG4gICAqIGZvcm0gd2lsbCB1cGRhdGUgdGhlIG1vZGVsIG9ubHkgd2hlbiB0aGUgY29udHJvbCBsb3NlcyBmb2N1cyAoYmx1ciBldmVudCkuIElmIGBlc2NhcGVgIGtleSBpc1xuICAgKiBwcmVzc2VkIHdoaWxlIHRoZSBpbnB1dCBmaWVsZCBpcyBmb2N1c2VkLCB0aGUgdmFsdWUgaXMgcmVzZXQgdG8gdGhlIHZhbHVlIGluIHRoZSBjdXJyZW50IG1vZGVsLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICogICAgICAgICA8bGFiZWw+XG4gICAqICAgICAgICAgICBOYW1lOlxuICAgKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICogICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAqICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCJcbiAgICogICAgICAgICAgICAgICAgICBuZy1rZXl1cD1cImNhbmNlbCgkZXZlbnQpXCIgLz5cbiAgICogICAgICAgICA8L2xhYmVsPjxiciAvPlxuICAgKiAgICAgICAgIDxsYWJlbD5cbiAgICogICAgICAgICAgIE90aGVyIGRhdGE6XG4gICAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIuZGF0YVwiIC8+XG4gICAqICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ29wdGlvbnNFeGFtcGxlJywgW10pXG4gICAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknLCBkYXRhOiAnJyB9O1xuICAgKlxuICAgKiAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgKiAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAqICAgICAgICAgICB9XG4gICAqICAgICAgICAgfTtcbiAgICogICAgICAgfV0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAqICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAgICogICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICogICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcbiAgICpcbiAgICogICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gICAqICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICAgKiAgICAgICBvdGhlci5jbGljaygpO1xuICAgKiAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTtcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiAgICAgaXQoJ3Nob3VsZCAkcm9sbGJhY2tWaWV3VmFsdWUgd2hlbiBtb2RlbCBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAgICogICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnc2F5IGhlbGxvJyk7XG4gICAqICAgICAgIGlucHV0LnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkVTQ0FQRSk7XG4gICAqICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheScpO1xuICAgKiAgICAgICBvdGhlci5jbGljaygpO1xuICAgKiAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXknKTtcbiAgICogICAgIH0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKlxuICAgKiBUaGUgbmV4dCBleGFtcGxlIHNob3dzIGhvdyB0byBkZWJvdW5jZSBtb2RlbCBjaGFuZ2VzLiBNb2RlbCB3aWxsIGJlIHVwZGF0ZWQgb25seSAxIHNlYyBhZnRlciBsYXN0IGNoYW5nZS5cbiAgICogSWYgdGhlIGBDbGVhcmAgYnV0dG9uIGlzIHByZXNzZWQsIGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkIGFuZCB0aGUgdmFsdWUgYmVjb21lcyBlbXB0eS5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgKiAgICAgICAgIE5hbWU6XG4gICAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICogICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBkZWJvdW5jZTogMTAwMCB9XCIgLz5cbiAgICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+PGJyIC8+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JyB9O1xuICAgKiAgICAgICB9XSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqICMjIE1vZGVsIHVwZGF0ZXMgYW5kIHZhbGlkYXRpb25cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYmVoYXZpb3VyIGluIGBuZ01vZGVsYCBpcyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBpcyBzZXQgdG8gYHVuZGVmaW5lZGAgd2hlbiB0aGVcbiAgICogdmFsaWRhdGlvbiBkZXRlcm1pbmVzIHRoYXQgdGhlIHZhbHVlIGlzIGludmFsaWQuIEJ5IHNldHRpbmcgdGhlIGBhbGxvd0ludmFsaWRgIHByb3BlcnR5IHRvIHRydWUsXG4gICAqIHRoZSBtb2RlbCB3aWxsIHN0aWxsIGJlIHVwZGF0ZWQgZXZlbiBpZiB0aGUgdmFsdWUgaXMgaW52YWxpZC5cbiAgICpcbiAgICpcbiAgICogIyMgQ29ubmVjdGluZyB0byB0aGUgc2NvcGVcbiAgICpcbiAgICogQnkgc2V0dGluZyB0aGUgYGdldHRlclNldHRlcmAgcHJvcGVydHkgdG8gdHJ1ZSB5b3UgYXJlIHRlbGxpbmcgbmdNb2RlbCB0aGF0IHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvblxuICAgKiBvbiB0aGUgc2NvcGUgcmVmZXJzIHRvIGEgXCJnZXR0ZXIvc2V0dGVyXCIgZnVuY3Rpb24gcmF0aGVyIHRoYW4gdGhlIHZhbHVlIGl0c2VsZi5cbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgKiAgICAgICAgIDxsYWJlbD5cbiAgICogICAgICAgICAgIE5hbWU6XG4gICAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAqICAgICAgICAgPC9sYWJlbD5cbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAqICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAqICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChuZXdOYW1lKSA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAqICAgICAgICAgICB9XG4gICAqICAgICAgICAgfTtcbiAgICogICAgICAgfV0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKlxuICAgKlxuICAgKiAjIyBTcGVjaWZ5aW5nIHRpbWV6b25lc1xuICAgKlxuICAgKiBZb3UgY2FuIHNwZWNpZnkgdGhlIHRpbWV6b25lIHRoYXQgZGF0ZS90aW1lIGlucHV0IGRpcmVjdGl2ZXMgZXhwZWN0IGJ5IHByb3ZpZGluZyBpdHMgbmFtZSBpbiB0aGVcbiAgICogYHRpbWV6b25lYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG5nTW9kZWxPcHRpb25zIG9wdGlvbnMgdG8gYXBwbHkgdG8ge0BsaW5rIG5nTW9kZWx9IGRpcmVjdGl2ZXMgb24gdGhpcyBlbGVtZW50IGFuZFxuICAgKiAgIGFuZCBpdHMgZGVzY2VuZGVudHMuIFZhbGlkIGtleXMgYXJlOlxuICAgKiAgIC0gYHVwZGF0ZU9uYDogc3RyaW5nIHNwZWNpZnlpbmcgd2hpY2ggZXZlbnQgc2hvdWxkIHRoZSBpbnB1dCBiZSBib3VuZCB0by4gWW91IGNhbiBzZXQgc2V2ZXJhbFxuICAgKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gICAqICAgICBtYXRjaGVzIHRoZSBkZWZhdWx0IGV2ZW50cyBiZWxvbmdpbmcgdG8gdGhlIGNvbnRyb2wuXG4gICAqICAgLSBgZGVib3VuY2VgOiBpbnRlZ2VyIHZhbHVlIHdoaWNoIGNvbnRhaW5zIHRoZSBkZWJvdW5jZSBtb2RlbCB1cGRhdGUgdmFsdWUgaW4gbWlsbGlzZWNvbmRzLiBBXG4gICAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICAgKiAgICAgY3VzdG9tIHZhbHVlIGZvciBlYWNoIGV2ZW50LiBGb3IgZXhhbXBsZTpcbiAgICogICAgIGBgYFxuICAgKiAgICAgbmctbW9kZWwtb3B0aW9ucz1cIntcbiAgICogICAgICAgdXBkYXRlT246ICdkZWZhdWx0IGJsdXInLFxuICAgKiAgICAgICBkZWJvdW5jZTogeyAnZGVmYXVsdCc6IDUwMCwgJ2JsdXInOiAwIH1cbiAgICogICAgIH1cIlxuICAgKiAgICAgYGBgXG4gICAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICAgKiAgICAgbm90IHZhbGlkYXRlIGNvcnJlY3RseSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNldHRpbmcgdGhlIG1vZGVsIHRvIHVuZGVmaW5lZC5cbiAgICogICAtIGBnZXR0ZXJTZXR0ZXJgOiBib29sZWFuIHZhbHVlIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gdHJlYXQgZnVuY3Rpb25zIGJvdW5kIHRvXG4gICAqICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICAgKiAgIC0gYHRpbWV6b25lYDogRGVmaW5lcyB0aGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGZvclxuICAgKiAgICAgYDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiIC8+YCwgLi4uIC4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gICAqICAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gICAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICAgKiAgICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICovXG4gIHZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlKCkge1xuICAgIE5nTW9kZWxPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckYXR0cnMnLCAnJHNjb3BlJ107XG4gICAgZnVuY3Rpb24gTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyKCRhdHRycywgJHNjb3BlKSB7XG4gICAgICB0aGlzLiQkYXR0cnMgPSAkYXR0cnM7XG4gICAgICB0aGlzLiQkc2NvcGUgPSAkc2NvcGU7XG4gICAgfVxuICAgIE5nTW9kZWxPcHRpb25zQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gICAgICAkb25Jbml0OiBmdW5jdGlvbiAkb25Jbml0KCkge1xuICAgICAgICB2YXIgcGFyZW50T3B0aW9ucyA9IHRoaXMucGFyZW50Q3RybCA/IHRoaXMucGFyZW50Q3RybC4kb3B0aW9ucyA6IGRlZmF1bHRNb2RlbE9wdGlvbnM7XG4gICAgICAgIHZhciBtb2RlbE9wdGlvbnNEZWZpbml0aW9uID0gdGhpcy4kJHNjb3BlLiRldmFsKHRoaXMuJCRhdHRycy5uZ01vZGVsT3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy4kb3B0aW9ucyA9IHBhcmVudE9wdGlvbnMuY3JlYXRlQ2hpbGQobW9kZWxPcHRpb25zRGVmaW5pdGlvbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgLy8gbmdNb2RlbE9wdGlvbnMgbmVlZHMgdG8gcnVuIGJlZm9yZSBuZ01vZGVsIGFuZCBpbnB1dCBkaXJlY3RpdmVzXG4gICAgICBwcmlvcml0eTogMTAsXG4gICAgICByZXF1aXJlOiB7IHBhcmVudEN0cmw6ICc/Xl5uZ01vZGVsT3B0aW9ucycgfSxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXJcbiAgICB9O1xuICB9O1xuXG4gIC8vIHNoYWxsb3cgY29weSBvdmVyIHZhbHVlcyBmcm9tIGBzcmNgIHRoYXQgYXJlIG5vdCBhbHJlYWR5IHNwZWNpZmllZCBvbiBgZHN0YFxuICBmdW5jdGlvbiBkZWZhdWx0cyhkc3QsIHNyYykge1xuICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgaWYgKCFpc0RlZmluZWQoZHN0W2tleV0pKSB7XG4gICAgICAgIGRzdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gICAqIEByZXN0cmljdCBBQ1xuICAgKiBAcHJpb3JpdHkgMTAwMFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGBuZ05vbkJpbmRhYmxlYCBkaXJlY3RpdmUgdGVsbHMgQW5ndWxhciBub3QgdG8gY29tcGlsZSBvciBiaW5kIHRoZSBjb250ZW50cyBvZiB0aGUgY3VycmVudFxuICAgKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAgICogYmluZGluZ3MgYnV0IHdoaWNoIHNob3VsZCBiZSBpZ25vcmVkIGJ5IEFuZ3VsYXIuIFRoaXMgY291bGQgYmUgdGhlIGNhc2UgaWYgeW91IGhhdmUgYSBzaXRlIHRoYXRcbiAgICogZGlzcGxheXMgc25pcHBldHMgb2YgY29kZSwgZm9yIGluc3RhbmNlLlxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogSW4gdGhpcyBleGFtcGxlIHRoZXJlIGFyZSB0d28gbG9jYXRpb25zIHdoZXJlIGEgc2ltcGxlIGludGVycG9sYXRpb24gYmluZGluZyAoYHt7fX1gKSBpcyBwcmVzZW50LFxuICAgKiBidXQgdGhlIG9uZSB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLW5vbi1iaW5kYWJsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IG5nLW5vbi1iaW5kYWJsZT5JZ25vcmVkOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW5vbi1iaW5kYWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCcxICsgMicpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignMycpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdkaXYnKSkubGFzdCgpLmdldFRleHQoKSkudG9NYXRjaCgvMSBcXCsgMi8pO1xuICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7XG5cbiAgLyogZXhwb3J0ZWQgbmdPcHRpb25zRGlyZWN0aXZlICovXG5cbiAgLyogZ2xvYmFsIGpxTGl0ZVJlbW92ZSAqL1xuXG4gIHZhciBuZ09wdGlvbnNNaW5FcnIgPSBtaW5FcnIoJ25nT3B0aW9ucycpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nT3B0aW9uc1xuICAgKiBAcmVzdHJpY3QgQVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGhlIGBuZ09wdGlvbnNgIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBhIGxpc3Qgb2YgYDxvcHRpb24+YFxuICAgKiBlbGVtZW50cyBmb3IgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyB0aGUgYXJyYXkgb3Igb2JqZWN0IG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlXG4gICAqIGBuZ09wdGlvbnNgIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi5cbiAgICpcbiAgICogSW4gbWFueSBjYXNlcywge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mXG4gICAqIGBuZ09wdGlvbnNgIHRvIGFjaGlldmUgYSBzaW1pbGFyIHJlc3VsdC4gSG93ZXZlciwgYG5nT3B0aW9uc2AgcHJvdmlkZXMgc29tZSBiZW5lZml0czpcbiAgICogLSBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAgICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uXG4gICAqIC0gcmVkdWNlZCBtZW1vcnkgY29uc3VtcHRpb24gYnkgbm90IGNyZWF0aW5nIGEgbmV3IHNjb3BlIGZvciBlYWNoIHJlcGVhdGVkIGluc3RhbmNlXG4gICAqIC0gaW5jcmVhc2VkIHJlbmRlciBzcGVlZCBieSBjcmVhdGluZyB0aGUgb3B0aW9ucyBpbiBhIGRvY3VtZW50RnJhZ21lbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsbHlcbiAgICpcbiAgICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eVxuICAgKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICAgKiBkaXJlY3RpdmUuXG4gICAqXG4gICAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAgICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgdGhlIGBudWxsYCBvciBcIm5vdCBzZWxlY3RlZFwiXG4gICAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uXG4gICAqXG4gICAqICMjIENvbXBsZXggTW9kZWxzIChvYmplY3RzIG9yIGNvbGxlY3Rpb25zKVxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBgbmdNb2RlbGAgd2F0Y2hlcyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hlblxuICAgKiBiaW5kaW5nIHRoZSBzZWxlY3QgdG8gYSBtb2RlbCB0aGF0IGlzIGFuIG9iamVjdCBvciBhIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIE9uZSBpc3N1ZSBvY2N1cnMgaWYgeW91IHdhbnQgdG8gcHJlc2VsZWN0IGFuIG9wdGlvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdSBzZXRcbiAgICogdGhlIG1vZGVsIHRvIGFuIG9iamVjdCB0aGF0IGlzIGVxdWFsIHRvIGFuIG9iamVjdCBpbiB5b3VyIGNvbGxlY3Rpb24sIGBuZ09wdGlvbnNgIHdvbid0IGJlIGFibGUgdG8gc2V0IHRoZSBzZWxlY3Rpb24sXG4gICAqIGJlY2F1c2UgdGhlIG9iamVjdHMgYXJlIG5vdCBpZGVudGljYWwuIFNvIGJ5IGRlZmF1bHQsIHlvdSBzaG91bGQgYWx3YXlzIHJlZmVyZW5jZSB0aGUgaXRlbSBpbiB5b3VyIGNvbGxlY3Rpb25cbiAgICogZm9yIHByZXNlbGVjdGlvbnMsIGUuZy46IGAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuY29sbGVjdGlvblszXWAuXG4gICAqXG4gICAqIEFub3RoZXIgc29sdXRpb24gaXMgdG8gdXNlIGEgYHRyYWNrIGJ5YCBjbGF1c2UsIGJlY2F1c2UgdGhlbiBgbmdPcHRpb25zYCB3aWxsIHRyYWNrIHRoZSBpZGVudGl0eVxuICAgKiBvZiB0aGUgaXRlbSBub3QgYnkgcmVmZXJlbmNlLCBidXQgYnkgdGhlIHJlc3VsdCBvZiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91clxuICAgKiBjb2xsZWN0aW9uIGl0ZW1zIGhhdmUgYW4gaWQgcHJvcGVydHksIHlvdSB3b3VsZCBgdHJhY2sgYnkgaXRlbS5pZGAuXG4gICAqXG4gICAqIEEgZGlmZmVyZW50IGlzc3VlIHdpdGggb2JqZWN0cyBvciBjb2xsZWN0aW9ucyBpcyB0aGF0IG5nTW9kZWwgd29uJ3QgZGV0ZWN0IGlmIGFuIG9iamVjdCBwcm9wZXJ0eSBvclxuICAgKiBhIGNvbGxlY3Rpb24gaXRlbSBjaGFuZ2VzLiBGb3IgdGhhdCByZWFzb24sIGBuZ09wdGlvbnNgIGFkZGl0aW9uYWxseSB3YXRjaGVzIHRoZSBtb2RlbCB1c2luZ1xuICAgKiBgJHdhdGNoQ29sbGVjdGlvbmAsIHdoZW4gdGhlIGV4cHJlc3Npb24gY29udGFpbnMgYSBgdHJhY2sgYnlgIGNsYXVzZSBvciB0aGUgdGhlIHNlbGVjdCBoYXMgdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICAgKiBUaGlzIGFsbG93cyBuZ09wdGlvbnMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgb3B0aW9ucyBldmVuIGlmIHRoZSBhY3R1YWwgb2JqZWN0L2NvbGxlY3Rpb25cbiAgICogaGFzIG5vdCBjaGFuZ2VkIGlkZW50aXR5LCBidXQgb25seSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3Qgb3IgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYCR3YXRjaENvbGxlY3Rpb25gIGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCAob3IgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gICAqIGlmIHRoZSBtb2RlbCBpcyBhbiBhcnJheSkuIFRoaXMgbWVhbnMgdGhhdCBjaGFuZ2luZyBhIHByb3BlcnR5IGRlZXBlciB0aGFuIHRoZSBmaXJzdCBsZXZlbCBpbnNpZGUgdGhlXG4gICAqIG9iamVjdC9jb2xsZWN0aW9uIHdpbGwgbm90IHRyaWdnZXIgYSByZS1yZW5kZXJpbmcuXG4gICAqXG4gICAqICMjIGBzZWxlY3RgICoqYGFzYCoqXG4gICAqXG4gICAqIFVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIHdpbGwgYmluZCB0aGUgcmVzdWx0IG9mIHRoZSBgc2VsZWN0YCBleHByZXNzaW9uIHRvIHRoZSBtb2RlbCwgYnV0XG4gICAqIHRoZSB2YWx1ZSBvZiB0aGUgYDxzZWxlY3Q+YCBhbmQgYDxvcHRpb24+YCBodG1sIGVsZW1lbnRzIHdpbGwgYmUgZWl0aGVyIHRoZSBpbmRleCAoZm9yIGFycmF5IGRhdGEgc291cmNlcylcbiAgICogb3IgcHJvcGVydHkgbmFtZSAoZm9yIG9iamVjdCBkYXRhIHNvdXJjZXMpIG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIGNvbGxlY3Rpb24uIElmIGEgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvblxuICAgKiBpcyB1c2VkLCB0aGUgcmVzdWx0IG9mIHRoYXQgZXhwcmVzc2lvbiB3aWxsIGJlIHNldCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBvcHRpb25gIGFuZCBgc2VsZWN0YCBlbGVtZW50cy5cbiAgICpcbiAgICpcbiAgICogIyMjIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBCZSBjYXJlZnVsIHdoZW4gdXNpbmcgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqIGluIHRoZSBzYW1lIGV4cHJlc3Npb24uXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBHaXZlbiB0aGlzIGFycmF5IG9mIGl0ZW1zIG9uIHRoZSAkc2NvcGU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqICRzY29wZS5pdGVtcyA9IFt7XG4gICAqICAgaWQ6IDEsXG4gICAqICAgbGFiZWw6ICdhTGFiZWwnLFxuICAgKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2FTdWJJdGVtJyB9XG4gICAqIH0sIHtcbiAgICogICBpZDogMixcbiAgICogICBsYWJlbDogJ2JMYWJlbCcsXG4gICAqICAgc3ViSXRlbTogeyBuYW1lOiAnYlN1Ykl0ZW0nIH1cbiAgICogfV07XG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGlzIHdpbGwgd29yazpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAgICogYGBgXG4gICAqIGBgYGpzXG4gICAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXTtcbiAgICogYGBgXG4gICAqXG4gICAqIGJ1dCB0aGlzIHdpbGwgbm90IHdvcms6XG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbS5zdWJJdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAgICogYGBgXG4gICAqIGBgYGpzXG4gICAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXS5zdWJJdGVtO1xuICAgKiBgYGBcbiAgICpcbiAgICogSW4gYm90aCBleGFtcGxlcywgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYXBwbGllZCBzdWNjZXNzZnVsbHkgdG8gZWFjaCBgaXRlbWAgaW4gdGhlXG4gICAqIGBpdGVtc2AgYXJyYXkuIEJlY2F1c2UgdGhlIHNlbGVjdGVkIG9wdGlvbiBoYXMgYmVlbiBzZXQgcHJvZ3JhbW1hdGljYWxseSBpbiB0aGUgY29udHJvbGxlciwgdGhlXG4gICAqICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYWxzbyBhcHBsaWVkIHRvIHRoZSBgbmdNb2RlbGAgdmFsdWUuIEluIHRoZSBmaXJzdCBleGFtcGxlLCB0aGVcbiAgICogYG5nTW9kZWxgIHZhbHVlIGlzIGBpdGVtc1swXWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uaWRgIHdpdGhcbiAgICogbm8gaXNzdWUuIEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF0uc3ViSXRlbWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKlxuICAgKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uc3ViSXRlbS5pZGAgKHdoaWNoIGlzIHVuZGVmaW5lZCkuIEFzIGEgcmVzdWx0LCB0aGUgbW9kZWwgdmFsdWVcbiAgICogaXMgbm90IG1hdGNoZWQgYWdhaW5zdCBhbnkgYDxvcHRpb24+YCBhbmQgdGhlIGA8c2VsZWN0PmAgYXBwZWFycyBhcyBoYXZpbmcgbm8gc2VsZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgQW5ndWxhckpTIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge2NvbXByZWhlbnNpb25fZXhwcmVzc2lvbn0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOlxuICAgKlxuICAgKiAgICogZm9yIGFycmF5IGRhdGEgc291cmNlczpcbiAgICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gICAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICAgKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICAgKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICAgKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICAgKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICAgKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgfCBvcmRlckJ5OmBvcmRlcmV4cHJgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gICAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gICAqICAgKiBmb3Igb2JqZWN0IGRhdGEgc291cmNlczpcbiAgICogICAgICogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAgICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAgICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gICAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICAgKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAgICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gICAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYFxuICAgKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAgICpcbiAgICogV2hlcmU6XG4gICAqXG4gICAqICAgKiBgYXJyYXlgIC8gYG9iamVjdGA6IGFuIGV4cHJlc3Npb24gd2hpY2ggZXZhbHVhdGVzIHRvIGFuIGFycmF5IC8gb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogICAqIGB2YWx1ZWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gZWFjaCBpdGVtIGluIHRoZSBgYXJyYXlgIG9yIGVhY2ggcHJvcGVydHkgdmFsdWVcbiAgICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICAgKiAgICogYGtleWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gYSBwcm9wZXJ0eSBuYW1lIGluIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXG4gICAqICAgKiBgbGFiZWxgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBsYWJlbCBmb3IgYDxvcHRpb24+YCBlbGVtZW50LiBUaGVcbiAgICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAgICogICAqIGBzZWxlY3RgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBvZiB0aGUgcGFyZW50IGA8c2VsZWN0PmBcbiAgICogICAgICBlbGVtZW50LiBJZiBub3Qgc3BlY2lmaWVkLCBgc2VsZWN0YCBleHByZXNzaW9uIHdpbGwgZGVmYXVsdCB0byBgdmFsdWVgLlxuICAgKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICAgKiAgICAgIERPTSBlbGVtZW50LlxuICAgKiAgICogYGRpc2FibGVgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGUgcmVuZGVyZWQgYDxvcHRpb24+YFxuICAgKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAgICogICAqIGB0cmFja2V4cHJgOiBVc2VkIHdoZW4gd29ya2luZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHMuIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmVcbiAgICogICAgICB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhlIGB0cmFja2V4cHJgIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlXG4gICAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gICAqICAgICAgZXZlbiB3aGVuIHRoZSBvcHRpb25zIGFyZSByZWNyZWF0ZWQgKGUuZy4gcmVsb2FkZWQgZnJvbSB0aGUgc2VydmVyKS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdBdHRyU2l6ZSBzZXRzIHRoZSBzaXplIG9mIHRoZSBzZWxlY3QgZWxlbWVudCBkeW5hbWljYWxseS4gVXNlcyB0aGVcbiAgICoge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcyBuZ0F0dHJ9IGRpcmVjdGl2ZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG1vZHVsZT1cInNlbGVjdEV4YW1wbGVcIiBuYW1lPVwic2VsZWN0XCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFtcbiAgICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCcsIG5vdEFuT3B0aW9uOiB0cnVlfSxcbiAgICAgICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICAgIHtuYW1lOid5ZWxsb3cnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogZmFsc2V9XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkXG4gICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29sb3Iubm90QW5PcHRpb25cIj4gRGlzYWJsZWQ/PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMucHVzaCh7fSlcIj5hZGQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8aHIvPlxuICAgICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+PC9zZWxlY3Q+XG4gICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgICA8c3BhbiAgY2xhc3M9XCJudWxsYWJsZVwiPlxuICAgICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9zcGFuPjwvbGFiZWw+PGJyLz5cbiAgXG4gICAgICAgICAgICA8bGFiZWw+Q29sb3IgZ3JvdXBlZCBieSBzaGFkZTpcbiAgICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICBcbiAgICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlLCB3aXRoIHNvbWUgZGlzYWJsZWQ6XG4gICAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCJcbiAgICAgICAgICAgICAgICAgICAgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZGlzYWJsZSB3aGVuIGNvbG9yLm5vdEFuT3B0aW9uIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gIFxuICBcbiAgXG4gICAgICAgICAgICBTZWxlY3QgPGJ1dHRvbiBuZy1jbGljaz1cIm15Q29sb3IgPSB7IG5hbWU6J25vdCBpbiBsaXN0Jywgc2hhZGU6ICdvdGhlcicgfVwiPmJvZ3VzPC9idXR0b24+LlxuICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgIDxoci8+XG4gICAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpteUNvbG9yfSB9fVxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7J2JhY2tncm91bmQtY29sb3InOm15Q29sb3IubmFtZX1cIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgncmVkJyk7XG4gICAgICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215Q29sb3InKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7XG4gICAgICAgICAgICAgZWxlbWVudChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdJykpLmNsaWNrKCk7XG4gICAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ251bGwnKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG5cbiAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAvLyAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwMDAwMDU1NTU1NTU1NTU1NTUwMDAwMDAwMDA2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4MDAwMDAwMDAwMDAwMDAwMDAwMDk5OTk5OTk5OTlcbiAgdmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFskXFx3XVskXFx3XSopfCg/OlxcKFxccyooWyRcXHddWyRcXHddKilcXHMqLFxccyooWyRcXHddWyRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC87XG4gIC8vIDE6IHZhbHVlIGV4cHJlc3Npb24gKHZhbHVlRm4pXG4gIC8vIDI6IGxhYmVsIGV4cHJlc3Npb24gKGRpc3BsYXlGbilcbiAgLy8gMzogZ3JvdXAgYnkgZXhwcmVzc2lvbiAoZ3JvdXBCeUZuKVxuICAvLyA0OiBkaXNhYmxlIHdoZW4gZXhwcmVzc2lvbiAoZGlzYWJsZVdoZW5GbilcbiAgLy8gNTogYXJyYXkgaXRlbSB2YXJpYWJsZSBuYW1lXG4gIC8vIDY6IG9iamVjdCBpdGVtIGtleSB2YXJpYWJsZSBuYW1lXG4gIC8vIDc6IG9iamVjdCBpdGVtIHZhbHVlIHZhcmlhYmxlIG5hbWVcbiAgLy8gODogY29sbGVjdGlvbiBleHByZXNzaW9uXG4gIC8vIDk6IHRyYWNrIGJ5IGV4cHJlc3Npb25cbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIHZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRkb2N1bWVudCcsICckcGFyc2UnLCBmdW5jdGlvbiAoJGNvbXBpbGUsICRkb2N1bWVudCwgJHBhcnNlKSB7XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKG9wdGlvbnNFeHAsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKSB7XG5cbiAgICAgIHZhciBtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ09wdGlvbnNNaW5FcnIoJ2lleHAnLCAnRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICcgKyAnXFwnX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl9cXCcnICsgJyBidXQgZ290IFxcJ3swfVxcJy4gRWxlbWVudDogezF9Jywgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWN0IHRoZSBwYXJ0cyBmcm9tIHRoZSBuZ09wdGlvbnMgZXhwcmVzc2lvblxuXG4gICAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICB2YXIgdmFsdWVOYW1lID0gbWF0Y2hbNV0gfHwgbWF0Y2hbN107XG4gICAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIGtleSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgICAgdmFyIGtleU5hbWUgPSBtYXRjaFs2XTtcblxuICAgICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgYSBsYWJlbCBleHByZXNzaW9uXG4gICAgICB2YXIgc2VsZWN0QXMgPSAvIGFzIC8udGVzdChtYXRjaFswXSkgJiYgbWF0Y2hbMV07XG4gICAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCB0byB0cmFjayB0aGUgaWQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIG9wdGlvbnMgY29sbGVjdGlvblxuICAgICAgdmFyIHRyYWNrQnkgPSBtYXRjaFs5XTtcbiAgICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIG5vIGxhYmVsIGV4cHJlc3Npb25cbiAgICAgIHZhciB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpO1xuICAgICAgdmFyIHNlbGVjdEFzRm4gPSBzZWxlY3RBcyAmJiAkcGFyc2Uoc2VsZWN0QXMpO1xuICAgICAgdmFyIHZpZXdWYWx1ZUZuID0gc2VsZWN0QXNGbiB8fCB2YWx1ZUZuO1xuICAgICAgdmFyIHRyYWNrQnlGbiA9IHRyYWNrQnkgJiYgJHBhcnNlKHRyYWNrQnkpO1xuXG4gICAgICAvLyBHZXQgdGhlIHZhbHVlIGJ5IHdoaWNoIHdlIGFyZSBnb2luZyB0byB0cmFjayB0aGUgb3B0aW9uXG4gICAgICAvLyBpZiB3ZSBoYXZlIGEgdHJhY2tGbiB0aGVuIHVzZSB0aGF0IChwYXNzaW5nIHNjb3BlIGFuZCBsb2NhbHMpXG4gICAgICAvLyBvdGhlcndpc2UganVzdCBoYXNoIHRoZSBnaXZlbiB2aWV3VmFsdWVcbiAgICAgIHZhciBnZXRUcmFja0J5VmFsdWVGbiA9IHRyYWNrQnkgPyBmdW5jdGlvbiAodmFsdWUsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gdHJhY2tCeUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgfSA6IGZ1bmN0aW9uIGdldEhhc2hPZlZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcbiAgICAgIH07XG4gICAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlID0gZnVuY3Rpb24gZ2V0VHJhY2tCeVZhbHVlKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGdldFRyYWNrQnlWYWx1ZUZuKHZhbHVlLCBnZXRMb2NhbHModmFsdWUsIGtleSkpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSk7XG4gICAgICB2YXIgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKTtcbiAgICAgIHZhciBkaXNhYmxlV2hlbkZuID0gJHBhcnNlKG1hdGNoWzRdIHx8ICcnKTtcbiAgICAgIHZhciB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs4XSk7XG5cbiAgICAgIHZhciBsb2NhbHMgPSB7fTtcbiAgICAgIHZhciBnZXRMb2NhbHMgPSBrZXlOYW1lID8gZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgbG9jYWxzW2tleU5hbWVdID0ga2V5O1xuICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gbG9jYWxzO1xuICAgICAgfSA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gbG9jYWxzO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RWYWx1ZSA9IHNlbGVjdFZhbHVlO1xuICAgICAgICB0aGlzLnZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXM7XG5cbiAgICAgICAgaWYgKCFrZXlOYW1lICYmIGlzQXJyYXlMaWtlKG9wdGlvblZhbHVlcykpIHtcbiAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gb3B0aW9uVmFsdWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBpbiBlbnVtZXJhdGlvbiBvcmRlciwgdW5zb3J0ZWRcbiAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25WYWx1ZXMuaGFzT3duUHJvcGVydHkoaXRlbUtleSkgJiYgaXRlbUtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25WYWx1ZXNLZXlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFja0J5OiB0cmFja0J5LFxuICAgICAgICBnZXRUcmFja0J5VmFsdWU6IGdldFRyYWNrQnlWYWx1ZSxcbiAgICAgICAgZ2V0V2F0Y2hhYmxlczogJHBhcnNlKHZhbHVlc0ZuLCBmdW5jdGlvbiAob3B0aW9uVmFsdWVzKSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIGEgY29sbGVjdGlvbiBvZiB0aGluZ3MgdGhhdCB3ZSB3b3VsZCBsaWtlIHRvIHdhdGNoICh3YXRjaGVkQXJyYXkpXG4gICAgICAgICAgLy8gc28gdGhhdCB0aGV5IGNhbiBhbGwgYmUgd2F0Y2hlZCB1c2luZyBhIHNpbmdsZSAkd2F0Y2hDb2xsZWN0aW9uXG4gICAgICAgICAgLy8gdGhhdCBvbmx5IHJ1bnMgdGhlIGhhbmRsZXIgb25jZSBpZiBhbnl0aGluZyBjaGFuZ2VzXG4gICAgICAgICAgdmFyIHdhdGNoZWRBcnJheSA9IFtdO1xuICAgICAgICAgIG9wdGlvblZhbHVlcyA9IG9wdGlvblZhbHVlcyB8fCBbXTtcblxuICAgICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICAgIHZhciBvcHRpb25WYWx1ZXNMZW5ndGggPSBvcHRpb25WYWx1ZXNLZXlzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gb3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvblZhbHVlc1trZXldO1xuXG4gICAgICAgICAgICB2YXIgbG9jYWxzID0gZ2V0TG9jYWxzKHZhbHVlLCBrZXkpO1xuICAgICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmFsdWUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChzZWxlY3RWYWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzcGxheUZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgbGFiZWwgZXhwcmVzc2lvblxuICAgICAgICAgICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2gobGFiZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPbmx5IG5lZWQgdG8gd2F0Y2ggdGhlIGRpc2FibGVXaGVuRm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBkaXNhYmxlIGV4cHJlc3Npb25cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICB2YXIgZGlzYWJsZVdoZW4gPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChkaXNhYmxlV2hlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3YXRjaGVkQXJyYXk7XG4gICAgICAgIH0pLFxuXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG5cbiAgICAgICAgICB2YXIgb3B0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgICB2YXIgc2VsZWN0VmFsdWVNYXAgPSB7fTtcblxuICAgICAgICAgIC8vIFRoZSBvcHRpb24gdmFsdWVzIHdlcmUgYWxyZWFkeSBjb21wdXRlZCBpbiB0aGUgYGdldFdhdGNoYWJsZXNgIGZuLFxuICAgICAgICAgIC8vIHdoaWNoIG11c3QgaGF2ZSBiZWVuIGNhbGxlZCB0byB0cmlnZ2VyIGBnZXRPcHRpb25zYFxuICAgICAgICAgIHZhciBvcHRpb25WYWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW107XG4gICAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXMgPSBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcyk7XG4gICAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IG9wdGlvblZhbHVlcyA9PT0gb3B0aW9uVmFsdWVzS2V5cyA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcbiAgICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHModmFsdWUsIGtleSk7XG4gICAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gdmlld1ZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSBnZXRUcmFja0J5VmFsdWVGbih2aWV3VmFsdWUsIGxvY2Fscyk7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgdmFyIG9wdGlvbkl0ZW0gPSBuZXcgT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpO1xuXG4gICAgICAgICAgICBvcHRpb25JdGVtcy5wdXNoKG9wdGlvbkl0ZW0pO1xuICAgICAgICAgICAgc2VsZWN0VmFsdWVNYXBbc2VsZWN0VmFsdWVdID0gb3B0aW9uSXRlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXRlbXM6IG9wdGlvbkl0ZW1zLFxuICAgICAgICAgICAgc2VsZWN0VmFsdWVNYXA6IHNlbGVjdFZhbHVlTWFwLFxuICAgICAgICAgICAgZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZTogZnVuY3Rpb24gZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVNYXBbZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbjogZnVuY3Rpb24gZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBjb3VsZCBiZSBhbiBvYmplY3QgdGhhdCBtYXkgYmUgbXV0YXRlZCBieSB0aGUgYXBwbGljYXRpb24sXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gbWFrZSBhIGNvcHkgYW5kIG5vdCByZXR1cm4gdGhlIHJlZmVyZW5jZSB0byB0aGUgdmFsdWUgb24gdGhlIG9wdGlvbi5cbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnkgPyBjb3B5KG9wdGlvbi52aWV3VmFsdWUpIDogb3B0aW9uLnZpZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQ6IElFIDkgb25seVxuICAgIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gICAgLy8gdG8gY3JlYXRlIGl0IGluIDxzZWxlY3Q+IGFuZCBJRSBiYXJmcyBvdGhlcndpc2UuXG4gICAgdmFyIG9wdGlvblRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpLFxuICAgICAgICBvcHRHcm91cFRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgdmFyIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZTtcblxuICAgICAgLy8gVGhlIGVtcHR5T3B0aW9uIGFsbG93cyB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBcImVtcHR5XCJcbiAgICAgIC8vIG9wdGlvbiB3aGVuIHRoZSB2aWV3VmFsdWUgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb24gdmFsdWVzLlxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkcmVuID0gc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZW1wdHkgb3B0aW9uIHdpbGwgYmUgY29tcGlsZWQgYW5kIHJlbmRlcmVkIGJlZm9yZSB3ZSBmaXJzdCBnZW5lcmF0ZSB0aGUgb3B0aW9uc1xuICAgICAgc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhc2VsZWN0Q3RybC5lbXB0eU9wdGlvbjtcblxuICAgICAgdmFyIHVua25vd25PcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB1bmtub3duT3B0aW9uLnZhbCgnPycpO1xuXG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHZhciBuZ09wdGlvbnMgPSBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKGF0dHIubmdPcHRpb25zLCBzZWxlY3RFbGVtZW50LCBzY29wZSk7XG4gICAgICAvLyBUaGlzIHN0b3JlcyB0aGUgbmV3bHkgY3JlYXRlZCBvcHRpb25zIGJlZm9yZSB0aGV5IGFyZSBhcHBlbmRlZCB0byB0aGUgc2VsZWN0LlxuICAgICAgLy8gU2luY2UgdGhlIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGZyYWdtZW50IHdoZW4gaXQgaXMgYXBwZW5kZWQsXG4gICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gY3JlYXRlIGl0IG9uY2UuXG4gICAgICB2YXIgbGlzdEZyYWdtZW50ID0gJGRvY3VtZW50WzBdLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgLy8gT3ZlcndyaXRlIHRoZSBpbXBsZW1lbnRhdGlvbi4gbmdPcHRpb25zIGRvZXNuJ3QgdXNlIGhhc2hlc1xuICAgICAgc2VsZWN0Q3RybC5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuICc/JztcbiAgICAgIH07XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgY29udHJvbGxlciBtZXRob2RzIGZvciBtdWx0aXBsZSBzZWxlY3RhYmxlIG9wdGlvbnNcbiAgICAgIGlmICghbXVsdGlwbGUpIHtcblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU5nT3B0aW9uc1ZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgLy8gVGhlIG9wdGlvbnMgbWlnaHQgbm90IGJlIGRlZmluZWQgeWV0IHdoZW4gbmdNb2RlbCB0cmllcyB0byByZW5kZXJcbiAgICAgICAgICBpZiAoIW9wdGlvbnMpIHJldHVybjtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9IHNlbGVjdEVsZW1lbnRbMF0ub3B0aW9uc1tzZWxlY3RFbGVtZW50WzBdLnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUodmFsdWUpO1xuXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGZyb20gdGhlIHByZXZpb3VzbHkgc2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBzY3JlZW4gcmVhZGVycyBtaWdodCBnZXQgY29uZnVzZWRcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24pIHNlbGVjdGVkT3B0aW9uLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcblxuICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIC8vIERvbid0IHVwZGF0ZSB0aGUgb3B0aW9uIHdoZW4gaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCB0aGUgYnJvd3NlciB3aWxsIHNlbGVjdCB0aGUgZmlyc3Qgb3B0aW9uIGJ5IGRlZmF1bHQuIEluIHRoYXQgY2FzZSxcbiAgICAgICAgICAgIC8vIG1vc3QgcHJvcGVydGllcyBhcmUgc2V0IGF1dG9tYXRpY2FsbHkgLSBleGNlcHQgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlLCB3aGljaCB3ZVxuICAgICAgICAgICAgLy8gc2V0IGFsd2F5c1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0RWxlbWVudFswXS52YWx1ZSAhPT0gb3B0aW9uLnNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuXG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnRbMF0udmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnNlbGVjdFVua25vd25PckVtcHR5T3B0aW9uKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zVmFsdWUoKSB7XG5cbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3NlbGVjdEVsZW1lbnQudmFsKCldO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uICYmICFzZWxlY3RlZE9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgc2VsZWN0Q3RybC51bnNlbGVjdEVtcHR5T3B0aW9uKCk7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24oc2VsZWN0ZWRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIC8vIEZJWE1FOiBXaGVuIGEgdXNlciBzZWxlY3RzIGFuIG9wdGlvbiwgdGhpcyB3YXRjaCB3aWxsIGZpcmUgbmVlZGxlc3NseVxuICAgICAgICBpZiAobmdPcHRpb25zLnRyYWNrQnkpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5nT3B0aW9ucy5nZXRUcmFja0J5VmFsdWUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zTXVsdGlwbGUodmFsdWVzKSB7XG4gICAgICAgICAgLy8gVGhlIG9wdGlvbnMgbWlnaHQgbm90IGJlIGRlZmluZWQgeWV0IHdoZW4gbmdNb2RlbCB0cmllcyB0byByZW5kZXJcbiAgICAgICAgICBpZiAoIW9wdGlvbnMpIHJldHVybjtcblxuICAgICAgICAgIC8vIE9ubHkgc2V0IGA8b3B0aW9uPi5zZWxlY3RlZGAgaWYgbmVjZXNzYXJ5LCBpbiBvcmRlciB0byBwcmV2ZW50IHNvbWUgYnJvd3NlcnMgZnJvbVxuICAgICAgICAgIC8vIHNjcm9sbGluZyB0byBgPG9wdGlvbj5gIGVsZW1lbnRzIHRoYXQgYXJlIG91dHNpZGUgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCdzIHZpZXdwb3J0LlxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbnMgPSB2YWx1ZXMgJiYgdmFsdWVzLm1hcChnZXRBbmRVcGRhdGVTZWxlY3RlZE9wdGlvbikgfHwgW107XG5cbiAgICAgICAgICBvcHRpb25zLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkICYmICFpbmNsdWRlcyhzZWxlY3RlZE9wdGlvbnMsIG9wdGlvbikpIHtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNNdWx0aXBsZSgpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBzZWxlY3RFbGVtZW50LnZhbCgpIHx8IFtdLFxuICAgICAgICAgICAgICBzZWxlY3Rpb25zID0gW107XG5cbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVmFsdWVzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkgc2VsZWN0aW9ucy5wdXNoKG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGVzZSB0cmFja2VkIHZhbHVlcyBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvdmlkZWRFbXB0eU9wdGlvbikge1xuXG4gICAgICAgIC8vIGNvbXBpbGUgdGhlIGVsZW1lbnQgc2luY2UgdGhlcmUgbWlnaHQgYmUgYmluZGluZ3MgaW4gaXRcbiAgICAgICAgJGNvbXBpbGUoc2VsZWN0Q3RybC5lbXB0eU9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZChzZWxlY3RDdHJsLmVtcHR5T3B0aW9uKTtcblxuICAgICAgICBpZiAoc2VsZWN0Q3RybC5lbXB0eU9wdGlvblswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgICAgICAvLyBUaGlzIG1lYW5zIHRoZSBlbXB0eSBvcHRpb24gaGFzIGN1cnJlbnRseSBubyBhY3R1YWwgRE9NIG5vZGUsIHByb2JhYmx5IGJlY2F1c2VcbiAgICAgICAgICAvLyBpdCBoYXMgYmVlbiBtb2RpZmllZCBieSBhIHRyYW5zY2x1c2lvbiBkaXJlY3RpdmUuXG4gICAgICAgICAgc2VsZWN0Q3RybC5oYXNFbXB0eU9wdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gUmVkZWZpbmUgdGhlIHJlZ2lzdGVyT3B0aW9uIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGNhdGNoXG4gICAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGFyZSBhZGRlZCBieSBuZ0lmIGV0Yy4gKHJlbmRlcmluZyBvZiB0aGUgbm9kZSBpcyBhc3luYyBiZWNhdXNlIG9mXG4gICAgICAgICAgLy8gbGF6eSB0cmFuc2NsdXNpb24pXG4gICAgICAgICAgc2VsZWN0Q3RybC5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25TY29wZSwgb3B0aW9uRWwpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25FbC52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5oYXNFbXB0eU9wdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBvcHRpb25FbDtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcbiAgICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBuZXcgZW1wdHkgb3B0aW9uIGlzIHNlbGVjdGVkIGlmIHByZXZpb3VzbHkgbm8gb3B0aW9uIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgb3B0aW9uRWwub24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBuZWVkc1JlcmVuZGVyID0gc2VsZWN0Q3RybC4kaXNFbXB0eU9wdGlvblNlbGVjdGVkKCk7XG5cbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmhhc0VtcHR5T3B0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbiA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIGlmIChuZWVkc1JlcmVuZGVyKSBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXRcbiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XG4gICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXZSB3aWxsIHJlLXJlbmRlciB0aGUgb3B0aW9uIGVsZW1lbnRzIGlmIHRoZSBvcHRpb24gdmFsdWVzIG9yIGxhYmVscyBjaGFuZ2VcbiAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24obmdPcHRpb25zLmdldFdhdGNoYWJsZXMsIHVwZGF0ZU9wdGlvbnMpO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgICAgZnVuY3Rpb24gYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIHBhcmVudCkge1xuICAgICAgICB2YXIgb3B0aW9uRWxlbWVudCA9IG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChvcHRpb25FbGVtZW50KTtcbiAgICAgICAgdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRBbmRVcGRhdGVTZWxlY3RlZE9wdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2aWV3VmFsdWUpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IG9wdGlvbiAmJiBvcHRpb24uZWxlbWVudDtcblxuICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5zZWxlY3RlZCkgZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5LCBFZGdlIDEyLTEzIG9ubHlcbiAgICAgICAgLy8gTk9URTogVGhlIGxhYmVsIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgdmFsdWUsIG90aGVyd2lzZSBJRSAxMSAmIEVkZ2UgY3JlYXRlIHVucmVzcG9uc2l2ZVxuICAgICAgICAvLyBzZWxlY3RzIGluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyB3aGVuIG11bHRpcGxlIHNlbGVjdHMgYXJlIG5leHQgdG8gZWFjaCBvdGhlciBhbmQgZGlzcGxheVxuICAgICAgICAvLyB0aGUgb3B0aW9uIGxpc3QgaW4gbGlzdGJveCBzdHlsZSwgaS5lLiB0aGUgc2VsZWN0IGlzIFttdWx0aXBsZV0sIG9yIHNwZWNpZmllcyBhIFtzaXplXS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzE0IGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIFRoaXMgaXMgdW5mb3J0dW5hdGVseSB1bnRlc3RhYmxlIHdpdGggdW5pdCAvIGUyZSB0ZXN0c1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIFdlIG11c3QgcmVtb3ZlIGFsbCBjdXJyZW50IG9wdGlvbnMsIGJ1dCBjYW5ub3Qgc2ltcGx5IHNldCBpbm5lckhUTUwgPSBudWxsXG4gICAgICAgIC8vIHNpbmNlIHRoZSBwcm92aWRlZEVtcHR5T3B0aW9uIG1pZ2h0IGhhdmUgYW4gbmdJZiBvbiBpdCB0aGF0IGluc2VydHMgY29tbWVudHMgd2hpY2ggd2VcbiAgICAgICAgLy8gbXVzdCBwcmVzZXJ2ZS5cbiAgICAgICAgLy8gSW5zdGVhZCwgaXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IG9wdGlvbiBlbGVtZW50cyBhbmQgcmVtb3ZlIHRoZW0gb3IgdGhlaXIgb3B0Z3JvdXBcbiAgICAgICAgLy8gcGFyZW50c1xuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IG9wdGlvbnMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb24uZ3JvdXApKSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG5nT3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgdmFyIGdyb3VwRWxlbWVudE1hcCA9IHt9O1xuXG4gICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiBhZGRPcHRpb24ob3B0aW9uKSB7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcblxuICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9uLmdyb3VwKSkge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyB0byBsaXZlIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdyb3VwXG4gICAgICAgICAgICBncm91cEVsZW1lbnQgPSBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXTtcblxuICAgICAgICAgICAgaWYgKCFncm91cEVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBvcHRHcm91cFRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgIGxpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChncm91cEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbGFiZWwgb24gdGhlIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gXCJudWxsXCIgaXMgc3BlY2lhbCBjYXNlZCBiZWNhdXNlIG9mIFNhZmFyaVxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXAgPT09IG51bGwgPyAnbnVsbCcgOiBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXSA9IGdyb3VwRWxlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGdyb3VwRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgbm90IGluIGEgZ3JvdXBcbiAgICAgICAgICAgIGFkZE9wdGlvbkVsZW1lbnQob3B0aW9uLCBsaXN0RnJhZ21lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VsZWN0RWxlbWVudFswXS5hcHBlbmRDaGlsZChsaXN0RnJhZ21lbnQpO1xuXG4gICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcblxuICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkIGR1ZSB0byB0aGUgdXBkYXRlIHRvIHRoZSBvcHRpb25zXG4gICAgICAgIGlmICghbmdNb2RlbEN0cmwuJGlzRW1wdHkocHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gc2VsZWN0Q3RybC5yZWFkVmFsdWUoKTtcbiAgICAgICAgICB2YXIgaXNOb3RQcmltaXRpdmUgPSBuZ09wdGlvbnMudHJhY2tCeSB8fCBtdWx0aXBsZTtcbiAgICAgICAgICBpZiAoaXNOb3RQcmltaXRpdmUgPyAhZXF1YWxzKHByZXZpb3VzVmFsdWUsIG5leHRWYWx1ZSkgOiBwcmV2aW91c1ZhbHVlICE9PSBuZXh0VmFsdWUpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgcmVxdWlyZTogWydzZWxlY3QnLCAnbmdNb2RlbCddLFxuICAgICAgbGluazoge1xuICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nT3B0aW9uc1ByZUxpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgLy8gRGVhY3RpdmF0ZSB0aGUgU2VsZWN0Q29udHJvbGxlci5yZWdpc3RlciBtZXRob2QgdG8gcHJldmVudFxuICAgICAgICAgIC8vIG9wdGlvbiBkaXJlY3RpdmVzIGZyb20gYWNjaWRlbnRhbGx5IHJlZ2lzdGVyaW5nIHRoZW1zZWx2ZXNcbiAgICAgICAgICAvLyAoYW5kIHVud2FudGVkICRkZXN0cm95IGhhbmRsZXJzIGV0Yy4pXG4gICAgICAgICAgY3RybHNbMF0ucmVnaXN0ZXJPcHRpb24gPSBub29wO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0OiBuZ09wdGlvbnNQb3N0TGlua1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nUGx1cmFsaXplXG4gICAqIEByZXN0cmljdCBFQVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuXG4gICAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcywgYnV0IGNhbiBiZSBvdmVycmlkZGVuXG4gICAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICAgKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuXG4gICAqIFtwbHVyYWwgY2F0ZWdvcmllc10oaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sKVxuICAgKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICAgKlxuICAgKiAjIFBsdXJhbCBjYXRlZ29yaWVzIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXNcbiAgICogVGhlcmUgYXJlIHR3b1xuICAgKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAgICogaW4gQW5ndWxhcidzIGRlZmF1bHQgZW4tVVMgbG9jYWxlOiBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gICAqXG4gICAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsIFwib3RoZXJcIiBjYW4gbWF0Y2hcbiAgICogYW55IG51bWJlciB0aGF0IGlzIG5vdCAxKSwgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgY2FuIG9ubHkgbWF0Y2ggb25lIG51bWJlci4gRm9yIGV4YW1wbGUsIHRoZVxuICAgKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICAgKiBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhpcyBkb2N1bWVudGF0aW9uLlxuICAgKlxuICAgKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gICAqIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgYnkgcHJvdmlkaW5nIDIgYXR0cmlidXRlczogYGNvdW50YCBhbmQgYHdoZW5gLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhdHRyaWJ1dGUsIGBvZmZzZXRgLlxuICAgKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBjb3VudGAgYXR0cmlidXRlIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb25cbiAgICogQW5ndWxhciBleHByZXNzaW9ufTsgdGhlc2UgYXJlIGV2YWx1YXRlZCBvbiB0aGUgY3VycmVudCBzY29wZSBmb3IgaXRzIGJvdW5kIHZhbHVlLlxuICAgKlxuICAgKiBUaGUgYHdoZW5gIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG1hcHBpbmdzIGJldHdlZW4gcGx1cmFsIGNhdGVnb3JpZXMgYW5kIHRoZSBhY3R1YWxcbiAgICogc3RyaW5nIHRvIGJlIGRpc3BsYXllZC4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3QuXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY29uZmlndXJlIG5nUGx1cmFsaXplOlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgKiA8L25nLXBsdXJhbGl6ZT5cbiAgICpgYGBcbiAgICpcbiAgICogSW4gdGhlIGV4YW1wbGUsIGBcIjA6IE5vYm9keSBpcyB2aWV3aW5nLlwiYCBpcyBhbiBleHBsaWNpdCBudW1iZXIgcnVsZS4gSWYgeW91IGRpZCBub3RcbiAgICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAgICogd291bGQgYmUgc2hvd24gaW5zdGVhZCBvZiBcIk5vYm9keSBpcyB2aWV3aW5nXCIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3JcbiAgICogb3RoZXIgbnVtYmVycywgZm9yIGV4YW1wbGUgMTIsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaG93aW5nIFwiMTIgcGVvcGxlIGFyZSB2aWV3aW5nXCIsIHlvdSBjYW5cbiAgICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gICAqXG4gICAqIFlvdSBjYW4gdXNlIGEgc2V0IG9mIGNsb3NlZCBicmFjZXMgKGB7fWApIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBudW1iZXIgdGhhdCB5b3Ugd2FudCBzdWJzdGl0dXRlZFxuICAgKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICAgKiA8c3BhbiBuZy1ub24tYmluZGFibGU+YHt7cGVyc29uQ291bnR9fWA8L3NwYW4+LiBUaGUgY2xvc2VkIGJyYWNlcyBge31gIGlzIGEgcGxhY2Vob2xkZXJcbiAgICogZm9yIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57e251bWJlckV4cHJlc3Npb259fTwvc3Bhbj4uXG4gICAqXG4gICAqIElmIG5vIHJ1bGUgaXMgZGVmaW5lZCBmb3IgYSBjYXRlZ29yeSwgdGhlbiBhbiBlbXB0eSBzdHJpbmcgaXMgZGlzcGxheWVkIGFuZCBhIHdhcm5pbmcgaXMgZ2VuZXJhdGVkLlxuICAgKiBOb3RlIHRoYXQgc29tZSBsb2NhbGVzIGRlZmluZSBtb3JlIGNhdGVnb3JpZXMgdGhhbiBgb25lYCBhbmQgYG90aGVyYC4gRm9yIGV4YW1wbGUsIGZyLWZyIGRlZmluZXMgYGZld2AgYW5kIGBtYW55YC5cbiAgICpcbiAgICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZSB3aXRoIG9mZnNldFxuICAgKiBUaGUgYG9mZnNldGAgYXR0cmlidXRlIGFsbG93cyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgcGx1cmFsaXplZCB0ZXh0LCB3aGljaCBjYW4gcmVzdWx0IGluXG4gICAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gICAqIHlvdSBtaWdodCBkaXNwbGF5IFwiSm9obiwgS2F0ZSBhbmQgMiBvdGhlcnMgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLlxuICAgKiBUaGUgb2Zmc2V0IGF0dHJpYnV0ZSBhbGxvd3MgeW91IHRvIG9mZnNldCBhIG51bWJlciBieSBhbnkgZGVzaXJlZCB2YWx1ZS5cbiAgICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICAgKiAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAqIDwvbmctcGx1cmFsaXplPlxuICAgKiBgYGBcbiAgICpcbiAgICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gICAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLlxuICAgKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCBcIkpvaG4gaXMgdmlld2luZ1wiIHdpbGwgYmUgc2hvd24uXG4gICAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAgICogYW4gb2Zmc2V0IG9mIDIgaXMgdGFrZW4gb2ZmIDMsIGFuZCBBbmd1bGFyIHVzZXMgMSB0byBkZWNpZGUgdGhlIHBsdXJhbCBjYXRlZ29yeS5cbiAgICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgXCJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nXCJcbiAgICogaXMgc2hvd24uXG4gICAqXG4gICAqIE5vdGUgdGhhdCB3aGVuIHlvdSBzcGVjaWZ5IG9mZnNldHMsIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvclxuICAgKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICAgKiB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3IgMCwgMSwgMiBhbmQgMy4gWW91IG11c3QgYWxzbyBwcm92aWRlIHBsdXJhbCBzdHJpbmdzIGZvclxuICAgKiBwbHVyYWwgY2F0ZWdvcmllcyBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGV4cHJlc3Npb259IGNvdW50IFRoZSB2YXJpYWJsZSB0byBiZSBib3VuZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCIgbmFtZT1cIm5nLXBsdXJhbGl6ZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncGx1cmFsaXplRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wZXJzb24xID0gJ0lnb3InO1xuICAgICAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJztcbiAgICAgICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgIDxsYWJlbD5QZXJzb24gMTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjFcIiB2YWx1ZT1cIklnb3JcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgIDxsYWJlbD5QZXJzb24gMjo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjJcIiB2YWx1ZT1cIk1pc2tvXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgICA8bGFiZWw+TnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbkNvdW50XCIgdmFsdWU9XCIxXCIgLz48L2xhYmVsPjxici8+XG4gIFxuICAgICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxuICAgICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XG4gICAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cbiAgXG4gICAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT5cbiAgICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxuICAgICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApO1xuICAgICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgICB2YXIgY291bnRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpO1xuICBcbiAgICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcbiAgICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBpcyB2aWV3aW5nLicpO1xuICBcbiAgICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzAnKTtcbiAgXG4gICAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcbiAgXG4gICAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcyJyk7XG4gIFxuICAgICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7XG4gIFxuICAgICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMycpO1xuICBcbiAgICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicpO1xuICBcbiAgICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzQnKTtcbiAgXG4gICAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG4gICAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7XG4gICAgICAgICAgICB2YXIgcGVyc29uMiA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjInKSk7XG4gICAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpO1xuICAgICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTtcbiAgICAgICAgICAgIHBlcnNvbjEuY2xlYXIoKTtcbiAgICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7XG4gICAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7XG4gICAgICAgICAgICBwZXJzb24yLnNlbmRLZXlzKCdWb2p0YScpO1xuICAgICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICB2YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgJyRsb2cnLCBmdW5jdGlvbiAoJGxvY2FsZSwgJGludGVycG9sYXRlLCAkbG9nKSB7XG4gICAgdmFyIEJSQUNFID0gL3t9L2csXG4gICAgICAgIElTX1dIRU4gPSAvXndoZW4oTWludXMpPyguKykkLztcblxuICAgIHJldHVybiB7XG4gICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LFxuICAgICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSxcbiAgICAgICAgICAgIC8vIHdlIGhhdmUge3t9fSBpbiBhdHRyc1xuICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLFxuICAgICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSB8fCB7fSxcbiAgICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXG4gICAgICAgICAgICBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICAgICAgYnJhY2VSZXBsYWNlbWVudCA9IHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsgb2Zmc2V0ICsgZW5kU3ltYm9sLFxuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gYW5ndWxhci5ub29wLFxuICAgICAgICAgICAgbGFzdENvdW50O1xuXG4gICAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24gKGV4cHJlc3Npb24sIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICB2YXIgdG1wTWF0Y2ggPSBJU19XSEVOLmV4ZWMoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgaWYgKHRtcE1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgd2hlbktleSA9ICh0bXBNYXRjaFsxXSA/ICctJyA6ICcnKSArIGxvd2VyY2FzZSh0bXBNYXRjaFsyXSk7XG4gICAgICAgICAgICB3aGVuc1t3aGVuS2V5XSA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbiAoZXhwcmVzc2lvbiwga2V5KSB7XG4gICAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9ICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIGJyYWNlUmVwbGFjZW1lbnQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKG51bWJlckV4cCwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICB2YXIgY291bnQgPSBwYXJzZUZsb2F0KG5ld1ZhbCk7XG4gICAgICAgICAgdmFyIGNvdW50SXNOYU4gPSBpc051bWJlck5hTihjb3VudCk7XG5cbiAgICAgICAgICBpZiAoIWNvdW50SXNOYU4gJiYgIShjb3VudCBpbiB3aGVucykpIHtcbiAgICAgICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaXQgYWdhaW5zdCBwbHVyYWxpemF0aW9uIHJ1bGVzIGluICRsb2NhbGUgc2VydmljZS5cbiAgICAgICAgICAgIGNvdW50ID0gJGxvY2FsZS5wbHVyYWxDYXQoY291bnQgLSBvZmZzZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIGJvdGggYGNvdW50YCBhbmQgYGxhc3RDb3VudGAgYXJlIE5hTiwgd2UgZG9uJ3QgbmVlZCB0byByZS1yZWdpc3RlciBhIHdhdGNoLlxuICAgICAgICAgIC8vIEluIEpTIGBOYU4gIT09IE5hTmAsIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBjaGVjay5cbiAgICAgICAgICBpZiAoY291bnQgIT09IGxhc3RDb3VudCAmJiAhKGNvdW50SXNOYU4gJiYgaXNOdW1iZXJOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICAgIHdhdGNoUmVtb3ZlcigpO1xuICAgICAgICAgICAgdmFyIHdoZW5FeHBGbiA9IHdoZW5zRXhwRm5zW2NvdW50XTtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aGVuRXhwRm4pKSB7XG4gICAgICAgICAgICAgIGlmIChuZXdWYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICRsb2cuZGVidWcoJ25nUGx1cmFsaXplOiBubyBydWxlIGRlZmluZWQgZm9yIFxcJycgKyBjb3VudCArICdcXCcgaW4gJyArIHdoZW5FeHApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IG5vb3A7XG4gICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRUZXh0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBzY29wZS4kd2F0Y2god2hlbkV4cEZuLCB1cGRhdGVFbGVtZW50VGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRUZXh0KG5ld1RleHQpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHQobmV3VGV4dCB8fCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKiBleHBvcnRlZCBuZ1JlcGVhdERpcmVjdGl2ZSAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nUmVwZWF0XG4gICAqIEBtdWx0aUVsZW1lbnRcbiAgICogQHJlc3RyaWN0IEFcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlXG4gICAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAgICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuXG4gICAqXG4gICAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICAgKlxuICAgKiB8IFZhcmlhYmxlICB8IFR5cGUgICAgICAgICAgICB8IERldGFpbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IGAkZmlyc3RgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAgICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IGAkZXZlbmAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIGV2ZW4gKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICB8XG4gICAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogICBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICAgKiAgIFRoaXMgbWF5IGJlIHVzZWZ1bCB3aGVuLCBmb3IgaW5zdGFuY2UsIG5lc3RpbmcgbmdSZXBlYXRzLlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICpcbiAgICogIyBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllc1xuICAgKlxuICAgKiBJdCBpcyBwb3NzaWJsZSB0byBnZXQgYG5nUmVwZWF0YCB0byBpdGVyYXRlIG92ZXIgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIHRoZSBmb2xsb3dpbmdcbiAgICogc3ludGF4OlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBteU9ialwiPiAuLi4gPC9kaXY+XG4gICAqIGBgYFxuICAgKlxuICAgKiBIb3dldmVyLCB0aGVyZSBhcmUgYSBmZXcgbGltaXRhdGlvbnMgY29tcGFyZWQgdG8gYXJyYXkgaXRlcmF0aW9uOlxuICAgKlxuICAgKiAtIFRoZSBKYXZhU2NyaXB0IHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIHRoZSBvcmRlciBvZiBrZXlzXG4gICAqICAgcmV0dXJuZWQgZm9yIGFuIG9iamVjdCwgc28gQW5ndWxhciByZWxpZXMgb24gdGhlIG9yZGVyIHJldHVybmVkIGJ5IHRoZSBicm93c2VyXG4gICAqICAgd2hlbiBydW5uaW5nIGBmb3Iga2V5IGluIG15T2JqYC4gQnJvd3NlcnMgZ2VuZXJhbGx5IGZvbGxvdyB0aGUgc3RyYXRlZ3kgb2YgcHJvdmlkaW5nXG4gICAqICAga2V5cyBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGRlZmluZWQsIGFsdGhvdWdoIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZW4ga2V5cyBhcmUgZGVsZXRlZFxuICAgKiAgIGFuZCByZWluc3RhdGVkLiBTZWUgdGhlXG4gICAqICAgW01ETiBwYWdlIG9uIGBkZWxldGVgIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGUjQ3Jvc3MtYnJvd3Nlcl9ub3RlcykuXG4gICAqXG4gICAqIC0gYG5nUmVwZWF0YCB3aWxsIHNpbGVudGx5ICppZ25vcmUqIG9iamVjdCBrZXlzIHN0YXJ0aW5nIHdpdGggYCRgLCBiZWNhdXNlXG4gICAqICAgaXQncyBhIHByZWZpeCB1c2VkIGJ5IEFuZ3VsYXIgZm9yIHB1YmxpYyAoYCRgKSBhbmQgcHJpdmF0ZSAoYCQkYCkgcHJvcGVydGllcy5cbiAgICpcbiAgICogLSBUaGUgYnVpbHQtaW4gZmlsdGVycyB7QGxpbmsgbmcub3JkZXJCeSBvcmRlckJ5fSBhbmQge0BsaW5rIG5nLmZpbHRlciBmaWx0ZXJ9IGRvIG5vdCB3b3JrIHdpdGhcbiAgICogICBvYmplY3RzLCBhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB1c2VkIHdpdGggb25lLlxuICAgKlxuICAgKiBJZiB5b3UgYXJlIGhpdHRpbmcgYW55IG9mIHRoZXNlIGxpbWl0YXRpb25zLCB0aGUgcmVjb21tZW5kZWQgd29ya2Fyb3VuZCBpcyB0byBjb252ZXJ0IHlvdXIgb2JqZWN0IGludG8gYW4gYXJyYXlcbiAgICogdGhhdCBpcyBzb3J0ZWQgaW50byB0aGUgb3JkZXIgdGhhdCB5b3UgcHJlZmVyIGJlZm9yZSBwcm92aWRpbmcgaXQgdG8gYG5nUmVwZWF0YC4gWW91IGNvdWxkXG4gICAqIGRvIHRoaXMgd2l0aCBhIGZpbHRlciBzdWNoIGFzIFt0b0FycmF5RmlsdGVyXShodHRwOi8vbmdtb2R1bGVzLm9yZy9tb2R1bGVzL2FuZ3VsYXItdG9BcnJheUZpbHRlcilcbiAgICogb3IgaW1wbGVtZW50IGEgYCR3YXRjaGAgb24gdGhlIG9iamVjdCB5b3Vyc2VsZi5cbiAgICpcbiAgICpcbiAgICogIyBUcmFja2luZyBhbmQgRHVwbGljYXRlc1xuICAgKlxuICAgKiBgbmdSZXBlYXRgIHVzZXMge0BsaW5rICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9ufSB0byBkZXRlY3QgY2hhbmdlcyBpblxuICAgKiB0aGUgY29sbGVjdGlvbi4gV2hlbiBhIGNoYW5nZSBoYXBwZW5zLCBgbmdSZXBlYXRgIHRoZW4gbWFrZXMgdGhlIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0byB0aGUgRE9NOlxuICAgKlxuICAgKiAqIFdoZW4gYW4gaXRlbSBpcyBhZGRlZCwgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlIGlzIGFkZGVkIHRvIHRoZSBET00uXG4gICAqICogV2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQsIGl0cyB0ZW1wbGF0ZSBpbnN0YW5jZSBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICogKiBXaGVuIGl0ZW1zIGFyZSByZW9yZGVyZWQsIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGVzIGFyZSByZW9yZGVyZWQgaW4gdGhlIERPTS5cbiAgICpcbiAgICogVG8gbWluaW1pemUgY3JlYXRpb24gb2YgRE9NIGVsZW1lbnRzLCBgbmdSZXBlYXRgIHVzZXMgYSBmdW5jdGlvblxuICAgKiB0byBcImtlZXAgdHJhY2tcIiBvZiBhbGwgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnRzLlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgY29sbGVjdGlvbiwgYG5nUmVwZWF0YCB3aWxsIGtub3cgdGhhdCBhbGwgb3RoZXIgaXRlbXNcbiAgICogYWxyZWFkeSBoYXZlIERPTSBlbGVtZW50cywgYW5kIHdpbGwgbm90IHJlLXJlbmRlciB0aGVtLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB0cmFja2luZyBmdW5jdGlvbiAod2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5KSBkb2VzIG5vdCBhbGxvd1xuICAgKiBkdXBsaWNhdGUgaXRlbXMgaW4gYXJyYXlzLiBUaGlzIGlzIGJlY2F1c2Ugd2hlbiB0aGVyZSBhcmUgZHVwbGljYXRlcywgaXQgaXMgbm90IHBvc3NpYmxlXG4gICAqIHRvIG1haW50YWluIGEgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW4gY29sbGVjdGlvbiBpdGVtcyBhbmQgRE9NIGVsZW1lbnRzLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byByZXBlYXQgZHVwbGljYXRlIGl0ZW1zLCB5b3UgY2FuIHN1YnN0aXR1dGUgdGhlIGRlZmF1bHQgdHJhY2tpbmcgYmVoYXZpb3JcbiAgICogd2l0aCB5b3VyIG93biB1c2luZyB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgeW91IG1heSB0cmFjayBpdGVtcyBieSB0aGUgaW5kZXggb2YgZWFjaCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLCB1c2luZyB0aGVcbiAgICogc3BlY2lhbCBzY29wZSBwcm9wZXJ0eSBgJGluZGV4YDpcbiAgICogYGBgaHRtbFxuICAgKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm4gaW4gWzQyLCA0MiwgNDMsIDQzXSB0cmFjayBieSAkaW5kZXhcIj5cbiAgICogICAgICB7e259fVxuICAgKiAgICA8L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIFlvdSBtYXkgYWxzbyB1c2UgYXJiaXRyYXJ5IGV4cHJlc3Npb25zIGluIGB0cmFjayBieWAsIGluY2x1ZGluZyByZWZlcmVuY2VzIHRvIGN1c3RvbSBmdW5jdGlvbnNcbiAgICogb24gdGhlIHNjb3BlOlxuICAgKiBgYGBodG1sXG4gICAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5IG15VHJhY2tpbmdGdW5jdGlvbihuKVwiPlxuICAgKiAgICAgIHt7bn19XG4gICAqICAgIDwvZGl2PlxuICAgKiBgYGBcbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICogSWYgeW91IGFyZSB3b3JraW5nIHdpdGggb2JqZWN0cyB0aGF0IGhhdmUgYSB1bmlxdWUgaWRlbnRpZmllciBwcm9wZXJ0eSwgeW91IHNob3VsZCB0cmFja1xuICAgKiBieSB0aGlzIGlkZW50aWZpZXIgaW5zdGVhZCBvZiB0aGUgb2JqZWN0IGluc3RhbmNlLiBTaG91bGQgeW91IHJlbG9hZCB5b3VyIGRhdGEgbGF0ZXIsIGBuZ1JlcGVhdGBcbiAgICogd2lsbCBub3QgaGF2ZSB0byByZWJ1aWxkIHRoZSBET00gZWxlbWVudHMgZm9yIGl0ZW1zIGl0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBldmVuIGlmIHRoZVxuICAgKiBKYXZhU2NyaXB0IG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gaGF2ZSBiZWVuIHN1YnN0aXR1dGVkIGZvciBuZXcgb25lcy4gRm9yIGxhcmdlIGNvbGxlY3Rpb25zLFxuICAgKiB0aGlzIHNpZ25pZmljYW50bHkgaW1wcm92ZXMgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIHVuaXF1ZSBpZGVudGlmaWVyLFxuICAgKiBgdHJhY2sgYnkgJGluZGV4YCBjYW4gYWxzbyBwcm92aWRlIGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqICAgIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB0cmFjayBieSBtb2RlbC5pZFwiPlxuICAgKiAgICAgIHt7bW9kZWwubmFtZX19XG4gICAqICAgIDwvZGl2PlxuICAgKiBgYGBcbiAgICpcbiAgICogPGJyIC8+XG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqIEF2b2lkIHVzaW5nIGB0cmFjayBieSAkaW5kZXhgIHdoZW4gdGhlIHJlcGVhdGVkIHRlbXBsYXRlIGNvbnRhaW5zXG4gICAqIHtAbGluayBndWlkZS9leHByZXNzaW9uI29uZS10aW1lLWJpbmRpbmcgb25lLXRpbWUgYmluZGluZ3N9LiBJbiBzdWNoIGNhc2VzLCB0aGUgYG50aGAgRE9NXG4gICAqIGVsZW1lbnQgd2lsbCBhbHdheXMgYmUgbWF0Y2hlZCB3aXRoIHRoZSBgbnRoYCBpdGVtIG9mIHRoZSBhcnJheSwgc28gdGhlIGJpbmRpbmdzIG9uIHRoYXQgZWxlbWVudFxuICAgKiB3aWxsIG5vdCBiZSB1cGRhdGVkIGV2ZW4gd2hlbiB0aGUgY29ycmVzcG9uZGluZyBpdGVtIGNoYW5nZXMsIGVzc2VudGlhbGx5IGNhdXNpbmcgdGhlIHZpZXcgdG8gZ2V0XG4gICAqIG91dC1vZi1zeW5jIHdpdGggdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIFdoZW4gbm8gYHRyYWNrIGJ5YCBleHByZXNzaW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBlcXVpdmFsZW50IHRvIHRyYWNraW5nIGJ5IHRoZSBidWlsdC1pblxuICAgKiBgJGlkYCBmdW5jdGlvbiwgd2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5OlxuICAgKiBgYGBodG1sXG4gICAqICAgIDxkaXYgbmctcmVwZWF0PVwib2JqIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgJGlkKG9iailcIj5cbiAgICogICAgICB7e29iai5wcm9wfX1cbiAgICogICAgPC9kaXY+XG4gICAqIGBgYFxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIGB0cmFjayBieWAgbXVzdCBhbHdheXMgYmUgdGhlIGxhc3QgZXhwcmVzc2lvbjpcbiAgICogPC9kaXY+XG4gICAqIGBgYFxuICAgKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gfCBvcmRlckJ5OiAnaWQnIGFzIGZpbHRlcmVkX3Jlc3VsdCB0cmFjayBieSBtb2RlbC5pZFwiPlxuICAgKiAgICAgIHt7bW9kZWwubmFtZX19XG4gICAqICAgIDwvZGl2PlxuICAgKiBgYGBcbiAgICpcbiAgICpcbiAgICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICAgKiBUbyByZXBlYXQgYSBzZXJpZXMgb2YgZWxlbWVudHMgaW5zdGVhZCBvZiBqdXN0IG9uZSBwYXJlbnQgZWxlbWVudCwgbmdSZXBlYXQgKGFzIHdlbGwgYXMgb3RoZXIgbmcgZGlyZWN0aXZlcykgc3VwcG9ydHMgZXh0ZW5kaW5nXG4gICAqIHRoZSByYW5nZSBvZiB0aGUgcmVwZWF0ZXIgYnkgZGVmaW5pbmcgZXhwbGljaXQgc3RhcnQgYW5kIGVuZCBwb2ludHMgYnkgdXNpbmcgKipuZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZy1yZXBlYXQtZW5kKiogcmVzcGVjdGl2ZWx5LlxuICAgKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gICAqIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGVuZGluZyBIVE1MIHRhZyB3aGVyZSAqKm5nLXJlcGVhdC1lbmQqKiBpcyBwbGFjZWQuXG4gICAqXG4gICAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gICAqIGBgYGh0bWxcbiAgICogICA8aGVhZGVyIG5nLXJlcGVhdC1zdGFydD1cIml0ZW0gaW4gaXRlbXNcIj5cbiAgICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gICAqICAgPC9oZWFkZXI+XG4gICAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAgICogICAgIEJvZHkge3sgaXRlbSB9fVxuICAgKiAgIDwvZGl2PlxuICAgKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD5cbiAgICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gICAqICAgPC9mb290ZXI+XG4gICAqIGBgYFxuICAgKlxuICAgKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86XG4gICAqIGBgYGh0bWxcbiAgICogICA8aGVhZGVyPlxuICAgKiAgICAgSGVhZGVyIEFcbiAgICogICA8L2hlYWRlcj5cbiAgICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICAgKiAgICAgQm9keSBBXG4gICAqICAgPC9kaXY+XG4gICAqICAgPGZvb3Rlcj5cbiAgICogICAgIEZvb3RlciBBXG4gICAqICAgPC9mb290ZXI+XG4gICAqICAgPGhlYWRlcj5cbiAgICogICAgIEhlYWRlciBCXG4gICAqICAgPC9oZWFkZXI+XG4gICAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAgICogICAgIEJvZHkgQlxuICAgKiAgIDwvZGl2PlxuICAgKiAgIDxmb290ZXI+XG4gICAqICAgICBGb290ZXIgQlxuICAgKiAgIDwvZm9vdGVyPlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIGN1c3RvbSBzdGFydCBhbmQgZW5kIHBvaW50cyBmb3IgbmdSZXBlYXQgYWxzbyBzdXBwb3J0IGFsbCBvdGhlciBIVE1MIGRpcmVjdGl2ZSBzeW50YXggZmxhdm9ycyBwcm92aWRlZCBpbiBBbmd1bGFySlMgKHN1Y2hcbiAgICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICAgKlxuICAgKiBAYW5pbWF0aW9uc1xuICAgKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNlbnRlciBlbnRlcn0gfCB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyIHxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9IHwgd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgZmlsdGVyZWQgb3V0IHxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbW92ZSBtb3ZlIH0gfCB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZCB8XG4gICAqXG4gICAqIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgZGVmaW5pbmcgQ1NTIGFuaW1hdGlvbnMgd2l0aCBuZ1JlcGVhdC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBzY29wZVxuICAgKiBAcHJpb3JpdHkgMTAwMFxuICAgKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZVxuICAgKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6XG4gICAqXG4gICAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gXG4gICAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAgICpcbiAgICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuXG4gICAqXG4gICAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAgICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAgICpcbiAgICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAgICpcbiAgICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCB0cmFja2luZyBleHByZXNzaW9uXG4gICAqICAgICB3aGljaCBjYW4gYmUgdXNlZCB0byBhc3NvY2lhdGUgdGhlIG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gd2l0aCB0aGUgRE9NIGVsZW1lbnRzLiBJZiBubyB0cmFja2luZyBleHByZXNzaW9uXG4gICAqICAgICBpcyBzcGVjaWZpZWQsIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5LiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gICAqICAgICBtb3JlIHRoYW4gb25lIHRyYWNraW5nIGV4cHJlc3Npb24gdmFsdWUgcmVzb2x2ZSB0byB0aGUgc2FtZSBrZXkuIChUaGlzIHdvdWxkIG1lYW4gdGhhdCB0d28gZGlzdGluY3Qgb2JqZWN0cyBhcmVcbiAgICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLilcbiAgICpcbiAgICogICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gdGhlIGB0cmFjayBieWAgZXhwcmVzc2lvbiBtdXN0IGNvbWUgbGFzdCAtIGFmdGVyIGFueSBmaWx0ZXJzLCBhbmQgdGhlIGFsaWFzIGV4cHJlc3Npb24uXG4gICAqICAgICA8L2Rpdj5cbiAgICpcbiAgICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtc2AgaXMgZXF1aXZhbGVudCB0byBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgRE9NIGVsZW1lbnRzXG4gICAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXG4gICAqXG4gICAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gQSBidWlsdCBpbiBgJGlkKClgIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGFzc2lnbiBhIHVuaXF1ZVxuICAgKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcbiAgICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gICAqICAgICBlbGVtZW50IGluIHRoZSBzYW1lIHdheSBpbiB0aGUgRE9NLlxuICAgKlxuICAgKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAgICogICAgIGNhc2UgdGhlIG9iamVjdCBpZGVudGl0eSBkb2VzIG5vdCBtYXR0ZXIuIFR3byBvYmplY3RzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgYXMgbG9uZyBhcyB0aGVpciBgaWRgXG4gICAqICAgICBwcm9wZXJ0eSBpcyBzYW1lLlxuICAgKlxuICAgKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnNlYXJjaFRleHQgdHJhY2sgYnkgaXRlbS5pZGAgaXMgYSBwYXR0ZXJuIHRoYXQgbWlnaHQgYmUgdXNlZCB0byBhcHBseSBhIGZpbHRlclxuICAgKiAgICAgdG8gaXRlbXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHRyYWNraW5nIGV4cHJlc3Npb24uXG4gICAqXG4gICAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiBhcyBhbGlhc19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYWxpYXMgZXhwcmVzc2lvbiB3aGljaCB3aWxsIHRoZW4gc3RvcmUgdGhlXG4gICAqICAgICBpbnRlcm1lZGlhdGUgcmVzdWx0cyBvZiB0aGUgcmVwZWF0ZXIgYWZ0ZXIgdGhlIGZpbHRlcnMgaGF2ZSBiZWVuIGFwcGxpZWQuIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gcmVuZGVyIGEgc3BlY2lhbCBtZXNzYWdlXG4gICAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAgICpcbiAgICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjp4IGFzIHJlc3VsdHNgIHdpbGwgc3RvcmUgdGhlIGZyYWdtZW50IG9mIHRoZSByZXBlYXRlZCBpdGVtcyBhcyBgcmVzdWx0c2AsIGJ1dCBvbmx5IGFmdGVyXG4gICAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gICAqXG4gICAqICAgICBQbGVhc2Ugbm90ZSB0aGF0IGBhcyBbdmFyaWFibGUgbmFtZV0gaXMgbm90IGFuIG9wZXJhdG9yIGJ1dCByYXRoZXIgYSBwYXJ0IG9mIG5nUmVwZWF0IG1pY3JvLXN5bnRheCBzbyBpdCBjYW4gYmUgdXNlZCBvbmx5IGF0IHRoZSBlbmRcbiAgICogICAgIChhbmQgbm90IGFzIG9wZXJhdG9yLCBpbnNpZGUgYW4gZXhwcmVzc2lvbikuXG4gICAqXG4gICAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXIgOiB4IHwgb3JkZXJCeSA6IG9yZGVyIHwgbGltaXRUbyA6IGxpbWl0IGFzIHJlc3VsdHNgIC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBleGFtcGxlIHVzZXMgYG5nUmVwZWF0YCB0byBkaXNwbGF5IGEgbGlzdCBvZiBwZW9wbGUuIEEgZmlsdGVyIGlzIHVzZWQgdG8gcmVzdHJpY3QgdGhlIGRpc3BsYXllZFxuICAgKiByZXN1bHRzIGJ5IG5hbWUgb3IgYnkgYWdlLiBOZXcgKGVudGVyaW5nKSBhbmQgcmVtb3ZlZCAobGVhdmluZykgaXRlbXMgYXJlIGFuaW1hdGVkLlxuICAgIDxleGFtcGxlIG1vZHVsZT1cIm5nUmVwZWF0XCIgbmFtZT1cIm5nUmVwZWF0XCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXJlcGVhdFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwicmVwZWF0Q29udHJvbGxlclwiPlxuICAgICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnEgYXMgcmVzdWx0c1wiPlxuICAgICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctaWY9XCJyZXN1bHRzLmxlbmd0aCA9PT0gMFwiPlxuICAgICAgICAgICAgICA8c3Ryb25nPk5vIHJlc3VsdHMgZm91bmQuLi48L3N0cm9uZz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1JlcGVhdCcsIFsnbmdBbmltYXRlJ10pLmNvbnRyb2xsZXIoJ3JlcGVhdENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICAgIHtuYW1lOidKb2huJywgYWdlOjI1LCBnZW5kZXI6J2JveSd9LFxuICAgICAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAgICB7bmFtZTonSm9oYW5uYScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAgICB7bmFtZTonSm95JywgYWdlOjE1LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICAgIHtuYW1lOidQZXRlcicsIGFnZTo5NSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICAgIHtuYW1lOidTZWJhc3RpYW4nLCBhZ2U6NTAsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgICAge25hbWU6J1BhdHJpY2snLCBhZ2U6NDAsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAgICB7bmFtZTonU2FtYW50aGEnLCBhZ2U6NjAsIGdlbmRlcjonZ2lybCd9XG4gICAgICAgICAgXTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLmV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIge1xuICAgICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgICAgbWFyZ2luOjA7XG4gICAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6MzBweDtcbiAgICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgICB9XG4gIFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUge1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyIHtcbiAgICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgICAgbWF4LWhlaWdodDowO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUsXG4gICAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLm5nLW1vdmUtYWN0aXZlLFxuICAgICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgICBvcGFjaXR5OjE7XG4gICAgICAgICAgbWF4LWhlaWdodDozMHB4O1xuICAgICAgICB9XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuICBcbiAgICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBKb2huIHdobyBpcyAyNSB5ZWFycyBvbGQuJyk7XG4gICAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDEpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIEplc3NpZSB3aG8gaXMgMzAgeWVhcnMgb2xkLicpO1xuICAgICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS5nZXRUZXh0KCkpXG4gICAgICAgICAgICAgIC50b01hdGNoKFwiSSBoYXZlIDEwIGZyaWVuZHMuIFRoZXkgYXJlOlwiKTtcbiAgICAgICAgfSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgcmVwZWF0ZXIgd2hlbiBmaWx0ZXIgcHJlZGljYXRlIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG4gIFxuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdxJykpLnNlbmRLZXlzKCdtYScpO1xuICBcbiAgICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgyKTtcbiAgICAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDApLmdldFRleHQoKSkudG9FcXVhbCgnWzFdIE1hcnkgd2hvIGlzIDI4IHllYXJzIG9sZC4nKTtcbiAgICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nUmVwZWF0RGlyZWN0aXZlID0gWyckcGFyc2UnLCAnJGFuaW1hdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbiAoJHBhcnNlLCAkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgICB2YXIgTkdfUkVNT1ZFRCA9ICckJE5HX1JFTU9WRUQnO1xuICAgIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICAgIHZhciB1cGRhdGVTY29wZSA9IGZ1bmN0aW9uIHVwZGF0ZVNjb3BlKHNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBhcnJheUxlbmd0aCkge1xuICAgICAgLy8gVE9ETyhwZXJmKTogZ2VuZXJhdGUgc2V0dGVycyB0byBzaGF2ZSBvZmYgfjQwbXMgb3IgMS0xLjUlXG4gICAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICBpZiAoa2V5SWRlbnRpZmllcikgc2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICBzY29wZS4kaW5kZXggPSBpbmRleDtcbiAgICAgIHNjb3BlLiRmaXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgc2NvcGUuJGxhc3QgPSBpbmRleCA9PT0gYXJyYXlMZW5ndGggLSAxO1xuICAgICAgc2NvcGUuJG1pZGRsZSA9ICEoc2NvcGUuJGZpcnN0IHx8IHNjb3BlLiRsYXN0KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICBzY29wZS4kb2RkID0gIShzY29wZS4kZXZlbiA9IChpbmRleCAmIDEpID09PSAwKTtcbiAgICB9O1xuXG4gICAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbiBnZXRCbG9ja1N0YXJ0KGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2suY2xvbmVbMF07XG4gICAgfTtcblxuICAgIHZhciBnZXRCbG9ja0VuZCA9IGZ1bmN0aW9uIGdldEJsb2NrRW5kKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAgICQkdGxiOiB0cnVlLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdSZXBlYXRDb21waWxlKCRlbGVtZW50LCAkYXR0cikge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbiA9ICRhdHRyLm5nUmVwZWF0O1xuICAgICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdSZXBlYXQnLCBleHByZXNzaW9uKTtcblxuICAgICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMqJC8pO1xuXG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsICdFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgXFwnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX11cXCcgYnV0IGdvdCBcXCd7MH1cXCcuJywgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICAgIHZhciByaHMgPSBtYXRjaFsyXTtcbiAgICAgICAgdmFyIGFsaWFzQXMgPSBtYXRjaFszXTtcbiAgICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihcXHMqWyRcXHddKyl8XFwoXFxzKihbJFxcd10rKVxccyosXFxzKihbJFxcd10rKVxccypcXCkpJC8pO1xuXG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgJ1xcJ19pdGVtX1xcJyBpbiBcXCdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXFwnIHNob3VsZCBiZSBhbiBpZGVudGlmaWVyIG9yIFxcJyhfa2V5XywgX3ZhbHVlXylcXCcgZXhwcmVzc2lvbiwgYnV0IGdvdCBcXCd7MH1cXCcuJywgbGhzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICAgIHZhciBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07XG5cbiAgICAgICAgaWYgKGFsaWFzQXMgJiYgKCEvXlskYS16QS1aX11bJGEtekEtWjAtOV9dKiQvLnRlc3QoYWxpYXNBcykgfHwgL14obnVsbHx1bmRlZmluZWR8dGhpc3xcXCRpbmRleHxcXCRmaXJzdHxcXCRtaWRkbGV8XFwkbGFzdHxcXCRldmVufFxcJG9kZHxcXCRwYXJlbnR8XFwkcm9vdHxcXCRpZCkkLy50ZXN0KGFsaWFzQXMpKSkge1xuICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsICdhbGlhcyBcXCd7MH1cXCcgaXMgaW52YWxpZCAtLS0gbXVzdCBiZSBhIHZhbGlkIEpTIGlkZW50aWZpZXIgd2hpY2ggaXMgbm90IGEgcmVzZXJ2ZWQgbmFtZS4nLCBhbGlhc0FzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm47XG4gICAgICAgIHZhciBoYXNoRm5Mb2NhbHMgPSB7ICRpZDogaGFzaEtleSB9O1xuXG4gICAgICAgIGlmICh0cmFja0J5RXhwKSB7XG4gICAgICAgICAgdHJhY2tCeUV4cEdldHRlciA9ICRwYXJzZSh0cmFja0J5RXhwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFja0J5SWRBcnJheUZuID0gZnVuY3Rpb24gdHJhY2tCeUlkQXJyYXlGbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uIHRyYWNrQnlJZE9iakZuKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nUmVwZWF0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcblxuICAgICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7XG4gICAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uIHRyYWNrQnlJZEV4cEZuKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIGFzc2lnbiBrZXksIHZhbHVlLCBhbmQgJGluZGV4IHRvIHRoZSBsb2NhbHMgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGluIGhhc2ggZnVuY3Rpb25zXG4gICAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICAgICAgICAgIGhhc2hGbkxvY2Fscy4kaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdG9yZSBhIGxpc3Qgb2YgZWxlbWVudHMgZnJvbSBwcmV2aW91cyBydW4uIFRoaXMgaXMgYSBoYXNoIHdoZXJlIGtleSBpcyB0aGUgaXRlbSBmcm9tIHRoZVxuICAgICAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICAgICAgICAvLyAgIC0gc2NvcGU6IGJvdW5kIHNjb3BlXG4gICAgICAgICAgLy8gICAtIGNsb25lOiBwcmV2aW91cyBlbGVtZW50LlxuICAgICAgICAgIC8vICAgLSBpbmRleDogcG9zaXRpb25cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdlIGFyZSB1c2luZyBuby1wcm90byBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGd1YXJkIGFnYWluc3QgaW5oZXJpdGVkIHByb3BzIHZpYVxuICAgICAgICAgIC8vIGhhc093blByb3BlcnR5LlxuICAgICAgICAgIHZhciBsYXN0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAgIC8vd2F0Y2ggcHJvcHNcbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBpbmRleCxcbiAgICAgICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbiAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHRvIHRoZSBjb21tZW50IG5vZGUgYW5jaG9yXG4gICAgICAgICAgICBuZXh0Tm9kZSxcblxuICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlXG4gICAgICAgICAgICAvLyBsYXN0QmxvY2tNYXAgb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgbmV4dEJsb2NrTWFwID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvblxuICAgICAgICAgICAgdHJhY2tCeUlkLFxuICAgICAgICAgICAgICAgIHRyYWNrQnlJZEZuLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9XG4gICAgICAgICAgICBuZXh0QmxvY2tPcmRlcixcbiAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlO1xuXG4gICAgICAgICAgICBpZiAoYWxpYXNBcykge1xuICAgICAgICAgICAgICAkc2NvcGVbYWxpYXNBc10gPSBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZE9iakZuO1xuICAgICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTtcblxuICAgICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgIGtleSA9IGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICAgIGlmIChsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAgIC8vIGZvdW5kIHByZXZpb3VzbHkgc2VlbiBibG9ja1xuICAgICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBjb2xsaXNpb24gZGV0ZWN0ZWQuIHJlc3RvcmUgbGFzdEJsb2NrTWFwIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIGZvckVhY2gobmV4dEJsb2NrT3JkZXIsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLnNjb3BlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJywgJ0R1cGxpY2F0ZXMgaW4gYSByZXBlYXRlciBhcmUgbm90IGFsbG93ZWQuIFVzZSBcXCd0cmFjayBieVxcJyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn0nLCBleHByZXNzaW9uLCB0cmFja0J5SWQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBuZXcgbmV2ZXIgYmVmb3JlIHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSB7IGlkOiB0cmFja0J5SWQsIHNjb3BlOiB1bmRlZmluZWQsIGNsb25lOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGxlZnRvdmVyIGl0ZW1zXG4gICAgICAgICAgICBmb3IgKHZhciBibG9ja0tleSBpbiBsYXN0QmxvY2tNYXApIHtcbiAgICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbYmxvY2tLZXldO1xuICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsZW1lbnRzVG9SZW1vdmUpO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudHNUb1JlbW92ZVswXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgd2FzIG5vdCByZW1vdmVkIHlldCBiZWNhdXNlIG9mIHBlbmRpbmcgYW5pbWF0aW9uLCBtYXJrIGl0IGFzIGRlbGV0ZWRcbiAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgaXQgbGF0ZXJcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlW2luZGV4XVtOR19SRU1PVkVEXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJsb2NrLnNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpXG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgIGtleSA9IGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTtcblxuICAgICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZVxuICAgICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudFxuXG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwcmV2aW91c05vZGU7XG5cbiAgICAgICAgICAgICAgICAvLyBza2lwIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgcGVuZGluZyByZW1vdmFsIHZpYSBsZWF2ZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTtcblxuICAgICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPT0gbmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgICAkYW5pbWF0ZS5tb3ZlKGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpLCBudWxsLCBwcmV2aW91c05vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7XG4gICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXRcbiAgICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICBibG9jay5zY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudFxuICAgICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGVuZE5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBwcmV2aW91c05vZGUpO1xuICAgICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZW5kTm9kZTtcbiAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgICAgYmxvY2suY2xvbmUgPSBjbG9uZTtcbiAgICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEJsb2NrTWFwID0gbmV4dEJsb2NrTWFwO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIHZhciBOR19ISURFX0NMQVNTID0gJ25nLWhpZGUnO1xuICB2YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1Nob3dcbiAgICogQG11bHRpRWxlbWVudFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGBuZ1Nob3dgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uIHByb3ZpZGVkIHRvXG4gICAqIHRoZSBgbmdTaG93YCBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmcgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuXG4gICAqIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhblxuICAgKiBgIWltcG9ydGFudGAgZmxhZykuIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgSFRNTCBmaWxlIChzZWVcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gICAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIj48L2Rpdj5cbiAgICpcbiAgICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gICAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIFdoZW4gdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWRcbiAgICogdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYFxuICAgKiBDU1MgY2xhc3MgaXMgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gICAqXG4gICAqICMjIFdoeSBpcyBgIWltcG9ydGFudGAgdXNlZD9cbiAgICpcbiAgICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5IGAhaW1wb3J0YW50YCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGVcbiAgICogYC5uZy1oaWRlYCBzZWxlY3RvciBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXNcbiAgICogc2ltcGxlIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyXG4gICAqIHZpc2libGUuIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICAgKlxuICAgKiBCeSB1c2luZyBgIWltcG9ydGFudGAsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuXG4gICAqIENTUyBzZWxlY3RvciBzcGVjaWZpY2l0eSAod2hlbiBgIWltcG9ydGFudGAgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhXG4gICAqIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZSBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhXG4gICAqIG1hdHRlciBvZiB1c2luZyBgIWltcG9ydGFudGAgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICAgKlxuICAgKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50YC4gSWYgeW91XG4gICAqIHdpc2ggdG8gY2hhbmdlIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggYG5nU2hvd2AvYG5nSGlkZWAsIHlvdSBjYW4gc2ltcGx5IG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGZvclxuICAgKiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIE5vdGUgdGhhdCB0aGUgc2VsZWN0b3IgdGhhdCBuZWVkcyB0byBiZSB1c2VkIGlzIGFjdHVhbGx5XG4gICAqIGAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSlgIHRvIGNvcGUgd2l0aCBleHRyYSBhbmltYXRpb24gY2xhc3NlcyB0aGF0IGNhbiBiZSBhZGRlZC5cbiAgICpcbiAgICogYGBgY3NzXG4gICAqIC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKSB7XG4gICAqICAgLyYjNDI7IFRoZXNlIGFyZSBqdXN0IGFsdGVybmF0aXZlIHdheXMgb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gICAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICAgKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICogICB0b3A6IC05OTk5cHg7XG4gICAqICAgbGVmdDogLTk5OTlweDtcbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogQnkgZGVmYXVsdCB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSBhbnl0aGluZyBpbiBDU1MgYW5kIHRoZSBhbmltYXRpb25zIHdpbGwgd29yayBhcm91bmQgdGhlXG4gICAqIGRpc3BsYXkgc3R5bGUuXG4gICAqXG4gICAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nU2hvd2BcbiAgICpcbiAgICogQW5pbWF0aW9ucyBpbiBgbmdTaG93YC9gbmdIaWRlYCB3b3JrIHdpdGggdGhlIHNob3cgYW5kIGhpZGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIHRoZVxuICAgKiBkaXJlY3RpdmUgZXhwcmVzc2lvbiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGhcbiAgICogYG5nQ2xhc3NgIGV4Y2VwdCB0aGF0IHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgYCFpbXBvcnRhbnRgIGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXlcbiAgICogcHJvcGVydHkgc28gdGhhdCB0aGUgZWxlbWVudHMgYXJlIG5vdCBhY3R1YWxseSBoaWRkZW4gZHVyaW5nIHRoZSBhbmltYXRpb24uXG4gICAqXG4gICAqIGBgYGNzc1xuICAgKiAvJiM0MjsgQSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlLiAmIzQyOy9cbiAgICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAgICogICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gICAqIH1cbiAgICpcbiAgICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICAgKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICAgKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gICAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICAgKiB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcyAtIG5nQW5pbWF0ZSB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBmb3IgeW91LlxuICAgKlxuICAgKiBAYW5pbWF0aW9uc1xuICAgKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8IHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gYC5uZy1oaWRlYCAgICAgICB8IEFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbi4gfFxuICAgKiB8IHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyByZW1vdmVDbGFzc30gYC5uZy1oaWRlYCB8IEFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlLiAgICAgICAgfFxuICAgKlxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeS9mYWxzeSB0aGVuIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IGlzIHNob3duL2hpZGRlbiByZXNwZWN0aXZlbHkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEEgc2ltcGxlIGV4YW1wbGUsIGFuaW1hdGluZyB0aGUgZWxlbWVudCdzIG9wYWNpdHk6XG4gICAqXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXNob3ctc2ltcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICBTaG93OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93LWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUge1xuICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlLWFkZCxcbiAgICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIH1cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ1Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG4gIFxuICAgICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICpcbiAgICogPGhyIC8+XG4gICAqIEBleGFtcGxlXG4gICAqIEEgbW9yZSBjb21wbGV4IGV4YW1wbGUsIGZlYXR1cmluZyBkaWZmZXJlbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnM6XG4gICAqXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXNob3ctY29tcGxleFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgU2hvdzogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdTaG93XCI+PGJyIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGZ1bmt5LXNob3ctaGlkZVwiIG5nLXNob3c9XCJjaGVja2VkXCI+XG4gICAgICAgICAgSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgICBib2R5IHtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIHBlcnNwZWN0aXZlOiAxMDAwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQge1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigwKTtcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigtMTM1ZGVnKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMCk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIH1cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ1Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG4gIFxuICAgICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24gKCRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAvLyB3ZSdyZSBhZGRpbmcgYSB0ZW1wb3JhcnksIGFuaW1hdGlvbi1zcGVjaWZpYyBjbGFzcyBmb3IgbmctaGlkZSBzaW5jZSB0aGlzIHdheVxuICAgICAgICAgIC8vIHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgZGlzcGxheWVkIG9uIHNjcmVlbiB3aXRob3V0IGhhdmluZ1xuICAgICAgICAgIC8vIHRvIGhhdmUgYSBnbG9iYWwvZ3JlZWR5IENTUyBzZWxlY3RvciB0aGF0IGJyZWFrcyB3aGVuIG90aGVyIGFuaW1hdGlvbnMgYXJlIHJ1bi5cbiAgICAgICAgICAvLyBSZWFkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTAzI2lzc3VlY29tbWVudC01ODMzNTg0NVxuICAgICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsIE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nSGlkZVxuICAgKiBAbXVsdGlFbGVtZW50XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nSGlkZWAgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgdG9cbiAgICogdGhlIGBuZ0hpZGVgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZyB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC5cbiAgICogVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQgaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuXG4gICAqIGAhaW1wb3J0YW50YCBmbGFnKS4gRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBIVE1MIGZpbGUgKHNlZVxuICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICAgKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gICAqXG4gICAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAgICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiPjwvZGl2PlxuICAgKiBgYGBcbiAgICpcbiAgICogV2hlbiB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWRcbiAgICogdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gZmFsc3ksIHRoZSBgLm5nLWhpZGVgXG4gICAqIENTUyBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAgICpcbiAgICogIyMgV2h5IGlzIGAhaW1wb3J0YW50YCB1c2VkP1xuICAgKlxuICAgKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgYCFpbXBvcnRhbnRgIGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICAgKiBgLm5nLWhpZGVgIHNlbGVjdG9yIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhc1xuICAgKiBzaW1wbGUgYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXJcbiAgICogdmlzaWJsZS4gVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gICAqXG4gICAqIEJ5IHVzaW5nIGAhaW1wb3J0YW50YCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW5cbiAgICogQ1NTIHNlbGVjdG9yIHNwZWNpZmljaXR5ICh3aGVuIGAhaW1wb3J0YW50YCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGFcbiAgICogZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGFcbiAgICogbWF0dGVyIG9mIHVzaW5nIGAhaW1wb3J0YW50YCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gICAqXG4gICAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRgLiBJZiB5b3VcbiAgICogd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBgbmdTaG93YC9gbmdIaWRlYCwgeW91IGNhbiBzaW1wbHkgb3ZlcndyaXRlIHRoZSBzdHlsZXMgZm9yXG4gICAqIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gTm90ZSB0aGF0IHRoZSBzZWxlY3RvciB0aGF0IG5lZWRzIHRvIGJlIHVzZWQgaXMgYWN0dWFsbHlcbiAgICogYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZSB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICAgKlxuICAgKiBgYGBjc3NcbiAgICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAgICogICAvJiM0MjsgVGhlc2UgYXJlIGp1c3QgYWx0ZXJuYXRpdmUgd2F5cyBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAgICogICBkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7XG4gICAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgKiAgIHRvcDogLTk5OTlweDtcbiAgICogICBsZWZ0OiAtOTk5OXB4O1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGVcbiAgICogZGlzcGxheSBzdHlsZS5cbiAgICpcbiAgICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdIaWRlYFxuICAgKlxuICAgKiBBbmltYXRpb25zIGluIGBuZ1Nob3dgL2BuZ0hpZGVgIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlXG4gICAqIGRpcmVjdGl2ZSBleHByZXNzaW9uIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aFxuICAgKiBgbmdDbGFzc2AgZXhjZXB0IHRoYXQgeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSBgIWltcG9ydGFudGAgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheVxuICAgKiBwcm9wZXJ0eSBzbyB0aGF0IHRoZSBlbGVtZW50cyBhcmUgbm90IGFjdHVhbGx5IGhpZGRlbiBkdXJpbmcgdGhlIGFuaW1hdGlvbi5cbiAgICpcbiAgICogYGBgY3NzXG4gICAqIC8mIzQyOyBBIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UuICYjNDI7L1xuICAgKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICAgKiAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGxpbmVhcjtcbiAgICogfVxuICAgKlxuICAgKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gICAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gICAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAgICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5IHByb3BlcnR5XG4gICAqIHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzIC0gbmdBbmltYXRlIHdpbGwgYXV0b21hdGljYWxseSBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGZvciB5b3UuXG4gICAqXG4gICAqIEBhbmltYXRpb25zXG4gICAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwge0BsaW5rICRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSBgLm5nLWhpZGVgICAgICAgIHwgQWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW4uICB8XG4gICAqIHwge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzIHJlbW92ZUNsYXNzfSBgLm5nLWhpZGVgIHwgQWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlLiB8XG4gICAqXG4gICAqXG4gICAqIEBlbGVtZW50IEFOWVxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5L2ZhbHN5IHRoZW4gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgaXMgaGlkZGVuL3Nob3duIHJlc3BlY3RpdmVseS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogQSBzaW1wbGUgZXhhbXBsZSwgYW5pbWF0aW5nIHRoZSBlbGVtZW50J3Mgb3BhY2l0eTpcbiAgICpcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1zaW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIEhpZGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxiciAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ctaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZSB7XG4gICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtYWRkLFxuICAgICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgfVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nSGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcbiAgXG4gICAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiA8aHIgLz5cbiAgICogQGV4YW1wbGVcbiAgICogQSBtb3JlIGNvbXBsZXggZXhhbXBsZSwgZmVhdHVyaW5nIGRpZmZlcmVudCBzaG93L2hpZGUgYW5pbWF0aW9uczpcbiAgICpcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1jb21wbGV4XCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICBIaWRlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ0hpZGVcIj48YnIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgZnVua3ktc2hvdy1oaWRlXCIgbmctaGlkZT1cImNoZWNrZWRcIj5cbiAgICAgICAgICBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAgIGJvZHkge1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgcGVyc3BlY3RpdmU6IDEwMDBweDtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZCB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDApO1xuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0O1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UtaW4tb3V0O1xuICAgICAgICB9XG4gIFxuICAgICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKC0xMzVkZWcpO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgwKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgfVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nSGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcbiAgXG4gICAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nSGlkZURpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbiAoJGFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgIC8vIFRoZSBjb21tZW50IGluc2lkZSBvZiB0aGUgbmdTaG93RGlyZWN0aXZlIGV4cGxhaW5zIHdoeSB3ZSBhZGQgYW5kXG4gICAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsIE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nU3R5bGVcbiAgICogQHJlc3RyaWN0IEFDXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuXG4gICAqXG4gICAqIEBrbm93bklzc3VlXG4gICAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBzdHlsZWBcbiAgICogYXR0cmlidXRlLCB3aGVuIHVzaW5nIHRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAqIFNlZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNrbm93bi1pc3N1ZXMgaGVyZX0gZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdHlsZVxuICAgKlxuICAgKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhblxuICAgKiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgQ1NTIHN0eWxlIG5hbWVzIGFuZCB2YWx1ZXMgYXJlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZvciB0aG9zZSBDU1NcbiAgICoga2V5cy5cbiAgICpcbiAgICogU2luY2Ugc29tZSBDU1Mgc3R5bGUgbmFtZXMgYXJlIG5vdCB2YWxpZCBrZXlzIGZvciBhbiBvYmplY3QsIHRoZXkgbXVzdCBiZSBxdW90ZWQuXG4gICAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwibmctc3R5bGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgY29sb3JcIiBuZy1jbGljaz1cIm15U3R5bGU9e2NvbG9yOidyZWQnfVwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15U3R5bGU9e31cIj5cbiAgICAgICAgICA8YnIvPlxuICAgICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgY29sb3I6IGJsYWNrO1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdHlsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cXCdzZXQgY29sb3JcXCddJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMjU1LCAwLCAwLCAxKScpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHtcbiAgICAgIGlmIChvbGRTdHlsZXMgJiYgbmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpIHtcbiAgICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uICh2YWwsIHN0eWxlKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGUsICcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpO1xuICAgIH0sIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1N3aXRjaFxuICAgKiBAcmVzdHJpY3QgRUFcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgbmdTd2l0Y2hgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGNvbmRpdGlvbmFsbHkgc3dhcCBET00gc3RydWN0dXJlIG9uIHlvdXIgdGVtcGxhdGUgYmFzZWQgb24gYSBzY29wZSBleHByZXNzaW9uLlxuICAgKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvblxuICAgKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0XG4gICAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50XG4gICAqIG1hdGNoZXMgdGhlIHZhbHVlIG9idGFpbmVkIGZyb20gdGhlIGV2YWx1YXRlZCBleHByZXNzaW9uLiBJbiBvdGhlciB3b3JkcywgeW91IGRlZmluZSBhIGNvbnRhaW5lciBlbGVtZW50XG4gICAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPVwiLi4uXCJgIGF0dHJpYnV0ZSoqXG4gICAqIChvciB0aGUgKipgbmctc3dpdGNoPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcbiAgICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvblxuICAgKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxuICAgKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZFxuICAgKiBhcyBsaXRlcmFsIHN0cmluZyB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdC5cbiAgICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPVwic29tZVZhbFwiYCoqIHdpbGwgbWF0Y2ggYWdhaW5zdCB0aGUgc3RyaW5nIGBcInNvbWVWYWxcImAgbm90IGFnYWluc3QgdGhlXG4gICAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuXG4gICAqIDwvZGl2PlxuICBcbiAgICogQGFuaW1hdGlvbnNcbiAgICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyIHxcbiAgICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9ICB8IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHxcbiAgICpcbiAgICogQHVzYWdlXG4gICAqXG4gICAqIGBgYFxuICAgKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAgICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTFcIj4uLi48L0FOWT5cbiAgICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTJcIj4uLi48L0FOWT5cbiAgICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICAgKiA8L0FOWT5cbiAgICogYGBgXG4gICAqXG4gICAqXG4gICAqIEBzY29wZVxuICAgKiBAcHJpb3JpdHkgMTIwMFxuICAgKiBAcGFyYW0geyp9IG5nU3dpdGNofG9uIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdCA8Y29kZT5uZy1zd2l0Y2gtd2hlbjwvY29kZT4uXG4gICAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDpcbiAgICpcbiAgICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpc1xuICAgKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGVcbiAgICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC4gSXQgaXMgcG9zc2libGUgdG8gYXNzb2NpYXRlIG11bHRpcGxlIHZhbHVlcyB0b1xuICAgKiAgIHRoZSBzYW1lIGBuZ1N3aXRjaFdoZW5gIGJ5IGRlZmluaW5nIHRoZSBvcHRpb25hbCBhdHRyaWJ1dGVcbiAgICogICBgbmdTd2l0Y2hXaGVuU2VwYXJhdG9yYC4gVGhlIHNlcGFyYXRvciB3aWxsIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlIG9mXG4gICAqICAgdGhlIGBuZ1N3aXRjaFdoZW5gIGF0dHJpYnV0ZSBpbnRvIG11bHRpcGxlIHRva2VucywgYW5kIHRoZSBlbGVtZW50IHdpbGwgc2hvd1xuICAgKiAgIGlmIGFueSBvZiB0aGUgYG5nU3dpdGNoYCBldmFsdWF0ZXMgdG8gYW55IG9mIHRoZXNlIHRva2Vucy5cbiAgICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlXG4gICAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXJcbiAgICogICBjYXNlIG1hdGNoLlxuICAgKlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cInN3aXRjaEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctc3dpdGNoXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDxjb2RlPnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC9jb2RlPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lclwiXG4gICAgICAgICAgICBuZy1zd2l0Y2ggb249XCJzZWxlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc3xvcHRpb25zXCIgbmctc3dpdGNoLXdoZW4tc2VwYXJhdG9yPVwifFwiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cImhvbWVcIj5Ib21lIFNwYW48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLWRlZmF1bHQ+ZGVmYXVsdDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N3aXRjaEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3B0aW9ucycsICdvdGhlciddO1xuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLmFuaW1hdGUtc3dpdGNoIHtcbiAgICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gIFxuICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgIHRvcDowO1xuICAgICAgICAgIGxlZnQ6MDtcbiAgICAgICAgICByaWdodDowO1xuICAgICAgICAgIGJvdHRvbTowO1xuICAgICAgICB9XG4gIFxuICAgICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIge1xuICAgICAgICAgIHRvcDotNTBweDtcbiAgICAgICAgfVxuICAgICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsXG4gICAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICAgIHRvcDowO1xuICAgICAgICB9XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpO1xuICAgICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpO1xuICBcbiAgICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hvbWUgU3Bhbi8pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gc2V0dGluZ3MgdmlhIFwib3B0aW9uc1wiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDMpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ1N3aXRjaERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbiAoJGFuaW1hdGUsICRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVpcmU6ICduZ1N3aXRjaCcsXG5cbiAgICAgIC8vIGFza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBOZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICAgIH1dLFxuICAgICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICAgIHZhciB3YXRjaEV4cHIgPSBhdHRyLm5nU3dpdGNoIHx8IGF0dHIub24sXG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGVzID0gW10sXG4gICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyA9IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTtcblxuICAgICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uIHNwbGljZUZhY3RvcnkoYXJyYXksIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9PSBmYWxzZSkgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaEV4cHIsIGZ1bmN0aW9uIG5nU3dpdGNoV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgaSwgaWk7XG5cbiAgICAgICAgICAvLyBTdGFydCB3aXRoIHRoZSBsYXN0LCBpbiBjYXNlIHRoZSBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgdGhlIGxvb3BcbiAgICAgICAgICB3aGlsZSAocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMucG9wKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICAgIHNlbGVjdGVkU2NvcGVzW2ldLiRkZXN0cm95KCk7XG4gICAgICAgICAgICB2YXIgcnVubmVyID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0gPSAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCk7XG4gICAgICAgICAgICBydW5uZXIuZG9uZShzcGxpY2VGYWN0b3J5KHByZXZpb3VzTGVhdmVBbmltYXRpb25zLCBpKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgICAgICAgIHNlbGVjdGVkU2NvcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snIScgKyB2YWx1ZV0gfHwgbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWyc/J10pIHtcbiAgICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24gKHNlbGVjdGVkVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShmdW5jdGlvbiAoY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xuICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDtcbiAgICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQoJ2VuZCBuZ1N3aXRjaFdoZW4nKTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSB7IGNsb25lOiBjYXNlRWxlbWVudCB9O1xuXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgdmFyIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDEyMDAsXG4gICAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICB2YXIgY2FzZXMgPSBhdHRycy5uZ1N3aXRjaFdoZW4uc3BsaXQoYXR0cnMubmdTd2l0Y2hXaGVuU2VwYXJhdG9yKS5zb3J0KCkuZmlsdGVyKFxuICAgICAgLy8gRmlsdGVyIGR1cGxpY2F0ZSBjYXNlc1xuICAgICAgZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXlbaW5kZXggLSAxXSAhPT0gZWxlbWVudDtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JFYWNoKGNhc2VzLCBmdW5jdGlvbiAod2hlbkNhc2UpIHtcbiAgICAgICAgY3RybC5jYXNlc1snIScgKyB3aGVuQ2FzZV0gPSBjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXSB8fCBbXTtcbiAgICAgICAgY3RybC5jYXNlc1snIScgKyB3aGVuQ2FzZV0ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBwcmlvcml0eTogMTIwMCxcbiAgICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgIGN0cmwuY2FzZXNbJz8nXSA9IGN0cmwuY2FzZXNbJz8nXSB8fCBbXTtcbiAgICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1RyYW5zY2x1ZGVcbiAgICogQHJlc3RyaWN0IEVBQ1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGlyZWN0aXZlIHRoYXQgbWFya3MgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgdGhlIHRyYW5zY2x1ZGVkIERPTSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24uXG4gICAqXG4gICAqIFlvdSBjYW4gc3BlY2lmeSB0aGF0IHlvdSB3YW50IHRvIGluc2VydCBhIG5hbWVkIHRyYW5zY2x1c2lvbiBzbG90LCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IHNsb3QsIGJ5IHByb3ZpZGluZyB0aGUgc2xvdCBuYW1lXG4gICAqIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nLXRyYW5zY2x1ZGVgIG9yIGBuZy10cmFuc2NsdWRlLXNsb3RgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogSWYgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgbm90IGVtcHR5IChpLmUuIGNvbnRhaW5zIG9uZSBvciBtb3JlIERPTSBub2RlcywgaW5jbHVkaW5nIHdoaXRlc3BhY2UgdGV4dCBub2RlcyksIGFueSBleGlzdGluZ1xuICAgKiBjb250ZW50IG9mIHRoaXMgZWxlbWVudCB3aWxsIGJlIHJlbW92ZWQgYmVmb3JlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGluc2VydGVkLlxuICAgKiBJZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBlbXB0eSAob3Igb25seSB3aGl0ZXNwYWNlKSwgdGhlIGV4aXN0aW5nIGNvbnRlbnQgaXMgbGVmdCBpbnRhY3QuIFRoaXMgbGV0cyB5b3UgcHJvdmlkZSBmYWxsYmFja1xuICAgKiBjb250ZW50IGluIHRoZSBjYXNlIHRoYXQgbm8gdHJhbnNjbHVkZWQgY29udGVudCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogQGVsZW1lbnQgQU5ZXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1RyYW5zY2x1ZGV8bmdUcmFuc2NsdWRlU2xvdCB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBpbnNlcnQgYXQgdGhpcyBwb2ludC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQsIGlzIGVtcHR5XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBpdHMgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0aGVuIHRoZSBkZWZhdWx0IHNsb3QgaXMgdXNlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIEJhc2ljIHRyYW5zY2x1c2lvblxuICAgKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIGJhc2ljIHRyYW5zY2x1c2lvbiBvZiBjb250ZW50IGludG8gYSBjb21wb25lbnQgZGlyZWN0aXZlLlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwic2ltcGxlVHJhbnNjbHVkZUV4YW1wbGVcIiBtb2R1bGU9XCJ0cmFuc2NsdWRlRXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8c2NyaXB0PlxuICAgKiAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUV4YW1wbGUnLCBbXSlcbiAgICogICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICAgKiAgICAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICogICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICogICAgICAgICAgICAgc2NvcGU6IHsgdGl0bGU6J0AnIH0sXG4gICAqICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiPicgK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgJzxuZy10cmFuc2NsdWRlPjwvbmctdHJhbnNjbHVkZT4nICtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gICAqICAgICAgICAgICB9O1xuICAgKiAgICAgICB9KVxuICAgKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gICAqICAgICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xuICAgKiAgICAgICB9XSk7XG4gICAqICAgICA8L3NjcmlwdD5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCIgYXJpYS1sYWJlbD1cInRpdGxlXCI+IDxici8+XG4gICAqICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAqICAgICAgIDxwYW5lIHRpdGxlPVwie3t0aXRsZX19XCI+PHNwYW4+e3t0ZXh0fX08L3NwYW4+PC9wYW5lPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICogICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQnLCBmdW5jdGlvbigpIHtcbiAgICogICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAgICogICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICAgKiAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpO1xuICAgKiAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAgICogICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gICAqICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpO1xuICAgKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICAgKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAgICogICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIFRyYW5zY2x1ZGUgZmFsbGJhY2sgY29udGVudFxuICAgKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdUcmFuc2NsdWRlYCB3aXRoIGZhbGxiYWNrIGNvbnRlbnQsIHRoYXRcbiAgICogaXMgZGlzcGxheWVkIGlmIG5vIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIDxleGFtcGxlIG1vZHVsZT1cInRyYW5zY2x1ZGVGYWxsYmFja0NvbnRlbnRFeGFtcGxlXCIgbmFtZT1cIm5nLXRyYW5zY2x1ZGVcIj5cbiAgICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogPHNjcmlwdD5cbiAgICogYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGVGYWxsYmFja0NvbnRlbnRFeGFtcGxlJywgW10pXG4gICAqIC5kaXJlY3RpdmUoJ215QnV0dG9uJywgZnVuY3Rpb24oKXtcbiAgICogICAgICAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgKiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAqICAgICAgICAgICAgICAgc2NvcGU6IHRydWUsXG4gICAqICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8YnV0dG9uIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPicgK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT4nICtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YiBzdHlsZT1cImNvbG9yOiByZWQ7XCI+QnV0dG9uMTwvYj4nICtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9uZy10cmFuc2NsdWRlPicgK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgKiAgICAgICAgICAgICB9O1xuICAgKiAgICAgICAgIH0pO1xuICAgKiA8L3NjcmlwdD5cbiAgICogPCEtLSBmYWxsYmFjayBidXR0b24gY29udGVudCAtLT5cbiAgICogPG15LWJ1dHRvbiBpZD1cImZhbGxiYWNrXCI+PC9teS1idXR0b24+XG4gICAqIDwhLS0gbW9kaWZpZWQgYnV0dG9uIGNvbnRlbnQgLS0+XG4gICAqIDxteS1idXR0b24gaWQ9XCJtb2RpZmllZFwiPlxuICAgKiAgIDxpIHN0eWxlPVwiY29sb3I6IGdyZWVuO1wiPkJ1dHRvbjI8L2k+XG4gICAqIDwvbXktYnV0dG9uPlxuICAgKiA8L2ZpbGU+XG4gICAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICogaXQoJ3Nob3VsZCBoYXZlIGRpZmZlcmVudCB0cmFuc2NsdWRlIGVsZW1lbnQgY29udGVudCcsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZmFsbGJhY2snKSkuZ2V0VGV4dCgpKS50b0JlKCdCdXR0b24xJyk7XG4gICAqICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdtb2RpZmllZCcpKS5nZXRUZXh0KCkpLnRvQmUoJ0J1dHRvbjInKTtcbiAgICogICAgICAgIH0pO1xuICAgKiA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIE11bHRpLXNsb3QgdHJhbnNjbHVzaW9uXG4gICAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdXNpbmcgbXVsdGktc2xvdCB0cmFuc2NsdXNpb24gaW4gYSBjb21wb25lbnQgZGlyZWN0aXZlLlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibXVsdGlTbG90VHJhbnNjbHVkZUV4YW1wbGVcIiBtb2R1bGU9XCJtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgIDxzdHlsZT5cbiAgICogICAgICAudGl0bGUsIC5mb290ZXIge1xuICAgKiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZ3JheVxuICAgKiAgICAgIH1cbiAgICogICAgPC9zdHlsZT5cbiAgICogICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICA8aW5wdXQgbmctbW9kZWw9XCJ0aXRsZVwiIGFyaWEtbGFiZWw9XCJ0aXRsZVwiPiA8YnIvPlxuICAgKiAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAqICAgICAgPHBhbmU+XG4gICAqICAgICAgICA8cGFuZS10aXRsZT48YSBuZy1ocmVmPVwie3tsaW5rfX1cIj57e3RpdGxlfX08L2E+PC9wYW5lLXRpdGxlPlxuICAgKiAgICAgICAgPHBhbmUtYm9keT48cD57e3RleHR9fTwvcD48L3BhbmUtYm9keT5cbiAgICogICAgICA8L3BhbmU+XG4gICAqICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgIGFuZ3VsYXIubW9kdWxlKCdtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICAgKiAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICogICAgICAgICAgdHJhbnNjbHVkZToge1xuICAgKiAgICAgICAgICAgICd0aXRsZSc6ICc/cGFuZVRpdGxlJyxcbiAgICogICAgICAgICAgICAnYm9keSc6ICdwYW5lQm9keScsXG4gICAqICAgICAgICAgICAgJ2Zvb3Rlcic6ICc/cGFuZUZvb3RlcidcbiAgICogICAgICAgICAgfSxcbiAgICogICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gICAqICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGl0bGVcIiBuZy10cmFuc2NsdWRlPVwidGl0bGVcIj5GYWxsYmFjayBUaXRsZTwvZGl2PicgK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlPVwiYm9keVwiPjwvZGl2PicgK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZvb3RlclwiIG5nLXRyYW5zY2x1ZGU9XCJmb290ZXJcIj5GYWxsYmFjayBGb290ZXI8L2Rpdj4nICtcbiAgICogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gICAqICAgICAgICB9O1xuICAgKiAgICB9KVxuICAgKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gICAqICAgICAgJHNjb3BlLmxpbmsgPSAnaHR0cHM6Ly9nb29nbGUuY29tJztcbiAgICogICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7XG4gICAqICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgKiAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCB0aGUgdGl0bGUgYW5kIHRoZSBib2R5JywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICB2YXIgdGl0bGVFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGl0bGUnKSk7XG4gICAqICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAgICogICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAgICogICAgICAgIHZhciB0ZXh0RWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG4gICAqICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICAgKiAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAgICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLnRpdGxlJykpLmdldFRleHQoKSkudG9FcXVhbCgnVElUTEUnKTtcbiAgICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gICAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5mb290ZXInKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdGYWxsYmFjayBGb290ZXInKTtcbiAgICogICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBuZ1RyYW5zY2x1ZGVNaW5FcnIgPSBtaW5FcnIoJ25nVHJhbnNjbHVkZScpO1xuICB2YXIgbmdUcmFuc2NsdWRlRGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uICgkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VBQycsXG4gICAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nVHJhbnNjbHVkZUNvbXBpbGUodEVsZW1lbnQpIHtcblxuICAgICAgICAvLyBSZW1vdmUgYW5kIGNhY2hlIGFueSBvcmlnaW5hbCBjb250ZW50IHRvIGFjdCBhcyBhIGZhbGxiYWNrXG4gICAgICAgIHZhciBmYWxsYmFja0xpbmtGbiA9ICRjb21waWxlKHRFbGVtZW50LmNvbnRlbnRzKCkpO1xuICAgICAgICB0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVQb3N0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgICBpZiAoISR0cmFuc2NsdWRlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZ1RyYW5zY2x1ZGVNaW5FcnIoJ29ycGhhbicsICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArICdObyBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2NsdXNpb24gZm91bmQuICcgKyAnRWxlbWVudDogezB9Jywgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGlzIG9mIHRoZSBmb3JtOiBgbmctdHJhbnNjbHVkZT1cIm5nLXRyYW5zY2x1ZGVcImAgdGhlbiB0cmVhdCBpdCBsaWtlIHRoZSBkZWZhdWx0XG4gICAgICAgICAgaWYgKCRhdHRycy5uZ1RyYW5zY2x1ZGUgPT09ICRhdHRycy4kYXR0ci5uZ1RyYW5zY2x1ZGUpIHtcbiAgICAgICAgICAgICRhdHRycy5uZ1RyYW5zY2x1ZGUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNsb3ROYW1lID0gJGF0dHJzLm5nVHJhbnNjbHVkZSB8fCAkYXR0cnMubmdUcmFuc2NsdWRlU2xvdDtcblxuICAgICAgICAgIC8vIElmIHRoZSBzbG90IGlzIHJlcXVpcmVkIGFuZCBubyB0cmFuc2NsdXNpb24gY29udGVudCBpcyBwcm92aWRlZCB0aGVuIHRoaXMgY2FsbCB3aWxsIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgJHRyYW5zY2x1ZGUobmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbiwgbnVsbCwgc2xvdE5hbWUpO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIHNsb3QgaXMgb3B0aW9uYWwgYW5kIG5vIHRyYW5zY2x1c2lvbiBjb250ZW50IGlzIHByb3ZpZGVkIHRoZW4gdXNlIHRoZSBmYWxsYmFjayBjb250ZW50XG4gICAgICAgICAgaWYgKHNsb3ROYW1lICYmICEkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpKSB7XG4gICAgICAgICAgICB1c2VGYWxsYmFja0NvbnRlbnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVDbG9uZUF0dGFjaEZuKGNsb25lLCB0cmFuc2NsdWRlZFNjb3BlKSB7XG4gICAgICAgICAgICBpZiAoY2xvbmUubGVuZ3RoICYmIG5vdFdoaXRlc3BhY2UoY2xvbmUpKSB7XG4gICAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1c2VGYWxsYmFja0NvbnRlbnQoKTtcbiAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm90aGluZyBsaW5rZWQgYWdhaW5zdCB0aGUgdHJhbnNjbHVkZWQgc2NvcGUgc2luY2Ugbm8gY29udGVudCB3YXMgYXZhaWxhYmxlLFxuICAgICAgICAgICAgICAvLyBzbyBpdCBzaG91bGQgYmUgc2FmZSB0byBjbGVhbiB1cCB0aGUgZ2VuZXJhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gdXNlRmFsbGJhY2tDb250ZW50KCkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyB0aGUgZmFsbGJhY2sgY29udGVudCByYXRoZXIgdGhhbiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCxcbiAgICAgICAgICAgIC8vIHdlIGxpbmsgYWdhaW5zdCB0aGUgc2NvcGUgb2YgdGhpcyBkaXJlY3RpdmUgcmF0aGVyIHRoYW4gdGhlIHRyYW5zY2x1ZGVkIHNjb3BlXG4gICAgICAgICAgICBmYWxsYmFja0xpbmtGbigkc2NvcGUsIGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gbm90V2hpdGVzcGFjZShub2Rlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZS5ub2RlVmFsdWUudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgc2NyaXB0XG4gICAqIEByZXN0cmljdCBFXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBMb2FkIHRoZSBjb250ZW50IG9mIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGludG8ge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlIGAkdGVtcGxhdGVDYWNoZWB9LCBzbyB0aGF0IHRoZVxuICAgKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sXG4gICAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGVcbiAgICogYDxzY3JpcHQ+YCBlbGVtZW50IG11c3QgYmUgc3BlY2lmaWVkIGFzIGB0ZXh0L25nLXRlbXBsYXRlYCwgYW5kIGEgY2FjaGUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlIG11c3QgYmVcbiAgICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBNdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlICBuYW1lPVwic2NyaXB0LXRhZ1wiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiL3RwbC5odG1sXCI+XG4gICAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICAgIDwvc2NyaXB0PlxuICBcbiAgICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cbiAgICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5jc3MoJyN0cGwtbGluaycpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbiAoJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZShlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIGlmIChhdHRyLnR5cGUgPT09ICd0ZXh0L25nLXRlbXBsYXRlJykge1xuICAgICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsXG4gICAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XG5cbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVVcmwsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLyogZXhwb3J0ZWQgc2VsZWN0RGlyZWN0aXZlLCBvcHRpb25EaXJlY3RpdmUgKi9cblxuICB2YXIgbm9vcE5nTW9kZWxDb250cm9sbGVyID0geyAkc2V0Vmlld1ZhbHVlOiBub29wLCAkcmVuZGVyOiBub29wIH07XG5cbiAgZnVuY3Rpb24gc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMob3B0aW9uRWwsIHZhbHVlKSB7XG4gICAgb3B0aW9uRWwucHJvcCgnc2VsZWN0ZWQnLCB2YWx1ZSk7XG4gICAgLyoqXG4gICAgICogV2hlbiB1bnNlbGVjdGluZyBhbiBvcHRpb24sIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG51bGwgLyBmYWxzZSBzaG91bGQgYmUgZW5vdWdoXG4gICAgICogSG93ZXZlciwgc2NyZWVucmVhZGVycyBtaWdodCByZWFjdCB0byB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGluc3RlYWQsIHNlZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0NDE5XG4gICAgICogTm90ZTogXCJzZWxlY3RlZFwiIGlzIGEgYm9vbGVhbiBhdHRyIGFuZCB3aWxsIGJlIHJlbW92ZWQgd2hlbiB0aGUgXCJ2YWx1ZVwiIGFyZyBpbiBhdHRyKCkgaXMgZmFsc2VcbiAgICAgKiBvciBudWxsXG4gICAgICovXG4gICAgb3B0aW9uRWwuYXR0cignc2VsZWN0ZWQnLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHR5cGVcbiAgICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgY29udHJvbGxlciBmb3IgdGhlIHtAbGluayBuZy5zZWxlY3Qgc2VsZWN0fSBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGV4cG9zZXNcbiAgICogYSBmZXcgdXRpbGl0eSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXVnbWVudCB0aGUgYmVoYXZpb3Igb2YgYSByZWd1bGFyIG9yIGFuXG4gICAqIHtAbGluayBuZy5uZ09wdGlvbnMgbmdPcHRpb25zfSBzZWxlY3QgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIyMjIFNldCBhIGN1c3RvbSBlcnJvciB3aGVuIHRoZSB1bmtub3duIG9wdGlvbiBpcyBzZWxlY3RlZFxuICAgKlxuICAgKiBUaGlzIGV4YW1wbGUgc2V0cyBhIGN1c3RvbSBlcnJvciBcInVua25vd25WYWx1ZVwiIG9uIHRoZSBuZ01vZGVsQ29udHJvbGxlclxuICAgKiB3aGVuIHRoZSBzZWxlY3QgZWxlbWVudCdzIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkLCBpLmUuIHdoZW4gdGhlIG1vZGVsIGlzIHNldCB0byBhIHZhbHVlXG4gICAqIHRoYXQgaXMgbm90IG1hdGNoZWQgYnkgYW55IG9wdGlvbi5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC11bmtub3duLXZhbHVlLWVycm9yXCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgKiAgICAgPGxhYmVsIGZvcj1cInRlc3RTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gICAqICAgICA8c2VsZWN0IG5hbWU9XCJ0ZXN0U2VsZWN0XCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiIHVua25vd24tdmFsdWUtZXJyb3I+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gICAqICAgICA8L3NlbGVjdD48YnI+XG4gICAqICAgICA8c3BhbiBuZy1pZj1cIm15Rm9ybS50ZXN0U2VsZWN0LiRlcnJvci51bmtub3duVmFsdWVcIj5FcnJvcjogVGhlIGN1cnJlbnQgbW9kZWwgZG9lc24ndCBtYXRjaCBhbnkgb3B0aW9uPC9zcGFuPlxuICAgKlxuICAgKiAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImZvcmNlVW5rbm93bk9wdGlvbigpXCI+Rm9yY2UgdW5rbm93biBvcHRpb248L2J1dHRvbj48YnI+XG4gICAqICAgPC9mb3JtPlxuICAgKiA8L2Rpdj5cbiAgICogPC9maWxlPlxuICAgKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICBhbmd1bGFyLm1vZHVsZSgnc3RhdGljU2VsZWN0JywgW10pXG4gICAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgJHNjb3BlLnNlbGVjdGVkID0gbnVsbDtcbiAgICpcbiAgICogICAgICAkc2NvcGUuZm9yY2VVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSAnbm9uc2Vuc2UnO1xuICAgKiAgICAgIH07XG4gICAqICAgfV0pXG4gICAqICAgLmRpcmVjdGl2ZSgndW5rbm93blZhbHVlRXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdzZWxlY3QnXSxcbiAgICogICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgKiAgICAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICAgKiAgICAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMV07XG4gICAqXG4gICAqICAgICAgICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnMudW5rbm93blZhbHVlID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAqICAgICAgICAgICBpZiAoc2VsZWN0Q3RybC4kaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQoKSkge1xuICAgKiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgICAgICAgICB9XG4gICAqXG4gICAqICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICogICAgICAgICB9O1xuICAgKiAgICAgICB9XG4gICAqXG4gICAqICAgICB9O1xuICAgKiAgIH0pO1xuICAgKiA8L2ZpbGU+XG4gICAqPC9leGFtcGxlPlxuICAgKlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAjIyMgU2V0IHRoZSBcInJlcXVpcmVkXCIgZXJyb3Igd2hlbiB0aGUgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBcInJlcXVpcmVkXCIgZXJyb3Igb24gdGhlIG5nTW9kZWxDb250cm9sbGVyIGlzIG9ubHkgc2V0IG9uIGEgcmVxdWlyZWQgc2VsZWN0XG4gICAqIHdoZW4gdGhlIGVtcHR5IG9wdGlvbiBpcyBzZWxlY3RlZC4gVGhpcyBleGFtcGxlIGFkZHMgYSBjdXN0b20gZGlyZWN0aXZlIHRoYXQgYWxzbyBzZXRzIHRoZVxuICAgKiBlcnJvciB3aGVuIHRoZSB1bmtub3duIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC11bmtub3duLXZhbHVlLXJlcXVpcmVkXCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgKiAgICAgPGxhYmVsIGZvcj1cInRlc3RTZWxlY3RcIj4gU2VsZWN0OiA8L2xhYmVsPjxicj5cbiAgICogICAgIDxzZWxlY3QgbmFtZT1cInRlc3RTZWxlY3RcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCIgdW5rbm93bi12YWx1ZS1yZXF1aXJlZD5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAgICogICAgIDwvc2VsZWN0Pjxicj5cbiAgICogICAgIDxzcGFuIG5nLWlmPVwibXlGb3JtLnRlc3RTZWxlY3QuJGVycm9yLnJlcXVpcmVkXCI+RXJyb3I6IFBsZWFzZSBzZWxlY3QgYSB2YWx1ZTwvc3Bhbj48YnI+XG4gICAqXG4gICAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAgICogICA8L2Zvcm0+XG4gICAqIDwvZGl2PlxuICAgKiA8L2ZpbGU+XG4gICAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogIGFuZ3VsYXIubW9kdWxlKCdzdGF0aWNTZWxlY3QnLCBbXSlcbiAgICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAkc2NvcGUuc2VsZWN0ZWQgPSBudWxsO1xuICAgKlxuICAgKiAgICAgICRzY29wZS5mb3JjZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICRzY29wZS5zZWxlY3RlZCA9ICdub25zZW5zZSc7XG4gICAqICAgICAgfTtcbiAgICogICB9XSlcbiAgICogICAuZGlyZWN0aXZlKCd1bmtub3duVmFsdWVSZXF1aXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgcHJpb3JpdHk6IDEsIC8vIFRoaXMgZGlyZWN0aXZlIG11c3QgcnVuIGFmdGVyIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgaGFzIGFkZGVkIGl0cyB2YWxpZGF0b3JcbiAgICogICAgICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ3NlbGVjdCddLFxuICAgKiAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAqICAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMF07XG4gICAqICAgICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1sxXTtcbiAgICpcbiAgICogICAgICAgICB2YXIgb3JpZ2luYWxSZXF1aXJlZFZhbGlkYXRvciA9IG5nTW9kZWxDdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICAgKlxuICAgKiAgICAgICAgIG5nTW9kZWxDdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkID0gZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICAgICBpZiAoYXR0cnMucmVxdWlyZWQgJiYgc2VsZWN0Q3RybC4kaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQoKSkge1xuICAgKiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgICAgICAgICB9XG4gICAqXG4gICAqICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZXF1aXJlZFZhbGlkYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgKiAgICAgICAgIH07XG4gICAqICAgICAgIH1cbiAgICogICAgIH07XG4gICAqICAgfSk7XG4gICAqIDwvZmlsZT5cbiAgICo8L2V4YW1wbGU+XG4gICAqXG4gICAqXG4gICAqL1xuICB2YXIgU2VsZWN0Q29udHJvbGxlciA9IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgLyoqIEB0aGlzICovZnVuY3Rpb24gKCRlbGVtZW50LCAkc2NvcGUpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgb3B0aW9uc01hcCA9IG5ldyBOZ01hcCgpO1xuXG4gICAgc2VsZi5zZWxlY3RWYWx1ZU1hcCA9IHt9OyAvLyBLZXlzIGFyZSB0aGUgaGFzaGVkIHZhbHVlcywgdmFsdWVzIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblxuICAgIC8vIElmIHRoZSBuZ01vZGVsIGRvZXNuJ3QgZ2V0IHByb3ZpZGVkIHRoZW4gcHJvdmlkZSBhIGR1bW15IG5vb3AgdmVyc2lvbiB0byBwcmV2ZW50IGVycm9yc1xuICAgIHNlbGYubmdNb2RlbEN0cmwgPSBub29wTmdNb2RlbENvbnRyb2xsZXI7XG4gICAgc2VsZi5tdWx0aXBsZSA9IGZhbHNlO1xuXG4gICAgLy8gVGhlIFwidW5rbm93blwiIG9wdGlvbiBpcyBvbmUgdGhhdCBpcyBwcmVwZW5kZWQgdG8gdGhlIGxpc3QgaWYgdGhlIHZpZXdWYWx1ZVxuICAgIC8vIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9ucy4gV2hlbiBpdCBpcyByZW5kZXJlZCB0aGUgdmFsdWUgb2YgdGhlIHVua25vd25cbiAgICAvLyBvcHRpb24gaXMgJz8gWFhYID8nIHdoZXJlIFhYWCBpcyB0aGUgaGFzaEtleSBvZiB0aGUgdmFsdWUgdGhhdCBpcyBub3Qga25vd24uXG4gICAgLy9cbiAgICAvLyBTdXBwb3J0OiBJRSA5IG9ubHlcbiAgICAvLyBXZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAgIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICAgIHNlbGYudW5rbm93bk9wdGlvbiA9IGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJykpO1xuXG4gICAgLy8gVGhlIGVtcHR5IG9wdGlvbiBpcyBhbiBvcHRpb24gd2l0aCB0aGUgdmFsdWUgJycgdGhhdCB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIGNhblxuICAgIC8vIHByb3ZpZGUgaW5zaWRlIHRoZSBzZWxlY3QuIEl0IGlzIGFsd2F5cyBzZWxlY3RhYmxlIGFuZCBpbmRpY2F0ZXMgdGhhdCBhIFwibnVsbFwiIHNlbGVjdGlvbiBoYXNcbiAgICAvLyBiZWVuIG1hZGUgYnkgdGhlIHVzZXIuXG4gICAgLy8gSWYgdGhlIHNlbGVjdCBoYXMgYW4gZW1wdHkgb3B0aW9uLCBhbmQgdGhlIG1vZGVsIG9mIHRoZSBzZWxlY3QgaXMgc2V0IHRvIFwidW5kZWZpbmVkXCIgb3IgXCJudWxsXCIsXG4gICAgLy8gdGhlIGVtcHR5IG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICAvLyBJZiB0aGUgbW9kZWwgaXMgc2V0IHRvIGEgZGlmZmVyZW50IHVubWF0Y2hlZCB2YWx1ZSwgdGhlIHVua25vd24gb3B0aW9uIGlzIHJlbmRlcmVkIGFuZFxuICAgIC8vIHNlbGVjdGVkLCBpLmUgYm90aCBhcmUgcHJlc2VudCwgYmVjYXVzZSBhIFwibnVsbFwiIHNlbGVjdGlvbiBhbmQgYW4gdW5rbm93biB2YWx1ZSBhcmUgZGlmZmVyZW50LlxuICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgdmFyIHVua25vd25WYWwgPSBzZWxmLmdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlKHZhbCk7XG4gICAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgICAgJGVsZW1lbnQucHJlcGVuZChzZWxmLnVua25vd25PcHRpb24pO1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi51bmtub3duT3B0aW9uLCB0cnVlKTtcbiAgICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgdmFyIHVua25vd25WYWwgPSBzZWxmLmdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlKHZhbCk7XG4gICAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi51bmtub3duT3B0aW9uLCB0cnVlKTtcbiAgICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgICB9O1xuXG4gICAgc2VsZi5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiAnPyAnICsgaGFzaEtleSh2YWwpICsgJyA/JztcbiAgICB9O1xuXG4gICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgc2VsZi51bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICAgIH07XG5cbiAgICBzZWxmLnNlbGVjdEVtcHR5T3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuZW1wdHlPcHRpb24pIHtcbiAgICAgICAgJGVsZW1lbnQudmFsKCcnKTtcbiAgICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi5lbXB0eU9wdGlvbiwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYudW5zZWxlY3RFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhhc0VtcHR5T3B0aW9uKSB7XG4gICAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYuZW1wdHlPcHRpb24sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xuICAgIH0pO1xuXG4gICAgLy8gUmVhZCB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdCBjb250cm9sLCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjaGFuZ2VzIGRlcGVuZGluZ1xuICAgIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgICBzZWxmLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWRTaW5nbGVWYWx1ZSgpIHtcbiAgICAgIHZhciB2YWwgPSAkZWxlbWVudC52YWwoKTtcbiAgICAgIC8vIG5nVmFsdWUgYWRkZWQgb3B0aW9uIHZhbHVlcyBhcmUgc3RvcmVkIGluIHRoZSBzZWxlY3RWYWx1ZU1hcCwgbm9ybWFsIGludGVycG9sYXRpb25zIGFyZSBub3RcbiAgICAgIHZhciByZWFsVmFsID0gdmFsIGluIHNlbGYuc2VsZWN0VmFsdWVNYXAgPyBzZWxmLnNlbGVjdFZhbHVlTWFwW3ZhbF0gOiB2YWw7XG5cbiAgICAgIGlmIChzZWxmLmhhc09wdGlvbihyZWFsVmFsKSkge1xuICAgICAgICByZXR1cm4gcmVhbFZhbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8vIFdyaXRlIHRoZSB2YWx1ZSB0byB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gICAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICAgIHNlbGYud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlU2luZ2xlVmFsdWUodmFsdWUpIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIHNlbGVjdGVkIGF0dHJpYnV0ZSBmcm9tIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIG9wdGlvblxuICAgICAgLy8gT3RoZXJ3aXNlLCBzY3JlZW4gcmVhZGVycyBtaWdodCBnZXQgY29uZnVzZWRcbiAgICAgIHZhciBjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiA9ICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICBpZiAoY3VycmVudGx5U2VsZWN0ZWRPcHRpb24pIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiksIGZhbHNlKTtcblxuICAgICAgaWYgKHNlbGYuaGFzT3B0aW9uKHZhbHVlKSkge1xuICAgICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcblxuICAgICAgICB2YXIgaGFzaGVkVmFsID0gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAgICRlbGVtZW50LnZhbChoYXNoZWRWYWwgaW4gc2VsZi5zZWxlY3RWYWx1ZU1hcCA/IGhhc2hlZFZhbCA6IHZhbHVlKTtcblxuICAgICAgICAvLyBTZXQgc2VsZWN0ZWQgYXR0cmlidXRlIGFuZCBwcm9wZXJ0eSBvbiBzZWxlY3RlZCBvcHRpb24gZm9yIHNjcmVlbiByZWFkZXJzXG4gICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9ICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShzZWxlY3RlZE9wdGlvbiksIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5zZWxlY3RVbmtub3duT3JFbXB0eU9wdGlvbih2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gYWRkZWRcbiAgICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgLy8gU2tpcCBjb21tZW50IG5vZGVzLCBhcyB0aGV5IG9ubHkgcG9sbHV0ZSB0aGUgYG9wdGlvbnNNYXBgXG4gICAgICBpZiAoZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHJldHVybjtcblxuICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkodmFsdWUsICdcIm9wdGlvbiB2YWx1ZVwiJyk7XG4gICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKSB8fCAwO1xuICAgICAgb3B0aW9uc01hcC5zZXQodmFsdWUsIGNvdW50ICsgMSk7XG4gICAgICAvLyBPbmx5IHJlbmRlciBhdCB0aGUgZW5kIG9mIGEgZGlnZXN0LiBUaGlzIGltcHJvdmVzIHJlbmRlciBwZXJmb3JtYW5jZSB3aGVuIG1hbnkgb3B0aW9uc1xuICAgICAgLy8gYXJlIGFkZGVkIGR1cmluZyBhIGRpZ2VzdCBhbmQgZW5zdXJlcyBhbGwgcmVsZXZhbnQgb3B0aW9ucyBhcmUgY29ycmVjdGx5IG1hcmtlZCBhcyBzZWxlY3RlZFxuICAgICAgc2NoZWR1bGVSZW5kZXIoKTtcbiAgICB9O1xuXG4gICAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiByZW1vdmVkXG4gICAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChjb3VudCkge1xuICAgICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgICBvcHRpb25zTWFwLmRlbGV0ZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgc2VsZi5oYXNFbXB0eU9wdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5lbXB0eU9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uc01hcC5zZXQodmFsdWUsIGNvdW50IC0gMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICEhb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc2VsZWN0LlNlbGVjdENvbnRyb2xsZXIjJGhhc0VtcHR5T3B0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3QgZWxlbWVudCBjdXJyZW50bHkgaGFzIGFuIGVtcHR5IG9wdGlvblxuICAgICAqIGVsZW1lbnQsIGkuZS4gYW4gb3B0aW9uIHRoYXQgc2lnbmlmaWVzIHRoYXQgdGhlIHNlbGVjdCBpcyBlbXB0eSAvIHRoZSBzZWxlY3Rpb24gaXMgbnVsbC5cbiAgICAgKlxuICAgICAqL1xuICAgIHNlbGYuJGhhc0VtcHR5T3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNlbGYuaGFzRW1wdHlPcHRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaXNVbmtub3duT3B0aW9uU2VsZWN0ZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNlbGVjdCBlbGVtZW50J3MgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQuIFRoZSB1bmtub3duIG9wdGlvbiBpcyBhZGRlZFxuICAgICAqIGFuZCBhdXRvbWF0aWNhbGx5IHNlbGVjdGVkIHdoZW5ldmVyIHRoZSBzZWxlY3QgbW9kZWwgZG9lc24ndCBtYXRjaCBhbnkgb3B0aW9uLlxuICAgICAqXG4gICAgICovXG4gICAgc2VsZi4kaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBQcmVzZW5jZSBvZiB0aGUgdW5rbm93biBvcHRpb24gbWVhbnMgaXQgaXMgc2VsZWN0ZWRcbiAgICAgIHJldHVybiAkZWxlbWVudFswXS5vcHRpb25zWzBdID09PSBzZWxmLnVua25vd25PcHRpb25bMF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaXNFbXB0eU9wdGlvblNlbGVjdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3QgZWxlbWVudCBoYXMgYW4gZW1wdHkgb3B0aW9uIGFuZCB0aGlzIGVtcHR5IG9wdGlvbiBpcyBjdXJyZW50bHlcbiAgICAgKiBzZWxlY3RlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHRoZSBzZWxlY3QgZWxlbWVudCBoYXMgbm8gZW1wdHkgb3B0aW9uIG9yIGl0IGlzIG5vdCBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqL1xuICAgIHNlbGYuJGlzRW1wdHlPcHRpb25TZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZWxmLmhhc0VtcHR5T3B0aW9uICYmICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF0gPT09IHNlbGYuZW1wdHlPcHRpb25bMF07XG4gICAgfTtcblxuICAgIHNlbGYuc2VsZWN0VW5rbm93bk9yRW1wdHlPcHRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHNlbGYuZW1wdHlPcHRpb24pIHtcbiAgICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi51bmtub3duT3B0aW9uLnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICBzZWxmLnVwZGF0ZVVua25vd25PcHRpb24odmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHNjaGVkdWxlUmVuZGVyKCkge1xuICAgICAgaWYgKHJlbmRlclNjaGVkdWxlZCkgcmV0dXJuO1xuICAgICAgcmVuZGVyU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUocmVuZGVyQWZ0ZXIpIHtcbiAgICAgIGlmICh1cGRhdGVTY2hlZHVsZWQpIHJldHVybjtcblxuICAgICAgdXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICB1cGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGYucmVhZFZhbHVlKCkpO1xuICAgICAgICBpZiAocmVuZGVyQWZ0ZXIpIHNlbGYubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25TY29wZSwgb3B0aW9uRWxlbWVudCwgb3B0aW9uQXR0cnMsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pIHtcblxuICAgICAgaWYgKG9wdGlvbkF0dHJzLiRhdHRyLm5nVmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzZXQgYnkgbmdWYWx1ZVxuICAgICAgICB2YXIgb2xkVmFsLFxuICAgICAgICAgICAgaGFzaGVkVmFsID0gTmFOO1xuICAgICAgICBvcHRpb25BdHRycy4kb2JzZXJ2ZSgndmFsdWUnLCBmdW5jdGlvbiB2YWx1ZUF0dHJpYnV0ZU9ic2VydmVBY3Rpb24obmV3VmFsKSB7XG5cbiAgICAgICAgICB2YXIgcmVtb3ZhbDtcbiAgICAgICAgICB2YXIgcHJldmlvdXNseVNlbGVjdGVkID0gb3B0aW9uRWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgaWYgKGlzRGVmaW5lZChoYXNoZWRWYWwpKSB7XG4gICAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuc2VsZWN0VmFsdWVNYXBbaGFzaGVkVmFsXTtcbiAgICAgICAgICAgIHJlbW92YWwgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhc2hlZFZhbCA9IGhhc2hLZXkobmV3VmFsKTtcbiAgICAgICAgICBvbGRWYWwgPSBuZXdWYWw7XG4gICAgICAgICAgc2VsZi5zZWxlY3RWYWx1ZU1hcFtoYXNoZWRWYWxdID0gbmV3VmFsO1xuICAgICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG4gICAgICAgICAgLy8gU2V0IHRoZSBhdHRyaWJ1dGUgZGlyZWN0bHkgaW5zdGVhZCBvZiB1c2luZyBvcHRpb25BdHRycy4kc2V0IC0gdGhpcyBzdG9wcyB0aGUgb2JzZXJ2ZXJcbiAgICAgICAgICAvLyBmcm9tIGZpcmluZyBhIHNlY29uZCB0aW1lLiBPdGhlciAkb2JzZXJ2ZXJzIG9uIHZhbHVlIHdpbGwgYWxzbyBnZXQgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAgICAvLyBuZ1ZhbHVlIGV4cHJlc3Npb24sIG5vdCB0aGUgaGFzaGVkIHZhbHVlXG4gICAgICAgICAgb3B0aW9uRWxlbWVudC5hdHRyKCd2YWx1ZScsIGhhc2hlZFZhbCk7XG5cbiAgICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVWYWx1ZUZuKSB7XG4gICAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgaW50ZXJwb2xhdGVkXG4gICAgICAgIG9wdGlvbkF0dHJzLiRvYnNlcnZlKCd2YWx1ZScsIGZ1bmN0aW9uIHZhbHVlQXR0cmlidXRlT2JzZXJ2ZUFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBpbiBuZ09wdGlvbnMgYW5kIGhhcyBzaWRlLWVmZmVjdHMhXG4gICAgICAgICAgc2VsZi5yZWFkVmFsdWUoKTtcblxuICAgICAgICAgIHZhciByZW1vdmFsO1xuICAgICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG5cbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKG9sZFZhbCkpIHtcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgICAgICByZW1vdmFsID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2xkVmFsID0gbmV3VmFsO1xuICAgICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgICAgLy8gVGhlIHRleHQgY29udGVudCBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgICAgb3B0aW9uU2NvcGUuJHdhdGNoKGludGVycG9sYXRlVGV4dEZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgb3B0aW9uQXR0cnMuJHNldCgndmFsdWUnLCBuZXdWYWwpO1xuICAgICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKG9sZFZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc3RhdGljXG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG9wdGlvbkF0dHJzLnZhbHVlLCBvcHRpb25FbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24gKG5ld1ZhbCkge1xuXG4gICAgICAgIC8vIFNpbmNlIG1vZGVsIHVwZGF0ZXMgd2lsbCBhbHNvIHNlbGVjdCBkaXNhYmxlZCBvcHRpb25zIChsaWtlIG5nT3B0aW9ucyksXG4gICAgICAgIC8vIHdlIG9ubHkgaGF2ZSB0byBoYW5kbGUgb3B0aW9ucyBiZWNvbWluZyBkaXNhYmxlZCwgbm90IGVuYWJsZWRcblxuICAgICAgICBpZiAobmV3VmFsID09PSAndHJ1ZScgfHwgbmV3VmFsICYmIG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgIGlmIChzZWxmLm11bHRpcGxlKSB7XG4gICAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgb3B0aW9uRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBzZWxmLnJlYWRWYWx1ZSgpO1xuICAgICAgICB2YXIgcmVtb3ZlVmFsdWUgPSBvcHRpb25BdHRycy52YWx1ZTtcblxuICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihyZW1vdmVWYWx1ZSk7XG4gICAgICAgIHNjaGVkdWxlUmVuZGVyKCk7XG5cbiAgICAgICAgaWYgKHNlbGYubXVsdGlwbGUgJiYgY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pbmRleE9mKHJlbW92ZVZhbHVlKSAhPT0gLTEgfHwgY3VycmVudFZhbHVlID09PSByZW1vdmVWYWx1ZSkge1xuICAgICAgICAgIC8vIFdoZW4gbXVsdGlwbGUgKHNlbGVjdGVkKSBvcHRpb25zIGFyZSBkZXN0cm95ZWQgYXQgdGhlIHNhbWUgdGltZSwgd2UgZG9uJ3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHJ1biBhIG1vZGVsIHVwZGF0ZSBmb3IgZWFjaCBvZiB0aGVtLiBJbnN0ZWFkLCBydW4gYSBzaW5nbGUgdXBkYXRlIGluIHRoZSAkJHBvc3REaWdlc3RcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfV07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgc2VsZWN0XG4gICAqIEByZXN0cmljdCBFXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIGBzZWxlY3RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAgICpcbiAgICogVGhlIGBzZWxlY3RgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvZ2V0aGVyIHdpdGgge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSB0byBwcm92aWRlIGRhdGEtYmluZGluZ1xuICAgKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICAgKiBJdCBhbHNvIGhhbmRsZXMgZHluYW1pYyBgPG9wdGlvbj5gIGVsZW1lbnRzLCB3aGljaCBjYW4gYmUgYWRkZWQgdXNpbmcgdGhlIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXR9YCBvclxuICAgKiB7QGxpbmsgbmdPcHRpb25zIGBuZ09wdGlvbnNgfSBkaXJlY3RpdmVzLlxuICAgKlxuICAgKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3RlZCBvcHRpb24gd2lsbCBiZSBib3VuZFxuICAgKiB0byB0aGUgbW9kZWwgaWRlbnRpZmllZCBieSB0aGUgYG5nTW9kZWxgIGRpcmVjdGl2ZS4gV2l0aCBzdGF0aWMgb3IgcmVwZWF0ZWQgb3B0aW9ucywgdGhpcyBpc1xuICAgKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gICAqIFZhbHVlIGFuZCB0ZXh0Q29udGVudCBjYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKlxuICAgKiBUaGUge0BsaW5rIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyIHNlbGVjdCBjb250cm9sbGVyfSBleHBvc2VzIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWRcbiAgICogdG8gbWFuaXB1bGF0ZSB0aGUgc2VsZWN0J3MgYmVoYXZpb3IuXG4gICAqXG4gICAqICMjIE1hdGNoaW5nIG1vZGVsIGFuZCBvcHRpb24gdmFsdWVzXG4gICAqXG4gICAqIEluIGdlbmVyYWwsIHRoZSBtYXRjaCBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgYW4gb3B0aW9uIGlzIGV2YWx1YXRlZCBieSBzdHJpY3RseSBjb21wYXJpbmcgdGhlIG1vZGVsXG4gICAqIHZhbHVlIGFnYWluc3QgdGhlIHZhbHVlIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAgICpcbiAgICogSWYgeW91IGFyZSBzZXR0aW5nIHRoZSBvcHRpb24gdmFsdWUgd2l0aCB0aGUgb3B0aW9uJ3MgYHZhbHVlYCBhdHRyaWJ1dGUsIG9yIHRleHRDb250ZW50LCB0aGVcbiAgICogdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBgc3RyaW5nYCB3aGljaCBtZWFucyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBtdXN0IGFsc28gYmUgYSBzdHJpbmcuXG4gICAqIE90aGVyd2lzZSB0aGUgYHNlbGVjdGAgZGlyZWN0aXZlIGNhbm5vdCBtYXRjaCB0aGVtIGNvcnJlY3RseS5cbiAgICpcbiAgICogVG8gYmluZCB0aGUgbW9kZWwgdG8gYSBub24tc3RyaW5nIHZhbHVlLCB5b3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzOlxuICAgKiAtIHRoZSB7QGxpbmsgbmcubmdPcHRpb25zIGBuZ09wdGlvbnNgfSBkaXJlY3RpdmVcbiAgICogICAoe0BsaW5rIG5nLnNlbGVjdCN1c2luZy1zZWxlY3Qtd2l0aC1uZ29wdGlvbnMtYW5kLXNldHRpbmctYS1kZWZhdWx0LXZhbHVlfSlcbiAgICogLSB0aGUge0BsaW5rIG5nLm5nVmFsdWUgYG5nVmFsdWVgfSBkaXJlY3RpdmUsIHdoaWNoIGFsbG93cyBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgdG8gYmVcbiAgICogICBvcHRpb24gdmFsdWVzICh7QGxpbmsgbmcuc2VsZWN0I3VzaW5nLW5ndmFsdWUtdG8tYmluZC10aGUtbW9kZWwtdG8tYW4tYXJyYXktb2Ytb2JqZWN0cyBFeGFtcGxlfSlcbiAgICogLSBtb2RlbCAkcGFyc2VycyAvICRmb3JtYXR0ZXJzIHRvIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZVxuICAgKiAgICh7QGxpbmsgbmcuc2VsZWN0I2JpbmRpbmctc2VsZWN0LXRvLWEtbm9uLXN0cmluZy12YWx1ZS12aWEtbmdtb2RlbC1wYXJzaW5nLWZvcm1hdHRpbmcgRXhhbXBsZX0pXG4gICAqXG4gICAqIElmIHRoZSB2aWV3VmFsdWUgb2YgYG5nTW9kZWxgIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9ucywgdGhlbiB0aGUgY29udHJvbFxuICAgKiB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGFuIFwidW5rbm93blwiIG9wdGlvbiwgd2hpY2ggaXQgdGhlbiByZW1vdmVzIHdoZW4gdGhlIG1pc21hdGNoIGlzIHJlc29sdmVkLlxuICAgKlxuICAgKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuXG4gICAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICAgKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxuICAgKlxuICAgKiAjIyBDaG9vc2luZyBiZXR3ZWVuIGBuZ1JlcGVhdGAgYW5kIGBuZ09wdGlvbnNgXG4gICAqXG4gICAqIEluIG1hbnkgY2FzZXMsIGBuZ1JlcGVhdGAgY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6bmdPcHRpb25zXG4gICAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzOlxuICAgKiAtIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICAgKiBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb25cbiAgICogLSByZWR1Y2VkIG1lbW9yeSBjb25zdW1wdGlvbiBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2VcbiAgICogLSBpbmNyZWFzZWQgcmVuZGVyIHNwZWVkIGJ5IGNyZWF0aW5nIHRoZSBvcHRpb25zIGluIGEgZG9jdW1lbnRGcmFnbWVudCBpbnN0ZWFkIG9mIGluZGl2aWR1YWxseVxuICAgKlxuICAgKiBTcGVjaWZpY2FsbHksIHNlbGVjdCB3aXRoIHJlcGVhdGVkIG9wdGlvbnMgc2xvd3MgZG93biBzaWduaWZpY2FudGx5IHN0YXJ0aW5nIGF0IDIwMDAgb3B0aW9ucyBpblxuICAgKiBDaHJvbWUgYW5kIEludGVybmV0IEV4cGxvcmVyIC8gRWRnZS5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICAgKiAgICAgYm91bmQgdG8gdGhlIG1vZGVsIGFzIGFuIGFycmF5LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIG5nUmVxdWlyZWQgaW5zdGVhZCBvZiByZXF1aXJlZFxuICAgKiB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgcmVxdWlyZWQgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nT3B0aW9ucyBzZXRzIHRoZSBvcHRpb25zIHRoYXQgdGhlIHNlbGVjdCBpcyBwb3B1bGF0ZWQgd2l0aCBhbmQgZGVmaW5lcyB3aGF0IGlzXG4gICAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdBdHRyU2l6ZSBzZXRzIHRoZSBzaXplIG9mIHRoZSBzZWxlY3QgZWxlbWVudCBkeW5hbWljYWxseS4gVXNlcyB0aGVcbiAgICoge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcyBuZ0F0dHJ9IGRpcmVjdGl2ZS5cbiAgICpcbiAgICpcbiAgICogQGtub3duSXNzdWVcbiAgICpcbiAgICogSW4gRmlyZWZveCwgdGhlIHNlbGVjdCBtb2RlbCBpcyBvbmx5IHVwZGF0ZWQgd2hlbiB0aGUgc2VsZWN0IGVsZW1lbnQgaXMgYmx1cnJlZC4gRm9yIGV4YW1wbGUsXG4gICAqIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gb3B0aW9ucyB3aXRoIHRoZSBrZXlib2FyZCwgdGhlIHNlbGVjdCBtb2RlbCBpcyBvbmx5IHNldCB0byB0aGVcbiAgICogY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiB3aGVuIHRoZSBzZWxlY3QgaXMgYmx1cnJlZCwgZS5nIHZpYSB0YWIga2V5IG9yIGNsaWNraW5nIHRoZSBtb3VzZVxuICAgKiBvdXRzaWRlIHRoZSBzZWxlY3QuXG4gICAqXG4gICAqIFRoaXMgaXMgZHVlIHRvIGFuIGFtYmlndWl0eSBpbiB0aGUgc2VsZWN0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbi4gU2VlIHRoZVxuICAgKiBbaXNzdWUgb24gdGhlIEZpcmVmb3ggYnVnIHRyYWNrZXJdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyNjM3OSlcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24sIGFuZCB0aGlzXG4gICAqIFtHaXRodWIgY29tbWVudCBmb3IgYSB3b3JrYXJvdW5kXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTM0I2lzc3VlY29tbWVudC0xMzA4MDA0ODgpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICMjIyBTaW1wbGUgYHNlbGVjdGAgZWxlbWVudHMgd2l0aCBzdGF0aWMgb3B0aW9uc1xuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwic3RhdGljLXNlbGVjdFwiIG1vZHVsZT1cInN0YXRpY1NlbGVjdFwiPlxuICAgKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gICAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEuc2luZ2xlU2VsZWN0XCI+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gICAqICAgICA8L3NlbGVjdD48YnI+XG4gICAqXG4gICAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Qgd2l0aCBcIm5vdCBzZWxlY3RlZFwiIG9wdGlvbiBhbmQgZHluYW1pYyBvcHRpb24gdmFsdWVzOiA8L2xhYmVsPjxicj5cbiAgICogICAgIDxzZWxlY3QgbmFtZT1cInNpbmdsZVNlbGVjdFwiIGlkPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICAgKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tUGxlYXNlIHNlbGVjdC0tLTwvb3B0aW9uPiA8IS0tIG5vdCBzZWxlY3RlZCAvIGJsYW5rIG9wdGlvbiAtLT5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7ZGF0YS5vcHRpb24xfX1cIj5PcHRpb24gMTwvb3B0aW9uPiA8IS0tIGludGVycG9sYXRpb24gLS0+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gICAqICAgICA8L3NlbGVjdD48YnI+XG4gICAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAgICogICAgIDx0dD5zaW5nbGVTZWxlY3QgPSB7e2RhdGEuc2luZ2xlU2VsZWN0fX08L3R0PlxuICAgKlxuICAgKiAgICAgPGhyPlxuICAgKiAgICAgPGxhYmVsIGZvcj1cIm11bHRpcGxlU2VsZWN0XCI+IE11bHRpcGxlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gICAqICAgICA8c2VsZWN0IG5hbWU9XCJtdWx0aXBsZVNlbGVjdFwiIGlkPVwibXVsdGlwbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEubXVsdGlwbGVTZWxlY3RcIiBtdWx0aXBsZT5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0zXCI+T3B0aW9uIDM8L29wdGlvbj5cbiAgICogICAgIDwvc2VsZWN0Pjxicj5cbiAgICogICAgIDx0dD5tdWx0aXBsZVNlbGVjdCA9IHt7ZGF0YS5tdWx0aXBsZVNlbGVjdH19PC90dD48YnIvPlxuICAgKiAgIDwvZm9ybT5cbiAgICogPC9kaXY+XG4gICAqIDwvZmlsZT5cbiAgICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICAgKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICRzY29wZS5kYXRhID0ge1xuICAgKiAgICAgICBzaW5nbGVTZWxlY3Q6IG51bGwsXG4gICAqICAgICAgIG11bHRpcGxlU2VsZWN0OiBbXSxcbiAgICogICAgICAgb3B0aW9uMTogJ29wdGlvbi0xJ1xuICAgKiAgICAgIH07XG4gICAqXG4gICAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAgJHNjb3BlLmRhdGEuc2luZ2xlU2VsZWN0ID0gJ25vbnNlbnNlJztcbiAgICogICAgICB9O1xuICAgKiAgIH1dKTtcbiAgICogPC9maWxlPlxuICAgKjwvZXhhbXBsZT5cbiAgICpcbiAgICogIyMjIFVzaW5nIGBuZ1JlcGVhdGAgdG8gZ2VuZXJhdGUgYHNlbGVjdGAgb3B0aW9uc1xuICAgKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LW5ncmVwZWF0XCIgbW9kdWxlPVwibmdyZXBlYXRTZWxlY3RcIj5cbiAgICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICA8bGFiZWwgZm9yPVwicmVwZWF0U2VsZWN0XCI+IFJlcGVhdCBzZWxlY3Q6IDwvbGFiZWw+XG4gICAqICAgICA8c2VsZWN0IG5hbWU9XCJyZXBlYXRTZWxlY3RcIiBpZD1cInJlcGVhdFNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tb2RlbFwiPlxuICAgKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiB2YWx1ZT1cInt7b3B0aW9uLmlkfX1cIj57e29wdGlvbi5uYW1lfX08L29wdGlvbj5cbiAgICogICAgIDwvc2VsZWN0PlxuICAgKiAgIDwvZm9ybT5cbiAgICogICA8aHI+XG4gICAqICAgPHR0Pm1vZGVsID0ge3tkYXRhLm1vZGVsfX08L3R0Pjxici8+XG4gICAqIDwvZGl2PlxuICAgKiA8L2ZpbGU+XG4gICAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogIGFuZ3VsYXIubW9kdWxlKCduZ3JlcGVhdFNlbGVjdCcsIFtdKVxuICAgKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICRzY29wZS5kYXRhID0ge1xuICAgKiAgICAgICBtb2RlbDogbnVsbCxcbiAgICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICAgKiAgICAgICAgIHtpZDogJzEnLCBuYW1lOiAnT3B0aW9uIEEnfSxcbiAgICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gICAqICAgICAgICAge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9XG4gICAqICAgICAgIF1cbiAgICogICAgICB9O1xuICAgKiAgIH1dKTtcbiAgICogPC9maWxlPlxuICAgKjwvZXhhbXBsZT5cbiAgICpcbiAgICogIyMjIFVzaW5nIGBuZ1ZhbHVlYCB0byBiaW5kIHRoZSBtb2RlbCB0byBhbiBhcnJheSBvZiBvYmplY3RzXG4gICAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtbmd2YWx1ZVwiIG1vZHVsZT1cIm5ndmFsdWVTZWxlY3RcIj5cbiAgICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICA8bGFiZWwgZm9yPVwibmd2YWx1ZXNlbGVjdFwiPiBuZ3ZhbHVlIHNlbGVjdDogPC9sYWJlbD5cbiAgICogICAgIDxzZWxlY3Qgc2l6ZT1cIjZcIiBuYW1lPVwibmd2YWx1ZXNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tb2RlbFwiIG11bHRpcGxlPlxuICAgKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiBuZy12YWx1ZT1cIm9wdGlvbi52YWx1ZVwiPnt7b3B0aW9uLm5hbWV9fTwvb3B0aW9uPlxuICAgKiAgICAgPC9zZWxlY3Q+XG4gICAqICAgPC9mb3JtPlxuICAgKiAgIDxocj5cbiAgICogICA8cHJlPm1vZGVsID0ge3tkYXRhLm1vZGVsIHwganNvbn19PC9wcmU+PGJyLz5cbiAgICogPC9kaXY+XG4gICAqIDwvZmlsZT5cbiAgICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgYW5ndWxhci5tb2R1bGUoJ25ndmFsdWVTZWxlY3QnLCBbXSlcbiAgICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAgICogICAgICAgbW9kZWw6IG51bGwsXG4gICAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAgICAgICAgICAgICB7dmFsdWU6ICdteVN0cmluZycsIG5hbWU6ICdzdHJpbmcnfSxcbiAgICAgICAgICAgICB7dmFsdWU6IDEsIG5hbWU6ICdpbnRlZ2VyJ30sXG4gICAgICAgICAgICAge3ZhbHVlOiB0cnVlLCBuYW1lOiAnYm9vbGVhbid9LFxuICAgICAgICAgICAgIHt2YWx1ZTogbnVsbCwgbmFtZTogJ251bGwnfSxcbiAgICAgICAgICAgICB7dmFsdWU6IHtwcm9wOiAndmFsdWUnfSwgbmFtZTogJ29iamVjdCd9LFxuICAgICAgICAgICAgIHt2YWx1ZTogWydhJ10sIG5hbWU6ICdhcnJheSd9XG4gICAqICAgICAgIF1cbiAgICogICAgICB9O1xuICAgKiAgIH1dKTtcbiAgICogPC9maWxlPlxuICAgKjwvZXhhbXBsZT5cbiAgICpcbiAgICogIyMjIFVzaW5nIGBzZWxlY3RgIHdpdGggYG5nT3B0aW9uc2AgYW5kIHNldHRpbmcgYSBkZWZhdWx0IHZhbHVlXG4gICAqIFNlZSB0aGUge0BsaW5rIG5nT3B0aW9ucyBuZ09wdGlvbnMgZG9jdW1lbnRhdGlvbn0gZm9yIG1vcmUgYG5nT3B0aW9uc2AgdXNhZ2UgZXhhbXBsZXMuXG4gICAqXG4gICAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1kZWZhdWx0LXZhbHVlc1wiIG1vZHVsZT1cImRlZmF1bHRWYWx1ZVNlbGVjdFwiPlxuICAgKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgIDxsYWJlbCBmb3I9XCJteVNlbGVjdFwiPk1ha2UgYSBjaG9pY2U6PC9sYWJlbD5cbiAgICogICAgIDxzZWxlY3QgbmFtZT1cIm15U2VsZWN0XCIgaWQ9XCJteVNlbGVjdFwiXG4gICAqICAgICAgIG5nLW9wdGlvbnM9XCJvcHRpb24ubmFtZSBmb3Igb3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9ucyB0cmFjayBieSBvcHRpb24uaWRcIlxuICAgKiAgICAgICBuZy1tb2RlbD1cImRhdGEuc2VsZWN0ZWRPcHRpb25cIj48L3NlbGVjdD5cbiAgICogICA8L2Zvcm0+XG4gICAqICAgPGhyPlxuICAgKiAgIDx0dD5vcHRpb24gPSB7e2RhdGEuc2VsZWN0ZWRPcHRpb259fTwvdHQ+PGJyLz5cbiAgICogPC9kaXY+XG4gICAqIDwvZmlsZT5cbiAgICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgYW5ndWxhci5tb2R1bGUoJ2RlZmF1bHRWYWx1ZVNlbGVjdCcsIFtdKVxuICAgKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICRzY29wZS5kYXRhID0ge1xuICAgKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gICAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICAgKiAgICAgICAgIHtpZDogJzInLCBuYW1lOiAnT3B0aW9uIEInfSxcbiAgICogICAgICAgICB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ31cbiAgICogICAgICAgXSxcbiAgICogICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxuICAgKiAgICAgICB9O1xuICAgKiAgIH1dKTtcbiAgICogPC9maWxlPlxuICAgKjwvZXhhbXBsZT5cbiAgICpcbiAgICpcbiAgICogIyMjIEJpbmRpbmcgYHNlbGVjdGAgdG8gYSBub24tc3RyaW5nIHZhbHVlIHZpYSBgbmdNb2RlbGAgcGFyc2luZyAvIGZvcm1hdHRpbmdcbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC13aXRoLW5vbi1zdHJpbmctb3B0aW9uc1wiIG1vZHVsZT1cIm5vblN0cmluZ1NlbGVjdFwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibW9kZWwuaWRcIiBjb252ZXJ0LXRvLW51bWJlcj5cbiAgICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5aZXJvPC9vcHRpb24+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T25lPC9vcHRpb24+XG4gICAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+VHdvPC9vcHRpb24+XG4gICAqICAgICA8L3NlbGVjdD5cbiAgICogICAgIHt7IG1vZGVsIH19XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdub25TdHJpbmdTZWxlY3QnLCBbXSlcbiAgICogICAgICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gICAqICAgICAgICAgJHJvb3RTY29wZS5tb2RlbCA9IHsgaWQ6IDIgfTtcbiAgICogICAgICAgfSlcbiAgICogICAgICAgLmRpcmVjdGl2ZSgnY29udmVydFRvTnVtYmVyJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICogICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgKiAgICAgICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsKSB7XG4gICAqICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApO1xuICAgKiAgICAgICAgICAgICB9KTtcbiAgICogICAgICAgICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICAgKiAgICAgICAgICAgICAgIHJldHVybiAnJyArIHZhbDtcbiAgICogICAgICAgICAgICAgfSk7XG4gICAqICAgICAgICAgICB9XG4gICAqICAgICAgICAgfTtcbiAgICogICAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgnbW9kZWwuaWQnKSkuJCgnb3B0aW9uOmNoZWNrZWQnKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1R3bycpO1xuICAgKiAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqXG4gICAqL1xuICB2YXIgc2VsZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24gc2VsZWN0RGlyZWN0aXZlKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgICAgY29udHJvbGxlcjogU2VsZWN0Q29udHJvbGxlcixcbiAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgbGluazoge1xuICAgICAgICBwcmU6IHNlbGVjdFByZUxpbmssXG4gICAgICAgIHBvc3Q6IHNlbGVjdFBvc3RMaW5rXG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNlbGVjdFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBidXQgc2V0IHRoZSByZWdpc3Rlck9wdGlvblxuICAgICAgLy8gZnVuY3Rpb24gdG8gbm9vcCwgc28gb3B0aW9ucyBkb24ndCBnZXQgYWRkZWQgaW50ZXJuYWxseVxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RDdHJsLm5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG5cbiAgICAgIC8vIFdoZW4gdGhlIHNlbGVjdGVkIGl0ZW0ocykgY2hhbmdlcyB3ZSBkZWxlZ2F0ZSBnZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2xcbiAgICAgIC8vIHRvIHRoZSBgcmVhZFZhbHVlYCBtZXRob2QsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkIGlmIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGVcbiAgICAgIC8vIHNlbGVjdGVkIHZhbHVlcyBvciBpZiB0aGUgb3B0aW9ucyBhcmUgYmVpbmcgZ2VuZXJhdGVkIGJ5IGBuZ09wdGlvbnNgXG4gICAgICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0Q3RybC5yZWFkVmFsdWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIElmIHRoZSBzZWxlY3QgYWxsb3dzIG11bHRpcGxlIHZhbHVlcyB0aGVuIHdlIG5lZWQgdG8gbW9kaWZ5IGhvdyB3ZSByZWFkIGFuZCB3cml0ZVxuICAgICAgLy8gdmFsdWVzIGZyb20gYW5kIHRvIHRoZSBjb250cm9sOyBhbHNvIHdoYXQgaXQgbWVhbnMgZm9yIHRoZSB2YWx1ZSB0byBiZSBlbXB0eSBhbmRcbiAgICAgIC8vIHdlIGhhdmUgdG8gYWRkIGFuIGV4dHJhIHdhdGNoIHNpbmNlIG5nTW9kZWwgZG9lc24ndCB3b3JrIHdlbGwgd2l0aCBhcnJheXMgLSBpdFxuICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIHJlbmRlcmluZyBpZiBvbmx5IGFuIGl0ZW0gaW4gdGhlIGFycmF5IGNoYW5nZXMuXG4gICAgICBpZiAoYXR0ci5tdWx0aXBsZSkge1xuICAgICAgICBzZWxlY3RDdHJsLm11bHRpcGxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBSZWFkIHZhbHVlIG5vdyBuZWVkcyB0byBjaGVjayBlYWNoIG9wdGlvbiB0byBzZWUgaWYgaXQgaXMgc2VsZWN0ZWRcbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTXVsdGlwbGVWYWx1ZSgpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgJiYgIW9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICB2YXIgdmFsID0gb3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICBhcnJheS5wdXNoKHZhbCBpbiBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwID8gc2VsZWN0Q3RybC5zZWxlY3RWYWx1ZU1hcFt2YWxdIDogdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gV3JpdGUgdmFsdWUgbm93IG5lZWRzIHRvIHNldCB0aGUgc2VsZWN0ZWQgcHJvcGVydHkgb2YgZWFjaCBtYXRjaGluZyBvcHRpb25cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVNdWx0aXBsZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkQmVTZWxlY3RlZCA9ICEhdmFsdWUgJiYgKGluY2x1ZGVzKHZhbHVlLCBvcHRpb24udmFsdWUpIHx8IGluY2x1ZGVzKHZhbHVlLCBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwW29wdGlvbi52YWx1ZV0pKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50bHlTZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZDtcblxuICAgICAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5LCBFZGdlIDEyLTE1K1xuICAgICAgICAgICAgLy8gSW4gSUUgYW5kIEVkZ2UgYWRkaW5nIG9wdGlvbnMgdG8gdGhlIHNlbGVjdGlvbiB2aWEgc2hpZnQrY2xpY2svVVAvRE9XTlxuICAgICAgICAgICAgLy8gd2lsbCBkZS1zZWxlY3QgYWxyZWFkeSBzZWxlY3RlZCBvcHRpb25zIGlmIFwic2VsZWN0ZWRcIiBvbiB0aG9zZSBvcHRpb25zIHdhcyBzZXRcbiAgICAgICAgICAgIC8vIG1vcmUgdGhhbiBvbmNlIChpLmUuIHdoZW4gdGhlIG9wdGlvbnMgd2VyZSBhbHJlYWR5IHNlbGVjdGVkKVxuICAgICAgICAgICAgLy8gU28gd2Ugb25seSBtb2RpZnkgdGhlIHNlbGVjdGVkIHByb3BlcnR5IGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgIC8vIE5vdGU6IHRoaXMgYmVoYXZpb3IgY2Fubm90IGJlIHJlcGxpY2F0ZWQgdmlhIHVuaXQgdGVzdHMgYmVjYXVzZSBpdCBvbmx5IHNob3dzIGluIHRoZVxuICAgICAgICAgICAgLy8gYWN0dWFsIHVzZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgaWYgKHNob3VsZEJlU2VsZWN0ZWQgIT09IGN1cnJlbnRseVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShvcHRpb24pLCBzaG91bGRCZVNlbGVjdGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWRcbiAgICAgICAgdmFyIGxhc3RWaWV3LFxuICAgICAgICAgICAgbGFzdFZpZXdSZWYgPSBOYU47XG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmIChsYXN0Vmlld1JlZiA9PT0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSAmJiAhZXF1YWxzKGxhc3RWaWV3LCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgbGFzdFZpZXcgPSBzaGFsbG93Q29weShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFZpZXdSZWYgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgYSBtdWx0aXBsZSBzZWxlY3QgdGhlbiB2YWx1ZSBpcyBub3cgYSBjb2xsZWN0aW9uXG4gICAgICAgIC8vIHNvIHRoZSBtZWFuaW5nIG9mICRpc0VtcHR5IGNoYW5nZXNcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2AuXG4gICAgICAvLyBUaGlzIG11c3QgYmUgZG9uZSBpbiB0aGUgcG9zdExpbmsgZm4gdG8gcHJldmVudCAkcmVuZGVyIHRvIGJlIGNhbGxlZCBiZWZvcmVcbiAgICAgIC8vIGFsbCBub2RlcyBoYXZlIGJlZW4gbGlua2VkIGNvcnJlY3RseS5cbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoZSBvcHRpb24gZGlyZWN0aXZlIGlzIHB1cmVseSBkZXNpZ25lZCB0byBjb21tdW5pY2F0ZSB0aGUgZXhpc3RlbmNlIChvciBsYWNrIG9mKVxuICAvLyBvZiBkeW5hbWljYWxseSBjcmVhdGVkIChhbmQgZGVzdHJveWVkKSBvcHRpb24gZWxlbWVudHMgdG8gdGhlaXIgY29udGFpbmluZyBzZWxlY3RcbiAgLy8gZGlyZWN0aXZlIHZpYSBpdHMgY29udHJvbGxlci5cbiAgdmFyIG9wdGlvbkRpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24gKCRpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbjtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKGF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBXaWxsIGJlIGhhbmRsZWQgYnkgcmVnaXN0ZXJPcHRpb25cbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIGRlZmluZWQsIGNoZWNrIGlmIGl0IGNvbnRhaW5zIGFuIGludGVycG9sYXRpb25cbiAgICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlRm4gPSAkaW50ZXJwb2xhdGUoYXR0ci52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBub3QgZGVmaW5lZCB0aGVuIHdlIGZhbGwgYmFjayB0byB0aGVcbiAgICAgICAgICAvLyB0ZXh0IGNvbnRlbnQgb2YgdGhlIG9wdGlvbiBlbGVtZW50LCB3aGljaCBtYXkgYmUgaW50ZXJwb2xhdGVkXG4gICAgICAgICAgaW50ZXJwb2xhdGVUZXh0Rm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xuICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIG92ZXIgdXNpbmcgXl4gc2luY2Ugd2UgZG9uJ3Qgd2FudCB0byBoYXZlIHRvIHNlYXJjaFxuICAgICAgICAgIC8vIGFsbCB0aGUgd2F5IHRvIHRoZSByb290IG9mIHRoZSBET00gZm9yIGV2ZXJ5IHNpbmdsZSBvcHRpb24gZWxlbWVudFxuICAgICAgICAgIHZhciBzZWxlY3RDdHJsTmFtZSA9ICckc2VsZWN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwgPSBwYXJlbnQuZGF0YShzZWxlY3RDdHJsTmFtZSkgfHwgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cFxuXG4gICAgICAgICAgaWYgKHNlbGVjdEN0cmwpIHtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ1JlcXVpcmVkXG4gICAqIEByZXN0cmljdCBBXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBuZ1JlcXVpcmVkIGFkZHMgdGhlIHJlcXVpcmVkIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICAgKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHtAbGluayBpbnB1dCBgaW5wdXRgfSBhbmQge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZVxuICAgKiBhcHBsaWVkIHRvIGN1c3RvbSBjb250cm9scy5cbiAgICpcbiAgICogVGhlIGRpcmVjdGl2ZSBzZXRzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpZiB0aGUgQW5ndWxhciBleHByZXNzaW9uIGluc2lkZVxuICAgKiBgbmdSZXF1aXJlZGAgZXZhbHVhdGVzIHRvIHRydWUuIEEgc3BlY2lhbCBkaXJlY3RpdmUgZm9yIHNldHRpbmcgYHJlcXVpcmVkYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZVxuICAgKiBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIGByZXF1aXJlZGAuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX1cbiAgICogZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogVGhlIHZhbGlkYXRvciB3aWxsIHNldCB0aGUgYHJlcXVpcmVkYCBlcnJvciBrZXkgdG8gdHJ1ZSBpZiB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaXMgc2V0IGFuZFxuICAgKiBjYWxsaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5IGBOZ01vZGVsQ29udHJvbGxlci4kaXNFbXB0eWB9IHdpdGggdGhlXG4gICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9IHJldHVybnMgYHRydWVgLiBGb3IgZXhhbXBsZSwgdGhlXG4gICAqIGAkaXNFbXB0eSgpYCBpbXBsZW1lbnRhdGlvbiBmb3IgYGlucHV0W3RleHRdYCBjaGVja3MgdGhlIGxlbmd0aCBvZiB0aGUgYCR2aWV3VmFsdWVgLiBXaGVuIGRldmVsb3BpbmdcbiAgICogY3VzdG9tIGNvbnRyb2xzLCBgJGlzRW1wdHkoKWAgY2FuIGJlIG92ZXJ3cml0dGVuIHRvIGFjY291bnQgZm9yIGEgJHZpZXdWYWx1ZSB0aGF0IGlzIG5vdCBzdHJpbmctYmFzZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZ1JlcXVpcmVkRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdSZXF1aXJlZEV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPHNjcmlwdD5cbiAgICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUmVxdWlyZWRFeGFtcGxlJywgW10pXG4gICAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgICAgICRzY29wZS5yZXF1aXJlZCA9IHRydWU7XG4gICAqICAgICAgICAgfV0pO1xuICAgKiAgICAgPC9zY3JpcHQ+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICAgKiAgICAgICAgIDxsYWJlbCBmb3I9XCJyZXF1aXJlZFwiPlRvZ2dsZSByZXF1aXJlZDogPC9sYWJlbD5cbiAgICogICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJyZXF1aXJlZFwiIGlkPVwicmVxdWlyZWRcIiAvPlxuICAgKiAgICAgICAgIDxicj5cbiAgICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IG11c3QgYmUgZmlsbGVkIGlmIGByZXF1aXJlZGAgaXMgdHJ1ZTogPC9sYWJlbD5cbiAgICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLXJlcXVpcmVkPVwicmVxdWlyZWRcIiAvPjxicj5cbiAgICogICAgICAgICA8aHI+XG4gICAqICAgICAgICAgcmVxdWlyZWQgZXJyb3Igc2V0PyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWR9fTwvY29kZT48YnI+XG4gICAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgcmVxdWlyZWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2Zvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkJykpO1xuICAgICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuICBcbiAgICAgICAgIGl0KCdzaG91bGQgc2V0IHRoZSByZXF1aXJlZCBlcnJvcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QocmVxdWlyZWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgXG4gICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgZXhwZWN0KHJlcXVpcmVkLmdldFRleHQoKSkubm90LnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyMycpO1xuICAgICAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICB2YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbiByZXF1aXJlZERpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG4gICAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgICBjdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhYXR0ci5yZXF1aXJlZCB8fCAhY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdQYXR0ZXJuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBuZ1BhdHRlcm4gYWRkcyB0aGUgcGF0dGVybiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAgICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gICAqXG4gICAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYHBhdHRlcm5gIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAgICogZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgd2hpY2ggaXMgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICAgKiBgbmdQYXR0ZXJuYCBhdHRyaWJ1dGUgdmFsdWU6XG4gICAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwIGFmdGVyIHdyYXBwaW5nIGl0XG4gICAqIGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogYWNjb3VudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgaXMgdXNlZCwgd2l0aCB0d29cbiAgICogZGlmZmVyZW5jZXM6XG4gICAqIDxvbD5cbiAgICogICA8bGk+XG4gICAqICAgICBgbmdQYXR0ZXJuYCBkb2VzIG5vdCBzZXQgdGhlIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24gaXNcbiAgICogICAgIG5vdCBhdmFpbGFibGUuXG4gICAqICAgPC9saT5cbiAgICogICA8bGk+XG4gICAqICAgICBUaGUgYG5nUGF0dGVybmAgYXR0cmlidXRlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBwYXR0ZXJuYCB2YWx1ZSBtdXN0IGJlXG4gICAqICAgICBpbnRlcnBvbGF0ZWQuXG4gICAqICAgPC9saT5cbiAgICogPC9vbD5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZ1BhdHRlcm5EaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ1BhdHRlcm5FeGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxzY3JpcHQ+XG4gICAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1BhdHRlcm5FeGFtcGxlJywgW10pXG4gICAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgICAgICRzY29wZS5yZWdleCA9ICdcXFxcZCsnO1xuICAgKiAgICAgICAgIH1dKTtcbiAgICogICAgIDwvc2NyaXB0PlxuICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAgICogICAgICAgICA8bGFiZWwgZm9yPVwicmVnZXhcIj5TZXQgYSBwYXR0ZXJuIChyZWdleCBzdHJpbmcpOiA8L2xhYmVsPlxuICAgKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicmVnZXhcIiBpZD1cInJlZ2V4XCIgLz5cbiAgICogICAgICAgICA8YnI+XG4gICAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IHBhdHRlcm46IDwvbGFiZWw+XG4gICAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1wYXR0ZXJuPVwicmVnZXhcIiAvPjxicj5cbiAgICogICAgICAgICA8aHI+XG4gICAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcbiAgXG4gICAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IHBhdHRlcm4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FhYScpO1xuICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYWEnKTtcbiAgXG4gICAgICAgICAgIGlucHV0LmNsZWFyKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24gcGF0dGVybkRpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHJlZ2V4cCxcbiAgICAgICAgICAgIHBhdHRlcm5FeHAgPSBhdHRyLm5nUGF0dGVybiB8fCBhdHRyLnBhdHRlcm47XG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ3BhdHRlcm4nLCBmdW5jdGlvbiAocmVnZXgpIHtcbiAgICAgICAgICBpZiAoaXNTdHJpbmcocmVnZXgpICYmIHJlZ2V4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlZ2V4ICYmICFyZWdleC50ZXN0KSB7XG4gICAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsICdFeHBlY3RlZCB7MH0gdG8gYmUgYSBSZWdFeHAgYnV0IHdhcyB7MX0uIEVsZW1lbnQ6IHsyfScsIHBhdHRlcm5FeHAsIHJlZ2V4LCBzdGFydGluZ1RhZyhlbG0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZWdleHAgPSByZWdleCB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3RybC4kdmFsaWRhdG9ycy5wYXR0ZXJuID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAgIC8vIEhUTUw1IHBhdHRlcm4gY29uc3RyYWludCB2YWxpZGF0ZXMgdGhlIGlucHV0IHZhbHVlLCBzbyB3ZSB2YWxpZGF0ZSB0aGUgdmlld1ZhbHVlXG4gICAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChyZWdleHApIHx8IHJlZ2V4cC50ZXN0KHZpZXdWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01heGxlbmd0aFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogbmdNYXhsZW5ndGggYWRkcyB0aGUgbWF4bGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICAgKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHRleHQtYmFzZWQge0BsaW5rIGlucHV0IGBpbnB1dGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmUgYXBwbGllZCB0byBjdXN0b20gdGV4dC1iYXNlZCBjb250cm9scy5cbiAgICpcbiAgICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWF4bGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gICAqIGlzIGxvbmdlciB0aGFuIHRoZSBpbnRlZ2VyIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAgICogYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICAgKiBkaWZmZXJlbmNlczpcbiAgICogPG9sPlxuICAgKiAgIDxsaT5cbiAgICogICAgIGBuZ01heGxlbmd0aGAgZG9lcyBub3Qgc2V0IHRoZSBgbWF4bGVuZ3RoYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50XG4gICAqICAgICB2YWxpZGF0aW9uIGlzIG5vdCBhdmFpbGFibGUuXG4gICAqICAgPC9saT5cbiAgICogICA8bGk+XG4gICAqICAgICBUaGUgYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgbXVzdCBiZSBhbiBleHByZXNzaW9uLCB3aGlsZSB0aGUgYG1heGxlbmd0aGAgdmFsdWUgbXVzdCBiZVxuICAgKiAgICAgaW50ZXJwb2xhdGVkLlxuICAgKiAgIDwvbGk+XG4gICAqIDwvb2w+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdNYXhsZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01heGxlbmd0aEV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPHNjcmlwdD5cbiAgICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWF4bGVuZ3RoRXhhbXBsZScsIFtdKVxuICAgKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICAgICAkc2NvcGUubWF4bGVuZ3RoID0gNTtcbiAgICogICAgICAgICB9XSk7XG4gICAqICAgICA8L3NjcmlwdD5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gICAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1heGxlbmd0aFwiPlNldCBhIG1heGxlbmd0aDogPC9sYWJlbD5cbiAgICogICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4bGVuZ3RoXCIgaWQ9XCJtYXhsZW5ndGhcIiAvPlxuICAgKiAgICAgICAgIDxicj5cbiAgICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWF4bGVuZ3RoOiA8L2xhYmVsPlxuICAgKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbWF4bGVuZ3RoPVwibWF4bGVuZ3RoXCIgLz48YnI+XG4gICAqICAgICAgICAgPGhyPlxuICAgKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtYXhsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiY2RlZicpO1xuICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYmNkZWYnKTtcbiAgXG4gICAgICAgICAgIGlucHV0LmNsZWFyKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGUnKTtcbiAgICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2FiY2RlJyk7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICB2YXIgbWF4bGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24gbWF4bGVuZ3RoRGlyZWN0aXZlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgICB2YXIgbWF4bGVuZ3RoID0gLTE7XG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ21heGxlbmd0aCcsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciBpbnRWYWwgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgbWF4bGVuZ3RoID0gaXNOdW1iZXJOYU4oaW50VmFsKSA/IC0xIDogaW50VmFsO1xuICAgICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbWF4bGVuZ3RoIDwgMCB8fCBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGg7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01pbmxlbmd0aFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogbmdNaW5sZW5ndGggYWRkcyB0aGUgbWlubGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICAgKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHRleHQtYmFzZWQge0BsaW5rIGlucHV0IGBpbnB1dGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmUgYXBwbGllZCB0byBjdXN0b20gdGV4dC1iYXNlZCBjb250cm9scy5cbiAgICpcbiAgICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWlubGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gICAqIGlzIHNob3J0ZXIgdGhhbiB0aGUgaW50ZWdlciBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlXG4gICAqIGBuZ01pbmxlbmd0aGAgYXR0cmlidXRlIHZhbHVlLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiAqKk5vdGU6KiogVGhpcyBkaXJlY3RpdmUgaXMgYWxzbyBhZGRlZCB3aGVuIHRoZSBwbGFpbiBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUgaXMgdXNlZCwgd2l0aCB0d29cbiAgICogZGlmZmVyZW5jZXM6XG4gICAqIDxvbD5cbiAgICogICA8bGk+XG4gICAqICAgICBgbmdNaW5sZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1pbmxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICAgKiAgICAgdmFsaWRhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlxuICAgKiAgIDwvbGk+XG4gICAqICAgPGxpPlxuICAgKiAgICAgVGhlIGBuZ01pbmxlbmd0aGAgdmFsdWUgbXVzdCBiZSBhbiBleHByZXNzaW9uLCB3aGlsZSB0aGUgYG1pbmxlbmd0aGAgdmFsdWUgbXVzdCBiZVxuICAgKiAgICAgaW50ZXJwb2xhdGVkLlxuICAgKiAgIDwvbGk+XG4gICAqIDwvb2w+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdNaW5sZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01pbmxlbmd0aEV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPHNjcmlwdD5cbiAgICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWlubGVuZ3RoRXhhbXBsZScsIFtdKVxuICAgKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICAgICAkc2NvcGUubWlubGVuZ3RoID0gMztcbiAgICogICAgICAgICB9XSk7XG4gICAqICAgICA8L3NjcmlwdD5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gICAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1pbmxlbmd0aFwiPlNldCBhIG1pbmxlbmd0aDogPC9sYWJlbD5cbiAgICogICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWlubGVuZ3RoXCIgaWQ9XCJtaW5sZW5ndGhcIiAvPlxuICAgKiAgICAgICAgIDxicj5cbiAgICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWlubGVuZ3RoOiA8L2xhYmVsPlxuICAgKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbWlubGVuZ3RoPVwibWlubGVuZ3RoXCIgLz48YnI+XG4gICAqICAgICAgICAgPGhyPlxuICAgKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG4gIFxuICAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtaW5sZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiJyk7XG4gICAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FiJyk7XG4gIFxuICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjJyk7XG4gICAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQ29udGFpbignYWJjJyk7XG4gICAgICAgICB9KTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbiBtaW5sZW5ndGhEaXJlY3RpdmUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBtaW5sZW5ndGggPSAwO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCdtaW5sZW5ndGgnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBtaW5sZW5ndGggPSB0b0ludCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSBmdW5jdGlvbiAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCB2aWV3VmFsdWUubGVuZ3RoID49IG1pbmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIGlmICh3aW5kb3cuYW5ndWxhci5ib290c3RyYXApIHtcbiAgICAvLyBBbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLlxuICAgIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgICAgY29uc29sZS5sb2coJ1dBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGZuKVxuICAvLyBidXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuICBiaW5kSlF1ZXJ5KCk7XG5cbiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpO1xuXG4gIGFuZ3VsYXIubW9kdWxlKFwibmdMb2NhbGVcIiwgW10sIFtcIiRwcm92aWRlXCIsIGZ1bmN0aW9uICgkcHJvdmlkZSkge1xuICAgIHZhciBQTFVSQUxfQ0FURUdPUlkgPSB7IFpFUk86IFwiemVyb1wiLCBPTkU6IFwib25lXCIsIFRXTzogXCJ0d29cIiwgRkVXOiBcImZld1wiLCBNQU5ZOiBcIm1hbnlcIiwgT1RIRVI6IFwib3RoZXJcIiB9O1xuICAgIGZ1bmN0aW9uIGdldERlY2ltYWxzKG4pIHtcbiAgICAgIG4gPSBuICsgJyc7XG4gICAgICB2YXIgaSA9IG4uaW5kZXhPZignLicpO1xuICAgICAgcmV0dXJuIGkgPT0gLTEgPyAwIDogbi5sZW5ndGggLSBpIC0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWRihuLCBvcHRfcHJlY2lzaW9uKSB7XG4gICAgICB2YXIgdiA9IG9wdF9wcmVjaXNpb247XG5cbiAgICAgIGlmICh1bmRlZmluZWQgPT09IHYpIHtcbiAgICAgICAgdiA9IE1hdGgubWluKGdldERlY2ltYWxzKG4pLCAzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgdik7XG4gICAgICB2YXIgZiA9IChuICogYmFzZSB8IDApICUgYmFzZTtcbiAgICAgIHJldHVybiB7IHY6IHYsIGY6IGYgfTtcbiAgICB9XG5cbiAgICAkcHJvdmlkZS52YWx1ZShcIiRsb2NhbGVcIiwge1xuICAgICAgXCJEQVRFVElNRV9GT1JNQVRTXCI6IHtcbiAgICAgICAgXCJBTVBNU1wiOiBbXCJBTVwiLCBcIlBNXCJdLFxuICAgICAgICBcIkRBWVwiOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgICAgICAgXCJFUkFOQU1FU1wiOiBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl0sXG4gICAgICAgIFwiRVJBU1wiOiBbXCJCQ1wiLCBcIkFEXCJdLFxuICAgICAgICBcIkZJUlNUREFZT0ZXRUVLXCI6IDYsXG4gICAgICAgIFwiTU9OVEhcIjogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gICAgICAgIFwiU0hPUlREQVlcIjogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICAgICAgICBcIlNIT1JUTU9OVEhcIjogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxuICAgICAgICBcIlNUQU5EQUxPTkVNT05USFwiOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgICAgICAgXCJXRUVLRU5EUkFOR0VcIjogWzUsIDZdLFxuICAgICAgICBcImZ1bGxEYXRlXCI6IFwiRUVFRSwgTU1NTSBkLCB5XCIsXG4gICAgICAgIFwibG9uZ0RhdGVcIjogXCJNTU1NIGQsIHlcIixcbiAgICAgICAgXCJtZWRpdW1cIjogXCJNTU0gZCwgeSBoOm1tOnNzIGFcIixcbiAgICAgICAgXCJtZWRpdW1EYXRlXCI6IFwiTU1NIGQsIHlcIixcbiAgICAgICAgXCJtZWRpdW1UaW1lXCI6IFwiaDptbTpzcyBhXCIsXG4gICAgICAgIFwic2hvcnRcIjogXCJNL2QveXkgaDptbSBhXCIsXG4gICAgICAgIFwic2hvcnREYXRlXCI6IFwiTS9kL3l5XCIsXG4gICAgICAgIFwic2hvcnRUaW1lXCI6IFwiaDptbSBhXCJcbiAgICAgIH0sXG4gICAgICBcIk5VTUJFUl9GT1JNQVRTXCI6IHtcbiAgICAgICAgXCJDVVJSRU5DWV9TWU1cIjogXCIkXCIsXG4gICAgICAgIFwiREVDSU1BTF9TRVBcIjogXCIuXCIsXG4gICAgICAgIFwiR1JPVVBfU0VQXCI6IFwiLFwiLFxuICAgICAgICBcIlBBVFRFUk5TXCI6IFt7XG4gICAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICAgIFwibGdTaXplXCI6IDMsXG4gICAgICAgICAgXCJtYXhGcmFjXCI6IDMsXG4gICAgICAgICAgXCJtaW5GcmFjXCI6IDAsXG4gICAgICAgICAgXCJtaW5JbnRcIjogMSxcbiAgICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cIixcbiAgICAgICAgICBcIm5lZ1N1ZlwiOiBcIlwiLFxuICAgICAgICAgIFwicG9zUHJlXCI6IFwiXCIsXG4gICAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICAgIFwibGdTaXplXCI6IDMsXG4gICAgICAgICAgXCJtYXhGcmFjXCI6IDIsXG4gICAgICAgICAgXCJtaW5GcmFjXCI6IDIsXG4gICAgICAgICAgXCJtaW5JbnRcIjogMSxcbiAgICAgICAgICBcIm5lZ1ByZVwiOiAnLVxceEE0JyxcbiAgICAgICAgICBcIm5lZ1N1ZlwiOiBcIlwiLFxuICAgICAgICAgIFwicG9zUHJlXCI6ICdcXHhBNCcsXG4gICAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIFwiaWRcIjogXCJlbi11c1wiLFxuICAgICAgXCJsb2NhbGVJRFwiOiBcImVuX1VTXCIsXG4gICAgICBcInBsdXJhbENhdFwiOiBmdW5jdGlvbiBwbHVyYWxDYXQobiwgb3B0X3ByZWNpc2lvbikge1xuICAgICAgICB2YXIgaSA9IG4gfCAwO3ZhciB2ZiA9IGdldFZGKG4sIG9wdF9wcmVjaXNpb24pO2lmIChpID09IDEgJiYgdmYudiA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFBMVVJBTF9DQVRFR09SWS5PTkU7XG4gICAgICAgIH1yZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9USEVSO1xuICAgICAgfVxuICAgIH0pO1xuICB9XSk7XG5cbiAganFMaXRlKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFySW5pdCh3aW5kb3cuZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xufSkod2luZG93KTtcblxuIXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiB3aW5kb3cuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmhlYWQpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fS5uZy1hbmltYXRlLXNoaW17dmlzaWJpbGl0eTpoaWRkZW47fS5uZy1hbmNob3J7cG9zaXRpb246YWJzb2x1dGU7fTwvc3R5bGU+Jyk7Il19
